{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">CompilerInfo</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the configuration settings of a language provider. This class cannot be inherited.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public sealed class CompilerInfo</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><span class=\"lang-csharp\">CompilerInfo</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example displays language provider configuration settings. Command-line arguments are used to specify a language, file name extension, or provider type. For the given input, the example determines the corresponding language provider and displays the configured language compiler settings.  </p>\n<pre><code class=\"lang-cpp\" name=\"CodeDom_CompilerInfo#1\">// Command-line argument examples:\n//   &lt;exe_name&gt;\n//      - Displays Visual Basic, C#, and JScript compiler settings.\n//   &lt;exe_name&gt; Language CSharp\n//      - Displays the compiler settings for C#.\n//   &lt;exe_name&gt; All\n//      - Displays settings for all configured compilers.\n//   &lt;exe_name&gt; Config Pascal\n//      - Displays settings for configured Pascal language provider,\n//        if one exists.\n//   &lt;exe_name&gt; Extension .vb\n//      - Displays settings for the compiler associated with the .vb\n//        file extension.\n#using &lt;System.dll&gt;\n#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::Globalization;\nusing namespace System::CodeDom;\nusing namespace System::CodeDom::Compiler;\nusing namespace Microsoft::CSharp;\nusing namespace Microsoft::VisualBasic;\nusing namespace System::Configuration;\nusing namespace System::Security::Permissions;\n\nnamespace CodeDomCompilerInfoSample\n{\n   [PermissionSet(SecurityAction::Demand, Name=&quot;FullTrust&quot;)]\n   public ref class CompilerInfoSample\n   {\n   public:\n      static void Main( array&lt;String^&gt;^args )\n      {\n         String^ queryCommand = &quot;&quot;;\n         String^ queryArg = &quot;&quot;;\n         int iNumArguments = args-&gt;Length;\n         \n         // Get input command-line arguments.\n         if ( iNumArguments &gt; 0 )\n         {\n            queryCommand = args[ 0 ]-&gt;ToUpper( CultureInfo::InvariantCulture );\n            if ( iNumArguments &gt; 1 )\n               queryArg = args[ 1 ];\n         }\n\n         // Determine which method to call.\n         Console::WriteLine();\n         if ( queryCommand-&gt;Equals( &quot;LANGUAGE&quot; ) )\n             DisplayCompilerInfoForLanguage( queryArg );        // Display compiler information for input language.\n         else if ( queryCommand-&gt;Equals( &quot;EXTENSION&quot; ) )\n             DisplayCompilerInfoUsingExtension( queryArg );     // Display compiler information for input file extension.\n         else if ( queryCommand-&gt;Equals( &quot;CONFIG&quot; ) )\n             DisplayCompilerInfoForConfigLanguage( queryArg );  // Display settings for the configured language provider.\n         else if ( queryCommand-&gt;Equals( &quot;ALL&quot; ) )\n             DisplayAllCompilerInfo();             // Display compiler information for all configured language providers.\n         else\n         {\n            // There was no command-line argument, or the \n            // command-line argument was not recognized.\n            // Display the C#, Visual Basic and JScript \n            // compiler information.\n            DisplayCSharpCompilerInfo();\n            DisplayVBCompilerInfo();\n            DisplayJScriptCompilerInfo();\n         }\n      }\n\n\n   private:\n      static void DisplayCSharpCompilerInfo()\n      {\n         // Get the provider for Microsoft.CSharp\n//         CodeDomProvider^ provider = CodeDomProvider.CreateProvider(&quot;CSharp&quot;);\n         CodeDomProvider^ provider = CodeDomProvider::CreateProvider(&quot;CSharp&quot;);\n\n         if ( provider )\n         {\n            // Display the C# language provider information.\n            Console::WriteLine( &quot;CSharp provider is {0}&quot;, provider-&gt;ToString() );\n            Console::WriteLine( &quot;  Provider hash code:     {0}&quot;, provider-&gt;GetHashCode().ToString() );\n            Console::WriteLine( &quot;  Default file extension: {0}&quot;, provider-&gt;FileExtension );\n         }\n\n         Console::WriteLine();\n      }\n\n      static void DisplayVBCompilerInfo()\n      {\n         // Get the provider for Microsoft.VisualBasic\n//         CodeDomProvider^ provider = CodeDomProvider.CreateProvider(&quot;VisualBasic&quot;);\n         CodeDomProvider^ provider = CodeDomProvider::CreateProvider(&quot;VisualBasic&quot;);\n         if ( provider ) // Display the Visual Basic language provider information.\n         {\n            Console::WriteLine( &quot;Visual Basic provider is {0}&quot;, provider-&gt;ToString() );\n            Console::WriteLine( &quot;  Provider hash code:     {0}&quot;, provider-&gt;GetHashCode().ToString() );\n            Console::WriteLine( &quot;  Default file extension: {0}&quot;, provider-&gt;FileExtension );\n         }\n\n         Console::WriteLine();\n      }\n\n      static void DisplayJScriptCompilerInfo()\n      {\n         // Get the provider for JScript.\n         CodeDomProvider^ provider;\n         try\n         {\n//            provider = CodeDomProvider.CreateProvider(&quot;JScript&quot;);\n            provider = CodeDomProvider::CreateProvider(&quot;JScript&quot;);\n            if ( provider )\n            {\n               // Display the JScript language provider information.\n               Console::WriteLine( &quot;JScript language provider is {0}&quot;, provider-&gt;ToString() );\n               Console::WriteLine( &quot;  Provider hash code:     {0}&quot;, provider-&gt;GetHashCode().ToString() );\n               Console::WriteLine( &quot;  Default file extension: {0}&quot;, provider-&gt;FileExtension );\n               Console::WriteLine();\n            }\n         }\n         catch ( ConfigurationException^ e ) \n         {\n            // The JScript language provider was not found.\n            Console::WriteLine( &quot;There is no configured JScript language provider.&quot; );\n         }\n\n      }\n\n      static void DisplayCompilerInfoUsingExtension( String^ fileExtension )\n      {\n         if (  !fileExtension-&gt;StartsWith(  &quot;.&quot; ) )\n            fileExtension = String::Concat( &quot;.&quot;, fileExtension );\n\n         // Get the language associated with the file extension.\n         CodeDomProvider^ provider = nullptr;\n         if ( CodeDomProvider::IsDefinedExtension( fileExtension ) )\n         {\n            String^ language = CodeDomProvider::GetLanguageFromExtension( fileExtension );\n            if ( language )\n               Console::WriteLine( &quot;The language \\&quot;{0}\\&quot; is associated with file extension \\&quot;{1}\\&quot;\\n&quot;,\n                                    language, fileExtension );\n\n            // Check for a corresponding language provider.\n            if ( language &amp;&amp; CodeDomProvider::IsDefinedLanguage( language ) )\n            {\n               provider = CodeDomProvider::CreateProvider( language );\n               if ( provider )\n               {\n                  // Display information about this language provider.\n                  Console::WriteLine( &quot;Language provider:  {0}\\n&quot;, provider-&gt;ToString() );\n                  \n                  // Get the compiler settings for this language.\n                  CompilerInfo^ langCompilerInfo = CodeDomProvider::GetCompilerInfo( language );\n                  if ( langCompilerInfo )\n                  {\n                     CompilerParameters^ langCompilerConfig = langCompilerInfo-&gt;CreateDefaultCompilerParameters();\n                     if ( langCompilerConfig )\n                     {\n                        Console::WriteLine( &quot;  Compiler options:        {0}&quot;, langCompilerConfig-&gt;CompilerOptions );\n                        Console::WriteLine( &quot;  Compiler warning level:  {0}&quot;, langCompilerConfig-&gt;WarningLevel.ToString() );\n                     }\n                  }\n               }\n            }\n         }\n\n         if ( provider == nullptr )  // Tell the user that the language provider was not found.\n            Console::WriteLine( &quot;There is no language provider associated with input file extension \\&quot;{0}\\&quot;.&quot;, fileExtension );\n\n      }\n\n      static void DisplayCompilerInfoForLanguage( String^ language )\n      {\n         CodeDomProvider^ provider = nullptr;\n         \n         // Check for a provider corresponding to the input language.  \n         if ( CodeDomProvider::IsDefinedLanguage( language ) )\n         {\n            provider = CodeDomProvider::CreateProvider( language );\n            if ( provider )\n            {\n               // Display information about this language provider.\n               Console::WriteLine( &quot;Language provider:  {0}&quot;, provider-&gt;ToString() );\n               Console::WriteLine();\n               Console::WriteLine( &quot;  Default file extension:  {0}&quot;, provider-&gt;FileExtension );\n               Console::WriteLine();\n               \n               // Get the compiler settings for this language.\n               CompilerInfo^ langCompilerInfo = CodeDomProvider::GetCompilerInfo( language );\n               if ( langCompilerInfo )\n               {\n                  CompilerParameters^ langCompilerConfig = langCompilerInfo-&gt;CreateDefaultCompilerParameters();\n                  if ( langCompilerConfig )\n                  {\n                     Console::WriteLine( &quot;  Compiler options:        {0}&quot;, langCompilerConfig-&gt;CompilerOptions );\n                     Console::WriteLine( &quot;  Compiler warning level:  {0}&quot;, langCompilerConfig-&gt;WarningLevel.ToString() );\n                  }\n               }\n            }\n         }\n\n         if ( provider == nullptr )  // Tell the user that the language provider was not found.\n            Console::WriteLine(  &quot;There is no provider configured for input language \\&quot;{0}\\&quot;.&quot;, language );\n\n      }\n\n      static void DisplayCompilerInfoForConfigLanguage( String^ configLanguage )\n      {\n         CodeDomProvider^ provider = nullptr;\n         CompilerInfo^ info = CodeDomProvider::GetCompilerInfo( configLanguage );\n         \n         // Check whether there is a provider configured for this language.\n         if ( info-&gt;IsCodeDomProviderTypeValid )\n         {\n            // Get a provider instance using the configured type information.\n            provider = dynamic_cast&lt;CodeDomProvider^&gt;(Activator::CreateInstance( info-&gt;CodeDomProviderType ));\n            if ( provider )\n            {\n               // Display information about this language provider.\n               Console::WriteLine( &quot;Language provider:  {0}&quot;, provider-&gt;ToString() );\n               Console::WriteLine();\n               Console::WriteLine( &quot;  Default file extension:  {0}&quot;, provider-&gt;FileExtension );\n               Console::WriteLine();\n               \n               // Get the compiler settings for this language.\n               CompilerParameters^ langCompilerConfig = info-&gt;CreateDefaultCompilerParameters();\n               if ( langCompilerConfig )\n               {\n                  Console::WriteLine( &quot;  Compiler options:        {0}&quot;, langCompilerConfig-&gt;CompilerOptions );\n                  Console::WriteLine( &quot;  Compiler warning level:  {0}&quot;, langCompilerConfig-&gt;WarningLevel.ToString() );\n               }\n            }\n         }\n\n         if ( provider == nullptr ) // Tell the user that the language provider was not found.\n            Console::WriteLine( &quot;There is no provider configured for input language \\&quot;{0}\\&quot;.&quot;, configLanguage );\n\n      }\n\n      static void DisplayAllCompilerInfo()\n      {\n         array&lt;CompilerInfo^&gt;^allCompilerInfo = CodeDomProvider::GetAllCompilerInfo();\n         for ( int i = 0; i &lt; allCompilerInfo-&gt;Length; i++ )\n         {\n            String^ defaultLanguage;\n            String^ defaultExtension;\n            CompilerInfo^ info = allCompilerInfo[ i ];\n            CodeDomProvider^ provider = nullptr;\n            if ( info )\n               provider = info-&gt;CreateProvider();\n\n            if ( provider )\n            {\n               // Display information about this configured provider.\n               Console::WriteLine( &quot;Language provider:  {0}&quot;, provider-&gt;ToString() );\n               Console::WriteLine();\n               Console::WriteLine( &quot;  Supported file extension(s):&quot; );\n               array&lt;String^&gt;^extensions = info-&gt;GetExtensions();\n               for ( int i = 0; i &lt; extensions-&gt;Length; i++ )\n                   Console::WriteLine( &quot;    {0}&quot;, extensions[ i ] );\n\n               defaultExtension = provider-&gt;FileExtension;\n               if (  !defaultExtension-&gt;StartsWith( &quot;.&quot; ) )\n                   defaultExtension = String::Concat( &quot;.&quot;, defaultExtension );\n\n               Console::WriteLine( &quot;  Default file extension:  {0}\\n&quot;, defaultExtension );\n               Console::WriteLine( &quot;  Supported language(s):&quot; );\n               array&lt;String^&gt;^languages = info-&gt;GetLanguages();\n               for ( int i = 0; i &lt; languages-&gt;Length; i++ )\n                   Console::WriteLine( &quot;    {0}&quot;, languages[ i ] );\n\n               defaultLanguage = CodeDomProvider::GetLanguageFromExtension( defaultExtension );\n               Console::WriteLine(  &quot;  Default language:        {0}&quot;, defaultLanguage );\n               Console::WriteLine();\n               \n               // Get the compiler settings for this provider.\n               CompilerParameters^ langCompilerConfig = info-&gt;CreateDefaultCompilerParameters();\n               if ( langCompilerConfig )\n               {\n                  Console::WriteLine( &quot;  Compiler options:        {0}&quot;, langCompilerConfig-&gt;CompilerOptions );\n                  Console::WriteLine( &quot;  Compiler warning level:  {0}&quot;, langCompilerConfig-&gt;WarningLevel.ToString() );\n               }\n            }\n\n         }\n      }\n\n   };\n\n}\n\n\n// The main entry point for the application.\n\n[STAThread]\nint main( int argc, char *argv[] )\n{\n    CodeDomCompilerInfoSample::CompilerInfoSample::Main( Environment::GetCommandLineArgs() );\n    Console::WriteLine(&quot;\\n\\nPress ENTER to return&quot;);\n    Console::ReadLine();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"CodeDom_CompilerInfo#1\">&#39; Command-line argument examples:\n&#39;   &lt;exe_name&gt;\n&#39;      - Displays Visual Basic, C#, and JScript compiler settings.\n&#39;   &lt;exe_name&gt; Language CSharp\n&#39;      - Displays the compiler settings for C#.\n&#39;   &lt;exe_name&gt; All\n&#39;      - Displays settings for all configured compilers.\n&#39;   &lt;exe_name&gt; Config Pascal\n&#39;      - Displays settings for configured Pascal language provider,\n&#39;        if one exists.\n&#39;   &lt;exe_name&gt; Extension .vb\n&#39;      - Displays settings for the compiler associated with the .vb\n&#39;        file extension.\n\nImports System\nImports System.IO\nImports System.Globalization\nImports System.CodeDom\nImports System.CodeDom.Compiler\nImports Microsoft.CSharp\nImports Microsoft.VisualBasic\nImports System.ComponentModel\n\nNamespace CodeDomCompilerInfoSample\n\n   Class CompilerInfoSample\n\n      &lt;STAThread()&gt;  _\n      Public Shared Sub Main(ByVal args() As String)\n\n        Dim queryCommand As String = &quot;&quot;\n        Dim queryArg As String = &quot;&quot;\n        Dim iNumArguments As Integer = args.Length\n        \n        &#39; Get input command-line arguments.\n        If iNumArguments &gt; 0 Then\n            queryCommand = args(0).ToUpper(CultureInfo.InvariantCulture)\n            \n            If iNumArguments &gt; 1 Then\n                queryArg = args(1)\n            End If\n        End If\n        \n        &#39; Determine which method to call.\n        Console.WriteLine()\n        Select Case queryCommand\n            Case &quot;LANGUAGE&quot;\n                &#39; Display compiler information for input language.\n                DisplayCompilerInfoForLanguage(queryArg)\n            Case &quot;EXTENSION&quot;\n                &#39; Display compiler information for input file extension.\n                DisplayCompilerInfoUsingExtension(queryArg)\n            Case &quot;CONFIG&quot;\n                &#39; Display settings for the configured language provider.\n                DisplayCompilerInfoForConfigLanguage(queryArg)\n            Case &quot;ALL&quot;\n                &#39; Display compiler information for all configured \n                &#39; language providers.\n                DisplayAllCompilerInfo()\n            Case Else\n                &#39; There was no command-line argument, or the \n                &#39; command-line argument was not recognized.\n                &#39; Display the C#, Visual Basic and JScript \n                &#39; compiler information.\n                DisplayCSharpCompilerInfo()\n                DisplayVBCompilerInfo()\n                DisplayJScriptCompilerInfo()\n        End Select\n\n      End Sub &#39;Main\n      \n      \n      Shared Sub DisplayCSharpCompilerInfo()\n         \n         &#39; Get the provider for Microsoft.CSharp\n            Dim provider = CodeDomProvider.CreateProvider(&quot;CSharp&quot;)\n         \n         &#39; Display the C# language provider information.\n         Console.WriteLine(&quot;CSharp provider is {0}&quot;, _\n            provider.ToString())\n         Console.WriteLine(&quot;  Provider hash code:     {0}&quot;, _\n            provider.GetHashCode().ToString())\n         Console.WriteLine(&quot;  Default file extension: {0}&quot;, _\n            provider.FileExtension)\n         \n         Console.WriteLine()\n      End Sub &#39;DisplayCSharpCompilerInfo\n      \n      \n      Shared Sub DisplayVBCompilerInfo()\n         &#39; Get the provider for Microsoft.VisualBasic\n            Dim provider = CodeDomProvider.CreateProvider(&quot;VisualBasic&quot;)\n         \n         &#39; Display the Visual Basic language provider information.\n         Console.WriteLine(&quot;Visual Basic provider is {0}&quot;, _\n            provider.ToString())\n         Console.WriteLine(&quot;  Provider hash code:     {0}&quot;, _\n            provider.GetHashCode().ToString())\n         Console.WriteLine(&quot;  Default file extension: {0}&quot;, _\n            provider.FileExtension)\n         \n         Console.WriteLine()\n      End Sub &#39;DisplayVBCompilerInfo\n      \n      \n      Shared Sub DisplayJScriptCompilerInfo()\n         &#39; Get the provider for JScript.\n         Dim provider As CodeDomProvider\n         \n         Try\n            provider = CodeDomProvider.CreateProvider(&quot;js&quot;)\n            \n            &#39; Display the JScript language provider information.\n            Console.WriteLine(&quot;JScript language provider is {0}&quot;, _\n                provider.ToString())\n            Console.WriteLine(&quot;  Provider hash code:     {0}&quot;, _\n                provider.GetHashCode().ToString())\n            Console.WriteLine(&quot;  Default file extension: {0}&quot;, _\n                provider.FileExtension)\n            Console.WriteLine()\n         Catch e As System.Configuration.ConfigurationException\n            &#39; The JScript language provider was not found.\n            Console.WriteLine(&quot;There is no configured JScript language provider.&quot;)\n         End Try\n\n      End Sub &#39;DisplayJScriptCompilerInfo\n      \n      Shared Sub DisplayCompilerInfoUsingExtension(fileExtension As String)\n         If Not fileExtension.StartsWith(&quot;.&quot;) Then\n            fileExtension = &quot;.&quot; + fileExtension\n         End If\n\n         &#39; Get the language associated with the file extension.\n         If CodeDomProvider.IsDefinedExtension(fileExtension) Then\n            Dim provider As CodeDomProvider\n            Dim language As String = CodeDomProvider.GetLanguageFromExtension(fileExtension)\n            \n            Console.WriteLine(&quot;The language &quot;&quot;{0}&quot;&quot; is associated with file extension &quot;&quot;{1}&quot;&quot;&quot;, _\n                language, fileExtension)\n            Console.WriteLine()\n            \n            &#39; Check for a corresponding language provider.\n            If CodeDomProvider.IsDefinedLanguage(language) Then\n               provider = CodeDomProvider.CreateProvider(language)\n               \n               &#39; Display information about this language provider.\n               Console.WriteLine(&quot;Language provider:  {0}&quot;, _\n                  provider.ToString())\n               Console.WriteLine()\n               \n               &#39; Get the compiler settings for this language.\n               Dim langCompilerInfo As CompilerInfo = CodeDomProvider.GetCompilerInfo(language)\n               Dim langCompilerConfig As CompilerParameters = langCompilerInfo.CreateDefaultCompilerParameters()\n               \n               Console.WriteLine(&quot;  Compiler options:        {0}&quot;, _\n                   langCompilerConfig.CompilerOptions)\n               Console.WriteLine(&quot;  Compiler warning level:  {0}&quot;, _\n                   langCompilerConfig.WarningLevel)\n            End If\n         Else\n            &#39; Tell the user that the language provider was not found.\n            Console.WriteLine(&quot;There is no language provider associated with input file extension &quot;&quot;{0}&quot;&quot;.&quot;, fileExtension)\n         End If\n      End Sub &#39;DisplayCompilerInfoUsingExtension\n     \n      \n      Shared Sub DisplayCompilerInfoForLanguage(language As String)\n         Dim provider As CodeDomProvider\n         \n         &#39; Check for a provider corresponding to the input language.  \n         If CodeDomProvider.IsDefinedLanguage(language) Then\n            provider = CodeDomProvider.CreateProvider(language)\n            \n            &#39; Display information about this language provider.\n            Console.WriteLine(&quot;Language provider:  {0}&quot;, _\n                provider.ToString())\n            Console.WriteLine()\n            Console.WriteLine(&quot;  Default file extension:  {0}&quot;, _\n                provider.FileExtension)\n            Console.WriteLine()\n            \n            &#39; Get the compiler settings for this language.\n            Dim langCompilerInfo As CompilerInfo = CodeDomProvider.GetCompilerInfo(language)\n            Dim langCompilerConfig As CompilerParameters = langCompilerInfo.CreateDefaultCompilerParameters()\n            \n            Console.WriteLine(&quot;  Compiler options:        {0}&quot;, _\n                langCompilerConfig.CompilerOptions)\n            Console.WriteLine(&quot;  Compiler warning level:  {0}&quot;, _\n                langCompilerConfig.WarningLevel)\n         Else\n            &#39; Tell the user that the language provider was not found.\n            Console.WriteLine(&quot;There is no provider configured for input language &quot;&quot;{0}&quot;&quot;.&quot;, _\n                language)\n         End If\n\n      End Sub &#39;DisplayCompilerInfoForLanguage\n      \n      Shared Sub DisplayCompilerInfoForConfigLanguage(configLanguage As String)\n         Dim info As CompilerInfo = CodeDomProvider.GetCompilerInfo(configLanguage)\n         \n         &#39; Check whether there is a provider configured for this language.\n         If info.IsCodeDomProviderTypeValid Then\n            &#39; Get a provider instance using the configured type information.\n            Dim provider As CodeDomProvider\n            provider = CType(Activator.CreateInstance(info.CodeDomProviderType), CodeDomProvider)\n            \n            &#39; Display information about this language provider.\n            Console.WriteLine(&quot;Language provider:  {0}&quot;, _\n                provider.ToString())\n            Console.WriteLine()\n            Console.WriteLine(&quot;  Default file extension:  {0}&quot;, _\n                provider.FileExtension)\n            Console.WriteLine()\n            \n            &#39; Get the compiler settings for this language.\n            Dim langCompilerConfig As CompilerParameters = info.CreateDefaultCompilerParameters()\n            \n            Console.WriteLine(&quot;  Compiler options:        {0}&quot;, _\n                langCompilerConfig.CompilerOptions)\n            Console.WriteLine(&quot;  Compiler warning level:  {0}&quot;, _\n                langCompilerConfig.WarningLevel)\n         Else\n            &#39; Tell the user that the language provider was not found.\n            Console.WriteLine(&quot;There is no provider configured for input language &quot;&quot;{0}&quot;&quot;.&quot;, configLanguage)\n         End If\n      End Sub &#39;DisplayCompilerInfoForConfigLanguage\n      \n      \n      Shared Sub DisplayAllCompilerInfo()\n         Dim allCompilerInfo As CompilerInfo() = CodeDomProvider.GetAllCompilerInfo()\n         Dim info As CompilerInfo\n         For Each info In  allCompilerInfo\n\n            Dim defaultLanguage As String\n            Dim defaultExtension As String\n\n            Dim provider As CodeDomProvider = info.CreateProvider()\n            \n            &#39; Display information about this configured provider.\n            Console.WriteLine(&quot;Language provider:  {0}&quot;, _\n                provider.ToString())\n            Console.WriteLine()\n            \n            Console.WriteLine(&quot;  Supported file extension(s):&quot;)\n            Dim extension As String\n            For Each extension In info.GetExtensions()\n               Console.WriteLine(&quot;    {0}&quot;, extension)\n            Next extension\n            \n            defaultExtension = provider.FileExtension\n            If Not defaultExtension.StartsWith(&quot;.&quot;) Then\n               defaultExtension = &quot;.&quot; + defaultExtension\n            End If\n \n            Console.WriteLine(&quot;  Default file extension:  {0}&quot;, _\n              defaultExtension)\n            Console.WriteLine()\n            \n            Console.WriteLine(&quot;  Supported language(s):&quot;)\n            Dim language As String\n            For Each language In  info.GetLanguages()\n               Console.WriteLine(&quot;    {0}&quot;, language)\n            Next language\n            defaultLanguage = CodeDomProvider.GetLanguageFromExtension(defaultExtension)\n            Console.WriteLine(&quot;  Default language:        {0}&quot;, _\n               defaultLanguage)\n            Console.WriteLine()\n            \n            &#39; Get the compiler settings for this provider.\n            Dim langCompilerConfig As CompilerParameters = info.CreateDefaultCompilerParameters()\n            \n            Console.WriteLine(&quot;  Compiler options:        {0}&quot;, _\n                langCompilerConfig.CompilerOptions)\n            Console.WriteLine(&quot;  Compiler warning level:  {0}&quot;, _\n                langCompilerConfig.WarningLevel)\n            Console.WriteLine()\n         Next info\n      End Sub &#39;DisplayAllCompilerInfo \n\n   End Class &#39;CompilerInfoSample\nEnd Namespace &#39;CodeDomCompilerInfoSample\n</code></pre><pre><code class=\"lang-cs\" name=\"CodeDom_CompilerInfo#1\">// Command-line argument examples:\n//   &lt;exe_name&gt;\n//      - Displays Visual Basic, C#, and JScript compiler settings.\n//   &lt;exe_name&gt; Language CSharp\n//      - Displays the compiler settings for C#.\n//   &lt;exe_name&gt; All\n//      - Displays settings for all configured compilers.\n//   &lt;exe_name&gt; Config Pascal\n//      - Displays settings for configured Pascal language provider,\n//        if one exists.\n//   &lt;exe_name&gt; Extension .vb\n//      - Displays settings for the compiler associated with the .vb\n//        file extension.\n\nusing System;\nusing System.Globalization;\nusing System.CodeDom;\nusing System.CodeDom.Compiler;\nusing Microsoft.CSharp;\nusing Microsoft.VisualBasic;\n\nnamespace CodeDomCompilerInfoSample\n{\n    class CompilerInfoSample\n    {\n        [STAThread]\n        static void Main(string[] args)\n        {\n            String queryCommand = &quot;&quot;;\n            String queryArg = &quot;&quot;;\n            int iNumArguments = args.Length;\n\n            // Get input command-line arguments.\n            if (iNumArguments &gt; 0)\n            {\n                queryCommand = args[0].ToUpper(CultureInfo.InvariantCulture);\n   \n                if (iNumArguments &gt; 1)\n                {\n                    queryArg = args[1];\n                }\n            }\n\n            // Determine which method to call.\n\n            Console.WriteLine();\n            switch(queryCommand)\n            {\n                case (&quot;LANGUAGE&quot;):\n                    // Display compiler information for input language.\n                    DisplayCompilerInfoForLanguage(queryArg);\n                    break;\n\n                case (&quot;EXTENSION&quot;):\n                    // Display compiler information for input file extension.\n                    DisplayCompilerInfoUsingExtension(queryArg);\n                    break;\n\n                case (&quot;CONFIG&quot;):\n                    // Display settings for the configured language provider.\n                    DisplayCompilerInfoForConfigLanguage(queryArg);\n                    break;\n\n                case (&quot;ALL&quot;):\n                    // Display compiler information for all configured \n                    // language providers.\n                    DisplayAllCompilerInfo();\n                    break;\n  \n                default: \n                    // There was no command-line argument, or the \n                    // command-line argument was not recognized.\n                    // Display the C#, Visual Basic and JScript \n                    // compiler information.\n   \n                    DisplayCSharpCompilerInfo();\n                    DisplayVBCompilerInfo();\n                    DisplayJScriptCompilerInfo();\n                    break;\n            }\n\n        }\n      \n        static void DisplayCSharpCompilerInfo()\n        {\n            // Get the provider for Microsoft.CSharp\n            CodeDomProvider provider = CodeDomProvider.CreateProvider(&quot;CSharp&quot;);\n\n            // Display the C# language provider information.\n            Console.WriteLine(&quot;CSharp provider is {0}&quot;, \n                provider.ToString());\n            Console.WriteLine(&quot;  Provider hash code:     {0}&quot;, \n                provider.GetHashCode().ToString());\n            Console.WriteLine(&quot;  Default file extension: {0}&quot;, \n                provider.FileExtension);\n\n            Console.WriteLine();\n        }\n\n        static void DisplayVBCompilerInfo()\n        {\n            // Get the provider for Microsoft.VisualBasic\n            CodeDomProvider provider = CodeDomProvider.CreateProvider(&quot;VisualBasic&quot;);\n\n            // Display the Visual Basic language provider information.\n            Console.WriteLine(&quot;Visual Basic provider is {0}&quot;, \n                provider.ToString());\n            Console.WriteLine(&quot;  Provider hash code:     {0}&quot;, \n                provider.GetHashCode().ToString());\n            Console.WriteLine(&quot;  Default file extension: {0}&quot;, \n                provider.FileExtension);\n\n            Console.WriteLine();\n        }\n\n        static void DisplayJScriptCompilerInfo()\n        {\n            // Get the provider for JScript.\n            CodeDomProvider provider;\n\n            try\n            {\n                provider = CodeDomProvider.CreateProvider(&quot;js&quot;);\n\n                // Display the JScript language provider information.\n                Console.WriteLine(&quot;JScript language provider is {0}&quot;, \n                    provider.ToString());\n                Console.WriteLine(&quot;  Provider hash code:     {0}&quot;, \n                    provider.GetHashCode().ToString());\n                Console.WriteLine(&quot;  Default file extension: {0}&quot;, \n                    provider.FileExtension);\n                Console.WriteLine();\n            }\n            catch (System.Configuration.ConfigurationException)\n            {\n                // The JScript language provider was not found.\n                Console.WriteLine(&quot;There is no configured JScript language provider.&quot;);\n            }\n        }\n\n        static void DisplayCompilerInfoUsingExtension(string fileExtension)\n        {\n            if (fileExtension[0] != &#39;.&#39;)\n            {\n                fileExtension = &quot;.&quot; + fileExtension;\n            }\n\n            // Get the language associated with the file extension.\n            if (CodeDomProvider.IsDefinedExtension(fileExtension))\n            {\n                CodeDomProvider provider;\n                String language = CodeDomProvider.GetLanguageFromExtension(fileExtension);\n\n                Console.WriteLine(&quot;The language \\&quot;{0}\\&quot; is associated with file extension \\&quot;{1}\\&quot;&quot;, \n                    language, fileExtension);\n                Console.WriteLine();\n            \n                // Next, check for a corresponding language provider.\n\n                if (CodeDomProvider.IsDefinedLanguage(language))\n                {\n                    provider = CodeDomProvider.CreateProvider(language);\n\n                    // Display information about this language provider.\n\n                    Console.WriteLine(&quot;Language provider:  {0}&quot;, \n                        provider.ToString());\n                    Console.WriteLine();\n\n                    // Get the compiler settings for this language.\n\n                    CompilerInfo langCompilerInfo = CodeDomProvider.GetCompilerInfo(language);\n                    CompilerParameters langCompilerConfig = langCompilerInfo.CreateDefaultCompilerParameters();\n\n                    Console.WriteLine(&quot;  Compiler options:        {0}&quot;, \n                        langCompilerConfig.CompilerOptions);\n                    Console.WriteLine(&quot;  Compiler warning level:  {0}&quot;, \n                        langCompilerConfig.WarningLevel);\n                }\n            }\n            else \n            {\n                // Tell the user that the language provider was not found.\n                Console.WriteLine(&quot;There is no language provider associated with input file extension \\&quot;{0}\\&quot;.&quot;, \n                    fileExtension);\n            }\n        }\n     \n        static void DisplayCompilerInfoForLanguage(string language)\n        {\n            CodeDomProvider provider;\n\n            // Check for a provider corresponding to the input language.  \n            if (CodeDomProvider.IsDefinedLanguage(language))\n            {\n                provider = CodeDomProvider.CreateProvider(language);\n\n                // Display information about this language provider.\n\n                Console.WriteLine(&quot;Language provider:  {0}&quot;, \n                    provider.ToString());\n                Console.WriteLine();\n                Console.WriteLine(&quot;  Default file extension:  {0}&quot;, \n                    provider.FileExtension);\n                Console.WriteLine();\n\n                // Get the compiler settings for this language.\n\n                CompilerInfo langCompilerInfo = CodeDomProvider.GetCompilerInfo(language);\n                CompilerParameters langCompilerConfig = langCompilerInfo.CreateDefaultCompilerParameters();\n            \n                Console.WriteLine(&quot;  Compiler options:        {0}&quot;, \n                    langCompilerConfig.CompilerOptions);\n                Console.WriteLine(&quot;  Compiler warning level:  {0}&quot;, \n                    langCompilerConfig.WarningLevel);\n            }\n            else\n            {\n                // Tell the user that the language provider was not found.\n                Console.WriteLine(&quot;There is no provider configured for input language \\&quot;{0}\\&quot;.&quot;, \n                    language);\n            }\n        }\n\n        static void DisplayCompilerInfoForConfigLanguage(string configLanguage)\n        {\n            CompilerInfo info = CodeDomProvider.GetCompilerInfo(configLanguage);\n\n            // Check whether there is a provider configured for this language.\n            if (info.IsCodeDomProviderTypeValid)\n            {\n                // Get a provider instance using the configured type information.\n                CodeDomProvider provider;\n                provider = (CodeDomProvider)Activator.CreateInstance(info.CodeDomProviderType);\n\n                // Display information about this language provider.\n                Console.WriteLine(&quot;Language provider:  {0}&quot;, \n                    provider.ToString());\n                Console.WriteLine();\n                Console.WriteLine(&quot;  Default file extension:  {0}&quot;, \n                    provider.FileExtension);\n                Console.WriteLine();\n\n                // Get the compiler settings for this language.\n\n                CompilerParameters langCompilerConfig = info.CreateDefaultCompilerParameters();\n            \n                Console.WriteLine(&quot;  Compiler options:        {0}&quot;, \n                    langCompilerConfig.CompilerOptions);\n                Console.WriteLine(&quot;  Compiler warning level:  {0}&quot;, \n                    langCompilerConfig.WarningLevel);\n            }\n            else\n            {\n                // Tell the user that the language provider was not found.\n                Console.WriteLine(&quot;There is no provider configured for input language \\&quot;{0}\\&quot;.&quot;, \n                    configLanguage);\n            }\n        }\n\n        static void DisplayAllCompilerInfo()\n        {\n            CompilerInfo [] allCompilerInfo = CodeDomProvider.GetAllCompilerInfo();\n            foreach (CompilerInfo info in allCompilerInfo)\n            {\n                String defaultLanguage;\n                String defaultExtension;\n\n                CodeDomProvider provider = info.CreateProvider();\n\n                // Display information about this configured provider.\n\n                Console.WriteLine(&quot;Language provider:  {0}&quot;, \n                    provider.ToString());\n                Console.WriteLine();\n         \n                Console.WriteLine(&quot;  Supported file extension(s):&quot;);\n                foreach(String extension in info.GetExtensions())\n                { \n                    Console.WriteLine(&quot;    {0}&quot;, extension);\n                }\n   \n                defaultExtension = provider.FileExtension;\n                if (defaultExtension[0] != &#39;.&#39;)\n                {\n                    defaultExtension = &quot;.&quot; + defaultExtension;\n                }\n                Console.WriteLine(&quot;  Default file extension:  {0}&quot;, \n                    defaultExtension);\n                Console.WriteLine();\n\n                Console.WriteLine(&quot;  Supported language(s):&quot;);\n                foreach(String language in info.GetLanguages())\n                { \n                    Console.WriteLine(&quot;    {0}&quot;, language);\n                }\n\n                defaultLanguage = CodeDomProvider.GetLanguageFromExtension(defaultExtension);\n                Console.WriteLine(&quot;  Default language:        {0}&quot;,\n                    defaultLanguage);\n                Console.WriteLine();\n\n                // Get the compiler settings for this provider.\n                CompilerParameters langCompilerConfig = info.CreateDefaultCompilerParameters();\n            \n                Console.WriteLine(&quot;  Compiler options:        {0}&quot;, \n                    langCompilerConfig.CompilerOptions);\n                Console.WriteLine(&quot;  Compiler warning level:  {0}&quot;, \n                    langCompilerConfig.WarningLevel);\n                Console.WriteLine();\n            }\n        }\n    }\n}\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>Use the CompilerInfo class to determine whether a <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> implementation is configured on the computer, or to examine the configuration and compiler settings for a specific language provider.  </p>\n<p> The <a href=\"../Topic/%3Csystem.codedom%3E%20Element.md\" data-linktype=\"relative-path\">&amp;lt;system.codedom&amp;gt; Element</a> in the machine configuration file contains the language provider and compiler configuration settings. Each configured language provider has a corresponding compiler configuration element. Each element defines the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> implementation type, supported language names, supported file name extensions, and compiler parameters.  </p>\n<p> The .NET Framework defines the initial compiler settings in the machine configuration file. Developers and compiler vendors can add configuration settings for a new <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> implementation.  </p>\n<p> The CompilerInfo class provides read-only access to these settings in the machine configuration file. Use the <a class=\"xref\" href=\"system.codedom.compiler.compilerinfo#System_CodeDom_Compiler_CompilerInfo_GetLanguages_\" data-linktype=\"relative-path\">GetLanguages</a>, <a class=\"xref\" href=\"system.codedom.compiler.compilerinfo#System_CodeDom_Compiler_CompilerInfo_GetExtensions_\" data-linktype=\"relative-path\">GetExtensions</a>, and <a class=\"xref\" href=\"system.codedom.compiler.compilerinfo#System_CodeDom_Compiler_CompilerInfo_CodeDomProviderType_\" data-linktype=\"relative-path\">CodeDomProviderType</a> members to examine the corresponding configuration attributes for a language provider. Use the <a class=\"xref\" href=\"system.codedom.compiler.compilerinfo#System_CodeDom_Compiler_CompilerInfo_CreateDefaultCompilerParameters_\" data-linktype=\"relative-path\">CreateDefaultCompilerParameters</a> method to obtain the compiler options and warning level attribute values for a language provider.  </p>\n<p> For more details on language provider settings in the configuration file, see <a href=\"../topic/compiler%20and%20language%20provider%20settings%20schema\" data-linktype=\"relative-path\">Compiler and Language Provider Settings Schema</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This class contains a link demand at the class level that applies to all members. A <a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a> is thrown when the immediate caller does not have full-trust permission. For details about link demands, see <a href=\"../topic/link%20demands\" data-linktype=\"relative-path\">Link Demands</a>.</p>\n</div>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_CodeDom_Compiler_CompilerInfo_CodeDomProviderType_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_CodeDom_Compiler_CompilerInfo_CodeDomProviderType\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CodeDomProviderType</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the type of the configured <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> implementation.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public Type CodeDomProviderType { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A read-only <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> instance that represents the configured language provider type.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.configurationexception\" data-linktype=\"relative-path\">ConfigurationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The language provider is not configured on this computer.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.configurationerrorsexception\" data-linktype=\"relative-path\">ConfigurationErrorsException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Cannot locate the type because it is a <code>null</code> or empty string.  </p>\n<p> -or-  </p>\n<p> Cannot locate the type because the name for the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> cannot be found in the configuration file.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The machine configuration file contains the fully qualified type name for each <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> implementation on the computer. The CodeDomProviderType property value is a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> instance that represents a configured language provider implementation.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_CodeDom_Compiler_CompilerInfo_IsCodeDomProviderTypeValid_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_CodeDom_Compiler_CompilerInfo_IsCodeDomProviderTypeValid\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsCodeDomProviderTypeValid</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value indicating whether the language provider implementation is configured on the computer.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsCodeDomProviderTypeValid { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the language provider implementation type is configured on the computer; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Use the IsCodeDomProviderTypeValid property to check the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> implementation before accessing the provider properties or methods. For example, after you get the language provider settings from the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_GetCompilerInfo_\" data-linktype=\"relative-path\">GetCompilerInfo</a> method, use the IsCodeDomProviderTypeValid property to verify the provider type implementation before calling the <a class=\"xref\" href=\"system.codedom.compiler.compilerinfo#System_CodeDom_Compiler_CompilerInfo_CreateProvider_\" data-linktype=\"relative-path\">CreateProvider</a> method or using the <a class=\"xref\" href=\"system.codedom.compiler.compilerinfo#System_CodeDom_Compiler_CompilerInfo_CodeDomProviderType_\" data-linktype=\"relative-path\">CodeDomProviderType</a> property.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_CodeDom_Compiler_CompilerInfo_CreateDefaultCompilerParameters_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_CodeDom_Compiler_CompilerInfo_CreateDefaultCompilerParameters\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CreateDefaultCompilerParameters()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the configured compiler settings for the language provider implementation.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.CodeDom.Compiler.CompilerParameters CreateDefaultCompilerParameters ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.compiler.compilerparameters\" data-linktype=\"relative-path\">CompilerParameters</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A read-only <a class=\"xref\" href=\"system.codedom.compiler.compilerparameters\" data-linktype=\"relative-path\">CompilerParameters</a> instance that contains the compiler options and settings configured for the language provider.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Use the CreateDefaultCompilerParameters method to examine the compiler settings of the <a class=\"xref\" href=\"system.codedom.compiler.compilerinfo\" data-linktype=\"relative-path\">CompilerInfo</a> instances returned by the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_GetAllCompilerInfo_\" data-linktype=\"relative-path\">GetAllCompilerInfo</a> and <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_GetCompilerInfo_\" data-linktype=\"relative-path\">GetCompilerInfo</a> methods.  </p>\n<p> The <a href=\"../Topic/%3Csystem.codedom%3E%20Element.md\" data-linktype=\"relative-path\">&amp;lt;system.codedom&amp;gt; Element</a> in the machine configuration file contains the language provider and compiler configuration settings for each <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> implementation on the computer. Each language provider configuration element can contain optional <code>compilerOptions</code> and <code>warningLevel</code> attributes. These attributes define the default values for the <a class=\"xref\" href=\"system.codedom.compiler.compilerparameters#System_CodeDom_Compiler_CompilerParameters_CompilerOptions_\" data-linktype=\"relative-path\">CompilerOptions</a> and <a class=\"xref\" href=\"system.codedom.compiler.compilerparameters#System_CodeDom_Compiler_CompilerParameters_WarningLevel_\" data-linktype=\"relative-path\">WarningLevel</a> properties.  </p>\n<p> If the language provider configuration element does not define the <code>compilerOptions</code> attribute, the <a class=\"xref\" href=\"system.codedom.compiler.compilerparameters#System_CodeDom_Compiler_CompilerParameters_CompilerOptions_\" data-linktype=\"relative-path\">CompilerOptions</a> property value is an empty string (&quot;&quot;). If the language provider configuration element does not define the <code>warningLevel</code> attribute, the <a class=\"xref\" href=\"system.codedom.compiler.compilerparameters#System_CodeDom_Compiler_CompilerParameters_WarningLevel_\" data-linktype=\"relative-path\">WarningLevel</a> property value is –1.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_CodeDom_Compiler_CompilerInfo_CreateProvider_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_CodeDom_Compiler_CompilerInfo_CreateProvider\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CreateProvider()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> instance for the current language provider settings.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.CodeDom.Compiler.CodeDomProvider CreateProvider ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A CodeDOM provider associated with the language provider configuration.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The CreateProvider method returns a <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> instance for the current language provider settings.  </p>\n<p> Use the CreateProvider method to get a <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> implementation for a <a class=\"xref\" href=\"system.codedom.compiler.compilerinfo\" data-linktype=\"relative-path\">CompilerInfo</a> instance returned by the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_GetAllCompilerInfo_\" data-linktype=\"relative-path\">GetAllCompilerInfo</a> or <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_GetCompilerInfo_\" data-linktype=\"relative-path\">GetCompilerInfo</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_CodeDom_Compiler_CompilerInfo_CreateProvider_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_CodeDom_Compiler_CompilerInfo_CreateProvider_System_Collections_Generic_IDictionary_System_String_System_String__\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CreateProvider(IDictionary&lt;String,String&gt;)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> instance for the current language provider settings and specified options.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.CodeDom.Compiler.CodeDomProvider CreateProvider (System.Collections.Generic.IDictionary&lt;string,string&gt; providerOptions);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>providerOptions</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.idictionary-2\" data-linktype=\"relative-path\">IDictionary</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>,<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>&gt;</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A collection of provider options from the configuration file.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A CodeDOM provider associated with the language provider configuration and specified options.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>providerOptions </code>is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The provider does not support options.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The CreateProvider method returns a <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> instance for the current language provider settings and the specified provider options. For information about supported provider options, see the specific CodeDOM provider documentation.  </p>\n<p> Use the CreateProvider method to get a <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> implementation for a <a class=\"xref\" href=\"system.codedom.compiler.compilerinfo\" data-linktype=\"relative-path\">CompilerInfo</a> instance returned by the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_GetAllCompilerInfo_\" data-linktype=\"relative-path\">GetAllCompilerInfo</a> or <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_GetCompilerInfo_\" data-linktype=\"relative-path\">GetCompilerInfo</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_CodeDom_Compiler_CompilerInfo_Equals_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_CodeDom_Compiler_CompilerInfo_Equals_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Equals(Object)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Determines whether the specified object represents the same language provider and compiler settings as the current <a class=\"xref\" href=\"system.codedom.compiler.compilerinfo\" data-linktype=\"relative-path\">CompilerInfo</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override bool Equals (object o);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>o</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The object to compare with the current <a class=\"xref\" href=\"system.codedom.compiler.compilerinfo\" data-linktype=\"relative-path\">CompilerInfo</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if <code>o</code> is a <a class=\"xref\" href=\"system.codedom.compiler.compilerinfo\" data-linktype=\"relative-path\">CompilerInfo</a> object and its value is the same as this instance; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method overrides the <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">System.Object.Equals(Object)</a> method.  </p>\n<p> The two instances are considered equal if the values of the following properties are equal:  </p>\n<ul>\n<li><p>The <a class=\"xref\" href=\"system.codedom.compiler.compilerinfo#System_CodeDom_Compiler_CompilerInfo_CodeDomProviderType_\" data-linktype=\"relative-path\">CodeDomProviderType</a> property.  </p>\n</li>\n<li><p>The <a class=\"xref\" href=\"system.codedom.compiler.compilerparameters#System_CodeDom_Compiler_CompilerParameters_WarningLevel_\" data-linktype=\"relative-path\">WarningLevel</a>, <a class=\"xref\" href=\"system.codedom.compiler.compilerparameters#System_CodeDom_Compiler_CompilerParameters_CompilerOptions_\" data-linktype=\"relative-path\">CompilerOptions</a>, and <a class=\"xref\" href=\"system.codedom.compiler.compilerparameters#System_CodeDom_Compiler_CompilerParameters_IncludeDebugInformation_\" data-linktype=\"relative-path\">IncludeDebugInformation</a> properties of the <a class=\"xref\" href=\"system.codedom.compiler.compilerparameters\" data-linktype=\"relative-path\">CompilerParameters</a> instance returned by the <a class=\"xref\" href=\"system.codedom.compiler.compilerinfo#System_CodeDom_Compiler_CompilerInfo_CreateDefaultCompilerParameters_\" data-linktype=\"relative-path\">CreateDefaultCompilerParameters</a> method.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_CodeDom_Compiler_CompilerInfo_GetExtensions_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_CodeDom_Compiler_CompilerInfo_GetExtensions\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetExtensions()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns the file name extensions supported by the language provider.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string[] GetExtensions ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>An array of file name extensions supported by the language provider.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a href=\"../Topic/%3Csystem.codedom%3E%20Element.md\" data-linktype=\"relative-path\">&amp;lt;system.codedom&amp;gt; Element</a> in the machine configuration file contains the language provider and compiler configuration settings for each <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> implementation on the computer. Each configured language provider supports one or more file name extensions. For example, a <a class=\"xref\" href=\"microsoft.csharp.csharpcodeprovider\" data-linktype=\"relative-path\">Microsoft.CSharp.CSharpCodeProvider</a> might support the file name extensions &quot;.cs&quot; and &quot;.c#&quot;.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_CodeDom_Compiler_CompilerInfo_GetHashCode_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_CodeDom_Compiler_CompilerInfo_GetHashCode\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetHashCode()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns the hash code for the current instance.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override int GetHashCode ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A 32-bit signed integer hash code for the current <a class=\"xref\" href=\"system.codedom.compiler.compilerinfo\" data-linktype=\"relative-path\">CompilerInfo</a> instance, suitable for use in hashing algorithms and data structures such as a hash table.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method overrides the <a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a> method.  </p>\n<p> This method generates the same hash code for two objects that are equal according to the <a class=\"xref\" href=\"system.codedom.compiler.compilerinfo#System_CodeDom_Compiler_CompilerInfo_Equals_\" data-linktype=\"relative-path\">Equals</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_CodeDom_Compiler_CompilerInfo_GetLanguages_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_CodeDom_Compiler_CompilerInfo_GetLanguages\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetLanguages()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the language names supported by the language provider.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string[] GetLanguages ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>An array of language names supported by the language provider.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a href=\"../Topic/%3Csystem.codedom%3E%20Element.md\" data-linktype=\"relative-path\">&amp;lt;system.codedom&amp;gt; Element</a> in the machine configuration file contains the language provider and compiler configuration settings for each <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> implementation on the computer. Each configured language provider supports one or more language names. For example, the <a class=\"xref\" href=\"system.codedom.compiler.compilerinfo\" data-linktype=\"relative-path\">CompilerInfo</a> object for a <a class=\"xref\" href=\"microsoft.csharp.csharpcodeprovider\" data-linktype=\"relative-path\">Microsoft.CSharp.CSharpCodeProvider</a> might return an array with the language names &quot;c#&quot;, &quot;cs&quot;, and &quot;csharp&quot;.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"uhfHeaderId\" content=\"MSDocsHeader-DotNet\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.CodeDom.Compiler.CompilerInfo.yml\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CompilerInfo\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CompilerInfo.CodeDomProviderType\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CompilerInfo.CreateDefaultCompilerParameters\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CompilerInfo.CreateProvider\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CompilerInfo.Equals\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CompilerInfo.GetExtensions\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CompilerInfo.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CompilerInfo.GetLanguages\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CompilerInfo.IsCodeDomProviderTypeValid\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-04-01 05:59 PM\">\r\n<meta name=\"document_id\" content=\"7f8b3692-d605-7783-d2ad-b1a044523da5\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the configuration settings of a language provider. This class cannot be inherited.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.codedom.compiler/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.CodeDom.Compiler.CompilerInfo\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","uhfHeaderId":"MSDocsHeader-DotNet","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.CodeDom.Compiler.CompilerInfo.yml","open_to_public_contributors":false,"api_name":["System.CodeDom.Compiler.CompilerInfo","System.CodeDom.Compiler.CompilerInfo.CodeDomProviderType","System.CodeDom.Compiler.CompilerInfo.CreateDefaultCompilerParameters","System.CodeDom.Compiler.CompilerInfo.CreateProvider","System.CodeDom.Compiler.CompilerInfo.Equals","System.CodeDom.Compiler.CompilerInfo.GetExtensions","System.CodeDom.Compiler.CompilerInfo.GetHashCode","System.CodeDom.Compiler.CompilerInfo.GetLanguages","System.CodeDom.Compiler.CompilerInfo.IsCodeDomProviderTypeValid"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.CodeDom.Compiler.CompilerInfo","System::CodeDom::Compiler::CompilerInfo","System.CodeDom.Compiler.CompilerInfo.CodeDomProviderType","System::CodeDom::Compiler::CompilerInfo::CodeDomProviderType","System.CodeDom.Compiler.CompilerInfo.CreateDefaultCompilerParameters","System::CodeDom::Compiler::CompilerInfo::CreateDefaultCompilerParameters","System.CodeDom.Compiler.CompilerInfo.CreateProvider","System::CodeDom::Compiler::CompilerInfo::CreateProvider","System.CodeDom.Compiler.CompilerInfo.Equals","System::CodeDom::Compiler::CompilerInfo::Equals","System.CodeDom.Compiler.CompilerInfo.GetExtensions","System::CodeDom::Compiler::CompilerInfo::GetExtensions","System.CodeDom.Compiler.CompilerInfo.GetHashCode","System::CodeDom::Compiler::CompilerInfo::GetHashCode","System.CodeDom.Compiler.CompilerInfo.GetLanguages","System::CodeDom::Compiler::CompilerInfo::GetLanguages","System.CodeDom.Compiler.CompilerInfo.IsCodeDomProviderTypeValid","System::CodeDom::Compiler::CompilerInfo::IsCodeDomProviderTypeValid"],"dev_langs":["csharp"],"updated_at":"2017-04-01 05:59 PM","document_id":"7f8b3692-d605-7783-d2ad-b1a044523da5","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.CodeDom.Compiler/CompilerInfo.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"CompilerInfo class | Microsoft Docs","_op_ogTitle":"CompilerInfo class","description":"Represents the configuration settings of a language provider. This class cannot be inherited.\n","toc_asset_id":"api/_splitted/System.CodeDom.Compiler/toc.json","toc_rel":"_splitted/System.CodeDom.Compiler/toc.json","source_url":"","ms.assetid":"System.CodeDom.Compiler.CompilerInfo","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.codedom.compiler.compilerinfo","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.codedom.compiler.compilerinfo","fileRelativePath":"api/System.CodeDom.Compiler.CompilerInfo.html"},"themesRelativePathToOutputRoot":"_themes/"}