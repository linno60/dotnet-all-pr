{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">IWebPartField</span>\r\n      Interface\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Defines a provider interface for connecting two server controls using a single field of data.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public interface IWebPartField</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example demonstrates how to create a static connection between two controls using the IWebPartField interface. The code example has three parts:  </p>\n<ul>\n<li><p>Source code for two custom <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> controls that can form a connection using the IWebPartField interface, with one control acting as the provider, the other acting as the consumer.  </p>\n</li>\n<li><p>A Web page that hosts the controls and declares the static connection in persistence format.  </p>\n</li>\n<li><p>A description of what happens when the example code runs.  </p>\n</li>\n</ul>\n<p> The first part of the code example is the source code for the two custom controls. First is the code for the provider, which implements the IWebPartField interface. For simplicity in the example, the provider creates a table with some data rather than connecting to a database. The <code>GetConnectionInterface</code> method serves as the provider&#39;s connection point, the callback method that returns the interface instance to the consumer. As for the consumer, it retrieves the interface instance from the provider in its method named <code>SetConnectionInterface</code>, which is marked with a <code>ConnectionConsumer</code> attribute. After retrieving the instance of the interface, the consumer, in its <code>OnPreRender</code> method, calls the implementation of the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.iwebpartfield#System_Web_UI_WebControls_WebParts_IWebPartField_GetFieldValue_\" data-linktype=\"relative-path\">GetFieldValue</a> method in the provider, to retrieve the actual data.  </p>\n<p> For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site&#39;s Bin folder or the global assembly cache. Alternatively, you can put the source code in your site&#39;s App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see <a href=\"../Topic/Walkthrough:%20Developing%20and%20Using%20a%20Custom%20Web%20Server%20Control.md\" data-linktype=\"relative-path\">Walkthrough: Developing and Using a Custom Web Server Control</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"WebParts_IWebPartField_Overview#2\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Reflection;\nusing System.Security.Permissions;\nusing System.Web;\nusing System.Web.UI;\nusing System.Web.UI.WebControls;\nusing System.Web.UI.WebControls.WebParts;\n\nnamespace Samples.AspNet.CS.Controls\n{\n  // This sample code creates a Web Parts control that acts as a provider \n  // of field data.\n  [AspNetHostingPermission(SecurityAction.Demand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  [AspNetHostingPermission(SecurityAction.InheritanceDemand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  public sealed class FieldProviderWebPart : WebPart, IWebPartField\n  {\n    private DataTable _table;\n\n    public FieldProviderWebPart() \n    {\n        _table = new DataTable();\n\n        DataColumn col = new DataColumn();\n        col.DataType = typeof(string);\n        col.ColumnName = &quot;Name&quot;;\n        _table.Columns.Add(col);\n\n        col = new DataColumn();\n        col.DataType = typeof(string);\n        col.ColumnName = &quot;Address&quot;;\n        _table.Columns.Add(col);\n\n        col = new DataColumn();\n        col.DataType = typeof(int);\n        col.ColumnName = &quot;ZIP Code&quot;;\n        _table.Columns.Add(col);\n\n        DataRow row = _table.NewRow();\n        row[&quot;Name&quot;] = &quot;John Q. Public&quot;;\n        row[&quot;Address&quot;] = &quot;123 Main Street&quot;;\n        row[&quot;ZIP Code&quot;] = 98000;\n        _table.Rows.Add(row);\n    }\n\n \t  [ConnectionProvider(&quot;FieldProvider&quot;)]\n\t  public IWebPartField GetConnectionInterface()\n    {\n        return new FieldProviderWebPart();\n    }\n\n    public PropertyDescriptor Schema \n    {\n        get \n        {\n            /* The two parameters are row and field. Zero is the first record. \n                0,2 returns the zip code field value.   */ \n            return TypeDescriptor.GetProperties(_table.DefaultView[0])[2];\n        }\n    }\n\n\t  void IWebPartField.GetFieldValue(FieldCallback callback) \n    {\n        callback(Schema.GetValue(_table.DefaultView[0]));\n    }\n\n  } // end FieldProviderWebPart\n\n  // This sample code creates a Web Parts control that acts as a consumer \n  // of an IWebPartField interface.\n  [AspNetHostingPermission(SecurityAction.Demand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  [AspNetHostingPermission(SecurityAction.InheritanceDemand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  public class FieldConsumerWebPart : WebPart\n  {\n\n    private IWebPartField _provider;\n    private object _fieldValue;\n\n    private void GetFieldValue(object fieldValue)\n    {\n      _fieldValue = fieldValue;\n    }\n\n    public bool ConnectionPointEnabled\n    {\n      get\n      {\n        object o = ViewState[&quot;ConnectionPointEnabled&quot;];\n        return (o != null) ? (bool)o : true;\n      }\n      set\n      {\n        ViewState[&quot;ConnectionPointEnabled&quot;] = value;\n      }\n    }\n\n    protected override void OnPreRender(EventArgs e)\n    {\n      if (_provider != null)\n      {\n        _provider.GetFieldValue(new FieldCallback(GetFieldValue));\n      }\n      base.OnPreRender(e);\n    }\n\n    protected override void RenderContents(HtmlTextWriter writer)\n    {\n\n      if (_provider != null)\n      {\n        PropertyDescriptor prop = _provider.Schema;\n\n        if (prop != null &amp;&amp; _fieldValue != null)\n        {\n          writer.Write(prop.DisplayName + &quot;: &quot; + _fieldValue);\n        }\n        else\n        {\n          writer.Write(&quot;No data&quot;);\n        }\n      }\n      else\n      {\n        writer.Write(&quot;Not connected&quot;);\n      }\n    }\n\n    [ConnectionConsumer(&quot;FieldConsumer&quot;, &quot;Connpoint1&quot;, \n      typeof(FieldConsumerConnectionPoint), AllowsMultipleConnections = true)]\n    public void SetConnectionInterface(IWebPartField provider)\n    {\n      _provider = provider;\n    }\n\n    public class FieldConsumerConnectionPoint : ConsumerConnectionPoint\n    {\n      public FieldConsumerConnectionPoint(MethodInfo callbackMethod, \n        Type interfaceType, Type controlType, string name, string id, \n        bool allowsMultipleConnections)\n        : base(\n        callbackMethod, interfaceType, controlType,\n        name, id, allowsMultipleConnections)\n      {\n      }\n\n      public override bool GetEnabled(Control control)\n      {\n        return ((FieldConsumerWebPart)control).ConnectionPointEnabled;\n      }\n    } // end FieldConsumerConnectionPoint\n\n  } // end FieldConsumerWebPart\n\n} // end namespace Samples.AspNet.CS.Controls\n</code></pre><pre><code class=\"lang-vb\" name=\"WebParts_IWebPartField_Overview#2\">Imports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Data\nImports System.Reflection\nImports System.Security.Permissions\nImports System.Web\nImports System.Web.UI\nImports System.Web.UI.WebControls\nImports System.Web.UI.WebControls.WebParts\n\nNamespace Samples.AspNet.VB.Controls\n\n  &#39; This sample code creates a Web Parts control that acts as a \n  &#39; provider of field data.\n  &lt;AspNetHostingPermission(SecurityAction.Demand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  &lt;AspNetHostingPermission(SecurityAction.InheritanceDemand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  Public NotInheritable Class FieldProviderWebPart\n    Inherits WebPart\n    Implements IWebPartField\n    Private _table As DataTable\n\n\n    Public Sub New()\n      _table = New DataTable()\n\n      Dim col As New DataColumn()\n      col.DataType = GetType(String)\n      col.ColumnName = &quot;Name&quot;\n      _table.Columns.Add(col)\n\n      col = New DataColumn()\n      col.DataType = GetType(String)\n      col.ColumnName = &quot;Address&quot;\n      _table.Columns.Add(col)\n\n      col = New DataColumn()\n      col.DataType = GetType(Integer)\n      col.ColumnName = &quot;ZIP Code&quot;\n      _table.Columns.Add(col)\n\n      Dim row As DataRow = _table.NewRow()\n      row(&quot;Name&quot;) = &quot;John Q. Public&quot;\n      row(&quot;Address&quot;) = &quot;123 Main Street&quot;\n      row(&quot;ZIP Code&quot;) = 98000\n      _table.Rows.Add(row)\n\n    End Sub\n\n\n    &lt;ConnectionProvider(&quot;FieldProvider&quot;)&gt; _\n    Public Function GetConnectionInterface() As IWebPartField\n      Return New FieldProviderWebPart()\n\n    End Function\n\n\n    Public ReadOnly Property Schema() As ComponentModel.PropertyDescriptor _\n      Implements IWebPartField.Schema\n      Get\n        &#39; The two parameters are row and field. Zero is the first record. \n        &#39; 0,2 returns the zip code field value.   \n        Return TypeDescriptor.GetProperties(_table.DefaultView(0))(2)\n      End Get\n    End Property\n\n\n    Sub GetFieldValue(ByVal callback As FieldCallback) _\n      Implements IWebPartField.GetFieldValue\n\n      callback(Schema.GetValue(_table.DefaultView(0)))\n\n    End Sub\n\n  End Class &#39;FieldProviderWebPart \n\n\n  &#39; This sample code creates a Web Parts control that acts as a \n  &#39; consumer of an IWebPartField interface.\n  &lt;AspNetHostingPermission(SecurityAction.Demand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  &lt;AspNetHostingPermission(SecurityAction.InheritanceDemand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  Public Class FieldConsumerWebPart\n    Inherits WebPart\n\n    Private _provider As IWebPartField\n    Private _fieldValue As Object\n\n\n    Private Sub GetFieldValue(ByVal fieldValue As Object)\n      _fieldValue = fieldValue\n\n    End Sub\n\n\n    Public Property ConnectionPointEnabled() As Boolean\n      Get\n        Dim o As Object = ViewState(&quot;ConnectionPointEnabled&quot;)\n        Return IIf(Not (o Is Nothing), CBool(o), True)\n      End Get\n      Set(ByVal value As Boolean)\n        ViewState(&quot;ConnectionPointEnabled&quot;) = value\n      End Set\n    End Property\n\n\n    Protected Overrides Sub OnPreRender(ByVal e As EventArgs)\n      If Not (_provider Is Nothing) Then\n        _provider.GetFieldValue(New FieldCallback(AddressOf GetFieldValue))\n      End If\n      MyBase.OnPreRender(e)\n\n    End Sub\n\n\n    Protected Overrides Sub RenderContents(ByVal writer As _\n      HtmlTextWriter)\n\n      If Not (_provider Is Nothing) Then\n        Dim prop As PropertyDescriptor = _provider.Schema\n\n        If Not (prop Is Nothing) AndAlso Not (_fieldValue Is Nothing) Then\n          writer.Write(prop.DisplayName &amp; &quot;: &quot; &amp; _fieldValue)\n        Else\n          writer.Write(&quot;No data&quot;)\n        End If\n      Else\n        writer.Write(&quot;Not connected&quot;)\n      End If\n\n    End Sub\n\n    &lt;ConnectionConsumer(&quot;FieldConsumer&quot;, &quot;Connpoint1&quot;, _\n      GetType(FieldConsumerConnectionPoint), AllowsMultipleConnections:=True)&gt; _\n    Public Sub SetConnectionInterface(ByVal provider As IWebPartField)\n      _provider = provider\n\n    End Sub\n\n  End Class &#39;FieldConsumerWebPart\n\n  Public Class FieldConsumerConnectionPoint\n    Inherits ConsumerConnectionPoint\n\n    Public Sub New(ByVal callbackMethod As MethodInfo, _\n      ByVal interfaceType As Type, ByVal controlType As Type, _\n      ByVal name As String, ByVal id As String, _\n      ByVal allowsMultipleConnections As Boolean)\n      MyBase.New(callbackMethod, interfaceType, controlType, _\n        name, id, allowsMultipleConnections)\n\n    End Sub\n\n\n    Public Overrides Function GetEnabled(ByVal control As Control) _\n      As Boolean\n\n      Return CType(control, FieldConsumerWebPart).ConnectionPointEnabled\n\n    End Function\n\n  End Class &#39;FieldConsumerConnectionPoint\n\nEnd Namespace  &#39; Samples.AspNet.VB.Controls\n</code></pre><p> The second part of the code example is the Web page that declares the static connection and hosts the controls. Near the top of the page is a <code>Register</code> directive that declares the namespace of the source code contained in the App_Code directory. The connection is declared using an <code>&lt;asp:webpartconnection&gt;</code> element. The custom consumer and provider controls are declared in a <code>&lt;zonetemplate&gt;</code> element within an <code>&lt;asp:webpartzone&gt;</code> element, which is required for them to be able to connect (they must reside within a zone that inherits from the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartzonebase\" data-linktype=\"relative-path\">WebPartZoneBase</a> class).  </p>\n<pre><code class=\"lang-cs\" name=\"WebParts_IWebPartField_Overview#1\">&lt;%@ page language=&quot;C#&quot; %&gt;\n&lt;%@ Register tagprefix=&quot;IField&quot; \n    Namespace=&quot;Samples.AspNet.CS.Controls&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; \n&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n\n&lt;!-- This code sample creates a page with two Web Parts controls \nand establishes a connection between the controls. --&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;IWebPartField Test Page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n        &lt;asp:webpartmanager id=&quot;WebPartManager1&quot; runat=&quot;server&quot;&gt;\n            &lt;StaticConnections&gt;\n                &lt;asp:WebPartConnection id=&quot;con1&quot; ProviderID=&quot;provider1&quot; \n                  ConsumerID=&quot;consumer1&quot; \n                  ConsumerConnectionPointID=&quot;Connpoint1&quot;&gt;\n                &lt;/asp:WebPartConnection&gt;\n            &lt;/StaticConnections&gt;\n        &lt;/asp:webpartmanager&gt;\n        &lt;asp:webpartzone id=&quot;WebPartZone1&quot; runat=&quot;server&quot;&gt;\n            &lt;zoneTemplate&gt;\n              &lt;ifield:fieldproviderwebpart runat=&quot;Server&quot; \n                ID=&quot;provider1&quot; Title=&quot;Provider&quot; /&gt;\n              &lt;ifield:fieldconsumerwebpart runat=&quot;Server&quot; \n                ID=&quot;consumer1&quot; Title=&quot;Consumer&quot;/&gt;\n            &lt;/zoneTemplate&gt;\n        &lt;/asp:webpartzone&gt;\n    \n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"WebParts_IWebPartField_Overview#1\">&lt;%@ page language=&quot;VB&quot; debug=&quot;true&quot; %&gt;\n&lt;%@ Register tagprefix=&quot;IField&quot; \n    Namespace=&quot;Samples.AspNet.VB.Controls&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; \n&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n\n&lt;!-- This code sample creates a page with two Web Parts controls \nand establishes a connection between the controls. --&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;IWebPartField Test Page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n        &lt;asp:webpartmanager id=&quot;WebPartManager1&quot; runat=&quot;server&quot;&gt;\n            &lt;StaticConnections&gt;\n                &lt;asp:WebPartConnection id=&quot;con1&quot; ProviderID=&quot;provider1&quot; \n                  ConsumerID=&quot;consumer1&quot; \n                  ConsumerConnectionPointID=&quot;Connpoint1&quot;&gt;\n                &lt;/asp:WebPartConnection&gt;\n            &lt;/StaticConnections&gt;\n        &lt;/asp:webpartmanager&gt;\n        &lt;asp:webpartzone id=&quot;WebPartZone1&quot; runat=&quot;server&quot;&gt;\n            &lt;zoneTemplate&gt;\n              &lt;ifield:fieldproviderwebpart runat=&quot;Server&quot; \n                ID=&quot;provider1&quot; Title=&quot;Provider&quot; /&gt;\n              &lt;ifield:fieldconsumerwebpart runat=&quot;Server&quot; \n                ID=&quot;consumer1&quot; Title=&quot;Consumer&quot;/&gt;\n            &lt;/zoneTemplate&gt;\n        &lt;/asp:webpartzone&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p> Load the page in a browser. The consumer control displays the data provided from the specified field, which the provider makes available through an instance of the IWebPartField interface.</p>\n\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>This interface is designed to be used with Web Parts connections. In a Web Parts connection, two server controls that reside in a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartzonebase\" data-linktype=\"relative-path\">WebPartZoneBase</a> zone establish a connection and share data, with one control acting as the consumer and the other control acting as a provider. The mechanism for sharing data in a Web Parts connection is an interface instance, which the provider serves to the consumer by means of a callback method. To establish a connection, the consumer and provider must both work with the same interface type for sharing data. If the consumer does not recognize the interface type sent by the provider, it is still possible to connect the controls by means of a transformer (a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webparttransformer\" data-linktype=\"relative-path\">WebPartTransformer</a> object) that translates the interface instance sent by the provider into a type that the consumer recognizes. For details on connections, see <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartconnection\" data-linktype=\"relative-path\">WebPartConnection</a> and <a href=\"../topic/web%20parts%20connections%20overview\" data-linktype=\"relative-path\">Web Parts Connections Overview</a>.  </p>\n<p> The IWebPartField interface is a provider interface included with the Web Parts control set as a standard interface for creating connections based on a data field. You can also create custom interfaces to use with Web Parts connections, but in many data-driven Web applications, it is useful to create connections based on a common row (for details, see the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.iwebpartrow\" data-linktype=\"relative-path\">IWebPartRow</a> interface), table (for details, see the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.iwebparttable\" data-linktype=\"relative-path\">IWebPartTable</a> interface), or field from the data source, using the IWebPartField interface. In a typical connection, a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> control acting as a provider would implement the IWebPartField interface and provide an instance of the interface to consumers in a special callback method. For example, the provider might implement an IWebPartField interface for a field in your user information table that contains a Web user&#39;s postal code data. Another <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> control acting as a consumer would define a special method to receive the interface instance, and could then extract the postal code data, and look up and display weather information based on the postal code.  </p>\n<p> The IWebPartField interface has two exposed members. The <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.iwebpartfield#System_Web_UI_WebControls_WebParts_IWebPartField_Schema_\" data-linktype=\"relative-path\">Schema</a> property returns schema information about the data field encapsulated in a <a class=\"xref\" href=\"system.componentmodel.propertydescriptor\" data-linktype=\"relative-path\">PropertyDescriptor</a> object. The <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.iwebpartfield#System_Web_UI_WebControls_WebParts_IWebPartField_GetFieldValue_\" data-linktype=\"relative-path\">GetFieldValue</a> method declares a method that an implementer (such as a provider control) uses to retrieve the interface instance&#39;s field data when the callback method is invoked.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Web_UI_WebControls_WebParts_IWebPartField_Schema_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_UI_WebControls_WebParts_IWebPartField_Schema\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Schema</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the schema information for a data field that is used to share data between two <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> controls.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.ComponentModel.PropertyDescriptor Schema { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.propertydescriptor\" data-linktype=\"relative-path\">PropertyDescriptor</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.componentmodel.propertydescriptor\" data-linktype=\"relative-path\">PropertyDescriptor</a> that describes the schema information for the data field.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This property provides property information for the data passed by the interface. Transformer and consumer controls can query this property to get information about the type, contents, and other details of the field contained in the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.iwebpartfield\" data-linktype=\"relative-path\">IWebPartField</a> interface instance sent by a provider.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Web_UI_WebControls_WebParts_IWebPartField_GetFieldValue_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_UI_WebControls_WebParts_IWebPartField_GetFieldValue_System_Web_UI_WebControls_WebParts_FieldCallback_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetFieldValue(FieldCallback)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns the value of the field that is being used by the interface as the basis of a connection between two <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> controls.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void GetFieldValue (System.Web.UI.WebControls.WebParts.FieldCallback callback);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>callback</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.fieldcallback\" data-linktype=\"relative-path\">FieldCallback</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.fieldcallback\" data-linktype=\"relative-path\">FieldCallback</a> delegate that contains the address of a method that receives the data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Use this method to retrieve the data field values passed by the interface.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc1.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.UI.WebControls.WebParts.IWebPartField.yml\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.WebParts.IWebPartField\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.WebParts.IWebPartField.GetFieldValue\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.WebParts.IWebPartField.Schema\">\r\n<meta name=\"APILocation\" content=\"System.Web.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 02:21 PM\">\r\n<meta name=\"document_id\" content=\"7f9ea2fa-8648-6176-affc-1aaa6bde3bf6\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Defines a provider interface for connecting two server controls using a single field of data.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.web.ui.webcontrols.webparts/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Web.UI.WebControls.WebParts.IWebPartField\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.UI.WebControls.WebParts.IWebPartField.yml","open_to_public_contributors":false,"api_name":["System.Web.UI.WebControls.WebParts.IWebPartField","System.Web.UI.WebControls.WebParts.IWebPartField.GetFieldValue","System.Web.UI.WebControls.WebParts.IWebPartField.Schema"],"api_location":["System.Web.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Web.UI.WebControls.WebParts.IWebPartField","System::Web::UI::WebControls::WebParts::IWebPartField","System.Web.UI.WebControls.WebParts.IWebPartField.GetFieldValue","System::Web::UI::WebControls::WebParts::IWebPartField::GetFieldValue","System.Web.UI.WebControls.WebParts.IWebPartField.Schema","System::Web::UI::WebControls::WebParts::IWebPartField::Schema"],"dev_langs":["csharp"],"updated_at":"2017-03-31 02:21 PM","document_id":"7f9ea2fa-8648-6176-affc-1aaa6bde3bf6","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Web.UI.WebControls.WebParts/IWebPartField.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IWebPartField interface | Microsoft Docs","_op_ogTitle":"IWebPartField interface","description":"Defines a provider interface for connecting two server controls using a single field of data.\n","toc_asset_id":"api/_splitted/System.Web.UI.WebControls.WebParts/toc.json","toc_rel":"_splitted/System.Web.UI.WebControls.WebParts/toc.json","source_url":"","ms.assetid":"System.Web.UI.WebControls.WebParts.IWebPartField","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.webcontrols.webparts.iwebpartfield","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.webcontrols.webparts.iwebpartfield","fileRelativePath":"api/System.Web.UI.WebControls.WebParts.IWebPartField.html"},"themesRelativePathToOutputRoot":"_themes/"}