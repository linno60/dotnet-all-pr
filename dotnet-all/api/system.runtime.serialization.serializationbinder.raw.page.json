{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">SerializationBinder</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Allows users to control class loading and mandate what class to load.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic abstract class SerializationBinder</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><span class=\"lang-csharp\">SerializationBinder</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Attributes</dt><dd>\r\n  \t\t<div class=\"cdlHolder\">\r\n  \t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<pre><code class=\"lang-vb\" name=\"SerializationBinder Example#1\">Imports System\nImports System.IO\nImports System.Runtime.Serialization\nImports System.Runtime.Serialization.Formatters.Binary\nImports System.Reflection\nImports System.Security.Permissions\n\nClass App\n   &lt;STAThread()&gt; Shared Sub Main()\n      Serialize()\n      Deserialize()\n   End Sub\n\n\n   Shared Sub Serialize()\n      &#39; To serialize the objects, you must first open a stream for writing. \n      &#39; Use a file stream here.\n      Dim fs As New FileStream(&quot;DataFile.dat&quot;, FileMode.Create)\n\n      Try\n         &#39; Construct a BinaryFormatter and use it \n         &#39; to serialize the data to the stream.\n         Dim formatter As New BinaryFormatter\n\n         &#39; Construct a Version1Type object and serialize it.\n         Dim obj As New Version1Type\n         obj.x = 123\n         formatter.Serialize(fs, obj)\n      Catch e As SerializationException\n         Console.WriteLine(&quot;Failed to serialize. Reason: &quot; &amp; e.Message)\n         Throw\n      Finally\n         fs.Close()\n      End Try\n   End Sub\n\n\n   Shared Sub Deserialize()\n      &#39; Declare the Version2Type reference.\n      Dim obj As Version2Type = Nothing\n\n      &#39; Open the file containing the data that you want to deserialize.\n      Dim fs As New FileStream(&quot;DataFile.dat&quot;, FileMode.Open)\n      Try\n         &#39; Construct a BinaryFormatter and use it \n         &#39; to deserialize the data from the stream.\n         Dim formatter As New BinaryFormatter\n\n         &#39; Construct an instance of the \n         &#39; Version1ToVersion2TypeSerialiationBinder type.\n         &#39; This Binder type can deserialize a Version1Type  \n         &#39; object to a Version2Type object.\n         formatter.Binder = New Version1ToVersion2DeserializationBinder\n\n         obj = DirectCast(formatter.Deserialize(fs), Version2Type)\n      Catch e As SerializationException\n         Console.WriteLine(&quot;Failed to deserialize. Reason: &quot; &amp; e.Message)\n         Throw\n      Finally\n         fs.Close()\n      End Try\n\n      &#39; To prove that a Version2Type object was deserialized, \n      &#39; display the object&#39;s type and fields to the console.\n      Console.WriteLine(&quot;Type of object deserialized: {0}&quot;, obj.GetType())\n      Console.WriteLine(&quot;x = {0}, name = {1}&quot;, obj.x, obj.name)\n   End Sub\nEnd Class\n\n\n&lt;Serializable()&gt; Class Version1Type\n   Public x As Int32\nEnd Class\n\n\n&lt;Serializable()&gt; Class Version2Type\n   Implements ISerializable\n   Public x As Int32\n   Public name As String\n\n   &#39; The security attribute demands that code that calls  \n   &#39; this method have permission to perform serialization.\n   &lt;SecurityPermissionAttribute(SecurityAction.Demand, SerializationFormatter:=True)&gt; _\n   Private Sub GetObjectData(ByVal info As SerializationInfo, _\n         ByVal context As StreamingContext) Implements ISerializable.GetObjectData\n      info.AddValue(&quot;x&quot;, x)\n      info.AddValue(&quot;name&quot;, name)\n   End Sub\n\n   &#39; The security attribute demands that code that calls  \n   &#39; this method have permission to perform serialization.\n   &lt;SecurityPermissionAttribute(SecurityAction.Demand, SerializationFormatter:=True)&gt; _\n   Private Sub New(ByVal info As SerializationInfo, _\n         ByVal context As StreamingContext)\n      x = info.GetInt32(&quot;x&quot;)\n      Try\n         name = info.GetString(&quot;name&quot;)\n      Catch e As SerializationException\n         &#39; The &quot;name&quot; field was not serialized because \n         &#39; Version1Type did not contain this field.\n         &#39; Set this field to a reasonable default value.\n         name = &quot;Reasonable default value&quot;\n      End Try\n   End Sub\nEnd Class\n\n\nNotInheritable Class Version1ToVersion2DeserializationBinder\n   Inherits SerializationBinder\n   Public Overrides Function BindToType(ByVal assemblyName As String, _\n         ByVal typeName As String) As Type\n\n      Dim typeToDeserialize As Type = Nothing\n\n      &#39; For each assemblyName/typeName that you want to deserialize\n      &#39; to a different type, set typeToDeserialize to the desired type.\n      Dim assemVer1 As String = [Assembly].GetExecutingAssembly().FullName\n      Dim typeVer1 As String = GetType(Version1Type).FullName\n\n      If assemblyName = assemVer1 And typeName = typeVer1 Then\n         &#39; To use a type from a different assembly version, \n         &#39; change the version number.\n         &#39; To do this, uncomment the following code.\n         &#39; assemblyName = assemblyName.Replace(&quot;1.0.0.0&quot;, &quot;2.0.0.0&quot;)\n\n         &#39; To use a different type from the same assembly, \n         &#39; change the type name.\n         typeName = typeName.Replace(&quot;Version1Type&quot;, &quot;Version2Type&quot;)\n      End If\n\n      &#39; The following code returns the type.\n      typeToDeserialize = Type.GetType(String.Format(&quot;{0}, {1}&quot;, typeName, _\n                                       assemblyName))\n\n      Return typeToDeserialize\n   End Function\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SerializationBinder Example#1\">using namespace System;\nusing namespace System::IO;\nusing namespace System::Runtime::Serialization;\nusing namespace System::Runtime::Serialization::Formatters::Binary;\nusing namespace System::Reflection;\nusing namespace System::Security::Permissions;\nref class Version1ToVersion2DeserializationBinder;\n\n[Serializable]\nref class Version1Type\n{\npublic:\n   Int32 x;\n};\n\n\n[Serializable]\nref class Version2Type: public ISerializable\n{\npublic:\n   Int32 x;\n   String^ name;\n\n   // The security attribute demands that code that calls  \n   // this method have permission to perform serialization.\n\n   [SecurityPermissionAttribute(SecurityAction::Demand,SerializationFormatter=true)]\n   virtual void GetObjectData( SerializationInfo^ info, StreamingContext context )\n   {\n      info-&gt;AddValue( &quot;x&quot;, x );\n      info-&gt;AddValue( &quot;name&quot;, name );\n   }\n\n\nprivate:\n\n   // The security attribute demands that code that calls  \n   // this method have permission to perform serialization.\n\n   [SecurityPermissionAttribute(SecurityAction::Demand,SerializationFormatter=true)]\n   Version2Type( SerializationInfo^ info, StreamingContext context )\n   {\n      x = info-&gt;GetInt32( &quot;x&quot; );\n      try\n      {\n         name = info-&gt;GetString( &quot;name&quot; );\n      }\n      catch ( SerializationException^ ) \n      {\n         // The &#39;name&#39; field was not serialized because Version1Type \n         // did not contain this field.\n         // We will set this field to a reasonable default value.\n         name =  &quot;Reasonable default value&quot;;\n      }\n   }\n};\n\nref class Version1ToVersion2DeserializationBinder sealed: public SerializationBinder\n{\npublic:\n   virtual Type^ BindToType( String^ assemblyName, String^ typeName ) override\n   {\n      Type^ typeToDeserialize = nullptr;\n\n      // For each assemblyName/typeName that you want to deserialize to\n      // a different type, set typeToDeserialize to the desired type.\n      String^ assemVer1 = Assembly::GetExecutingAssembly()-&gt;FullName;\n      String^ typeVer1 =  &quot;Version1Type&quot;;\n      if ( assemblyName-&gt;Equals( assemVer1 ) &amp;&amp; typeName-&gt;Equals( typeVer1 ) )\n      {\n         // To use a type from a different assembly version, \n         // change the version number using the following line of code.\n         // assemblyName = assemblyName.Replace(&quot;1.0.0.0&quot;, &quot;2.0.0.0&quot;);\n         // To use a different type from the same assembly, \n         // change the type name.\n         typeName =  &quot;Version2Type&quot;;\n      }\n\n      // The following line of code returns the type.\n      typeToDeserialize = Type::GetType( String::Format(  &quot;{0}, {1}&quot;, typeName, assemblyName ) );\n      return typeToDeserialize;\n   }\n};\n\nref class App\n{\npublic:\n   static void Serialize()\n   {\n      // To serialize the objects, you must first open a stream for writing. \n      // We will use a file stream here.\n      FileStream^ fs = gcnew FileStream( &quot;DataFile.dat&quot;,FileMode::Create );\n      try\n      {\n         // Construct a BinaryFormatter and use it \n         // to serialize the data to the stream.\n         BinaryFormatter^ formatter = gcnew BinaryFormatter;\n\n         // Construct a Version1Type Object and serialize it.\n         Version1Type^ obj = gcnew Version1Type;\n         obj-&gt;x = 123;\n         formatter-&gt;Serialize( fs, obj );\n      }\n      catch ( SerializationException^ e ) \n      {\n         Console::WriteLine( &quot;Failed to serialize. Reason: {0}&quot;, e-&gt;Message );\n         throw;\n      }\n      finally\n      {\n         fs-&gt;Close();\n      }\n   }\n\n   static void Deserialize()\n   {\n      // Declare the Version2Type reference.\n      Version2Type^ obj = nullptr;\n\n      // Open the file containing the data that we want to deserialize.\n      FileStream^ fs = gcnew FileStream( &quot;DataFile.dat&quot;,FileMode::Open );\n      try\n      {\n         // Construct a BinaryFormatter and use it \n         // to deserialize the data from the stream.\n         BinaryFormatter^ formatter = gcnew BinaryFormatter;\n\n         // Construct an instance of our \n         // Version1ToVersion2TypeSerialiationBinder type.\n         // This Binder type knows how to deserialize a Version1Type  \n         // Object* to a Version2Type Object.\n         formatter-&gt;Binder = gcnew Version1ToVersion2DeserializationBinder;\n         obj = dynamic_cast&lt;Version2Type^&gt;(formatter-&gt;Deserialize( fs ));\n      }\n      catch ( SerializationException^ e ) \n      {\n         Console::WriteLine( &quot;Failed to deserialize. Reason: {0}&quot;, e-&gt;Message );\n         throw;\n      }\n      finally\n      {\n         fs-&gt;Close();\n      }\n\n      // To prove that a Version2Type Object* was deserialized, \n      // display the Object&#39;s type and fields to the console.\n      Console::WriteLine( &quot;Type of Object deserialized: {0}&quot;, obj-&gt;GetType() );\n      Console::WriteLine( &quot;x = {0}, name = {1}&quot;, obj-&gt;x, obj-&gt;name );\n   }\n};\n\n[STAThread]\nint main()\n{\n   App::Serialize();\n   App::Deserialize();\n   return 0;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SerializationBinder Example#1\">using System;\nusing System.IO;\nusing System.Runtime.Serialization;\nusing System.Runtime.Serialization.Formatters.Binary;\nusing System.Reflection;\nusing System.Security.Permissions;\n\n\nclass App \n{\n    [STAThread]\n    static void Main() \n    {\n        Serialize();\n        Deserialize();\n    }\n\n    static void Serialize() \n    {\n        // To serialize the objects, you must first open a stream for writing. \n        // Use a file stream here.\n        FileStream fs = new FileStream(&quot;DataFile.dat&quot;, FileMode.Create);\n\n        try \n        {\n            // Construct a BinaryFormatter and use it \n            // to serialize the data to the stream.\n            BinaryFormatter formatter = new BinaryFormatter();\n\n            // Construct a Version1Type object and serialize it.\n            Version1Type obj = new Version1Type();\n            obj.x = 123;\n            formatter.Serialize(fs, obj);\n        }\n        catch (SerializationException e) \n        {\n            Console.WriteLine(&quot;Failed to serialize. Reason: &quot; + e.Message);\n            throw;\n        }\n        finally \n        {\n            fs.Close();\n        }\n    }\n\n   \n    static void Deserialize() \n    {\n        // Declare the Version2Type reference.\n        Version2Type obj = null;\n\n        // Open the file containing the data that you want to deserialize.\n        FileStream fs = new FileStream(&quot;DataFile.dat&quot;, FileMode.Open);\n        try \n        {\n            // Construct a BinaryFormatter and use it \n            // to deserialize the data from the stream.\n            BinaryFormatter formatter = new BinaryFormatter();\n\n            // Construct an instance of our the\n            // Version1ToVersion2TypeSerialiationBinder type.\n            // This Binder type can deserialize a Version1Type  \n            // object to a Version2Type object.\n            formatter.Binder = new Version1ToVersion2DeserializationBinder();\n\n            obj = (Version2Type) formatter.Deserialize(fs);\n        }\n        catch (SerializationException e) \n        {\n            Console.WriteLine(&quot;Failed to deserialize. Reason: &quot; + e.Message);\n            throw;\n        }\n        finally \n        {\n            fs.Close();\n        }\n\n        // To prove that a Version2Type object was deserialized, \n        // display the object&#39;s type and fields to the console.\n        Console.WriteLine(&quot;Type of object deserialized: &quot; + obj.GetType());\n        Console.WriteLine(&quot;x = {0}, name = {1}&quot;, obj.x, obj.name);\n    }\n}\n\n\n[Serializable]\nclass Version1Type \n{\n    public Int32 x;\n}\n\n\n[Serializable]\nclass Version2Type : ISerializable \n{\n    public Int32 x;\n    public String name;\n   \n    // The security attribute demands that code that calls\n    // this method have permission to perform serialization.\n    [SecurityPermissionAttribute(SecurityAction.Demand,SerializationFormatter=true)]\n    void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) \n    {\n        info.AddValue(&quot;x&quot;, x);\n        info.AddValue(&quot;name&quot;, name);\n    }\n\n    // The security attribute demands that code that calls  \n    // this method have permission to perform serialization.\n    [SecurityPermissionAttribute(SecurityAction.Demand,SerializationFormatter=true)]\n    private Version2Type(SerializationInfo info, StreamingContext context) \n    {\n        x = info.GetInt32(&quot;x&quot;);\n        try \n        {\n            name = info.GetString(&quot;name&quot;);\n        }\n        catch (SerializationException) \n        {\n            // The &quot;name&quot; field was not serialized because Version1Type \n            // did not contain this field.\n            // Set this field to a reasonable default value.\n            name = &quot;Reasonable default value&quot;;\n        }\n    }\n}\n\n\nsealed class Version1ToVersion2DeserializationBinder : SerializationBinder \n{\n    public override Type BindToType(string assemblyName, string typeName) \n    {\n        Type typeToDeserialize = null;\n\n        // For each assemblyName/typeName that you want to deserialize to\n        // a different type, set typeToDeserialize to the desired type.\n        String assemVer1 = Assembly.GetExecutingAssembly().FullName;\n        String typeVer1 = &quot;Version1Type&quot;;\n\n        if (assemblyName == assemVer1 &amp;&amp; typeName == typeVer1) \n        {\n            // To use a type from a different assembly version, \n            // change the version number.\n            // To do this, uncomment the following line of code.\n            // assemblyName = assemblyName.Replace(&quot;1.0.0.0&quot;, &quot;2.0.0.0&quot;);\n\n            // To use a different type from the same assembly, \n            // change the type name.\n            typeName = &quot;Version2Type&quot;;\n        }\n\n        // The following line of code returns the type.\n        typeToDeserialize = Type.GetType(String.Format(&quot;{0}, {1}&quot;, \n            typeName, assemblyName));\n\n        return typeToDeserialize;\n    }\n}\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>During serialization, a formatter transmits the information required to create an instance of an object of the correct type and version. This information generally includes the full type name and assembly name of the object. The assembly name includes the name, version, and strong name (see <a href=\"../topic/strong-named%20assemblies\" data-linktype=\"relative-path\">Strong-Named Assemblies</a>) hash of the assembly. By default, deserialization uses this information to create an instance of an identical object (with the exception of any assembly loading restricted by the security policy). Some users need to control which class to load, either because the class has moved between assemblies or a different version of the class is required on the server and client.  </p>\n<p> SerializationBinder can also be used for security. There might be some security exploits when you are trying to deserialize some data from an untrusted source. The binder gives you an opportunity to inspect what types are being loaded in your application domain. You can then either maintain list of denied types or a list of allowed types and restrict which types are being loaded and instantiated. In addition you should be mindful of what information is being put out on the wire, you may want to secure (use transport or message security) when sending type names or other data on the wire.  </p>\n<div class=\"WARNING\"><h5>Warning</h5><p> Only use SerializationBinder if you are completely sure of what information is being serialized. Malicious types can cause unexpected behavior.  </p>\n</div>\n<p> This is an abstract base class. All binders extend this class.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Runtime_Serialization_SerializationBinder__ctor_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Runtime_Serialization_SerializationBinder__ctor\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">SerializationBinder()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.runtime.serialization.serializationbinder\" data-linktype=\"relative-path\">SerializationBinder</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected SerializationBinder ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Runtime_Serialization_SerializationBinder_BindToName_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Runtime_Serialization_SerializationBinder_BindToName_System_Type_System_String__System_String__\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">BindToName(Type, String, String)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>When overridden in a derived class, controls the binding of a serialized object to a type.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual void BindToName (Type serializedType, out string assemblyName, out string typeName);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>serializedType</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The type of the object the formatter creates a new instance of.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>assemblyName</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Specifies the <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> name of the serialized object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>typeName</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Specifies the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> name of the serialized object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Runtime_Serialization_SerializationBinder_BindToType_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Runtime_Serialization_SerializationBinder_BindToType_System_String_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">BindToType(String, String)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>When overridden in a derived class, controls the binding of a serialized object to a type.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public abstract Type BindToType (string assemblyName, string typeName);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>assemblyName</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Specifies the <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> name of the serialized object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>typeName</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Specifies the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> name of the serialized object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The type of the object the formatter creates a new instance of.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Runtime.Serialization.SerializationBinder.yml\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Serialization.SerializationBinder\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Serialization.SerializationBinder..ctor\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Serialization.SerializationBinder.BindToName\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Serialization.SerializationBinder.BindToType\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 05:47 AM\">\r\n<meta name=\"document_id\" content=\"44bb6db7-7041-0014-2f9e-8e1c223fc5c0\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Allows users to control class loading and mandate what class to load.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.runtime.serialization/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Runtime.Serialization.SerializationBinder\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Runtime.Serialization.SerializationBinder.yml","open_to_public_contributors":false,"api_name":["System.Runtime.Serialization.SerializationBinder","System.Runtime.Serialization.SerializationBinder..ctor","System.Runtime.Serialization.SerializationBinder.BindToName","System.Runtime.Serialization.SerializationBinder.BindToType"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Runtime.Serialization.SerializationBinder","System::Runtime::Serialization::SerializationBinder","System.Runtime.Serialization.SerializationBinder.#ctor","System::Runtime::Serialization::SerializationBinder::#ctor","System.Runtime.Serialization.SerializationBinder.BindToName","System::Runtime::Serialization::SerializationBinder::BindToName","System.Runtime.Serialization.SerializationBinder.BindToType","System::Runtime::Serialization::SerializationBinder::BindToType"],"dev_langs":["csharp"],"updated_at":"2017-03-31 05:47 AM","document_id":"44bb6db7-7041-0014-2f9e-8e1c223fc5c0","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Runtime.Serialization/SerializationBinder.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"SerializationBinder class | Microsoft Docs","_op_ogTitle":"SerializationBinder class","description":"Allows users to control class loading and mandate what class to load.\n","toc_asset_id":"api/_splitted/System.Runtime.Serialization/toc.json","toc_rel":"_splitted/System.Runtime.Serialization/toc.json","source_url":"","ms.assetid":"System.Runtime.Serialization.SerializationBinder","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.serializationbinder","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.serializationbinder","fileRelativePath":"api/System.Runtime.Serialization.SerializationBinder.html"},"themesRelativePathToOutputRoot":"_themes/"}