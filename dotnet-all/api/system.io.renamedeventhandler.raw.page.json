{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">RenamedEventHandler</span>\r\n      Delegate\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the method that will handle the <a class=\"xref\" href=\"system.io.filesystemwatcher#System_IO_FileSystemWatcher_Renamed\" data-linktype=\"relative-path\">Renamed</a> event of a <a class=\"xref\" href=\"system.io.filesystemwatcher\" data-linktype=\"relative-path\">FileSystemWatcher</a> class.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public delegate void RenamedEventHandler(object sender, RenamedEventArgs e);</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></span></div><span class=\"lang-csharp\">RenamedEventHandler</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example shows how to create a FileSystemWatcher to monitor file changes (creates, deletes, renames, changes) occurring on a disk drive. The example also shows how to properly receive error notifications.  </p>\n<pre><code class=\"lang-cs\" name=\"FileSystemWatcher#1\">using System;\nusing System.IO;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        //  Create a FileSystemWatcher to monitor all files on drive C.\n        FileSystemWatcher fsw = new FileSystemWatcher(&quot;C:\\\\&quot;);\n\n        //  Watch for changes in LastAccess and LastWrite times, and\n        //  the renaming of files or directories. \n        fsw.NotifyFilter = NotifyFilters.LastAccess | NotifyFilters.LastWrite\n            | NotifyFilters.FileName |NotifyFilters.DirectoryName;\n\n        //  Register a handler that gets called when a \n        //  file is created, changed, or deleted.\n        fsw.Changed += new FileSystemEventHandler(OnChanged);\n\n        fsw.Created += new FileSystemEventHandler(OnChanged);\n\n        fsw.Deleted += new FileSystemEventHandler(OnChanged);\n\n        //  Register a handler that gets called when a file is renamed.\n        fsw.Renamed += new RenamedEventHandler(OnRenamed);\n\n        //  Register a handler that gets called if the \n        //  FileSystemWatcher needs to report an error.\n        fsw.Error += new ErrorEventHandler(OnError);\n\n        //  Begin watching.\n        fsw.EnableRaisingEvents = true;\n\n        Console.WriteLine(&quot;Press \\&#39;Enter\\&#39; to quit the sample.&quot;);\n        Console.ReadLine();\n\n\n    }\n\n    //  This method is called when a file is created, changed, or deleted.\n    private static void OnChanged(object source, FileSystemEventArgs e)\n    {\n        //  Show that a file has been created, changed, or deleted.\n        WatcherChangeTypes wct = e.ChangeType;\n        Console.WriteLine(&quot;File {0} {1}&quot;, e.FullPath, wct.ToString());\n    }\n\n    //  This method is called when a file is renamed.\n    private static void OnRenamed(object source, RenamedEventArgs e)\n    {\n        //  Show that a file has been renamed.\n        WatcherChangeTypes wct = e.ChangeType;\n        Console.WriteLine(&quot;File {0} {2} to {1}&quot;, e.OldFullPath, e.FullPath, wct.ToString());\n    }\n\n    //  This method is called when the FileSystemWatcher detects an error.\n    private static void OnError(object source, ErrorEventArgs e)\n    {\n        //  Show that an error has been detected.\n        Console.WriteLine(&quot;The FileSystemWatcher has detected an error&quot;);\n        //  Give more information if the error is due to an internal buffer overflow.\n        if (e.GetException().GetType() == typeof(InternalBufferOverflowException))\n        {\n            //  This can happen if Windows is reporting many file system events quickly \n            //  and internal buffer of the  FileSystemWatcher is not large enough to handle this\n            //  rate of events. The InternalBufferOverflowException error informs the application\n            //  that some of the file system events are being lost.\n            Console.WriteLine((&quot;The file system watcher experienced an internal buffer overflow: &quot; + e.GetException().Message));\n        }\n    }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"FileSystemWatcher#1\">Imports System.IO\n\nModule Module1\n    Sub Main()\n        &#39; Create a FileSystemWatcher to monitor all files on drive C.\n        Dim fsw As New FileSystemWatcher(&quot;C:\\&quot;)\n\n        &#39; Watch for changes in LastAccess and LastWrite times, and\n        &#39; the renaming of files or directories. \n        fsw.NotifyFilter = (NotifyFilters.LastAccess Or NotifyFilters.LastWrite _ \n            Or NotifyFilters.FileName Or NotifyFilters.DirectoryName)\n\n        &#39; Register a handler that gets called when a \n        &#39; file is created, changed, or deleted.\n        AddHandler fsw.Changed, New FileSystemEventHandler(AddressOf OnChanged)\n\n        &#39; The commented line of code below is a shorthand of the above line.\n        &#39; AddHandler fsw.Changed, AddressOf OnChanged\n\n        &#39; NOTE: The shorthand version is used in the remainder of this code.\n        &#39; FileSystemEventHandler\n        AddHandler fsw.Created, AddressOf OnChanged \n        &#39; FileSystemEventHandler\n        AddHandler fsw.Deleted, AddressOf OnChanged\n\n        &#39; Register a handler that gets called when a file is renamed.\n        &#39; RenamedEventHandler\n        AddHandler fsw.Renamed, AddressOf OnRenamed\n\n        &#39; Register a handler that gets called if the \n        &#39; FileSystemWatcher needs to report an error.\n        &#39; ErrorEventHandler\n        AddHandler fsw.Error, AddressOf OnError\n\n        &#39; Begin watching.\n        fsw.EnableRaisingEvents = True\n\n        &#39; Wait for the user to quit the program.\n        Console.WriteLine(&quot;Press &#39;Enter&#39; to quit the sample.&quot;)\n        Console.ReadLine()\n    End Sub\n\n    &#39; This method is called when a file is created, changed, or deleted.\n    Private Sub OnChanged(ByVal source As Object, ByVal e As FileSystemEventArgs)\n\n        &#39; Show that a file has been created, changed, or deleted.\n        Dim wct As WatcherChangeTypes = e.ChangeType\n        Console.WriteLine(&quot;File {0} {1}&quot;, e.FullPath, wct.ToString())\n    End Sub\n\n    &#39; This method is called when a file is renamed.\n    Private Sub OnRenamed(ByVal source As Object, ByVal e As RenamedEventArgs)\n\n        &#39; Show that a file has been renamed.\n        Dim wct As WatcherChangeTypes = e.ChangeType\n        Console.WriteLine(&quot;File {0} {2} to {1}&quot;, e.OldFullPath, e.FullPath, wct.ToString())\n    End Sub\n\n    &#39; This method is called when the FileSystemWatcher detects an error.\n    Private Sub OnError(ByVal source As Object, ByVal e As ErrorEventArgs)\n\n        &#39; Show that an error has been detected.\n        Console.WriteLine(&quot;The FileSystemWatcher has detected an error&quot;)\n\n        &#39; Give more information if the error is due to an internal buffer overflow.\n        If TypeOf e.GetException Is InternalBufferOverflowException Then\n            &#39; This can happen if Windows is reporting many file system events quickly \n            &#39; and internal buffer of the  FileSystemWatcher is not large enough to handle this\n            &#39; rate of events. The InternalBufferOverflowException error informs the application\n            &#39; that some of the file system events are being lost.\n            Console.WriteLine( _\n                &quot;The file system watcher experienced an internal buffer overflow: &quot; _\n                + e.GetException.Message)\n        End If\n    End Sub\nEnd Module\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>When you create a RenamedEventHandler delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event handler delegates, see <a href=\"../topic/handling%20and%20raising%20events\" data-linktype=\"relative-path\">Events</a>.</p>\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc1.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.IO.RenamedEventHandler.yml\">\r\n<meta name=\"APIName\" content=\"System.IO.RenamedEventHandler\">\r\n<meta name=\"APIName\" content=\"System.IO.RenamedEventHandler..ctor\">\r\n<meta name=\"APIName\" content=\"System.IO.RenamedEventHandler.Invoke\">\r\n<meta name=\"APIName\" content=\"System.IO.RenamedEventHandler.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.IO.RenamedEventHandler.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 02:21 PM\">\r\n<meta name=\"document_id\" content=\"7c044980-8a54-f4b8-abc3-4de2e8676cdb\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the method that will handle the  event of a  class.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.io/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.IO.RenamedEventHandler\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.IO.RenamedEventHandler.yml","open_to_public_contributors":false,"api_name":["System.IO.RenamedEventHandler","System.IO.RenamedEventHandler..ctor","System.IO.RenamedEventHandler.Invoke","System.IO.RenamedEventHandler.BeginInvoke","System.IO.RenamedEventHandler.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.IO.RenamedEventHandler","System::IO::RenamedEventHandler"],"dev_langs":["csharp"],"updated_at":"2017-03-31 02:21 PM","document_id":"7c044980-8a54-f4b8-abc3-4de2e8676cdb","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.IO/RenamedEventHandler.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"RenamedEventHandler delegate | Microsoft Docs","_op_ogTitle":"RenamedEventHandler delegate","description":"Represents the method that will handle the  event of a  class.\n","toc_asset_id":"api/_splitted/System.IO/toc.json","toc_rel":"_splitted/System.IO/toc.json","source_url":"","ms.assetid":"System.IO.RenamedEventHandler","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.io.renamedeventhandler","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.io.renamedeventhandler","fileRelativePath":"api/System.IO.RenamedEventHandler.html"},"themesRelativePathToOutputRoot":"_themes/"}