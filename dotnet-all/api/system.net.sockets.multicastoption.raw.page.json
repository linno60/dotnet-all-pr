{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">MulticastOption</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Contains <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a> values used to join and drop multicast groups.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public class MulticastOption</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><span class=\"lang-csharp\">MulticastOption</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following examples join the default IP interface to an IP multicast group. They assume the IP multicast group address in the range 224.0.0.0 to 239.255.255.255.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Net.Sockets.MulticastOptionListener#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Net;\nusing namespace System::Net::Sockets;\nusing namespace System::Text;\n\n// This program shows how to use the MultiCastOption type. In particular,\n// it shows how to use the MultiCastOption(IPAddress, IPAddress) constructor,\n// You need to use this constructor, in the case of multihomed host (i.e.,\n// a host with more than one network card). With the first parameter you\n// specify the multicast group address, with the second you specify the\n// local address of one of the network cards you want to use for the data\n// exchange.\n// You must run this program in conjunction with the sender program as\n// follows:\n// Open a console window and run the listener from the command line.\n// In another console window run the sender. In both cases you must specify\n// the local IPAddress to use. To obtain this address run the ipconfig from\n// the command line.\n//\npublic ref class TestMulticastOption\n{\nprivate:\n   static IPAddress^ mcastAddress;\n   static int mcastPort;\n   static Socket^ mcastSocket;\n   static MulticastOption^ mcastOption;\n\n   static void MulticastOptionProperties()\n   {\n      Console::WriteLine( &quot;Current multicast group is: {0}&quot;, mcastOption-&gt;Group );\n      Console::WriteLine( &quot;Current multicast local address is: {0}&quot;, mcastOption-&gt;LocalAddress );\n   }\n\n\n   static void StartMulticast()\n   {\n      try\n      {\n         mcastSocket = gcnew Socket( AddressFamily::InterNetwork,SocketType::Dgram,ProtocolType::Udp );\n         Console::Write( &quot;Enter the local IP Address: &quot; );\n         IPAddress^ localIPAddr = IPAddress::Parse( Console::ReadLine() );\n         \n         //IPAddress localIP = IPAddress::Any;\n         EndPoint^ localEP = dynamic_cast&lt;EndPoint^&gt;(gcnew IPEndPoint( localIPAddr,mcastPort ));\n         mcastSocket-&gt;Bind( localEP );\n         \n         // Define a MuticastOption object specifying the multicast group\n         // address and the local IPAddress.\n         // The multicast group address is the same one used by the server.\n         mcastOption = gcnew MulticastOption( mcastAddress,localIPAddr );\n         mcastSocket-&gt;SetSocketOption( SocketOptionLevel::IP, SocketOptionName::AddMembership, mcastOption );\n         \n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( e );\n      }\n\n   }\n\n   static void ReceiveBrodcastMessages()\n   {\n      bool done = false;\n      array&lt;Byte&gt;^bytes = gcnew array&lt;Byte&gt;(100);\n      IPEndPoint^ groupEP = gcnew IPEndPoint( mcastAddress,mcastPort );\n      EndPoint^ remoteEP = dynamic_cast&lt;EndPoint^&gt;(gcnew IPEndPoint( IPAddress::Any,0 ));\n      try\n      {\n         while (  !done )\n         {\n            Console::WriteLine( &quot;Waiting for Multicast packets.......&quot; );\n            Console::WriteLine( &quot;Enter ^C to terminate.&quot; );\n            mcastSocket-&gt;ReceiveFrom( bytes, remoteEP );\n            Console::WriteLine( &quot;Received broadcast from {0} :\\n {1}\\n&quot;, groupEP, Encoding::ASCII-&gt;GetString( bytes, 0, bytes-&gt;Length ) );\n         }\n         mcastSocket-&gt;Close();\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( e );\n      }\n\n   }\n\n\npublic:\n   static void Main()\n   {\n      \n      // Initialize multicast address group and multicast port.\n      // Both address and port are selected from the allowed sets as\n      // defined in the related RFC documents. These are the same values\n      // used by the sender.\n      mcastAddress = IPAddress::Parse( &quot;224.168.100.2&quot; );\n      mcastPort = 11000;\n      \n      // Start a multicast group.\n      StartMulticast();\n      \n      // Display multicast option properties.\n      MulticastOptionProperties();\n      \n      // Receive brodcast messages.\n      ReceiveBrodcastMessages();\n   }\n\n};\n\nint main()\n{\n   TestMulticastOption::Main();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Net.Sockets.MulticastOptionListener#1\">&#39; This is the listener example that shows how to use the MulticastOption class. \n&#39; In particular, it shows how to use the MulticastOption(IPAddress, IPAddress) \n&#39; constructor, which you need to use if you have a host with more than one \n&#39; network card.\n&#39; The first parameter specifies the multicast group address, and the second \n&#39; specifies the local address of the network card you want to use for the data\n&#39; exchange.\n&#39; You must run this program in conjunction with the sender program as \n&#39; follows:\n&#39; Open a console window and run the listener from the command line. \n&#39; In another console window run the sender. In both cases you must specify \n&#39; the local IPAddress to use. To obtain this address run the ipconfig comand \n&#39; from the command line. \n\n\nImports System\nImports System.Net\nImports System.Net.Sockets\nImports System.Text\nImports Microsoft.VisualBasic\n\n\nNamespace Mssc.TransportProtocols.Utilities\n\n  Module M_TestMulticastOption\n\n    Public Class TestMulticastOption\n\n      Private Shared mcastAddress As IPAddress\n      Private Shared mcastPort As Integer\n      Private Shared mcastSocket As Socket\n      Private Shared mcastOption As MulticastOption\n\n\n      Private Shared Sub MulticastOptionProperties()\n        Console.WriteLine((&quot;Current multicast group is: &quot; + mcastOption.Group.ToString()))\n        Console.WriteLine((&quot;Current multicast local address is: &quot; + mcastOption.LocalAddress.ToString()))\n      End Sub &#39;MulticastOptionProperties\n\n\n      Private Shared Sub StartMulticast()\n\n        Try\n          mcastSocket = New Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp)\n\n          Console.Write(&quot;Enter the local IP address: &quot;)\n\n          Dim localIPAddr As IPAddress = IPAddress.Parse(Console.ReadLine())\n\n          &#39;IPAddress localIP = IPAddress.Any;\n          Dim localEP As EndPoint = CType(New IPEndPoint(localIPAddr, mcastPort), EndPoint)\n\n          mcastSocket.Bind(localEP)\n\n          &#39; Define a MulticastOption object specifying the multicast group \n          &#39; address and the local IPAddress.\n          &#39; The multicast group address is the same as the address used by the server.\n          mcastOption = New MulticastOption(mcastAddress, localIPAddr)\n\n          mcastSocket.SetSocketOption(SocketOptionLevel.IP, SocketOptionName.AddMembership, mcastOption)\n\n        Catch e As Exception\n          Console.WriteLine(e.ToString())\n        End Try\n      End Sub &#39;StartMulticast\n\n\n      Private Shared Sub ReceiveBroadcastMessages()\n        Dim done As Boolean = False\n        Dim bytes() As Byte = New [Byte](99) {}\n        Dim groupEP As New IPEndPoint(mcastAddress, mcastPort)\n        Dim remoteEP As EndPoint = CType(New IPEndPoint(IPAddress.Any, 0), EndPoint)\n\n\n        Try\n          While Not done\n            Console.WriteLine(&quot;Waiting for multicast packets.......&quot;)\n            Console.WriteLine(&quot;Enter ^C to terminate.&quot;)\n\n            mcastSocket.ReceiveFrom(bytes, remoteEP)\n\n            Console.WriteLine(&quot;Received broadcast from {0} :&quot; + ControlChars.Lf + &quot; {1}&quot; + ControlChars.Lf, groupEP.ToString(), Encoding.ASCII.GetString(bytes, 0, bytes.Length))\n          End While\n\n\n\n          mcastSocket.Close()\n\n        Catch e As Exception\n          Console.WriteLine(e.ToString())\n        End Try\n      End Sub &#39;ReceiveBrodcastMessages\n\n\n      Public Shared Sub Main(ByVal args() As String)\n        &#39; Initialize the multicast address group and multicast port.\n        &#39; Both address and port are selected from the allowed sets as\n        &#39; defined in the related RFC documents. These are the same\n        &#39; as the values used by the sender.\n        mcastAddress = IPAddress.Parse(&quot;224.168.100.2&quot;)\n        mcastPort = 11000\n\n        &#39; Start a multicast group.\n        StartMulticast()\n\n        &#39; Display MulticastOption properties.\n        MulticastOptionProperties()\n\n        &#39; Receive broadcast messages.\n        ReceiveBroadcastMessages()\n      End Sub &#39;Main\n    End Class &#39;TestMulticastOption\n\n  End Module\n\nEnd Namespace\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Net.Sockets.MulticastOptionListener#1\">\nusing System;\nusing System.Net;\nusing System.Net.Sockets;\nusing System.Text;\n\n\n// This is the listener example that shows how to use the MulticastOption class. \n// In particular, it shows how to use the MulticastOption(IPAddress, IPAddress) \n// constructor, which you need to use if you have a host with more than one \n// network card.\n// The first parameter specifies the multicast group address, and the second \n// specifies the local address of the network card you want to use for the data\n// exchange.\n// You must run this program in conjunction with the sender program as \n// follows:\n// Open a console window and run the listener from the command line. \n// In another console window run the sender. In both cases you must specify \n// the local IPAddress to use. To obtain this address run the ipconfig comand \n// from the command line. \n//  \nnamespace Mssc.TransportProtocols.Utilities\n{\n\n  public class TestMulticastOption \n  {\n\n    private static IPAddress mcastAddress;\n    private static int mcastPort;\n    private static Socket mcastSocket;\n    private static MulticastOption mcastOption;\n\n\n    private static void MulticastOptionProperties()\n    {\n      Console.WriteLine(&quot;Current multicast group is: &quot; + mcastOption.Group);\n      Console.WriteLine(&quot;Current multicast local address is: &quot; + mcastOption.LocalAddress);\n    }\n\n\n    private static void StartMulticast() \n    {\n\t\n      try \n      {\n        mcastSocket = new Socket(AddressFamily.InterNetwork,\n                                 SocketType.Dgram, \n                                 ProtocolType.Udp);\n\t\t\n        Console.Write(&quot;Enter the local IP address: &quot;);\n\n        IPAddress localIPAddr = IPAddress.Parse(Console.ReadLine());\n      \n        //IPAddress localIP = IPAddress.Any;\n        EndPoint localEP = (EndPoint)new IPEndPoint(localIPAddr, mcastPort);\n\n        mcastSocket.Bind(localEP);\n\n \n        // Define a MulticastOption object specifying the multicast group \n        // address and the local IPAddress.\n        // The multicast group address is the same as the address used by the server.\n        mcastOption = new MulticastOption(mcastAddress, localIPAddr);\n\n        mcastSocket.SetSocketOption(SocketOptionLevel.IP, \n                                    SocketOptionName.AddMembership, \n                                    mcastOption);\n    \n      } \n\n      catch (Exception e) \n      {\n        Console.WriteLine(e.ToString());\n      }\n    }\n\n    private static void ReceiveBroadcastMessages() \n    {\n      bool done = false;\n      byte[] bytes = new Byte[100];\n      IPEndPoint groupEP = new IPEndPoint(mcastAddress, mcastPort);\n      EndPoint remoteEP = (EndPoint) new IPEndPoint(IPAddress.Any,0);\n\t\t\n     \n      try \n      {      \n        while (!done) \n        {\n          Console.WriteLine(&quot;Waiting for multicast packets.......&quot;);\n          Console.WriteLine(&quot;Enter ^C to terminate.&quot;);\n\n          mcastSocket.ReceiveFrom(bytes, ref remoteEP);\n\n          Console.WriteLine(&quot;Received broadcast from {0} :\\n {1}\\n&quot;,\n            groupEP.ToString(),\n            Encoding.ASCII.GetString(bytes,0,bytes.Length));\n          \n          \n        }\n\n        mcastSocket.Close();\n      } \n\n      catch (Exception e) \n      {\n        Console.WriteLine(e.ToString());\n      }\n    }\n\n    public static void Main(String[] args) \n    {\n      // Initialize the multicast address group and multicast port.\n      // Both address and port are selected from the allowed sets as\n      // defined in the related RFC documents. These are the same \n      // as the values used by the sender.\n      mcastAddress = IPAddress.Parse(&quot;224.168.100.2&quot;);\n      mcastPort = 11000;\n    \n      // Start a multicast group.\n      StartMulticast();\n      \n      // Display MulticastOption properties.\n      MulticastOptionProperties();\n      \n      // Receive broadcast messages.\n      ReceiveBroadcastMessages();\n    }\n  }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Net.Sockets.MulticastOptionSender#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Net::Sockets;\nusing namespace System::Net;\nusing namespace System::Text;\n\n// This is an auxiliary program to be used in conjunction with a listener\n// program.\n// You must run this program as follows:\n// Open a console window and run the listener from the command line.\n// In another console window run the sender. In both cases you must specify\n// the local IPAddress to use. To obtain this address run the ipconfig\n// from the command line.\n//\nref class TestMulticastOption\n{\nprivate:\n   static IPAddress^ mcastAddress;\n   static int mcastPort;\n   static Socket^ mcastSocket;\n   static void JoinMulticast()\n   {\n      try\n      {\n         \n         // Create multicast socket.\n         mcastSocket = gcnew Socket( AddressFamily::InterNetwork,SocketType::Dgram,ProtocolType::Udp );\n         \n         // Get the local IP address used by the listener and the sender to\n         // exchange data in a multicast fashion.\n         Console::Write( &quot;\\nEnter local IPAddress for sending multicast packets: &quot; );\n         IPAddress^ localIPAddr = IPAddress::Parse( Console::ReadLine() );\n         \n         // Create an IPEndPoint Object*.\n         IPEndPoint^ IPlocal = gcnew IPEndPoint( localIPAddr,0 );\n         \n         // Bind this end point to the multicast socket.\n         mcastSocket-&gt;Bind( IPlocal );\n         \n         // Define a MuticastOption Object* specifying the multicast group\n         // address and the local IPAddress.\n         // The multicast group address is the same one used by the listener.\n         MulticastOption^ mcastOption;\n         mcastOption = gcnew MulticastOption( mcastAddress,localIPAddr );\n         mcastSocket-&gt;SetSocketOption( SocketOptionLevel::IP, SocketOptionName::AddMembership, mcastOption );\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;\\n {0}&quot;, e );\n      }\n\n   }\n\n   static void BrodcastMessage( String^ message )\n   {\n      IPEndPoint^ endPoint;\n      try\n      {\n         \n         //Send multicast packets to the listener.\n         endPoint = gcnew IPEndPoint( mcastAddress,mcastPort );\n         mcastSocket-&gt;SendTo( ASCIIEncoding::ASCII-&gt;GetBytes( message ), endPoint );\n         Console::WriteLine( &quot;Multicast data sent.....&quot; );\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;\\n {0}&quot;, e );\n      }\n\n      mcastSocket-&gt;Close();\n   }\n\n\npublic:\n   static void main()\n   {\n      \n      // Initialize multicast address group and multicast port.\n      // Both address and port are selected from the allowed sets as\n      // defined in the related RFC documents. These are the same values\n      // used by the sender.\n      mcastAddress = IPAddress::Parse( &quot;224.168.100.2&quot; );\n      mcastPort = 11000;\n      \n      // Join the listener multicast group.\n      JoinMulticast();\n      \n      // Broadcast message to the listener.\n      BrodcastMessage( &quot;Hello multicast listener.&quot; );\n   }\n\n};\n\nint main()\n{\n   TestMulticastOption::main();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Net.Sockets.MulticastOptionSender#1\">&#39; This sender example must be used in conjunction with the listener program.\n&#39; You must run this program as follows:\n&#39; Open a console window and run the listener from the command line. \n&#39; In another console window run the sender. In both cases you must specify \n&#39; the local IPAddress to use. To obtain this address, run the ipconfig command\n&#39; from the command line. \n&#39;  \nImports System\nImports System.Net.Sockets\nImports System.Net\nImports System.Text\nImports Microsoft.VisualBasic\n\nNamespace Mssc.TransportProtocols.Utilities\n\n  Module M_TestMulticastOption\n\n    Class TestMulticastOption\n\n      Private Shared mcastAddress As IPAddress\n      Private Shared mcastPort As Integer\n      Private Shared mcastSocket As Socket\n\n\n      Shared Sub JoinMulticastGroup()\n        Try\n          &#39; Create a multicast socket.\n          mcastSocket = New Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp)\n\n          &#39; Get the local IP address used by the listener and the sender to\n          &#39; exchange multicast messages. \n          Console.Write(ControlChars.Lf + &quot;Enter local IPAddress for sending multicast packets: &quot;)\n          Dim localIPAddr As IPAddress = IPAddress.Parse(Console.ReadLine())\n\n          &#39; Create an IPEndPoint object. \n          Dim IPlocal As New IPEndPoint(localIPAddr, 0)\n\n          &#39; Bind this endpoint to the multicast socket.\n          mcastSocket.Bind(IPlocal)\n\n          &#39; Define a MulticastOption object specifying the multicast group \n          &#39; address and the local IP address.\n          &#39; The multicast group address is the same as the address used by the listener.\n          Dim mcastOption As MulticastOption\n          mcastOption = New MulticastOption(mcastAddress, localIPAddr)\n\n          mcastSocket.SetSocketOption(SocketOptionLevel.IP, SocketOptionName.AddMembership, mcastOption)\n\n        Catch e As Exception\n          Console.WriteLine((ControlChars.Lf + e.ToString()))\n        End Try\n      End Sub &#39;JoinMulticast\n\n\n      Shared Sub BroadcastMessage(ByVal message As String)\n        Dim endPoint As IPEndPoint\n\n        Try\n          &#39;Send multicast packets to the listener.\n          endPoint = New IPEndPoint(mcastAddress, mcastPort)\n          mcastSocket.SendTo(ASCIIEncoding.ASCII.GetBytes(message), endPoint)\n          Console.WriteLine(&quot;Multicast data sent.....&quot;)\n        Catch e As Exception\n          Console.WriteLine((ControlChars.Lf + e.ToString()))\n        End Try\n\n        mcastSocket.Close()\n      End Sub &#39;BrodcastMessage\n\n\n      Public Shared Sub Main(ByVal args() As String)\n        &#39; Initialize the multicast address group and multicast port.\n        &#39; Both address and port are selected from the allowed sets as\n        &#39; defined in the related RFC documents. These are the same as the \n        &#39; values used by the sender.\n        mcastAddress = IPAddress.Parse(&quot;224.168.100.2&quot;)\n        mcastPort = 11000\n\n        &#39; Join the listener multicast group.\n        JoinMulticastGroup()\n\n        &#39; Broadcast the message to the listener.\n        BroadcastMessage(&quot;Hello multicast listener.&quot;)\n      End Sub &#39;Main\n    End Class &#39;TestMulticastOption\n\n  End Module\n\nEnd Namespace\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Net.Sockets.MulticastOptionSender#1\">\nusing System;\nusing System.Net.Sockets;\nusing System.Net;\nusing System.Text;\n\n// This sender example must be used in conjunction with the listener program.\n// You must run this program as follows:\n// Open a console window and run the listener from the command line. \n// In another console window run the sender. In both cases you must specify \n// the local IPAddress to use. To obtain this address,  run the ipconfig command \n// from the command line. \n//  \nnamespace Mssc.TransportProtocols.Utilities\n{\n  class TestMulticastOption\n  {\n\n    static IPAddress mcastAddress;\n    static int mcastPort;\n    static Socket mcastSocket;\n   \n    static void JoinMulticastGroup()\n    {\n      try\n      {\n        // Create a multicast socket.\n        mcastSocket = new Socket(AddressFamily.InterNetwork, \n                                 SocketType.Dgram, \n                                 ProtocolType.Udp);\n\t\t\t  \n        // Get the local IP address used by the listener and the sender to\n        // exchange multicast messages. \n        Console.Write(&quot;\\nEnter local IPAddress for sending multicast packets: &quot;);\n        IPAddress  localIPAddr = IPAddress.Parse(Console.ReadLine());\n\n        // Create an IPEndPoint object. \n        IPEndPoint IPlocal = new IPEndPoint(localIPAddr, 0);\n        \n        // Bind this endpoint to the multicast socket.\n        mcastSocket.Bind(IPlocal);\n\n        // Define a MulticastOption object specifying the multicast group \n        // address and the local IP address.\n        // The multicast group address is the same as the address used by the listener.\n        MulticastOption mcastOption;\n        mcastOption = new MulticastOption(mcastAddress, localIPAddr);\n        \n        mcastSocket.SetSocketOption(SocketOptionLevel.IP, \n                                    SocketOptionName.AddMembership, \n                                    mcastOption);\n     \n      }\n      catch (Exception e)\n      {\n        Console.WriteLine(&quot;\\n&quot; + e.ToString());\n      }\n    }\n\n    static void BroadcastMessage(string message)\n    {\n      IPEndPoint endPoint;\n\n      try\n      {\n        //Send multicast packets to the listener.\n        endPoint = new IPEndPoint(mcastAddress,mcastPort);\n        mcastSocket.SendTo(ASCIIEncoding.ASCII.GetBytes(message), endPoint);\t\t\t\n        Console.WriteLine(&quot;Multicast data sent.....&quot;);\n      }\n      catch (Exception e)\n      {\n        Console.WriteLine(&quot;\\n&quot; + e.ToString());\n      }\n\n      mcastSocket.Close();\n    }\n   \n    \n    static void Main(string[] args)\n    {\n      // Initialize the multicast address group and multicast port.\n      // Both address and port are selected from the allowed sets as\n      // defined in the related RFC documents. These are the same \n      // as the values used by the sender.\n      mcastAddress = IPAddress.Parse(&quot;224.168.100.2&quot;);\n      mcastPort = 11000;\n\n      // Join the listener multicast group.\n      JoinMulticastGroup();\n\n      // Broadcast the message to the listener.\n      BroadcastMessage(&quot;Hello multicast listener.&quot;);\n    }\n  }\n}\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>Use a MulticastOption to store the <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a> of a multicast group you want to join or drop. Use the <a class=\"xref\" href=\"system.net.sockets.socket#System_Net_Sockets_Socket_SetSocketOption_\" data-linktype=\"relative-path\">SetSocketOption</a> method with the following parameters to join a multicast group.  </p>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>socketOptionLevel</td>\n<td><a class=\"xref\" href=\"system.net.sockets.socketoptionlevel\" data-linktype=\"relative-path\">System.Net.Sockets.SocketOptionLevel</a></td>\n</tr>\n<tr>\n<td>socketOptionName</td>\n<td><a class=\"xref\" href=\"system.net.sockets.socketoptionname\" data-linktype=\"relative-path\">SocketOptionName</a></td>\n</tr>\n<tr>\n<td>object</td>\n<td>MulticastOption</td>\n</tr>\n</tbody>\n</table>\n<p> Use <a class=\"xref\" href=\"system.net.sockets.socketoptionname\" data-linktype=\"relative-path\">SocketOptionName</a> to drop a multicast group.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Net_Sockets_MulticastOption__ctor_System_Net_IPAddress_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">MulticastOption(IPAddress)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new version of the <a class=\"xref\" href=\"system.net.sockets.multicastoption\" data-linktype=\"relative-path\">MulticastOption</a> class for the specified IP multicast group.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public MulticastOption (System.Net.IPAddress group);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>group</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a> of the multicast group.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>group</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>For machines with multiple network cards, do not use this constructor. Use the constructor that takes a group and a local IP address.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Net_Sockets_MulticastOption__ctor_System_Net_IPAddress_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">MulticastOption(IPAddress, Int32)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.sockets.multicastoption\" data-linktype=\"relative-path\">MulticastOption</a> class with the specified IP multicast group address and interface index.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public MulticastOption (System.Net.IPAddress group, int interfaceIndex);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>group</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a> of the multicast group.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>interfaceIndex</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The index of the interface that is used to send and receive multicast packets.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Net_Sockets_MulticastOption__ctor_System_Net_IPAddress_System_Net_IPAddress_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">MulticastOption(IPAddress, IPAddress)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.sockets.multicastoption\" data-linktype=\"relative-path\">MulticastOption</a> class with the specified IP multicast group address and local IP address associated with a network interface.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public MulticastOption (System.Net.IPAddress group, System.Net.IPAddress mcint);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>group</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The group <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>mcint</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The local <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>group</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>mcint</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>For machines with multiple network cards, you must use this constructor to create <a class=\"xref\" href=\"system.net.sockets.multicastoption\" data-linktype=\"relative-path\">MulticastOption</a> instances.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Net_Sockets_MulticastOption_Group\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Group</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets the IP address of a multicast group.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Net.IPAddress Group { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a> that contains the Internet address of a multicast group.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Valid IP addresses for multicast packets are in the range 224.0.0.0 to 239.255.255.255.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Net_Sockets_MulticastOption_InterfaceIndex\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">InterfaceIndex</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets the index of the interface that is used to send and receive multicast packets.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int InterfaceIndex { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An integer that represents the index of a <a class=\"xref\" href=\"system.net.networkinformation.networkinterface\" data-linktype=\"relative-path\">NetworkInterface</a> array element.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Net_Sockets_MulticastOption_LocalAddress\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LocalAddress</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets the local address associated with a multicast group.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Net.IPAddress LocalAddress { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a> that contains the local address associated with a multicast group.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The LocalAddress property contains the IP address of the interface associated with the multicast group membership. If LocalAddress is set to <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a>, the default interface is used.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Net.Sockets.MulticastOption.yml\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.MulticastOption\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.MulticastOption..ctor\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.MulticastOption.Group\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.MulticastOption.InterfaceIndex\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.MulticastOption.LocalAddress\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-29 05:54 AM\">\r\n<meta name=\"document_id\" content=\"e1ff3c7b-d419-7229-3cea-612ebd17cd6d\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Contains  values used to join and drop multicast groups.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.net.sockets/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Net.Sockets.MulticastOption\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Net.Sockets.MulticastOption.yml","open_to_public_contributors":false,"api_name":["System.Net.Sockets.MulticastOption","System.Net.Sockets.MulticastOption..ctor","System.Net.Sockets.MulticastOption.Group","System.Net.Sockets.MulticastOption.InterfaceIndex","System.Net.Sockets.MulticastOption.LocalAddress"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Net.Sockets.MulticastOption","System::Net::Sockets::MulticastOption","System.Net.Sockets.MulticastOption.#ctor","System::Net::Sockets::MulticastOption::#ctor","System.Net.Sockets.MulticastOption.Group","System::Net::Sockets::MulticastOption::Group","System.Net.Sockets.MulticastOption.InterfaceIndex","System::Net::Sockets::MulticastOption::InterfaceIndex","System.Net.Sockets.MulticastOption.LocalAddress","System::Net::Sockets::MulticastOption::LocalAddress"],"dev_langs":["csharp"],"updated_at":"2017-03-29 05:54 AM","document_id":"e1ff3c7b-d419-7229-3cea-612ebd17cd6d","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Net.Sockets/MulticastOption.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"MulticastOption class | Microsoft Docs","_op_ogTitle":"MulticastOption class","description":"Contains  values used to join and drop multicast groups.\n","toc_asset_id":"api/_splitted/System.Net.Sockets/toc.json","toc_rel":"_splitted/System.Net.Sockets/toc.json","source_url":"","ms.assetid":"System.Net.Sockets.MulticastOption","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.net.sockets.multicastoption","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.net.sockets.multicastoption","fileRelativePath":"api/System.Net.Sockets.MulticastOption.html"},"themesRelativePathToOutputRoot":"_themes/"}