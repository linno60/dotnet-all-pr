{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">DataReceivedEventArgs</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Provides data for the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_OutputDataReceived\" data-linktype=\"relative-path\">OutputDataReceived</a> and <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_ErrorDataReceived\" data-linktype=\"relative-path\">ErrorDataReceived</a> events.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public class DataReceivedEventArgs : EventArgs</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></span></div><span class=\"lang-csharp\">DataReceivedEventArgs</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs#System_EventArgs_Empty\" data-linktype=\"relative-path\">Empty</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example illustrates how to perform asynchronous read operations on the redirected <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardOutput_\" data-linktype=\"relative-path\">StandardOutput</a> stream of the <code>sort</code> command. The <code>sort</code> command is a console application that reads and sorts text input.  </p>\n<p> The example creates an event delegate for the <code>SortOutputHandler</code> event handler and associates it with the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_OutputDataReceived\" data-linktype=\"relative-path\">OutputDataReceived</a> event. The event handler receives text lines from the redirected <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardOutput_\" data-linktype=\"relative-path\">StandardOutput</a> stream, formats the text, and writes the text to the screen.  </p>\n<pre><code class=\"lang-cpp\" name=\"Process_AsyncStreams#1\">// Define the namespaces used by this sample.\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Text;\nusing namespace System::IO;\nusing namespace System::Diagnostics;\nusing namespace System::Threading;\nusing namespace System::ComponentModel;\n\nref class SortOutputRedirection\n{\nprivate:\n   // Define static variables shared by class methods.\n   static StringBuilder^ sortOutput = nullptr;\n   static int numOutputLines = 0;\n\npublic:\n   static void SortInputListText()\n   {\n      // Initialize the process and its StartInfo properties.\n      // The sort command is a console application that\n      // reads and sorts text input.\n\n      Process^ sortProcess;\n      sortProcess = gcnew Process;\n      sortProcess-&gt;StartInfo-&gt;FileName = &quot;Sort.exe&quot;;\n      \n      // Set UseShellExecute to false for redirection.\n      sortProcess-&gt;StartInfo-&gt;UseShellExecute = false;\n      \n      // Redirect the standard output of the sort command.  \n      // This stream is read asynchronously using an event handler.\n      sortProcess-&gt;StartInfo-&gt;RedirectStandardOutput = true;\n      sortOutput = gcnew StringBuilder;\n      \n      // Set our event handler to asynchronously read the sort output.\n      sortProcess-&gt;OutputDataReceived += gcnew DataReceivedEventHandler( SortOutputHandler );\n      \n      // Redirect standard input as well.  This stream\n      // is used synchronously.\n      sortProcess-&gt;StartInfo-&gt;RedirectStandardInput = true;\n      \n      // Start the process.\n      sortProcess-&gt;Start();\n      \n      // Use a stream writer to synchronously write the sort input.\n      StreamWriter^ sortStreamWriter = sortProcess-&gt;StandardInput;\n      \n      // Start the asynchronous read of the sort output stream.\n      sortProcess-&gt;BeginOutputReadLine();\n      \n      // Prompt the user for input text lines.  Write each \n      // line to the redirected input stream of the sort command.\n      Console::WriteLine( &quot;Ready to sort up to 50 lines of text&quot; );\n\n      String^ inputText;\n      int numInputLines = 0;\n      do\n      {\n         Console::WriteLine( &quot;Enter a text line (or press the Enter key to stop):&quot; );\n\n         inputText = Console::ReadLine();\n         if (  !String::IsNullOrEmpty( inputText ) )\n         {\n            numInputLines++;\n            sortStreamWriter-&gt;WriteLine( inputText );\n         }\n      }\n      while (  !String::IsNullOrEmpty( inputText ) &amp;&amp; (numInputLines &lt; 50) );\n\n      Console::WriteLine( &quot;&lt;end of input stream&gt;&quot; );\n      Console::WriteLine();\n      \n      // End the input stream to the sort command.\n      sortStreamWriter-&gt;Close();\n      \n      // Wait for the sort process to write the sorted text lines.\n      sortProcess-&gt;WaitForExit();\n\n      if ( numOutputLines &gt; 0 )\n      {\n         \n         // Write the formatted and sorted output to the console.\n         Console::WriteLine( &quot; Sort results = {0} sorted text line(s) &quot;,\n            numOutputLines.ToString() );\n         Console::WriteLine( &quot;----------&quot; );\n         Console::WriteLine( sortOutput-&gt;ToString() );\n      }\n      else\n      {\n         Console::WriteLine( &quot; No input lines were sorted.&quot; );\n      }\n\n      sortProcess-&gt;Close();\n   }\n\nprivate:\n   static void SortOutputHandler( Object^ /*sendingProcess*/,\n      DataReceivedEventArgs^ outLine )\n   {\n      // Collect the sort command output.\n      if (  !String::IsNullOrEmpty( outLine-&gt;Data ) )\n      {\n         numOutputLines++;\n         \n         // Add the text to the collected output.\n         sortOutput-&gt;AppendFormat( &quot;\\n[{0}] {1}&quot;,\n            numOutputLines.ToString(), outLine-&gt;Data );\n      }\n   }\n};\n\n/// The main entry point for the application.\nvoid main()\n{\n   try\n   {\n      SortOutputRedirection::SortInputListText();\n   }\n   catch ( InvalidOperationException^ e ) \n   {\n      Console::WriteLine( &quot;Exception:&quot; );\n      Console::WriteLine( e );\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Process_AsyncStreams#1\">&#39; Define the namespaces used by this sample.\nImports System\nImports System.Text\nImports System.IO\nImports System.Diagnostics\nImports System.Threading\nImports System.ComponentModel\nImports Microsoft.VisualBasic\n\nNamespace ProcessAsyncStreamSamples\n   \n   Class ProcessAsyncOutputRedirection\n      &#39; Define static variables shared by class methods.\n      Private Shared sortOutput As StringBuilder = Nothing\n      Private Shared numOutputLines As Integer = 0\n      \n      Public Shared Sub SortInputListText()\n         \n         &#39; Initialize the process and its StartInfo properties.\n         &#39; The sort command is a console application that\n         &#39; reads and sorts text input.\n         Dim sortProcess As New Process()\n         sortProcess.StartInfo.FileName = &quot;Sort.exe&quot;\n         \n         &#39; Set UseShellExecute to false for redirection.\n         sortProcess.StartInfo.UseShellExecute = False\n         \n         &#39; Redirect the standard output of the sort command.  \n         &#39; Read the stream asynchronously using an event handler.\n         sortProcess.StartInfo.RedirectStandardOutput = True\n         sortOutput = new StringBuilder()\n\n         &#39; Set our event handler to asynchronously read the sort output.\n         AddHandler sortProcess.OutputDataReceived, _\n                    AddressOf SortOutputHandler\n         \n         &#39; Redirect standard input as well.  This stream\n         &#39; is used synchronously.\n         sortProcess.StartInfo.RedirectStandardInput = True\n         \n         &#39; Start the process.\n         sortProcess.Start()\n         \n         &#39; Use a stream writer to synchronously write the sort input.\n         Dim sortStreamWriter As StreamWriter = sortProcess.StandardInput\n     \n         &#39; Start the asynchronous read of the sort output stream.\n         sortProcess.BeginOutputReadLine()\n         \n         &#39; Prompt the user for input text lines.  Write each \n         &#39; line to the redirected input stream of the sort command.\n         Console.WriteLine(&quot;Ready to sort up to 50 lines of text&quot;)\n         \n         Dim inputText As String\n         Dim numInputLines As Integer = 0\n         Do\n            Console.WriteLine(&quot;Enter a text line (or press the Enter key to stop):&quot;)\n            \n            inputText = Console.ReadLine()\n            If Not String.IsNullOrEmpty(inputText) Then\n               numInputLines += 1\n               sortStreamWriter.WriteLine(inputText)\n            End If\n         Loop While Not String.IsNullOrEmpty(inputText) AndAlso numInputLines &lt; 50\n         Console.WriteLine(&quot;&lt;end of input stream&gt;&quot;)\n         Console.WriteLine()\n         \n         &#39; End the input stream to the sort command.\n         sortStreamWriter.Close()\n         \n         &#39; Wait for the sort process to write the sorted text lines.\n         sortProcess.WaitForExit()\n         \n         If Not String.IsNullOrEmpty(numOutputLines) Then\n            &#39; Write the formatted and sorted output to the console.\n            Console.WriteLine(&quot; Sort results = {0} sorted text line(s) &quot;, _\n                              numOutputLines)\n            Console.WriteLine(&quot;----------&quot;)\n            Console.WriteLine(sortOutput)\n         Else\n            Console.WriteLine(&quot; No input lines were sorted.&quot;)\n         End If\n         \n         sortProcess.Close()\n      End Sub \n      \n      Private Shared Sub SortOutputHandler(sendingProcess As Object, _\n         outLine As DataReceivedEventArgs)\n\n         &#39; Collect the sort command output.\n         If Not String.IsNullOrEmpty(outLine.Data) Then\n            numOutputLines += 1\n            \n            &#39; Add the text to the collected output.\n            sortOutput.Append(Environment.NewLine + &quot;[&quot; _\n                         + numOutputLines.ToString() + &quot;] - &quot; _\n                         + outLine.Data)\n         End If\n      End Sub \n   End Class  \nEnd Namespace \n\nNamespace ProcessAsyncStreamSamples\n  \n   Class ProcessSampleMain\n\n      &#39; The main entry point for the application.\n      Shared Sub Main()\n         Try\n            ProcessAsyncOutputRedirection.SortInputListText()\n         \n         Catch e As InvalidOperationException\n            Console.WriteLine(&quot;Exception:&quot;)\n            Console.WriteLine(e.ToString())\n         End Try\n      End Sub &#39;Main\n   End Class  &#39;ProcessSampleMain\nEnd Namespace &#39;Process_AsyncStream_Sample\n</code></pre><pre><code class=\"lang-cs\" name=\"Process_AsyncStreams#1\">// Define the namespaces used by this sample.\nusing System;\nusing System.Text;\nusing System.IO;\nusing System.Diagnostics;\nusing System.Threading;\nusing System.ComponentModel;\n\nnamespace ProcessAsyncStreamSamples\n{\n    class SortOutputRedirection\n    {\n        // Define static variables shared by class methods.\n        private static StringBuilder sortOutput = null;\n        private static int numOutputLines = 0;\n      \n        public static void SortInputListText()\n        {\n            // Initialize the process and its StartInfo properties.\n            // The sort command is a console application that\n            // reads and sorts text input.\n\n            Process sortProcess;\n            sortProcess = new Process();\n            sortProcess.StartInfo.FileName = &quot;Sort.exe&quot;;\n            \n            // Set UseShellExecute to false for redirection.\n            sortProcess.StartInfo.UseShellExecute = false;\n\n            // Redirect the standard output of the sort command.  \n            // This stream is read asynchronously using an event handler.\n            sortProcess.StartInfo.RedirectStandardOutput = true;\n            sortOutput = new StringBuilder(&quot;&quot;);\n\n            // Set our event handler to asynchronously read the sort output.\n            sortProcess.OutputDataReceived += new DataReceivedEventHandler(SortOutputHandler);\n\n            // Redirect standard input as well.  This stream\n            // is used synchronously.\n            sortProcess.StartInfo.RedirectStandardInput = true;\n  \n            // Start the process.\n            sortProcess.Start();\n\n            // Use a stream writer to synchronously write the sort input.\n            StreamWriter sortStreamWriter = sortProcess.StandardInput;\n\n            // Start the asynchronous read of the sort output stream.\n            sortProcess.BeginOutputReadLine();\n\n            // Prompt the user for input text lines.  Write each \n            // line to the redirected input stream of the sort command.\n            Console.WriteLine(&quot;Ready to sort up to 50 lines of text&quot;);\n\n            String inputText;\n            int numInputLines = 0;\n            do \n            {\n                Console.WriteLine(&quot;Enter a text line (or press the Enter key to stop):&quot;);\n            \n                inputText = Console.ReadLine();\n                if (!String.IsNullOrEmpty(inputText))\n                {\n                    numInputLines ++;\n                    sortStreamWriter.WriteLine(inputText);\n                }\n            }\n            while (!String.IsNullOrEmpty(inputText) &amp;&amp; (numInputLines &lt; 50));\n            Console.WriteLine(&quot;&lt;end of input stream&gt;&quot;);\n            Console.WriteLine();\n\n            // End the input stream to the sort command.\n            sortStreamWriter.Close();\n\n            // Wait for the sort process to write the sorted text lines.\n            sortProcess.WaitForExit();\n\n            if (numOutputLines &gt; 0)\n            {\n                // Write the formatted and sorted output to the console.\n                Console.WriteLine(&quot; Sort results = {0} sorted text line(s) &quot;, \n                    numOutputLines);\n                Console.WriteLine(&quot;----------&quot;);\n                Console.WriteLine(sortOutput);\n            }\n            else \n            {\n                Console.WriteLine(&quot; No input lines were sorted.&quot;);\n            }\n\n            sortProcess.Close();\n        }\n\n        private static void SortOutputHandler(object sendingProcess, \n            DataReceivedEventArgs outLine)\n        {\n            // Collect the sort command output.\n            if (!String.IsNullOrEmpty(outLine.Data))\n            {\n                numOutputLines++;\n    \n                // Add the text to the collected output.\n                sortOutput.Append(Environment.NewLine + \n                    &quot;[&quot; + numOutputLines.ToString() + &quot;] - &quot; + outLine.Data);\n            }\n        }\n    }\n}\n\nnamespace ProcessAsyncStreamSamples\n{\n\n    class ProcessSampleMain\n    {\n        /// The main entry point for the application.\n        static void Main()\n        {\n            try \n            {\n                SortOutputRedirection.SortInputListText();\n            }\n            catch (InvalidOperationException e)\n            {\n                Console.WriteLine(&quot;Exception:&quot;);\n                Console.WriteLine(e.ToString());\n            }\n        }\n    }\n}\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>To asynchronously collect the redirected <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardOutput_\" data-linktype=\"relative-path\">StandardOutput</a> or <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardError_\" data-linktype=\"relative-path\">StandardError</a> stream output of a process, you must create a method that handles the redirected stream output events. The event-handler method is called when the process writes to the redirected stream. The event delegate calls your event handler with an instance of DataReceivedEventArgs. The <a class=\"xref\" href=\"system.diagnostics.datareceivedeventargs#System_Diagnostics_DataReceivedEventArgs_Data_\" data-linktype=\"relative-path\">Data</a> property contains the text line that the process wrote to the redirected stream.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Diagnostics_DataReceivedEventArgs_Data_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Diagnostics_DataReceivedEventArgs_Data\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Data</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the line of characters that was written to a redirected <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> output stream.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string Data { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The line that was written by an associated <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> to its redirected <span class=\"xref\">stem.Diagnostics.Process.StandardOutput*</span> or <span class=\"xref\">stem.Diagnostics.Process.StandardError*</span> stream.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>When you redirect the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardOutput_\" data-linktype=\"relative-path\">StandardOutput</a> or <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardError_\" data-linktype=\"relative-path\">StandardError</a> stream of a <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> to your event handler, an event is raised each time the process writes a line to the redirected stream. The Data property is the line that the <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> wrote to the redirected output stream. Your event handler can use the Data property to filter process output or write output to an alternate location. For example, you might create an event handler that stores all error output lines into a designated error log file.  </p>\n<p> A line is defined as a sequence of characters followed by a line feed (&quot;\\n&quot;) or a carriage return immediately followed by a line feed (&quot;\\r\\n&quot;). The line characters are encoded using the default system ANSI code page. The Data property does not include the terminating carriage return or line feed.  </p>\n<p> When the redirected stream is closed, a null line is sent to the event handler. Ensure your event handler checks the Data property appropriately before accessing it. For example, you can use the static method <a class=\"xref\" href=\"system.string#System_String_IsNullOrEmpty_\" data-linktype=\"relative-path\">IsNullOrEmpty</a> to validate the Data property in your event handler.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Diagnostics.DataReceivedEventArgs.yml\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.DataReceivedEventArgs\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.DataReceivedEventArgs.Data\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 05:47 AM\">\r\n<meta name=\"document_id\" content=\"53d0cb64-f581-ffde-ab73-615cbbf1e7c6\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides data for the  and  events.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.diagnostics/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Diagnostics.DataReceivedEventArgs\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Diagnostics.DataReceivedEventArgs.yml","open_to_public_contributors":false,"api_name":["System.Diagnostics.DataReceivedEventArgs","System.Diagnostics.DataReceivedEventArgs.Data"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Diagnostics.DataReceivedEventArgs","System::Diagnostics::DataReceivedEventArgs","System.Diagnostics.DataReceivedEventArgs.Data","System::Diagnostics::DataReceivedEventArgs::Data"],"dev_langs":["csharp"],"updated_at":"2017-03-31 05:47 AM","document_id":"53d0cb64-f581-ffde-ab73-615cbbf1e7c6","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Diagnostics/DataReceivedEventArgs.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"DataReceivedEventArgs class | Microsoft Docs","_op_ogTitle":"DataReceivedEventArgs class","description":"Provides data for the  and  events.\n","toc_asset_id":"api/_splitted/System.Diagnostics/toc.json","toc_rel":"_splitted/System.Diagnostics/toc.json","source_url":"","ms.assetid":"System.Diagnostics.DataReceivedEventArgs","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.datareceivedeventargs","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.datareceivedeventargs","fileRelativePath":"api/System.Diagnostics.DataReceivedEventArgs.html"},"themesRelativePathToOutputRoot":"_themes/"}