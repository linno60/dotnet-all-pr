{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">IDataSource</span>\r\n      Interface\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents an abstract data source that data-bound controls bind to.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public interface IDataSource</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example demonstrates how a class can implement the methods defined by the IDataSource interface to provide data to data-bound controls. The data source control in this example acts as a data source on a comma-separated value file, and can be used by any data-bound control to display comma-separated file data. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.web.ui.datasourcecontrol\" data-linktype=\"relative-path\">DataSourceControl</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"Urtue.Samples.Alexkr.CsvDataSource_1#1\">using System;\nusing System.Collections;\nusing System.Data;\nusing System.IO;\nusing System.Security.Permissions;\nusing System.Web;\nusing System.Web.UI;\nusing System.Web.UI.WebControls;\n\n// The CsvDataSource is a data source control that retrieves its\n// data from a comma-separated value file.\n[AspNetHostingPermission(SecurityAction.Demand, Level=AspNetHostingPermissionLevel.Minimal)]\npublic class CsvDataSource : DataSourceControl\n{\n    public CsvDataSource() : base() {}\n\n    // The comma-separated value file to retrieve data from.\n    public string FileName {\n        get {\n            return ((CsvDataSourceView)this.GetView(String.Empty)).SourceFile;\n        }\n        set {\n            // Only set if it is different.\n            if ( ((CsvDataSourceView)this.GetView(String.Empty)).SourceFile != value) {\n                ((CsvDataSourceView)this.GetView(String.Empty)).SourceFile = value;\n                RaiseDataSourceChangedEvent(EventArgs.Empty);\n            }\n        }\n    }\n\n    // Do not add the column names as a data row. Infer columns if the CSV file does\n    // not include column names.\n    public bool IncludesColumnNames {\n        get {\n            return ((CsvDataSourceView)this.GetView(String.Empty)).IncludesColumnNames;\n        }\n        set {\n            // Only set if it is different.\n            if ( ((CsvDataSourceView)this.GetView(String.Empty)).IncludesColumnNames != value) {\n                ((CsvDataSourceView)this.GetView(String.Empty)).IncludesColumnNames = value;\n                RaiseDataSourceChangedEvent(EventArgs.Empty);\n            }\n        }\n    }\n\n    // Return a strongly typed view for the current data source control.\n    private CsvDataSourceView view = null;\n    protected override DataSourceView GetView(string viewName) {\n        if (null == view) {\n            view = new CsvDataSourceView(this, String.Empty);\n        }\n        return view;\n    }\n    // The ListSourceHelper class calls GetList, which\n    // calls the DataSourceControl.GetViewNames method.\n    // Override the original implementation to return\n    // a collection of one element, the default view name.\n    protected override ICollection GetViewNames() {\n        ArrayList al = new ArrayList(1);\n        al.Add(CsvDataSourceView.DefaultViewName);\n        return al as ICollection;\n    }\n}\n\n// The CsvDataSourceView class encapsulates the\n// capabilities of the CsvDataSource data source control.\npublic class CsvDataSourceView : DataSourceView\n{\n\n    public CsvDataSourceView(IDataSource owner, string name) :base(owner, DefaultViewName) {\n\n    }\n\n    // The data source view is named. However, the CsvDataSource\n    // only supports one view, so the name is ignored, and the\n    // default name used instead.\n    public static string DefaultViewName = &quot;CommaSeparatedView&quot;;\n\n    // The location of the .csv file.\n    private string sourceFile = String.Empty;\n    internal string SourceFile {\n        get {\n            return sourceFile;\n        }\n        set {\n            // Use MapPath when the SourceFile is set, so that files local to the\n            // current directory can be easily used.\n            string mappedFileName = HttpContext.Current.Server.MapPath(value);\n            sourceFile = mappedFileName;\n        }\n    }\n\n    // Do not add the column names as a data row. Infer columns if the CSV file does\n    // not include column names.\n    private bool columns = false;\n    internal bool IncludesColumnNames {\n        get {\n            return columns;\n        }\n        set {\n            columns = value;\n        }\n    }\n\n    // Get data from the underlying data source.\n    // Build and return a DataView, regardless of mode.\n    protected override IEnumerable ExecuteSelect(DataSourceSelectArguments selectArgs) {\n        IEnumerable dataList = null;\n        // Open the .csv file.\n        if (File.Exists(this.SourceFile)) {\n            DataTable data = new DataTable();\n\n            // Open the file to read from.\n            using (StreamReader sr = File.OpenText(this.SourceFile)) {\n                // Parse the line\n                string s = &quot;&quot;;\n                string[] dataValues;\n                DataColumn col;\n\n                // Do the following to add schema.\n                dataValues = sr.ReadLine().Split(&#39;,&#39;);\n                // For each token in the comma-delimited string, add a column\n                // to the DataTable schema.\n                foreach (string token in dataValues) {\n                    col = new DataColumn(token,typeof(string));\n                    data.Columns.Add(col);\n                }\n\n                // Do not add the first row as data if the CSV file includes column names.\n                if (! IncludesColumnNames)\n                    data.Rows.Add(CopyRowData(dataValues, data.NewRow()));\n\n                // Do the following to add data.\n                while ((s = sr.ReadLine()) != null) {\n                    dataValues = s.Split(&#39;,&#39;);\n                    data.Rows.Add(CopyRowData(dataValues, data.NewRow()));\n                }\n            }\n            data.AcceptChanges();\n            DataView dataView = new DataView(data);\n            if (selectArgs.SortExpression != String.Empty) {\n                dataView.Sort = selectArgs.SortExpression;\n            }\n            dataList = dataView;\n        }\n        else {\n            throw new System.Configuration.ConfigurationErrorsException(&quot;File not found, &quot; + this.SourceFile);\n        }\n\n        if (null == dataList) {\n            throw new InvalidOperationException(&quot;No data loaded from data source.&quot;);\n        }\n\n        return dataList;\n    }\n\n    private DataRow CopyRowData(string[] source, DataRow target) {\n        try {\n            for (int i = 0;i &lt; source.Length;i++) {\n                target[i] = source[i];\n            }\n        }\n        catch (System.IndexOutOfRangeException) {\n            // There are more columns in this row than\n            // the original schema allows.  Stop copying\n            // and return the DataRow.\n            return target;\n        }\n        return target;\n    }\n    // The CsvDataSourceView does not currently\n    // permit deletion. You can modify or extend\n    // this sample to do so.\n    public override bool CanDelete {\n        get {\n            return false;\n        }\n    }\n    protected override int ExecuteDelete(IDictionary keys, IDictionary values)\n    {\n        throw new NotSupportedException();\n    }\n    // The CsvDataSourceView does not currently\n    // permit insertion of a new record. You can\n    // modify or extend this sample to do so.\n    public override bool CanInsert {\n        get {\n            return false;\n        }\n    }\n    protected override int ExecuteInsert(IDictionary values)\n    {\n        throw new NotSupportedException();\n    }\n    // The CsvDataSourceView does not currently\n    // permit update operations. You can modify or\n    // extend this sample to do so.\n    public override bool CanUpdate {\n        get {\n            return false;\n        }\n    }\n    protected override int ExecuteUpdate(IDictionary keys, IDictionary values, IDictionary oldValues)\n    {\n        throw new NotSupportedException();\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Urtue.Samples.Alexkr.CsvDataSource_1#1\">Imports System\nImports System.Collections\nImports System.Data\nImports System.IO\nImports System.Security.Permissions\nImports System.Web\nImports System.Web.UI\nImports System.Web.UI.WebControls\n\nNamespace Samples.AspNet.VB.Controls\n\n&#39; The CsvDataSource is a data source control that retrieves its\n&#39; data from a comma-separated value file.\n&lt;AspNetHostingPermission(SecurityAction.Demand, Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\nPublic Class CsvDataSource\n   Inherits DataSourceControl\n\n   Public Sub New()\n   End Sub &#39;New\n\n   &#39; The comma-separated value file to retrieve data from.\n   Public Property FileName() As String\n      Get\n         Return CType(Me.GetView([String].Empty), CsvDataSourceView).SourceFile\n      End Get\n      Set\n         &#39; Only set if it is different.\n         If CType(Me.GetView([String].Empty), CsvDataSourceView).SourceFile &lt;&gt; value Then\n            CType(Me.GetView([String].Empty), CsvDataSourceView).SourceFile = value\n            RaiseDataSourceChangedEvent(EventArgs.Empty)\n         End If\n      End Set\n   End Property\n\n   &#39; Do not add the column names as a data row. Infer columns if the CSV file does\n   &#39; not include column names.\n\n   Public Property IncludesColumnNames() As Boolean\n      Get\n         Return CType(Me.GetView([String].Empty), CsvDataSourceView).IncludesColumnNames\n      End Get\n      Set\n         &#39; Only set if it is different.\n         If CType(Me.GetView([String].Empty), CsvDataSourceView).IncludesColumnNames &lt;&gt; value Then\n            CType(Me.GetView([String].Empty), CsvDataSourceView).IncludesColumnNames = value\n            RaiseDataSourceChangedEvent(EventArgs.Empty)\n         End If\n      End Set\n   End Property\n\n\n   &#39; Return a strongly typed view for the current data source control.\n   Private view As CsvDataSourceView = Nothing\n\n   Protected Overrides Function GetView(viewName As String) As DataSourceView\n      If view Is Nothing Then\n         view = New CsvDataSourceView(Me, String.Empty)\n      End If\n      Return view\n   End Function &#39;GetView\n\n   &#39; The ListSourceHelper class calls GetList, which\n   &#39; calls the DataSourceControl.GetViewNames method.\n   &#39; Override the original implementation to return\n   &#39; a collection of one element, the default view name.\n   Protected Overrides Function GetViewNames() As ICollection\n      Dim al As New ArrayList(1)\n      al.Add(CsvDataSourceView.DefaultViewName)\n      Return CType(al, ICollection)\n   End Function &#39;GetViewNames\n\nEnd Class &#39;CsvDataSource\n\n\n&#39; The CsvDataSourceView class encapsulates the\n&#39; capabilities of the CsvDataSource data source control.\n\nPublic Class CsvDataSourceView\n   Inherits DataSourceView\n\n   Public Sub New(owner As IDataSource, name As String)\n       MyBase.New(owner, DefaultViewName)\n   End Sub &#39;New\n\n   &#39; The data source view is named. However, the CsvDataSource\n   &#39; only supports one view, so the name is ignored, and the\n   &#39; default name used instead.\n   Public Shared DefaultViewName As String = &quot;CommaSeparatedView&quot;\n\n   &#39; The location of the .csv file.\n   Private aSourceFile As String = [String].Empty\n\n   Friend Property SourceFile() As String\n      Get\n         Return aSourceFile\n      End Get\n      Set\n         &#39; Use MapPath when the SourceFile is set, so that files local to the\n         &#39; current directory can be easily used.\n         Dim mappedFileName As String\n         mappedFileName = HttpContext.Current.Server.MapPath(value)\n         aSourceFile = mappedFileName\n      End Set\n   End Property\n\n   &#39; Do not add the column names as a data row. Infer columns if the CSV file does\n   &#39; not include column names.\n   Private columns As Boolean = False\n\n   Friend Property IncludesColumnNames() As Boolean\n      Get\n         Return columns\n      End Get\n      Set\n         columns = value\n      End Set\n   End Property\n\n   &#39; Get data from the underlying data source.\n   &#39; Build and return a DataView, regardless of mode.\n   Protected Overrides Function ExecuteSelect(selectArgs As DataSourceSelectArguments) _\n    As System.Collections.IEnumerable\n      Dim dataList As IEnumerable = Nothing\n      &#39; Open the .csv file.\n      If File.Exists(Me.SourceFile) Then\n         Dim data As New DataTable()\n\n         &#39; Open the file to read from.\n         Dim sr As StreamReader = File.OpenText(Me.SourceFile)\n\n         Try\n            &#39; Parse the line\n            Dim dataValues() As String\n            Dim col As DataColumn\n\n            &#39; Do the following to add schema.\n            dataValues = sr.ReadLine().Split(&quot;,&quot;c)\n            &#39; For each token in the comma-delimited string, add a column\n            &#39; to the DataTable schema.\n            Dim token As String\n            For Each token In dataValues\n               col = New DataColumn(token, System.Type.GetType(&quot;System.String&quot;))\n               data.Columns.Add(col)\n            Next token\n\n            &#39; Do not add the first row as data if the CSV file includes column names.\n            If Not IncludesColumnNames Then\n               data.Rows.Add(CopyRowData(dataValues, data.NewRow()))\n            End If\n\n            &#39; Do the following to add data.\n            Dim s As String\n            Do\n               s = sr.ReadLine()\n               If Not s Is Nothing Then\n                   dataValues = s.Split(&quot;,&quot;c)\n                   data.Rows.Add(CopyRowData(dataValues, data.NewRow()))\n               End If\n            Loop Until s Is Nothing\n\n         Finally\n            sr.Close()\n         End Try\n\n         data.AcceptChanges()\n         Dim dataView As New DataView(data)\n         If Not selectArgs.SortExpression Is String.Empty Then\n             dataView.Sort = selectArgs.SortExpression\n         End If\n         dataList = dataView\n      Else\n         Throw New System.Configuration.ConfigurationErrorsException(&quot;File not found, &quot; + Me.SourceFile)\n      End If\n\n      If dataList is Nothing Then\n         Throw New InvalidOperationException(&quot;No data loaded from data source.&quot;)\n      End If\n\n      Return dataList\n   End Function &#39;ExecuteSelect\n\n\n   Private Function CopyRowData([source]() As String, target As DataRow) As DataRow\n      Try\n         Dim i As Integer\n         For i = 0 To [source].Length - 1\n            target(i) = [source](i)\n         Next i\n      Catch iore As IndexOutOfRangeException\n         &#39; There are more columns in this row than\n         &#39; the original schema allows.  Stop copying\n         &#39; and return the DataRow.\n         Return target\n      End Try\n      Return target\n   End Function &#39;CopyRowData\n\n   &#39; The CsvDataSourceView does not currently\n   &#39; permit deletion. You can modify or extend\n   &#39; this sample to do so.\n   Public Overrides ReadOnly Property CanDelete() As Boolean\n      Get\n         Return False\n      End Get\n   End Property\n\n   Protected Overrides Function ExecuteDelete(keys As IDictionary, values As IDictionary) As Integer\n      Throw New NotSupportedException()\n   End Function &#39;ExecuteDelete\n\n   &#39; The CsvDataSourceView does not currently\n   &#39; permit insertion of a new record. You can\n   &#39; modify or extend this sample to do so.\n   Public Overrides ReadOnly Property CanInsert() As Boolean\n      Get\n         Return False\n      End Get\n   End Property\n\n   Protected Overrides Function ExecuteInsert(values As IDictionary) As Integer\n      Throw New NotSupportedException()\n   End Function &#39;ExecuteInsert\n\n   &#39; The CsvDataSourceView does not currently\n   &#39; permit update operations. You can modify or\n   &#39; extend this sample to do so.\n   Public Overrides ReadOnly Property CanUpdate() As Boolean\n      Get\n         Return False\n      End Get\n   End Property\n\n   Protected Overrides Function ExecuteUpdate(keys As IDictionary, _\n                                              values As IDictionary, _\n                                              oldValues As IDictionary) As Integer\n      Throw New NotSupportedException()\n   End Function &#39;ExecuteUpdate\n\nEnd Class &#39;CsvDataSourceView\nEnd Namespace\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>ASP.NET supports a control data-binding architecture that enables Web server controls to bind to data in a consistent fashion. Web server controls that bind to data are referred to as data-bound controls, and the classes that facilitate that binding are called data source controls. Data source controls can represent any data source: a relational database, a file, a stream, a business object, and so on. Data source controls present data in a consistent way to data-bound controls, regardless of the source or format of the underlying data.  </p>\n<p> You implement the IDataSource interface when you want to implement your own custom ASP.NET data source control.  </p>\n<p> Any class that implements the IDataSource interface is a data source control. The IDataSource interface serves as the foundation for all ASP.NET data source controls and defines one of the fundamental data-binding architecture concepts with its two methods: the <a class=\"xref\" href=\"system.web.ui.idatasource#System_Web_UI_IDataSource_GetView_\" data-linktype=\"relative-path\">GetView</a> method and the <a class=\"xref\" href=\"system.web.ui.idatasource#System_Web_UI_IDataSource_GetViewNames_\" data-linktype=\"relative-path\">GetViewNames</a> method. This concept is that all data source controls support one or more named views on their data. The data source view object is similar to the <a class=\"xref\" href=\"system.data.dataview\" data-linktype=\"relative-path\">DataView</a> abstraction in the <a class=\"xref\" href=\"system.data\" data-linktype=\"relative-path\">System.Data</a> namespace: a data-bindable, customized view of data for sorting, filtering, and other data operations that the view defines. At its core, a data source control does nothing more than retrieve views on data.  </p>\n<p> A data source control can have one or more associated data source view objects. Some data source controls, including those that represent relational databases such as <a class=\"xref\" href=\"system.web.ui.webcontrols.sqldatasource\" data-linktype=\"relative-path\">SqlDataSource</a> and <a class=\"xref\" href=\"system.web.ui.webcontrols.accessdatasource\" data-linktype=\"relative-path\">AccessDataSource</a>, support only one view. Other data source controls, including hierarchical data source controls such as <a class=\"xref\" href=\"system.web.ui.webcontrols.sitemapdatasource\" data-linktype=\"relative-path\">SiteMapDataSource</a>, support many views. The data source view defines the capabilities of a data source and the operations that it supports.  </p>\n<p> In summary, data source controls implement the IDataSource interface, support one or more named views on the data they represent, and always support data retrieval from the data source they represent. Data source controls always retrieve data on demand, such as when <code>DataBind</code> is called on a data bound control.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_UI_IDataSource_GetView_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetView(String)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the named data source view associated with the data source control.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Web.UI.DataSourceView GetView (string viewName);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>viewName</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The name of the view to retrieve.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.datasourceview\" data-linktype=\"relative-path\">DataSourceView</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>Returns the named <a class=\"xref\" href=\"system.web.ui.datasourceview\" data-linktype=\"relative-path\">DataSourceView</a> associated with the <a class=\"xref\" href=\"system.web.ui.idatasource\" data-linktype=\"relative-path\">IDataSource</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Data source control classes can support one or more views on their underlying data. These views are represented by instances of the <a class=\"xref\" href=\"system.web.ui.datasourceview\" data-linktype=\"relative-path\">DataSourceView</a> class. The data source view defines the capabilities of a data source control, and performs all the work necessary to retrieve data from the underlying data store and perform operations such as sorting, inserting, deleting, and updating.  </p>\n<p> Data source control classes that implement the <a class=\"xref\" href=\"system.web.ui.idatasource\" data-linktype=\"relative-path\">IDataSource</a> interface implement the GetView method to return strongly typed view objects associated with the class.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_UI_IDataSource_GetViewNames\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetViewNames()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a collection of names representing the list of view objects associated with the <a class=\"xref\" href=\"system.web.ui.idatasource\" data-linktype=\"relative-path\">IDataSource</a> interface.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Collections.ICollection GetViewNames ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> that contains the names of the views associated with the <a class=\"xref\" href=\"system.web.ui.idatasource\" data-linktype=\"relative-path\">IDataSource</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Data source control classes can support one or more named views on their underlying data. The GetViewNames method returns a collection of view names currently associated with the data source control instance. Callers can iterate through the collection of view names and retrieve individual <a class=\"xref\" href=\"system.web.ui.datasourceview\" data-linktype=\"relative-path\">DataSourceView</a> objects with the <a class=\"xref\" href=\"system.web.ui.idatasource#System_Web_UI_IDataSource_GetView_\" data-linktype=\"relative-path\">GetView</a> method.  </p>\n<p> Data source control classes that implement the <a class=\"xref\" href=\"system.web.ui.idatasource\" data-linktype=\"relative-path\">IDataSource</a> interface implement the GetViewNames method to return a collection of names that represents all the data source view objects currently associated with the data source control class.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Events\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_UI_IDataSource_DataSourceChanged\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">DataSourceChanged</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when a data source control has changed in some way that affects data-bound controls.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event EventHandler DataSourceChanged;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The DataSourceChanged event is raised when the properties of a data-bound control or the underlying data has changed in some way that affects the data bindings between a data-bound control and its data. For example, the event is raised if a file name property, such as the <a class=\"xref\" href=\"system.web.ui.webcontrols.accessdatasource#System_Web_UI_WebControls_AccessDataSource_DataFile_\" data-linktype=\"relative-path\">DataFile</a> property, is changed on a file-based data source control.  </p>\n<p> For more information about handling events, see <a href=\"http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67\" data-linktype=\"external\">NIB: Consuming Events</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.UI.IDataSource.yml\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.IDataSource\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.IDataSource.DataSourceChanged\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.IDataSource.add_DataSourceChanged\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.IDataSource.remove_DataSourceChanged\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.IDataSource.GetView\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.IDataSource.GetViewNames\">\r\n<meta name=\"APILocation\" content=\"System.Web.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-29 05:54 AM\">\r\n<meta name=\"document_id\" content=\"9dacbcf2-4556-1a89-c86b-a79538697339\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents an abstract data source that data-bound controls bind to.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.web.ui/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Web.UI.IDataSource\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.UI.IDataSource.yml","open_to_public_contributors":false,"api_name":["System.Web.UI.IDataSource","System.Web.UI.IDataSource.DataSourceChanged","System.Web.UI.IDataSource.add_DataSourceChanged","System.Web.UI.IDataSource.remove_DataSourceChanged","System.Web.UI.IDataSource.GetView","System.Web.UI.IDataSource.GetViewNames"],"api_location":["System.Web.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Web.UI.IDataSource","System::Web::UI::IDataSource","System.Web.UI.IDataSource.DataSourceChanged","System::Web::UI::IDataSource::DataSourceChanged","System.Web.UI.IDataSource.GetView","System::Web::UI::IDataSource::GetView","System.Web.UI.IDataSource.GetViewNames","System::Web::UI::IDataSource::GetViewNames"],"dev_langs":["csharp"],"updated_at":"2017-03-29 05:54 AM","document_id":"9dacbcf2-4556-1a89-c86b-a79538697339","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Web.UI/IDataSource.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IDataSource interface | Microsoft Docs","_op_ogTitle":"IDataSource interface","description":"Represents an abstract data source that data-bound controls bind to.\n","toc_asset_id":"api/_splitted/System.Web.UI/toc.json","toc_rel":"_splitted/System.Web.UI/toc.json","source_url":"","ms.assetid":"System.Web.UI.IDataSource","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.idatasource","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.idatasource","fileRelativePath":"api/System.Web.UI.IDataSource.html"},"themesRelativePathToOutputRoot":"_themes/"}