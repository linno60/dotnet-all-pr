{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">AcknowledgeTypes</span>\r\n      Enum\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Specifies the types of acknowledgment message that Message Queuing returns to the sending application.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\r\n  \t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[ECMA2Yaml.Models.ECMAAttribute]\npublic enum AcknowledgeTypes</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a></span></div><span class=\"lang-csharp\">AcknowledgeTypes</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Attributes</dt><dd>\r\n  \t\t<div class=\"cdlHolder\">\r\n  \t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.flagsattribute\" title=\"System.FlagsAttribute\" data-linktype=\"relative-path\">FlagsAttribute</a></span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example sends and receives a message that contains an order to and from a queue. It specifically requests a positive acknowledgment when the original message reaches or is retrieved from the queue.  </p>\n<pre><code class=\"lang-cs\" name=\"Message.Acknowledgment#1\">using System;\nusing System.Messaging;\n\nnamespace MyProject\n{\n\n\t/// &lt;summary&gt;\n\t/// Provides a container class for the example.\n\t/// &lt;/summary&gt;\n\tpublic class MyNewQueue\n\t{\n\n\t\t//**************************************************\n\t\t// Provides an entry point into the application.\n\t\t//\t\t \n\t\t// This example sends and receives a message from\n\t\t// a queue.\n\t\t//**************************************************\n\n\t\tpublic static void Main()\n\t\t{\n\t\t\t// Create a new instance of the class.\n\t\t\tMyNewQueue myNewQueue = new MyNewQueue();\n\n\t\t\t// Create new queues.\n\t\t\tCreateQueue(&quot;.\\\\myQueue&quot;);\n\t\t\tCreateQueue(&quot;.\\\\myAdministrationQueue&quot;);\n\n\t\t\t// Send messages to a queue.\n\t\t\tmyNewQueue.SendMessage();\n\n\t\t\t// Receive messages from a queue.\n\t\t\tstring messageId = myNewQueue.ReceiveMessage(); \n\n\t\t\t// Receive acknowledgment message.\n\t\t\tif(messageId != null)\n\t\t\t{\n\t\t\t\tmyNewQueue.ReceiveAcknowledgment(messageId, &quot;.\\\\myAdministrationQueue&quot;);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\t//**************************************************\n\t\t// Creates a new queue.\n\t\t//**************************************************\n\n\t\tpublic static void CreateQueue(string queuePath)\n\t\t{\n\t\t\ttry\t\n\t\t\t{\n\t\t\t\tif(!MessageQueue.Exists(queuePath))\n\t\t\t\t{\n\t\t\t\t\tMessageQueue.Create(queuePath);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tConsole.WriteLine(queuePath + &quot; already exists.&quot;);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (MessageQueueException e)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(e.Message);\n\t\t\t}\n\t\t\t\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Sends a string message to a queue.\n\t\t//**************************************************\n\t\t\n\t\tpublic void SendMessage()\n\t\t{\n\n\t\t\t// Connect to a queue on the local computer.\n\t\t\tMessageQueue myQueue = new MessageQueue(&quot;.\\\\myQueue&quot;);\n\n\t\t\t// Create a new message.\n\t\t\tMessage myMessage = new Message(&quot;Original Message&quot;); \n\n\t\t\tmyMessage.AdministrationQueue = new MessageQueue(&quot;.\\\\myAdministrationQueue&quot;);\n\t\t\tmyMessage.AcknowledgeType = AcknowledgeTypes.PositiveReceive | AcknowledgeTypes.PositiveArrival;\n\n\t\t\t// Send the Order to the queue.\n\t\t\tmyQueue.Send(myMessage);\n\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Receives a message containing an Order.\n\t\t//**************************************************\n\t\t\n\t\tpublic  string ReceiveMessage()\n\t\t{\n\t\t\t// Connect to the a queue on the local computer.\n\t\t\tMessageQueue myQueue = new MessageQueue(&quot;.\\\\myQueue&quot;);\n\n\t\t\tmyQueue.MessageReadPropertyFilter.CorrelationId = true;\n\n\n\t\t\t// Set the formatter to indicate body contains an Order.\n\t\t\tmyQueue.Formatter = new XmlMessageFormatter(new Type[]\n\t\t\t\t{typeof(string)});\n\n\t\t\tstring returnString = null;\n\t\t\t\n\t\t\ttry\n\t\t\t{\n\t\t\t\t// Receive and format the message. \n\t\t\t\tMessage myMessage =\tmyQueue.Receive(); \n\n\n\t\t\t\t// Display message information.\n\t\t\t\tConsole.WriteLine(&quot;____________________________________________&quot;);\n\t\t\t\tConsole.WriteLine(&quot;Original message information--&quot;);\n\t\t\t\tConsole.WriteLine(&quot;Body: &quot; +myMessage.Body.ToString());\n\t\t\t\tConsole.WriteLine(&quot;Id: &quot; + myMessage.Id.ToString());\n\t\t\t\tConsole.WriteLine(&quot;____________________________________________&quot;);\n\n\t\t\t\treturnString =  myMessage.Id;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tcatch (MessageQueueException)\n\t\t\t{\n\t\t\t\t// Handle Message Queuing exceptions.\n\t\t\t}\n\n\t\t\t// Handle invalid serialization format.\n\t\t\tcatch (InvalidOperationException e)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(e.Message);\n\t\t\t}\n\t\t\t\n\t\t\t// Catch other exceptions as necessary.\n\n\t\t\treturn returnString;\n\t\t}\n\n\t\t//**************************************************\n\t\t// Receives a message containing an Order.\n\t\t//**************************************************\n\t\t\n\t\tpublic void ReceiveAcknowledgment(string messageId, string queuePath)\n\t\t{\n\t\t\tbool found = false;\n\t\t\tMessageQueue queue = new MessageQueue(queuePath);\n\t\t\tqueue.MessageReadPropertyFilter.CorrelationId = true;\n\t\t\tqueue.MessageReadPropertyFilter.Acknowledgment = true;\n\n\t\t\ttry\n\t\t\t{\n\t\t\t\twhile(queue.PeekByCorrelationId(messageId) != null)\n\t\t\t\t{\n\t\t\t\t\tMessage myAcknowledgmentMessage = queue.ReceiveByCorrelationId(messageId);\n\t\t\t\n\t\t\t\t\t// Output acknowledgment message information. The correlation Id is identical\n\t\t\t\t\t// to the id of the original message.\n\t\t\t\t\tConsole.WriteLine(&quot;Acknowledgment Message Information--&quot;);\n\t\t\t\t\tConsole.WriteLine(&quot;Correlation Id: &quot; + myAcknowledgmentMessage.CorrelationId.ToString());\n\t\t\t\t\tConsole.WriteLine(&quot;Id: &quot; + myAcknowledgmentMessage.Id.ToString());\n\t\t\t\t\tConsole.WriteLine(&quot;Acknowledgment Type: &quot; + myAcknowledgmentMessage.Acknowledgment.ToString());\n\t\t\t\t\tConsole.WriteLine(&quot;____________________________________________&quot;);\n\n\t\t\t\t\tfound = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (InvalidOperationException e)\n\t\t\t{ \n\t\t\t\t// This exception would be thrown if there is no (further) acknowledgment message\n\t\t\t\t// with the specified correlation Id. Only output a message if there are no messages;\n\t\t\t\t// not if the loop has found at least one.\n\t\t\t\tif(found == false)\n\t\t\t\t{\t\n\t\t\t\t\tConsole.WriteLine(e.Message);\n\t\t\t\t}\n\n\t\t\t\t// Handle other causes of invalid operation exception.\n\t\t\t}\n\n\t\t}\n\t}\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Message.Acknowledgment#1\">#using &lt;system.dll&gt;\n#using &lt;system.messaging.dll&gt;\n\nusing namespace System;\nusing namespace System::Messaging;\nref class MyNewQueue\n{\npublic:\n   static void CreateQueue( String^ queuePath )\n   {\n      try\n      {\n         if (  !MessageQueue::Exists( queuePath ) )\n         {\n            MessageQueue::Create( queuePath );\n         }\n         else\n         {\n            Console::WriteLine(  &quot;{0} already exists.&quot;, queuePath );\n         }\n      }\n      catch ( MessageQueueException^ e ) \n      {\n         Console::WriteLine( e-&gt;Message );\n      }\n\n   }\n\n   void SendMessage()\n   {\n      // Connect to a queue on the local computer.\n      MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\myQueue&quot; );\n\n      // Create a new message.\n      Message^ myMessage = gcnew Message( &quot;Original Message&quot; );\n      myMessage-&gt;AdministrationQueue = gcnew MessageQueue( &quot;.\\\\myAdministrationQueue&quot; );\n      myMessage-&gt;AcknowledgeType = (AcknowledgeTypes)(AcknowledgeTypes::PositiveReceive | AcknowledgeTypes::PositiveArrival);\n\n      // Send the Order to the queue.\n      myQueue-&gt;Send( myMessage );\n      return;\n   }\n\n   String^ ReceiveMessage()\n   {\n      // Connect to the a queue on the local computer.\n      MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\myQueue&quot; );\n      myQueue-&gt;MessageReadPropertyFilter-&gt;CorrelationId = true;\n      array&lt;Type^&gt;^p = gcnew array&lt;Type^&gt;(1);\n      p[ 0 ] = String::typeid;\n      myQueue-&gt;Formatter = gcnew XmlMessageFormatter( p );\n      String^ returnString = nullptr;\n      try\n      {\n         // Receive and format the message. \n         Message^ myMessage = myQueue-&gt;Receive();\n\n         // Display message information.\n         Console::WriteLine( &quot;____________________________________________&quot; );\n         Console::WriteLine( &quot;Original message information--&quot; );\n         Console::WriteLine( &quot;Body: {0}&quot;, myMessage-&gt;Body );\n         Console::WriteLine( &quot;Id: {0}&quot;, myMessage-&gt;Id );\n         Console::WriteLine( &quot;____________________________________________&quot; );\n         returnString = myMessage-&gt;Id;\n      }\n      catch ( MessageQueueException^ ) \n      {\n         // Handle Message Queuing exceptions.\n      }\n      // Handle invalid serialization format.\n      catch ( InvalidOperationException^ e ) \n      {\n         Console::WriteLine( e-&gt;Message );\n      }\n\n      // Catch other exceptions as necessary.\n      return returnString;\n   }\n\n   void ReceiveAcknowledgment( String^ messageId, String^ queuePath )\n   {\n      bool found = false;\n      MessageQueue^ queue = gcnew MessageQueue( queuePath );\n      queue-&gt;MessageReadPropertyFilter-&gt;CorrelationId = true;\n      queue-&gt;MessageReadPropertyFilter-&gt;Acknowledgment = true;\n      try\n      {\n         while ( queue-&gt;PeekByCorrelationId( messageId ) != nullptr )\n         {\n            Message^ myAcknowledgmentMessage = queue-&gt;ReceiveByCorrelationId( messageId );\n\n            // Output acknowledgment message information. The correlation Id is identical\n            // to the id of the original message.\n            Console::WriteLine( &quot;Acknowledgment Message Information--&quot; );\n            Console::WriteLine( &quot;Correlation Id: {0}&quot;, myAcknowledgmentMessage-&gt;CorrelationId );\n            Console::WriteLine( &quot;Id: {0}&quot;, myAcknowledgmentMessage-&gt;Id );\n            Console::WriteLine( &quot;Acknowledgment Type: {0}&quot;, myAcknowledgmentMessage-&gt;Acknowledgment );\n            Console::WriteLine( &quot;____________________________________________&quot; );\n            found = true;\n         }\n      }\n      catch ( InvalidOperationException^ e ) \n      {\n         // This exception would be thrown if there is no (further) acknowledgment message\n         // with the specified correlation Id. Only output a message if there are no messages;\n         // not if the loop has found at least one.\n         if ( found == false )\n         {\n            Console::WriteLine( e-&gt;Message );\n         }\n\n         // Handle other causes of invalid operation exception.\n      }\n\n   }\n\n};\n\nint main()\n{\n   // Create a new instance of the class.\n   MyNewQueue^ myNewQueue = gcnew MyNewQueue;\n\n   // Create new queues.\n   MyNewQueue::CreateQueue( &quot;.\\\\myQueue&quot; );\n   MyNewQueue::CreateQueue( &quot;.\\\\myAdministrationQueue&quot; );\n\n   // Send messages to a queue.\n   myNewQueue-&gt;SendMessage();\n\n   // Receive messages from a queue.\n   String^ messageId = myNewQueue-&gt;ReceiveMessage();\n\n   // Receive acknowledgment message.\n   if ( messageId != nullptr )\n   {\n      myNewQueue-&gt;ReceiveAcknowledgment( messageId, &quot;.\\\\myAdministrationQueue&quot; );\n   }\n\n   return 0;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Message.Acknowledgment#1\">Imports System\nImports System.Messaging\n\n\n&#39; Provides a container class for the example.\n\nPublic Class MyNewQueue\n   \n   \n\n   &#39; Provides an entry point into the application.       \n   &#39; This example sends and receives a message from\n   &#39; a queue.\n      \n   Public Shared Sub Main()\n         &#39; Create a new instance of the class.\n         Dim myNewQueue As New MyNewQueue()\n         \n         &#39; Create new queues.\n         CreateQueue(&quot;.\\myQueue&quot;)\n         CreateQueue(&quot;.\\myAdministrationQueue&quot;)\n         \n         &#39; Send messages to a queue.\n         myNewQueue.SendMessage()\n         \n         &#39; Receive messages from a queue.\n         Dim messageId As String = myNewQueue.ReceiveMessage()\n         \n         &#39; Receive acknowledgment message.\n         If Not (messageId Is Nothing) Then\n            myNewQueue.ReceiveAcknowledgment(messageId, &quot;.\\myAdministrationQueue&quot;)\n         End If\n         \n         Return\n   End Sub &#39;Main\n      \n      \n      &#39; Creates a new queue.\n\n   Public Shared Sub CreateQueue(queuePath As String)\n         Try\n            If Not MessageQueue.Exists(queuePath) Then\n               MessageQueue.Create(queuePath)\n            Else\n               Console.WriteLine((queuePath + &quot; already exists.&quot;))\n            End If\n         Catch e As MessageQueueException\n            Console.WriteLine(e.Message)\n         End Try\n   End Sub &#39;CreateQueue\n       \n      \n      \n \n      &#39; Sends a string message to a queue.\n \n   Public Sub SendMessage()\n         \n         &#39; Connect to a queue on the local computer.\n         Dim myQueue As New MessageQueue(&quot;.\\myQueue&quot;)\n         \n         &#39; Create a new message.\n         Dim myMessage As New Message(&quot;Original Message&quot;)\n         \n         myMessage.AdministrationQueue = New MessageQueue(&quot;.\\myAdministrationQueue&quot;)\n         myMessage.AcknowledgeType = AcknowledgeTypes.PositiveReceive Or AcknowledgeTypes.PositiveArrival\n         \n         &#39; Send the Order to the queue.\n         myQueue.Send(myMessage)\n         \n         Return\n   End Sub &#39;SendMessage\n      \n      \n      \n \n      &#39; Receives a message containing an Order.\n \n   Public Function ReceiveMessage() As String\n         &#39; Connect to the a queue on the local computer.\n         Dim myQueue As New MessageQueue(&quot;.\\myQueue&quot;)\n         \n         myQueue.MessageReadPropertyFilter.CorrelationId = True\n         \n         \n         &#39; Set the formatter to indicate body contains an Order.\n         myQueue.Formatter = New XmlMessageFormatter(New Type() {GetType(String)})\n         \n         Dim returnString As String = Nothing\n         \n         Try\n            &#39; Receive and format the message. \n            Dim myMessage As Message = myQueue.Receive()\n            \n            \n            &#39; Display message information.\n            Console.WriteLine(&quot;____________________________________________&quot;)\n            Console.WriteLine(&quot;Original message information--&quot;)\n            Console.WriteLine((&quot;Body: &quot; + myMessage.Body.ToString()))\n            Console.WriteLine((&quot;Id: &quot; + myMessage.Id.ToString()))\n            Console.WriteLine(&quot;____________________________________________&quot;)\n            \n            returnString = myMessage.Id\n         \n         \n                  \n         &#39; Handle invalid serialization format.\n         Catch e As InvalidOperationException\n            Console.WriteLine(e.Message)\n         End Try\n         \n         &#39; Catch other exceptions as necessary.\n         Return returnString\n   End Function &#39;ReceiveMessage\n      \n      \n \n      &#39; Receives a message containing an Order.\n \n   Public Sub ReceiveAcknowledgment(messageId As String, queuePath As String)\n         Dim found As Boolean = False\n         Dim queue As New MessageQueue(queuePath)\n         queue.MessageReadPropertyFilter.CorrelationId = True\n         queue.MessageReadPropertyFilter.Acknowledgment = True\n         \n         Try\n            While Not (queue.PeekByCorrelationId(messageId) Is Nothing)\n               Dim myAcknowledgmentMessage As Message = queue.ReceiveByCorrelationId(messageId)\n               \n               &#39; Output acknowledgment message information. The correlation Id is identical\n               &#39; to the id of the original message.\n               Console.WriteLine(&quot;Acknowledgment Message Information--&quot;)\n               Console.WriteLine((&quot;Correlation Id: &quot; + myAcknowledgmentMessage.CorrelationId.ToString()))\n               Console.WriteLine((&quot;Id: &quot; + myAcknowledgmentMessage.Id.ToString()))\n               Console.WriteLine((&quot;Acknowledgment Type: &quot; + myAcknowledgmentMessage.Acknowledgment.ToString()))\n               Console.WriteLine(&quot;____________________________________________&quot;)\n               \n               found = True\n            End While\n         Catch e As InvalidOperationException\n            &#39; This exception would be thrown if there is no (further) acknowledgment message\n            &#39; with the specified correlation Id. Only output a message if there are no messages;\n            &#39; not if the loop has found at least one.\n            If found = False Then\n               Console.WriteLine(e.Message)\n            End If\n         End Try \n   End Sub &#39;ReceiveAcknowledgment &#39; Handle other causes of invalid operation exception.\n End Class &#39;MyNewQueue\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The AcknowledgeTypes class provides a set of flags that you can combine to request one or more categories of acknowledgment messages.  </p>\n<p> When an application sends a message, it can request that Message Queuing return acknowledgment messages indicating the success or failure of the original message. Message Queuing sends these acknowledgment messages to the administration queue you specify. Acknowledgment types can be divided broadly into four groups: positive arrival acknowledgments, positive read acknowledgments, negative arrival acknowledgments, and negative read acknowledgments. Requesting acknowledgments enables your application to receive notification of certain occurrences—for example, a message reaching its destination queue, a message being retrieved, or a time-out preventing a message from reaching or being retrieved from the destination queue.  </p>\n<p> When you are using the <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> class to send messages to a queue, you specify the types of acknowledgments your application should receive in the <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_AcknowledgeType_\" data-linktype=\"relative-path\">AcknowledgeType</a> property, as well as the administration queue that receives the acknowledgment messages in the <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_AdministrationQueue_\" data-linktype=\"relative-path\">AdministrationQueue</a> property.  </p>\n<p> When you use the <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> class to read acknowledgment messages in the administration queue, the instance&#39;s <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_Acknowledgment_\" data-linktype=\"relative-path\">Acknowledgment</a> property indicates the condition responsible for the acknowledgment message, for example, if a time-out expired before the original message was read from the queue.</p>\n\r\n  \r\n      \t<h2 class=\"accented\">Fields\r\n      </h2>\r\n      <table class=\"nameValue\">\r\n      \t<tr><td id=\"System_Messaging_AcknowledgeTypes_FullReachQueue\">\r\n      \t\t\t<span class=\"lang-csharp\">FullReachQueue</span>\r\n      \t</td>\r\n      \t<td><p>A mask used to request positive acknowledgment if the original message reaches the queue or negative acknowledgment if the time-to-reach-queue timer expires or if the original message cannot be authenticated.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Messaging_AcknowledgeTypes_FullReceive\">\r\n      \t\t\t<span class=\"lang-csharp\">FullReceive</span>\r\n      \t</td>\r\n      \t<td><p>A mask used to request positive acknowledgment if the original message is received from the queue before its time-to-be-received timer expires or negative acknowledgment otherwise.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Messaging_AcknowledgeTypes_NegativeReceive\">\r\n      \t\t\t<span class=\"lang-csharp\">NegativeReceive</span>\r\n      \t</td>\r\n      \t<td><p>A mask used to request a negative acknowledgment when the original message fails to be received from the queue.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Messaging_AcknowledgeTypes_None\">\r\n      \t\t\t<span class=\"lang-csharp\">None</span>\r\n      \t</td>\r\n      \t<td><p>A mask used to request that no acknowledgment messages (positive or negative) be posted.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Messaging_AcknowledgeTypes_NotAcknowledgeReachQueue\">\r\n      \t\t\t<span class=\"lang-csharp\">NotAcknowledgeReachQueue</span>\r\n      \t</td>\r\n      \t<td><p>A mask used to request a negative acknowledgment when the original message cannot reach the queue. This can happen when the time-to-reach-queue timer expires or if a message cannot be authenticated.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Messaging_AcknowledgeTypes_NotAcknowledgeReceive\">\r\n      \t\t\t<span class=\"lang-csharp\">NotAcknowledgeReceive</span>\r\n      \t</td>\r\n      \t<td><p>A mask used to request a negative acknowledgment when an error occurs that prevents the original message from being received from the queue before its time-to-be-received timer expires.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Messaging_AcknowledgeTypes_PositiveArrival\">\r\n      \t\t\t<span class=\"lang-csharp\">PositiveArrival</span>\r\n      \t</td>\r\n      \t<td><p>A mask used to request a positive acknowledgment when the original message reaches the queue.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Messaging_AcknowledgeTypes_PositiveReceive\">\r\n      \t\t\t<span class=\"lang-csharp\">PositiveReceive</span>\r\n      \t</td>\r\n      \t<td><p>A mask used to request a positive acknowledgment when the original message is successfully retrieved from the queue.</p>\n</td>\r\n      \t</tr>\r\n      </table>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Messaging.AcknowledgeTypes.yml\">\r\n<meta name=\"APIName\" content=\"System.Messaging.AcknowledgeTypes\">\r\n<meta name=\"APIName\" content=\"System.Messaging.AcknowledgeTypes.FullReachQueue\">\r\n<meta name=\"APIName\" content=\"System.Messaging.AcknowledgeTypes.FullReceive\">\r\n<meta name=\"APIName\" content=\"System.Messaging.AcknowledgeTypes.NegativeReceive\">\r\n<meta name=\"APIName\" content=\"System.Messaging.AcknowledgeTypes.None\">\r\n<meta name=\"APIName\" content=\"System.Messaging.AcknowledgeTypes.NotAcknowledgeReachQueue\">\r\n<meta name=\"APIName\" content=\"System.Messaging.AcknowledgeTypes.NotAcknowledgeReceive\">\r\n<meta name=\"APIName\" content=\"System.Messaging.AcknowledgeTypes.PositiveArrival\">\r\n<meta name=\"APIName\" content=\"System.Messaging.AcknowledgeTypes.PositiveReceive\">\r\n<meta name=\"APILocation\" content=\"System.Messaging.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 02:21 PM\">\r\n<meta name=\"document_id\" content=\"993671be-9894-8e3d-2a88-180881d4c1b8\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Specifies the types of acknowledgment message that Message Queuing returns to the sending application.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.messaging/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Messaging.AcknowledgeTypes\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Messaging.AcknowledgeTypes.yml","open_to_public_contributors":false,"api_name":["System.Messaging.AcknowledgeTypes","System.Messaging.AcknowledgeTypes.FullReachQueue","System.Messaging.AcknowledgeTypes.FullReceive","System.Messaging.AcknowledgeTypes.NegativeReceive","System.Messaging.AcknowledgeTypes.None","System.Messaging.AcknowledgeTypes.NotAcknowledgeReachQueue","System.Messaging.AcknowledgeTypes.NotAcknowledgeReceive","System.Messaging.AcknowledgeTypes.PositiveArrival","System.Messaging.AcknowledgeTypes.PositiveReceive"],"api_location":["System.Messaging.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Messaging.AcknowledgeTypes","System::Messaging::AcknowledgeTypes","System.Messaging.AcknowledgeTypes.FullReachQueue","System::Messaging::AcknowledgeTypes::FullReachQueue","System.Messaging.AcknowledgeTypes.FullReceive","System::Messaging::AcknowledgeTypes::FullReceive","System.Messaging.AcknowledgeTypes.NegativeReceive","System::Messaging::AcknowledgeTypes::NegativeReceive","System.Messaging.AcknowledgeTypes.None","System::Messaging::AcknowledgeTypes::None","System.Messaging.AcknowledgeTypes.NotAcknowledgeReachQueue","System::Messaging::AcknowledgeTypes::NotAcknowledgeReachQueue","System.Messaging.AcknowledgeTypes.NotAcknowledgeReceive","System::Messaging::AcknowledgeTypes::NotAcknowledgeReceive","System.Messaging.AcknowledgeTypes.PositiveArrival","System::Messaging::AcknowledgeTypes::PositiveArrival","System.Messaging.AcknowledgeTypes.PositiveReceive","System::Messaging::AcknowledgeTypes::PositiveReceive"],"dev_langs":["csharp"],"updated_at":"2017-03-31 02:21 PM","document_id":"993671be-9894-8e3d-2a88-180881d4c1b8","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Messaging/AcknowledgeTypes.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"AcknowledgeTypes enum | Microsoft Docs","_op_ogTitle":"AcknowledgeTypes enum","description":"Specifies the types of acknowledgment message that Message Queuing returns to the sending application.\n","toc_asset_id":"api/_splitted/System.Messaging/toc.json","toc_rel":"_splitted/System.Messaging/toc.json","source_url":"","ms.assetid":"System.Messaging.AcknowledgeTypes","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.messaging.acknowledgetypes","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.messaging.acknowledgetypes","fileRelativePath":"api/System.Messaging.AcknowledgeTypes.html"},"themesRelativePathToOutputRoot":"_themes/"}