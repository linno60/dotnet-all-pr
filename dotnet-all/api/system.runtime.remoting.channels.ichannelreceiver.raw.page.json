{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">IChannelReceiver</span>\r\n      Interface\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Provides required functions and properties for the receiver channels.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic interface IChannelReceiver : System.Runtime.Remoting.Channels.IChannel</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<pre><code class=\"lang-cpp\" name=\"IChannelReceiver_StartListening_ChannelData#1\">ref class MyCustomChannel: public IChannelReceiver\n{\nprivate:\n   ChannelDataStore^ myChannelData;\n   int myChannelPriority;\n\n   // Set the &#39;ChannelName&#39; to &#39;MyCustomChannel&#39;.\n   String^ myChannelName;\n\n   // Implement &#39;ChannelName&#39; property.\n   TcpListener^ myTcpListener;\n   int myPortNo;\n   bool myListening;\n   Thread^ myThread;\n\npublic:\n   MyCustomChannel()\n      : myChannelPriority( 25 ), myChannelName( &quot;tcp&quot; ), myListening( false )\n   {}\n\n   MyCustomChannel( int portNo )\n   {\n      myPortNo = portNo;\n      array&lt;String^&gt;^myURI = gcnew array&lt;String^&gt;(1);\n      myURI[ 0 ] = String::Concat( Dns::Resolve( Dns::GetHostName() )-&gt;AddressList[ 0 ], &quot;:&quot;, portNo );\n\n      // Store the &#39;URI&#39; in &#39;myChannelDataStore&#39;.\n      myChannelData = gcnew ChannelDataStore( myURI );\n\n      // Create &#39;myTcpListener&#39; to listen at the &#39;myPortNo&#39; port.\n      myTcpListener = gcnew TcpListener( myPortNo );\n\n      // Create the thread &#39;myThread&#39;.\n      myThread = gcnew Thread( gcnew ThreadStart( myTcpListener, &amp;TcpListener::Start ) );\n      this-&gt;StartListening( nullptr );\n   }\n\n   property String^ ChannelName \n   {\n      virtual String^ get()\n      {\n         return myChannelName;\n      }\n   }\n\n   property int ChannelPriority \n   {\n      virtual int get()\n      {\n         return myChannelPriority;\n      }\n   }\n   virtual String^ Parse( String^ myUrl, [Out]String^% objectURI )\n   {\n      Regex^ myRegex = gcnew Regex( &quot;/&quot;,RegexOptions::RightToLeft );\n      \n      // Check for &#39;/&#39; in &#39;myUrl&#39; from Right to left.\n      Match^ myMatch = myRegex-&gt;Match(myUrl);\n      \n      // Get the object URI.\n      objectURI = myUrl-&gt;Substring( myMatch-&gt;Index );\n      \n      // Return the channel url.\n      return myUrl-&gt;Substring( 0, myMatch-&gt;Index );\n   }\n\n   // Implementation of &#39;IChannelReceiver&#39; interface.\n   property Object^ ChannelData \n   {\n      virtual Object^ get()\n      {\n         return myChannelData;\n      }\n   }\n\n   // Create and send the object URL.\n   virtual array&lt;String^&gt;^ GetUrlsForUri( String^ objectURI )\n   {\n      array&lt;String^&gt;^myString = gcnew array&lt;String^&gt;(1);\n      myString[ 0 ] = String::Concat( Dns::Resolve( Dns::GetHostName() )-&gt;AddressList[ 0 ], &quot;/&quot;, objectURI );\n      return myString;\n   }\n\n   // Start listening to the port.\n   virtual void StartListening( Object^ data )\n   {\n      if ( myListening == false )\n      {\n         myTcpListener-&gt;Start();\n         myListening = true;\n         Console::WriteLine( &quot;Server Started Listening !!!&quot; );\n      }\n   }\n\n   // Stop listening to the port.\n   virtual void StopListening( Object^ data )\n   {\n      if ( myListening == true )\n      {\n         myTcpListener-&gt;Stop();\n         myListening = false;\n         Console::WriteLine( &quot;Server Stopped Listening !!!&quot; );\n      }\n   }\n};\n</code></pre><pre><code class=\"lang-cs\" name=\"IChannelReceiver_StartListening_ChannelData#1\">class MyCustomChannel : IChannelReceiver\n{\n   private ChannelDataStore myChannelData;\n   private int myChannelPriority = 25;\n   // Set the &#39;ChannelName&#39; to &#39;MyCustomChannel&#39;.\n   private string myChanneName = &quot;tcp&quot;;\n   // Implement &#39;ChannelName&#39; property.\n   private TcpListener myTcpListener;\n   private int myPortNo;\n   private bool myListening = false;\n   private Thread myThread;\n   public MyCustomChannel(int portNo)\n   {  \n      myPortNo = portNo;\n      string [] myURI = new string[1];\n      myURI[0] = Dns.Resolve(Dns.GetHostName()).AddressList[0] + &quot;:&quot; +\n                                                         portNo.ToString();\n      // Store the &#39;URI&#39; in &#39;myChannelDataStore&#39;.\n      myChannelData = new ChannelDataStore(myURI);\n      // Create &#39;myTcpListener&#39; to listen at the &#39;myPortNo&#39; port.\n      myTcpListener = new TcpListener(myPortNo);\n      // Create the thread &#39;myThread&#39;.\n      myThread = new Thread(new ThreadStart(myTcpListener.Start));\n      this.StartListening(null);\n   }\n   public string ChannelName\n   {\n      get\n      {\n         return myChanneName;\n      }\n   }\n   public int ChannelPriority\n   {\n      get\n      {\n         return myChannelPriority;\n      }\n   }\n   public string Parse(string myUrl, out string objectURI)\n   {\n      Regex myRegex = new Regex(&quot;/&quot;,RegexOptions.RightToLeft);\n      // Check for &#39;/&#39; in &#39;myUrl&#39; from Right to left.\n      Match myMatch = myRegex.Match(myUrl);\n      // Get the object URI.\n      objectURI = myUrl.Substring(myMatch.Index);\n      // Return the channel url.\n      return myUrl.Substring(0,myMatch.Index);   \n   }\n   // Implementation of &#39;IChannelReceiver&#39; interface.\n   public object ChannelData\n   {\n      get\n      {\n         return myChannelData;\n      }\n   }\n\n   // Create and send the object URL.\n   public string[] GetUrlsForUri(string objectURI)\n   {\n      string[] myString = new string[1];\n      myString[0] = Dns.Resolve(Dns.GetHostName()).AddressList[0]\n                                                         + &quot;/&quot; + objectURI;\n      return myString;\n   }\n\n   // Start listening to the port.\n   public void StartListening(object data)\n   {\n      if(myListening == false)\n      {\n         myTcpListener.Start();\n         myListening = true;\n         Console.WriteLine(&quot;Server Started Listening !!!&quot;);\n      }\n   }\n\n   // Stop listening to the port.\n   public void StopListening(object data)\n   {\n      if(myListening == true)\n      {\n         myTcpListener.Stop();\n         myListening = false;\n         Console.WriteLine(&quot;Server Stopped Listening !!!&quot;);\n      }\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"IChannelReceiver_StartListening_ChannelData#1\">Class MyCustomChannel\n      Implements IChannelReceiver \n      Private myChannelData As ChannelDataStore\n      Private myChannelPriority As Integer = 25\n      &#39; Set the &#39;ChannelName&#39; to &#39;MyCustomChannel&#39;.\n      Private myChanneName As String = &quot;tcp&quot;\n      &#39; Implement &#39;ChannelName&#39; property.\n      Private myTcpListener As TcpListener\n      Private myPortNo As Integer\n      Private myListening As Boolean = False\n      Private myThread As Thread\n\n      Public Sub New(ByVal portNo As Integer)\n         myPortNo = portNo\n      Dim myURI(0) As String\n      myURI(0) = Dns.Resolve(Dns.GetHostName()).AddressList(0).ToString() + &quot;:&quot; + _\n                                                                  portNo.ToString()\n      &#39; Store the &#39;URI&#39; in &#39;myChannelDataStore&#39;.\n      myChannelData = New ChannelDataStore(myURI)\n      &#39; Create &#39;myTcpListener&#39; to listen at the &#39;myPortNo&#39; port.\n      myTcpListener = New TcpListener(myPortNo)\n      &#39; Create the thread &#39;myThread&#39;.\n      myThread = New Thread(New ThreadStart(AddressOf myTcpListener.Start))\n      Me.StartListening(Nothing)\n      End Sub &#39;New\n\n      Public ReadOnly Property ChannelName() As String Implements IChannelReceiver.ChannelName\n      Get\n         Return myChanneName\n      End Get\n      End Property\n\n      Public ReadOnly Property ChannelPriority() As Integer _\n                                          Implements IChannelReceiver.ChannelPriority\n      Get\n         Return myChannelPriority\n      End Get\n      End Property\n\n      Public Function Parse(ByVal myUrl As String, ByRef objectURI As String) As String _\n                                                      Implements IChannelReceiver.Parse\n      Dim myRegex As New Regex(&quot;/&quot;, RegexOptions.RightToLeft)\n      &#39; Check for &#39;/&#39; in &#39;myUrl&#39; from Right to left.\n      Dim myMatch As Match = myRegex.Match(myUrl)\n      &#39; Get the object URI.\n      objectURI = myUrl.Substring(myMatch.Index)\n      &#39; Return the channel url.\n      Return myUrl.Substring(0, myMatch.Index)\n      End Function &#39;Parse\n      &#39; Implementation of &#39;IChannelReceiver&#39; interface.\n\n   Public ReadOnly Property ChannelData() As Object Implements IChannelReceiver.ChannelData\n      Get\n         Return myChannelData\n      End Get\n   End Property\n\n   &#39; Create and send the object URL.\n   Public Function GetUrlsForUri(ByVal objectURI As String) As String() _\n                                             Implements IChannelReceiver.GetUrlsForUri\n      Dim myString(0) As String\n      myString(0) = Dns.Resolve(Dns.GetHostName()).AddressList(0).ToString() + &quot;/&quot; + objectURI\n      Return myString\n   End Function &#39;GetUrlsForUri\n\n   &#39; Start listening to the port.\n   Public Sub StartListening(ByVal data As Object) Implements IChannelReceiver.StartListening\n      If myListening = False Then\n          myTcpListener.Start()\n          myListening = True\n          Console.WriteLine(&quot;Server Started Listening !!!&quot;)\n      End If\n   End Sub &#39;StartListening\n\n   &#39; Stop listening to the port.\n   Public Sub StopListening(ByVal data As Object) Implements IChannelReceiver.StopListening\n      If myListening = True Then\n          myTcpListener.Stop()\n          myListening = False\n          Console.WriteLine(&quot;Server Stopped Listening !!!&quot;)\n      End If\n   End Sub &#39;StopListening\nEnd Class &#39;MyCustomChannel \n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The receiving side of channels must expose the IChannelReceiver interface.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Runtime_Remoting_Channels_IChannelReceiver_ChannelData\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ChannelData</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the channel-specific data.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public object ChannelData { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The channel data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The immediate caller does not have infrastructure permission.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This property is used when <a class=\"xref\" href=\"system.runtime.remoting.remotingservices#System_Runtime_Remoting_RemotingServices_Marshal_\" data-linktype=\"relative-path\">Marshal</a> is called and a <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> is created.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Runtime_Remoting_Channels_IChannelReceiver_GetUrlsForUri_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetUrlsForUri(String)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns an array of all the URLs for a URI.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string[] GetUrlsForUri (string objectURI);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>objectURI</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The URI for which URLs are required.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>An array of the URLs.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The immediate caller does not have infrastructure permission.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method is used by the <a class=\"xref\" href=\"system.runtime.remoting.channels.channelservices#System_Runtime_Remoting_Channels_ChannelServices_GetUrlsForObject_\" data-linktype=\"relative-path\">GetUrlsForObject</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Runtime_Remoting_Channels_IChannelReceiver_StartListening_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">StartListening(Object)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Instructs the current channel to start listening for requests.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void StartListening (object data);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>data</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Optional initialization information.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The immediate caller does not have infrastructure permission.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The data object can be used to pass specific initialization state to the channel.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Runtime_Remoting_Channels_IChannelReceiver_StopListening_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">StopListening(Object)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Instructs the current channel to stop listening for requests.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void StopListening (object data);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>data</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Optional state information for the channel.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The immediate caller does not have infrastructure permission.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The data object can be used to pass the specific state to the channel.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Runtime.Remoting.Channels.IChannelReceiver.yml\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.Channels.IChannelReceiver\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.Channels.IChannelReceiver.ChannelData\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.Channels.IChannelReceiver.GetUrlsForUri\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.Channels.IChannelReceiver.StartListening\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.Channels.IChannelReceiver.StopListening\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-29 05:54 AM\">\r\n<meta name=\"document_id\" content=\"31d0a3b4-5bdf-7251-1c1c-6336df4b6905\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides required functions and properties for the receiver channels.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.runtime.remoting.channels/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Runtime.Remoting.Channels.IChannelReceiver\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Runtime.Remoting.Channels.IChannelReceiver.yml","open_to_public_contributors":false,"api_name":["System.Runtime.Remoting.Channels.IChannelReceiver","System.Runtime.Remoting.Channels.IChannelReceiver.ChannelData","System.Runtime.Remoting.Channels.IChannelReceiver.GetUrlsForUri","System.Runtime.Remoting.Channels.IChannelReceiver.StartListening","System.Runtime.Remoting.Channels.IChannelReceiver.StopListening"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Runtime.Remoting.Channels.IChannelReceiver","System::Runtime::Remoting::Channels::IChannelReceiver","System.Runtime.Remoting.Channels.IChannelReceiver.ChannelData","System::Runtime::Remoting::Channels::IChannelReceiver::ChannelData","System.Runtime.Remoting.Channels.IChannelReceiver.GetUrlsForUri","System::Runtime::Remoting::Channels::IChannelReceiver::GetUrlsForUri","System.Runtime.Remoting.Channels.IChannelReceiver.StartListening","System::Runtime::Remoting::Channels::IChannelReceiver::StartListening","System.Runtime.Remoting.Channels.IChannelReceiver.StopListening","System::Runtime::Remoting::Channels::IChannelReceiver::StopListening"],"dev_langs":["csharp"],"updated_at":"2017-03-29 05:54 AM","document_id":"31d0a3b4-5bdf-7251-1c1c-6336df4b6905","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Runtime.Remoting.Channels/IChannelReceiver.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IChannelReceiver interface | Microsoft Docs","_op_ogTitle":"IChannelReceiver interface","description":"Provides required functions and properties for the receiver channels.\n","toc_asset_id":"api/_splitted/System.Runtime.Remoting.Channels/toc.json","toc_rel":"_splitted/System.Runtime.Remoting.Channels/toc.json","source_url":"","ms.assetid":"System.Runtime.Remoting.Channels.IChannelReceiver","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.runtime.remoting.channels.ichannelreceiver","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.runtime.remoting.channels.ichannelreceiver","fileRelativePath":"api/System.Runtime.Remoting.Channels.IChannelReceiver.html"},"themesRelativePathToOutputRoot":"_themes/"}