{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">ILogger</span>\r\n      Interface\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Defines an MSBuild logger, which subscribes to build system events.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic interface ILogger</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Attributes</dt><dd>\r\n  \t\t<div class=\"cdlHolder\">\r\n  \t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example shows how to write a basic logger.  </p>\n<pre><code class=\"lang-cs\" name=\"msbuild_BasicLogger#1\">using System;\nusing System.IO;\nusing System.Security;\nusing Microsoft.Build.Framework;\nusing Microsoft.Build.Utilities;\n\nnamespace MyLoggers\n{\n\t// This logger will derive from the Microsoft.Build.Utilities.Logger class,\n\t// which provides it with getters and setters for Verbosity and Parameters,\n\t// and a default empty Shutdown() implementation.\n\tpublic class BasicFileLogger : Logger\n\t{\n\t\t/// &lt;summary&gt;\n\t\t/// Initialize is guaranteed to be called by MSBuild at the start of the build\n\t\t/// before any events are raised.\n\t\t/// &lt;/summary&gt;\n\t\tpublic override void Initialize(IEventSource eventSource)\n\t\t{\n\t\t\t// The name of the log file should be passed as the first item in the\n\t\t\t// &quot;parameters&quot; specification in the /logger switch.  It is required\n\t\t\t// to pass a log file to this logger. Other loggers may have zero or more than \n\t\t\t// one parameters.\n\t\t\tif (null == Parameters)\n\t\t\t{\n\t\t\t\tthrow new LoggerException(&quot;Log file was not set.&quot;);\n\t\t\t}\n\t\t\tstring[] parameters = Parameters.Split(&#39;;&#39;);\n\t\t\t\n\t\t\tstring logFile = parameters[0];\n\t\t\tif (String.IsNullOrEmpty(logFile))\n\t\t\t{\n\t\t\t\tthrow new LoggerException(&quot;Log file was not set.&quot;);\n\t\t\t}\n\t\t\t\n\t\t\tif (parameters.Length &gt; 1)\n\t\t\t{\n\t\t\t\tthrow new LoggerException(&quot;Too many parameters passed.&quot;);\n\t\t\t}\n\t\t\t\n\t\t\ttry\n\t\t\t{\n\t\t\t\t// Open the file\n\t\t\t\tthis.streamWriter = new StreamWriter(logFile);\n\t\t\t}\n\t\t\tcatch (Exception ex)\n\t\t\t{\n\t\t\t\tif\n\t\t\t\t(\n\t\t\t\t\tex is UnauthorizedAccessException\n\t\t\t\t\t|| ex is ArgumentNullException\n\t\t\t\t\t|| ex is PathTooLongException\n\t\t\t\t\t|| ex is DirectoryNotFoundException\n\t\t\t\t\t|| ex is NotSupportedException\n\t\t\t\t\t|| ex is ArgumentException\n\t\t\t\t\t|| ex is SecurityException\n\t\t\t\t\t|| ex is IOException\n\t\t\t\t)\n\t\t\t\t{\n\t\t\t\t\tthrow new LoggerException(&quot;Failed to create log file: &quot; + ex.Message);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// Unexpected failure\n\t\t\t\t\tthrow;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// For brevity, we&#39;ll only register for certain event types. Loggers can also\n\t\t\t// register to handle TargetStarted/Finished and other events.\n\t\t\teventSource.ProjectStarted += new ProjectStartedEventHandler(eventSource_ProjectStarted);\n\t\t\teventSource.TaskStarted += new TaskStartedEventHandler(eventSource_TaskStarted);\n\t\t\teventSource.MessageRaised += new BuildMessageEventHandler(eventSource_MessageRaised);\n\t\t\teventSource.WarningRaised += new BuildWarningEventHandler(eventSource_WarningRaised);\n\t\t\teventSource.ErrorRaised += new BuildErrorEventHandler(eventSource_ErrorRaised);\n\t\t\teventSource.ProjectFinished += new ProjectFinishedEventHandler(eventSource_ProjectFinished);\n\t\t}\n\n\t\tvoid eventSource_ErrorRaised(object sender, BuildErrorEventArgs e)\n\t\t{\n\t\t\t// BuildErrorEventArgs adds LineNumber, ColumnNumber, File, amongst other parameters\n\t\t\tstring line = String.Format(&quot;: ERROR {0}({1},{2}): &quot;, e.File, e.LineNumber, e.ColumnNumber);\n\t\t\tWriteLineWithSenderAndMessage(line, e);\n\t\t}\n\t\t\n\t\tvoid eventSource_WarningRaised(object sender, BuildWarningEventArgs e)\n\t\t{\n\t\t\t// BuildWarningEventArgs adds LineNumber, ColumnNumber, File, amongst other parameters\n\t\t\tstring line = String.Format(&quot;: Warning {0}({1},{2}): &quot;, e.File, e.LineNumber, e.ColumnNumber);\n\t\t\tWriteLineWithSenderAndMessage(line, e);\n\t\t}\n\n\t\tvoid eventSource_MessageRaised(object sender, BuildMessageEventArgs e)\n\t\t{\n\t\t\t// BuildMessageEventArgs adds Importance to BuildEventArgs\n\t\t\t// Let&#39;s take account of the verbosity setting we&#39;ve been passed in deciding whether to log the message\n\t\t\tif ((e.Importance == MessageImportance.High &amp;&amp; IsVerbosityAtLeast(LoggerVerbosity.Minimal))\n\t\t\t\t|| (e.Importance == MessageImportance.Normal &amp;&amp; IsVerbosityAtLeast(LoggerVerbosity.Normal))\n\t\t\t\t|| (e.Importance == MessageImportance.Low &amp;&amp; IsVerbosityAtLeast(LoggerVerbosity.Detailed))\t\t\t\t\n\t\t\t\t)\n\t\t\t{\n\t\t\t\tWriteLineWithSenderAndMessage(String.Empty, e);\n\t\t\t}\n\t\t}\n\n\t\tvoid eventSource_TaskStarted(object sender, TaskStartedEventArgs e)\n\t\t{\n\t\t\t// TaskStartedEventArgs adds ProjectFile, TaskFile, TaskName\n\t\t\t// To keep this log clean, this logger will ignore these events.\n\t\t}\n\t\t\n\t\tvoid eventSource_ProjectStarted(object sender, ProjectStartedEventArgs e)\n\t\t{\n\t\t\t// ProjectStartedEventArgs adds ProjectFile, TargetNames\n\t\t\t// Just the regular message string is good enough here, so just display that.\n\t\t\tWriteLine(String.Empty, e);\n\t\t\tindent++;\n\t\t}\n\n\t\tvoid eventSource_ProjectFinished(object sender, ProjectFinishedEventArgs e)\n\t\t{\n\t\t\t// The regular message string is good enough here too.\n\t\t\tindent--;\n\t\t\tWriteLine(String.Empty, e);\n\t\t}\n\t\t\n\t\t/// &lt;summary&gt;\n\t\t/// Write a line to the log, adding the SenderName and Message\n\t\t/// (these parameters are on all MSBuild event argument objects)\n\t\t/// &lt;/summary&gt;\n\t\tprivate void WriteLineWithSenderAndMessage(string line, BuildEventArgs e)\n\t\t{\n\t\t\tif (0 == String.Compare(e.SenderName, &quot;MSBuild&quot;, true /*ignore case*/))\n\t\t\t{\n\t\t\t\t// Well, if the sender name is MSBuild, let&#39;s leave it out for prettiness\n\t\t\t\tWriteLine(line, e);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tWriteLine(e.SenderName + &quot;: &quot; + line, e);\n\t\t\t}\n\t\t}\n\t\t\n\t\t/// &lt;summary&gt;\n\t\t/// Just write a line to the log\n\t\t/// &lt;/summary&gt;\n\t\tprivate void WriteLine(string line, BuildEventArgs e)\n\t\t{\n\t\t\tfor (int i = indent; i &gt; 0; i--)\n\t\t\t{\n\t\t\t\tstreamWriter.Write(&quot;\\t&quot;);\n\t\t\t}\n\t\t\tstreamWriter.WriteLine(line + e.Message);\n\t\t}\n\t\t\n\t\t/// &lt;summary&gt;\n\t\t/// Shutdown() is guaranteed to be called by MSBuild at the end of the build, after all \n\t\t/// events have been raised.\n\t\t/// &lt;/summary&gt;\n\t\tpublic override void Shutdown()\n\t\t{\n\t\t\t// Done logging, let go of the file\n\t\t\tstreamWriter.Close();\n\t\t}\n\n\t\tprivate StreamWriter streamWriter;\n\t\tprivate int indent;\n\t}\n}\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>All logger classes must implement this interface to be recognized by the MSBuild engine.  </p>\n<p> Instead of implementing this interface directly, you can also derive your class from the helper class, <a class=\"xref\" href=\"microsoft.build.utilities.logger\" data-linktype=\"relative-path\">Logger</a>, which provides default implementations of some ILogger members.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"Microsoft_Build_Framework_ILogger_Parameters_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_Build_Framework_ILogger_Parameters\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Parameters</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets the user-defined parameters of the logger.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string Parameters { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The logger parameters.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Parameters may be represented in this property in any format. For example, to represent two parameters and values, you could use the string &quot;parameter1=value1;parameter2=value2&quot;.  </p>\n<p> This property can be a null reference (<code>Nothing</code> in Visual Basic).</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"Microsoft_Build_Framework_ILogger_Verbosity_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_Build_Framework_ILogger_Verbosity\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Verbosity</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets the level of detail to show in the event log.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public Microsoft.Build.Framework.LoggerVerbosity Verbosity { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.build.framework.loggerverbosity\" data-linktype=\"relative-path\">LoggerVerbosity</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>One of the enumeration values. The default is <a class=\"xref\" href=\"microsoft.build.framework.loggerverbosity\" data-linktype=\"relative-path\">LoggerVerbosity</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>While a logger is free to choose the events it logs, following the verbosity guidelines creates a consistent user experience.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"Microsoft_Build_Framework_ILogger_Initialize_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_Build_Framework_ILogger_Initialize_Microsoft_Build_Framework_IEventSource_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Initialize(IEventSource)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Subscribes loggers to specific events. This method is called when the logger is registered with the build engine, before any events are raised.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void Initialize (Microsoft.Build.Framework.IEventSource eventSource);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>eventSource</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.build.framework.ieventsource\" data-linktype=\"relative-path\">IEventSource</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The events available to loggers.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"Microsoft_Build_Framework_ILogger_Shutdown_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_Build_Framework_ILogger_Shutdown\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Shutdown()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Releases the resources allocated to the logger at the time of initialization or during the build. This method is called when the logger is unregistered from the engine, after all events are raised. A host of MSBuild typically unregisters loggers immediately before quitting.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void Shutdown ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"uhfHeaderId\" content=\"MSDocsHeader-DotNet\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/Microsoft.Build.Framework.ILogger.yml\">\r\n<meta name=\"APIName\" content=\"Microsoft.Build.Framework.ILogger\">\r\n<meta name=\"APIName\" content=\"Microsoft.Build.Framework.ILogger.Initialize\">\r\n<meta name=\"APIName\" content=\"Microsoft.Build.Framework.ILogger.Parameters\">\r\n<meta name=\"APIName\" content=\"Microsoft.Build.Framework.ILogger.Shutdown\">\r\n<meta name=\"APIName\" content=\"Microsoft.Build.Framework.ILogger.Verbosity\">\r\n<meta name=\"APILocation\" content=\"Microsoft.Build.Framework.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-04-01 05:59 PM\">\r\n<meta name=\"document_id\" content=\"3a409952-b892-9118-8bf7-1e3c18e82d48\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Defines an MSBuild logger, which subscribes to build system events.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/microsoft.build.framework/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"Microsoft.Build.Framework.ILogger\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","uhfHeaderId":"MSDocsHeader-DotNet","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/Microsoft.Build.Framework.ILogger.yml","open_to_public_contributors":false,"api_name":["Microsoft.Build.Framework.ILogger","Microsoft.Build.Framework.ILogger.Initialize","Microsoft.Build.Framework.ILogger.Parameters","Microsoft.Build.Framework.ILogger.Shutdown","Microsoft.Build.Framework.ILogger.Verbosity"],"api_location":["Microsoft.Build.Framework.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["Microsoft.Build.Framework.ILogger","Microsoft::Build::Framework::ILogger","Microsoft.Build.Framework.ILogger.Initialize","Microsoft::Build::Framework::ILogger::Initialize","Microsoft.Build.Framework.ILogger.Parameters","Microsoft::Build::Framework::ILogger::Parameters","Microsoft.Build.Framework.ILogger.Shutdown","Microsoft::Build::Framework::ILogger::Shutdown","Microsoft.Build.Framework.ILogger.Verbosity","Microsoft::Build::Framework::ILogger::Verbosity"],"dev_langs":["csharp"],"updated_at":"2017-04-01 05:59 PM","document_id":"3a409952-b892-9118-8bf7-1e3c18e82d48","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/Microsoft.Build.Framework/ILogger.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ILogger interface | Microsoft Docs","_op_ogTitle":"ILogger interface","description":"Defines an MSBuild logger, which subscribes to build system events.\n","toc_asset_id":"api/_splitted/Microsoft.Build.Framework/toc.json","toc_rel":"_splitted/Microsoft.Build.Framework/toc.json","source_url":"","ms.assetid":"Microsoft.Build.Framework.ILogger","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/microsoft.build.framework.ilogger","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/microsoft.build.framework.ilogger","fileRelativePath":"api/Microsoft.Build.Framework.ILogger.html"},"themesRelativePathToOutputRoot":"_themes/"}