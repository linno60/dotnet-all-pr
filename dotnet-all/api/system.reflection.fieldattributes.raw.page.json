{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">FieldAttributes</span>\r\n      Enum\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Specifies flags that describe the attributes of a field.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\r\n  \t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[ECMA2Yaml.Models.ECMAAttribute]\n[ECMA2Yaml.Models.ECMAAttribute]\npublic enum FieldAttributes</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a></span></div><span class=\"lang-csharp\">FieldAttributes</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Attributes</dt><dd>\r\n  \t\t<div class=\"cdlHolder\">\r\n  \t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.flagsattribute\" title=\"System.FlagsAttribute\" data-linktype=\"relative-path\">FlagsAttribute</a></span>\r\n  \t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>In this example, three fields are built and the <code>FieldAttributes</code> values are displayed. A <code>FieldAttributes</code> value can contain more than one attribute, for example, both <code>Public</code> and <code>Literal</code>, as shown in the third field.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic FieldAttributes Example#1\">using System;\nusing System.Reflection;\n\npublic class Demo\n{\n    // Make three fields:\n    // The first field is private.\n    private string m_field = &quot;String A&quot;;\n\n    // The second field is public.\n    public string Field = &quot;String B&quot;;\n\n    // The third field is public const (hence also literal and static),\n    // with a default value.\n    public const string FieldC = &quot;String C&quot;;\n}\n\npublic class Myfieldattributes\n{\n    public static void Main()\n    {\n        Console.WriteLine (&quot;\\nReflection.FieldAttributes&quot;);\n        Demo d = new Demo();\n \n        // Get a Type object for Demo, and a FieldInfo for each of\n        // the three fields. Use the FieldInfo to display field\n        // name, value for the Demo object in d, and attributes.\n        //\n        Type myType = typeof(Demo);\n        FieldInfo fiPrivate = myType.GetField(&quot;m_field&quot;,\n            BindingFlags.NonPublic | BindingFlags.Instance);\n        DisplayField(d, fiPrivate);\n\n        FieldInfo fiPublic = myType.GetField(&quot;Field&quot;,\n            BindingFlags.Public | BindingFlags.Instance);\n        DisplayField(d, fiPublic);\n\n        FieldInfo fiConstant = myType.GetField(&quot;FieldC&quot;,\n            BindingFlags.Public | BindingFlags.Static);\n        DisplayField(d, fiConstant);\n    }\n\n    static void DisplayField(Object obj, FieldInfo f)\n    { \n        // Display the field name, value, and attributes.\n        //\n        Console.WriteLine(&quot;{0} = \\&quot;{1}\\&quot;; attributes: {2}&quot;, \n            f.Name, f.GetValue(obj), f.Attributes);\n    }\n}\n\n/* This code example produces the following output:\n\nReflection.FieldAttributes\nm_field = &quot;String A&quot;; attributes: Private\nField = &quot;String B&quot;; attributes: Public\nFieldC = &quot;String C&quot;; attributes: Public, Static, Literal, HasDefault\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic FieldAttributes Example#1\">Imports System\nImports System.Reflection\nImports Microsoft.VisualBasic\n\nPublic Class Demo\n    &#39; Declare three fields.\n    &#39; The first field is private.\n    Private m_field As String = &quot;String A&quot;\n\n    &#39;The second field is public.\n    Public Field As String = &quot;String B&quot;\n\n    &#39; The third field is public and const, hence also static\n    &#39; and literal with a default value.\n    Public Const FieldC As String = &quot;String C&quot;\n\nEnd Class\n\nModule Module1\n    Sub Main()\n        &#39; Create an instance of the Demo class.\n        Dim d As New Demo()\n\n        Console.WriteLine(vbCrLf &amp; &quot;Reflection.FieldAttributes&quot;)\n\n        &#39; Get a Type object for Demo, and a FieldInfo for each of\n        &#39; the three fields. Use the FieldInfo to display field\n        &#39; name, value for the Demo object in d, and attributes.\n        &#39;\n        Dim myType As Type = GetType(Demo)\n\n        Dim fiPrivate As FieldInfo = myType.GetField(&quot;m_field&quot;, _\n            BindingFlags.NonPublic Or BindingFlags.Instance)\n        DisplayField(d, fiPrivate)\n\n        Dim fiPublic As FieldInfo = myType.GetField(&quot;Field&quot;, _\n            BindingFlags.Public Or BindingFlags.Instance)\n        DisplayField(d, fiPublic)\n\n        Dim fiConstant As FieldInfo = myType.GetField(&quot;FieldC&quot;, _\n            BindingFlags.Public Or BindingFlags.Static)\n        DisplayField(d, fiConstant)\n    End Sub\n\n    Sub DisplayField(ByVal obj As Object, ByVal f As FieldInfo)\n\n        &#39; Display the field name, value, and attributes.\n        &#39;\n        Console.WriteLine(&quot;{0} = &quot;&quot;{1}&quot;&quot;; attributes: {2}&quot;, _\n            f.Name, f.GetValue(obj), f.Attributes)\n    End Sub\n\nEnd Module\n\n&#39; This code example produces the following output:\n&#39;\n&#39;m_field = &quot;String A&quot;; attributes: Private\n&#39;Field = &quot;String B&quot;; attributes: Public\n&#39;FieldC = &quot;String C&quot;; attributes: Public, Static, Literal, HasDefault\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic FieldAttributes Example#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Security::Permissions;\n\npublic ref class Demo\n{\nprivate:\n    // Make three fields:\n    // The first field is private.\n    String^ m_field;\n\n    // The second field is public.\npublic:\n    String^ Field;\n\n    // The third field is public and literal. \n    literal String^ FieldC = &quot;String C&quot;;\n\n    Demo() { m_field = &quot;String A&quot;; Field = &quot;String B&quot;; }\n};\n\nstatic void DisplayField(Object^ obj, FieldInfo^ f)\n{ \n    // Display the field name, value, and attributes.\n    //\n    Console::WriteLine(&quot;{0} = \\&quot;{1}\\&quot;; attributes: {2}&quot;, \n        f-&gt;Name, f-&gt;GetValue(obj), f-&gt;Attributes);\n};\n\nvoid main()\n{\n    Console::WriteLine (&quot;\\nReflection.FieldAttributes&quot;);\n    Demo^ d = gcnew Demo();\n\n    // Get a Type object for Demo, and a FieldInfo for each of\n    // the three fields. Use the FieldInfo to display field\n    // name, value for the Demo object in d, and attributes.\n    //\n    Type^ myType = Demo::typeid;\n\n    FieldInfo^ fiPrivate = myType-&gt;GetField(&quot;m_field&quot;,\n        BindingFlags::NonPublic | BindingFlags::Instance);\n    DisplayField(d, fiPrivate);\n\n    FieldInfo^ fiPublic = myType-&gt;GetField(&quot;Field&quot;,\n        BindingFlags::Public | BindingFlags::Instance);\n    DisplayField(d, fiPublic);\n\n    FieldInfo^ fiConstant = myType-&gt;GetField(&quot;FieldC&quot;,\n        BindingFlags::Public | BindingFlags::Static);\n    DisplayField(d, fiConstant);\n}\n\n/* This code example produces the following output:\n\nReflection.FieldAttributes\nm_field = &quot;String A&quot;; attributes: Private\nField = &quot;String B&quot;; attributes: Public\nFieldC = &quot;String C&quot;; attributes: Public, Static, Literal, HasDefault\n */\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p><code>FieldAttributes</code> uses the value from <code>FieldAccessMask</code> to mask off only the parts of the attribute value that pertain to the accessibility. For example, the following code determines if <code>Attributes</code> has the public bit set.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Reflection.FieldAttributes#1\">FieldInfo^ fi = obj-&gt;GetType()-&gt;GetField(&quot;field1&quot;);\n\nif ((fi-&gt;Attributes &amp; FieldAttributes::FieldAccessMask) ==\n    FieldAttributes::Public)\n{\n    Console::WriteLine(&quot;{0:s} is public. Value: {1:d}&quot;, fi-&gt;Name, fi-&gt;GetValue(obj));\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Reflection.FieldAttributes#1\">FieldInfo fi = obj.GetType().GetField(&quot;field1&quot;);\n\nif ((fi.Attributes &amp; FieldAttributes.FieldAccessMask) ==\n    FieldAttributes.Public)\n{\n    Console.WriteLine(&quot;{0:s} is public. Value: {1:d}&quot;, fi.Name, fi.GetValue(obj));\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Reflection.FieldAttributes#1\">Dim fi As FieldInfo = obj.GetType().GetField(&quot;field1&quot;)\n\nIf (fi.Attributes And FieldAttributes.FieldAccessMask) = _\n    FieldAttributes.Public Then\n    Console.WriteLine(&quot;{0:s} is public. Value: {1:d}&quot;, fi.Name, fi.GetValue(obj))\nEnd If\n</code></pre><p> To get the <code>FieldAttributes</code>, first get the class <code>Type</code>. From the <code>Type</code>, get the <code>FieldInfo</code>. From the <code>FieldInfo</code>, get the <code>Attributes</code>.  </p>\n<p> The enumerated value is a number representing the bitwise OR of the attributes implemented on the field.</p>\n\r\n  \r\n      \t<h2 class=\"accented\">Fields\r\n      </h2>\r\n      <table class=\"nameValue\">\r\n      \t<tr><td id=\"System_Reflection_FieldAttributes_Assembly\">\r\n      \t\t\t<span class=\"lang-csharp\">Assembly</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that the field is accessible throughout the assembly.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_FieldAttributes_FamANDAssem\">\r\n      \t\t\t<span class=\"lang-csharp\">FamANDAssem</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that the field is accessible only by subtypes in this assembly.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_FieldAttributes_Family\">\r\n      \t\t\t<span class=\"lang-csharp\">Family</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that the field is accessible only by type and subtypes.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_FieldAttributes_FamORAssem\">\r\n      \t\t\t<span class=\"lang-csharp\">FamORAssem</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that the field is accessible by subtypes anywhere, as well as throughout this assembly.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_FieldAttributes_FieldAccessMask\">\r\n      \t\t\t<span class=\"lang-csharp\">FieldAccessMask</span>\r\n      \t</td>\r\n      \t<td><p>Specifies the access level of a given field.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_FieldAttributes_HasDefault\">\r\n      \t\t\t<span class=\"lang-csharp\">HasDefault</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that the field has a default value.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_FieldAttributes_HasFieldMarshal\">\r\n      \t\t\t<span class=\"lang-csharp\">HasFieldMarshal</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that the field has marshaling information.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_FieldAttributes_HasFieldRVA\">\r\n      \t\t\t<span class=\"lang-csharp\">HasFieldRVA</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that the field has a relative virtual address (RVA). The RVA is the location of the method body in the current image, as an address relative to the start of the image file in which it is located.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_FieldAttributes_InitOnly\">\r\n      \t\t\t<span class=\"lang-csharp\">InitOnly</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that the field is initialized only, and can be set only in the body of a constructor.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_FieldAttributes_Literal\">\r\n      \t\t\t<span class=\"lang-csharp\">Literal</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that the field&#39;s value is a compile-time (static or early bound) constant. Any attempt to set it throws a <a class=\"xref\" href=\"system.fieldaccessexception\" data-linktype=\"relative-path\">FieldAccessException</a>.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_FieldAttributes_NotSerialized\">\r\n      \t\t\t<span class=\"lang-csharp\">NotSerialized</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that the field does not have to be serialized when the type is remoted.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_FieldAttributes_PinvokeImpl\">\r\n      \t\t\t<span class=\"lang-csharp\">PinvokeImpl</span>\r\n      \t</td>\r\n      \t<td><p>Reserved for future use.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_FieldAttributes_Private\">\r\n      \t\t\t<span class=\"lang-csharp\">Private</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that the field is accessible only by the parent type.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_FieldAttributes_PrivateScope\">\r\n      \t\t\t<span class=\"lang-csharp\">PrivateScope</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that the field cannot be referenced.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_FieldAttributes_Public\">\r\n      \t\t\t<span class=\"lang-csharp\">Public</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that the field is accessible by any member for whom this scope is visible.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_FieldAttributes_ReservedMask\">\r\n      \t\t\t<span class=\"lang-csharp\">ReservedMask</span>\r\n      \t</td>\r\n      \t<td><p>Reserved.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_FieldAttributes_RTSpecialName\">\r\n      \t\t\t<span class=\"lang-csharp\">RTSpecialName</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that the common language runtime (metadata internal APIs) should check the name encoding.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_FieldAttributes_SpecialName\">\r\n      \t\t\t<span class=\"lang-csharp\">SpecialName</span>\r\n      \t</td>\r\n      \t<td><p>Specifies a special method, with the name describing how the method is special.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_FieldAttributes_Static\">\r\n      \t\t\t<span class=\"lang-csharp\">Static</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that the field represents the defined type, or else it is per-instance.</p>\n</td>\r\n      \t</tr>\r\n      </table>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc1.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Reflection.FieldAttributes.yml\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldAttributes\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldAttributes.Assembly\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldAttributes.FamANDAssem\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldAttributes.Family\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldAttributes.FamORAssem\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldAttributes.FieldAccessMask\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldAttributes.HasDefault\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldAttributes.HasFieldMarshal\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldAttributes.HasFieldRVA\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldAttributes.InitOnly\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldAttributes.Literal\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldAttributes.NotSerialized\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldAttributes.PinvokeImpl\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldAttributes.Private\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldAttributes.PrivateScope\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldAttributes.Public\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldAttributes.ReservedMask\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldAttributes.RTSpecialName\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldAttributes.SpecialName\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldAttributes.Static\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 02:21 PM\">\r\n<meta name=\"document_id\" content=\"02878ed5-24ff-0022-3c54-702b49502460\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Specifies flags that describe the attributes of a field.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.reflection/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Reflection.FieldAttributes\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Reflection.FieldAttributes.yml","open_to_public_contributors":false,"api_name":["System.Reflection.FieldAttributes","System.Reflection.FieldAttributes.Assembly","System.Reflection.FieldAttributes.FamANDAssem","System.Reflection.FieldAttributes.Family","System.Reflection.FieldAttributes.FamORAssem","System.Reflection.FieldAttributes.FieldAccessMask","System.Reflection.FieldAttributes.HasDefault","System.Reflection.FieldAttributes.HasFieldMarshal","System.Reflection.FieldAttributes.HasFieldRVA","System.Reflection.FieldAttributes.InitOnly","System.Reflection.FieldAttributes.Literal","System.Reflection.FieldAttributes.NotSerialized","System.Reflection.FieldAttributes.PinvokeImpl","System.Reflection.FieldAttributes.Private","System.Reflection.FieldAttributes.PrivateScope","System.Reflection.FieldAttributes.Public","System.Reflection.FieldAttributes.ReservedMask","System.Reflection.FieldAttributes.RTSpecialName","System.Reflection.FieldAttributes.SpecialName","System.Reflection.FieldAttributes.Static"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Reflection.FieldAttributes","System::Reflection::FieldAttributes","System.Reflection.FieldAttributes.Assembly","System::Reflection::FieldAttributes::Assembly","System.Reflection.FieldAttributes.FamANDAssem","System::Reflection::FieldAttributes::FamANDAssem","System.Reflection.FieldAttributes.Family","System::Reflection::FieldAttributes::Family","System.Reflection.FieldAttributes.FamORAssem","System::Reflection::FieldAttributes::FamORAssem","System.Reflection.FieldAttributes.FieldAccessMask","System::Reflection::FieldAttributes::FieldAccessMask","System.Reflection.FieldAttributes.HasDefault","System::Reflection::FieldAttributes::HasDefault","System.Reflection.FieldAttributes.HasFieldMarshal","System::Reflection::FieldAttributes::HasFieldMarshal","System.Reflection.FieldAttributes.HasFieldRVA","System::Reflection::FieldAttributes::HasFieldRVA","System.Reflection.FieldAttributes.InitOnly","System::Reflection::FieldAttributes::InitOnly","System.Reflection.FieldAttributes.Literal","System::Reflection::FieldAttributes::Literal","System.Reflection.FieldAttributes.NotSerialized","System::Reflection::FieldAttributes::NotSerialized","System.Reflection.FieldAttributes.PinvokeImpl","System::Reflection::FieldAttributes::PinvokeImpl","System.Reflection.FieldAttributes.Private","System::Reflection::FieldAttributes::Private","System.Reflection.FieldAttributes.PrivateScope","System::Reflection::FieldAttributes::PrivateScope","System.Reflection.FieldAttributes.Public","System::Reflection::FieldAttributes::Public","System.Reflection.FieldAttributes.ReservedMask","System::Reflection::FieldAttributes::ReservedMask","System.Reflection.FieldAttributes.RTSpecialName","System::Reflection::FieldAttributes::RTSpecialName","System.Reflection.FieldAttributes.SpecialName","System::Reflection::FieldAttributes::SpecialName","System.Reflection.FieldAttributes.Static","System::Reflection::FieldAttributes::Static"],"dev_langs":["csharp"],"updated_at":"2017-03-31 02:21 PM","document_id":"02878ed5-24ff-0022-3c54-702b49502460","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Reflection/FieldAttributes.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"FieldAttributes enum | Microsoft Docs","_op_ogTitle":"FieldAttributes enum","description":"Specifies flags that describe the attributes of a field.\n","toc_asset_id":"api/_splitted/System.Reflection/toc.json","toc_rel":"_splitted/System.Reflection/toc.json","source_url":"","ms.assetid":"System.Reflection.FieldAttributes","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.reflection.fieldattributes","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.reflection.fieldattributes","fileRelativePath":"api/System.Reflection.FieldAttributes.html"},"themesRelativePathToOutputRoot":"_themes/"}