{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">PolicyStatement</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the statement of a <a class=\"xref\" href=\"system.security.policy.codegroup\" data-linktype=\"relative-path\">CodeGroup</a> describing the permissions and other information that apply to code with a particular set of evidence. This class cannot be inherited.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic sealed class PolicyStatement : System.Security.ISecurityEncodable, System.Security.ISecurityPolicyEncodable</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><span class=\"lang-csharp\">PolicyStatement</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example shows the use of members of the PolicyStatement class  </p>\n<pre><code class=\"lang-cs\" name=\"System.Security.Policy.PolicyStatement_Evt#1\">using System;\nusing System.Security;\nusing System.Security.Policy;\nusing System.Security.Principal;\nusing System.Security.Permissions;\n\nclass Members\n{\n    [STAThread]\n    static void Main(string[] args)\n    {\n        // Create two new policy statements.\n        PolicyStatement policyStatement = firstConstructorTest();\n        PolicyStatement policyStatement2 = secondConstructorTest();\n\n        // Add attributes to the first policy statement.\n        policyStatement.Attributes = PolicyStatementAttribute.All;\n\n        // Create a copy of the first policy statement.\n        PolicyStatement policyStatementCopy = createCopy(policyStatement);\n        addXmlMember(ref policyStatementCopy);\n\n        summarizePolicyStatment(policyStatement);\n        Console.WriteLine(&quot;This sample completed successfully; &quot; +\n            &quot;press Enter to exit.&quot;);\n        Console.ReadLine();\n    }\n\n    // Construct a PolicyStatement with an Unrestricted permission set.\n    private static PolicyStatement firstConstructorTest() \n    {\n        // Construct the permission set.\n        PermissionSet permissions \n            = new PermissionSet(PermissionState.Unrestricted);\n        permissions.AddPermission(\n            new SecurityPermission(SecurityPermissionFlag.Execution));\n        permissions.AddPermission(\n            new ZoneIdentityPermission(SecurityZone.MyComputer));\n\n        // Create a policy statement based on the newly created permission\n        // set.\n        PolicyStatement policyStatement = new PolicyStatement(permissions);\n\n        return policyStatement;\n    }\n\n    // Construct a PolicyStatement with an Unrestricted permission set and\n    // the LevelFinal attribute.\n    private static PolicyStatement secondConstructorTest()\n    {\n        // Construct the permission set.\n        PermissionSet permissions =\n            new PermissionSet(PermissionState.Unrestricted);\n        permissions.AddPermission(\n            new SecurityPermission(SecurityPermissionFlag.Execution));\n        permissions.AddPermission(\n            new ZoneIdentityPermission(SecurityZone.MyComputer));\n\n        PolicyStatementAttribute levelFinalAttribute = \n            PolicyStatementAttribute.LevelFinal;\n        \n        // Create a new policy statement with the specified permission set.\n        // The LevelFinal attribute is set to prevent the evaluation of lower\n        // policy levels in a resolve operation.\n        PolicyStatement policyStatement =\n            new PolicyStatement(permissions, levelFinalAttribute);\n\n        return policyStatement;\n    }\n\n    // Add a named permission set to the specified PolicyStatement.\n    private static void AddPermissions(ref PolicyStatement policyStatement)\n    {\n        // Construct a NamedPermissionSet with basic permissions.\n        NamedPermissionSet allPerms = new NamedPermissionSet(&quot;allPerms&quot;);\n        allPerms.AddPermission(\n            new SecurityPermission(SecurityPermissionFlag.Execution));\n        allPerms.AddPermission(\n            new ZoneIdentityPermission(SecurityZone.MyComputer));\n        allPerms.AddPermission(\n            new SiteIdentityPermission(&quot;www.contoso.com&quot;));\n\n        policyStatement.PermissionSet = allPerms;\n    }\n\n    // If a class attribute is not found in the specified PolicyStatement,\n    // add a child XML element with an added class attribute.\n    private static void addXmlMember(ref PolicyStatement policyStatement) \n    {\n        SecurityElement xmlElement = policyStatement.ToXml();\n        if (xmlElement.Attribute(&quot;class&quot;) == null)\n        {\n            SecurityElement newElement = \n                new SecurityElement(&quot;PolicyStatement&quot;);\n            newElement.AddAttribute(&quot;class&quot;, policyStatement.ToString());\n            newElement.AddAttribute(&quot;version&quot;,&quot;1.1&quot;);\n\n            newElement.AddChild(new SecurityElement(&quot;PermissionSet&quot;));\n\n            policyStatement.FromXml(newElement);\n\n            Console.Write(&quot;Added the class attribute and modified its &quot;);\n            Console.WriteLine(&quot;version number.\\n&quot; + newElement.ToString());\n        }\n    }\n\n    // Verify that the type of the specified object is a PolicyStatement type\n    // then create a copy of the object.\n    private static PolicyStatement createCopy(Object sourceObject)\n    {\n        PolicyStatement returnedStatement = new PolicyStatement(null);\n        // Compare specified object type with the PolicyStatement type.\n        if (sourceObject.GetType().Equals(typeof(PolicyStatement)))\n        {\n            returnedStatement = getCopy((PolicyStatement)sourceObject);\n        }\n        else\n        {\n            throw new ArgumentException(&quot;Expected the PolicyStatement type.&quot;);\n        }\n\n        return returnedStatement;\n    }\n\n    // Return a copy of the specified PolicyStatement if the result of the\n    // Copy command is an equivalent object. Otherwise, return the\n    // original PolicyStatement object.\n    private static PolicyStatement getCopy(PolicyStatement policyStatement)\n    {\n        // Create an equivalent copy of the policy statement.\n        PolicyStatement policyStatementCopy = policyStatement.Copy();\n\n        // Compare the specified objects for equality.\n        if (!policyStatementCopy.Equals(policyStatement))\n        {\n            return policyStatementCopy;\n        } \n        else \n        {\n            return policyStatement;\n        }\n    }\n\n    // Summarize the attributes of the specified PolicyStatement on the\n    // console window.\n    private static void summarizePolicyStatment(\n        PolicyStatement policyStatement)\n    {\n        // Retrieve the class path for policyStatement.\n        string policyStatementClass = policyStatement.ToString();\n\n        int hashCode = policyStatement.GetHashCode();\n\n        string attributeString = &quot;&quot;;\n        // Retrieve the string representation of the PolicyStatement\n        // attributes.\n        if (policyStatement.AttributeString != null)\n        {\n            attributeString = policyStatement.AttributeString;\n        }\n\n        // Write a summary to the console window.\n        Console.WriteLine(&quot;\\n*** &quot; + policyStatementClass + &quot; summary ***&quot;);\n        Console.Write(&quot;This PolicyStatement has been created with hash &quot;);\n        Console.Write(&quot;code(&quot; + hashCode + &quot;) &quot;);\n\n        Console.Write(&quot;and contains the following attributes: &quot;);\n        Console.WriteLine(attributeString);\n    }\n}\n//\n// This sample produces the following output:\n//\n// Added the class attribute and modified the version number.\n// &lt;PolicyStatement class=&quot;System.Security.Policy.PolicyStatement&quot;\n//                  version=&quot;1.1&quot;&gt;\n//    &lt;PermissionSet/&gt;\n// &lt;/PolicyStatement&gt;\n// \n// *** System.Security.Policy.PolicyStatement summary ***\n// PolicyStatement has been created with hash code(20) containing the\n// following attributes: Exclusive LevelFinal\n// This sample completed successfully; press Enter to exit.\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Security.Policy.PolicyStatement_Evt#1\">using namespace System;\nusing namespace System::Security;\nusing namespace System::Security::Policy;\nusing namespace System::Security::Principal;\nusing namespace System::Security::Permissions;\n\nref class Members\n{\npublic:\n   [STAThread]\n   static void Main()\n   {\n      // Create two new policy statements.\n      PolicyStatement^ policyStatement = firstConstructorTest();\n      PolicyStatement^ policyStatement2 = secondConstructorTest();\n      \n      // Add attributes to the first policy statement.\n      policyStatement-&gt;Attributes = PolicyStatementAttribute::All;\n\n      // Create a copy of the first policy statement.\n      PolicyStatement^ policyStatementCopy = createCopy( policyStatement );\n      addXmlMember(  &amp;policyStatementCopy );\n\n      summarizePolicyStatment( policyStatement );\n      Console::Write( L&quot;This sample completed successfully; &quot; );\n      Console::WriteLine( L&quot;press Enter to exit.&quot; );\n      Console::ReadLine();\n   }\n\nprivate:\n   // Construct a PolicyStatement with an Unrestricted permission set.\n   static PolicyStatement^ firstConstructorTest()\n   {\n      // Construct the permission set.\n      PermissionSet^ permissions = gcnew PermissionSet(\n         PermissionState::Unrestricted );\n      permissions-&gt;AddPermission( gcnew SecurityPermission(\n         SecurityPermissionFlag::Execution ) );\n      permissions-&gt;AddPermission( gcnew ZoneIdentityPermission(\n         SecurityZone::MyComputer ) );\n      \n      // Create a policy statement based on the newly created permission\n      // set.\n      PolicyStatement^ policyStatement = gcnew PolicyStatement(\n         permissions );\n\n      return policyStatement;\n   }\n\n   // Construct a PolicyStatement with an Unrestricted permission set and\n   // the LevelFinal attribute.\n   static PolicyStatement^ secondConstructorTest()\n   {\n      // Construct the permission set.\n      PermissionSet^ permissions = gcnew PermissionSet(\n         PermissionState::Unrestricted );\n      permissions-&gt;AddPermission( gcnew SecurityPermission(\n         SecurityPermissionFlag::Execution ) );\n      permissions-&gt;AddPermission( gcnew ZoneIdentityPermission(\n         SecurityZone::MyComputer ) );\n\n      PolicyStatementAttribute levelFinalAttribute =\n         PolicyStatementAttribute::LevelFinal;\n      \n      // Create a new policy statement with the specified permission set.\n      // The LevelFinal attribute is set to prevent the evaluation of lower\n      // policy levels in a resolve operation.\n      PolicyStatement^ policyStatement = gcnew PolicyStatement(\n         permissions,levelFinalAttribute );\n\n      return policyStatement;\n   }\n\n   // Add a named permission set to the specified PolicyStatement.\n   static void AddPermissions( interior_ptr&lt;PolicyStatement^&gt;policyStatement )\n   {\n      // Construct a NamedPermissionSet with basic permissions.\n      NamedPermissionSet^ allPerms = gcnew NamedPermissionSet(\n         L&quot;allPerms&quot; );\n      allPerms-&gt;AddPermission( gcnew SecurityPermission(\n         SecurityPermissionFlag::Execution ) );\n      allPerms-&gt;AddPermission( gcnew ZoneIdentityPermission(\n         SecurityZone::MyComputer ) );\n      allPerms-&gt;AddPermission( gcnew SiteIdentityPermission(\n         L&quot;www.contoso.com&quot; ) );\n\n      ( *policyStatement)-&gt;PermissionSet = allPerms;\n   }\n\n   // If a class attribute is not found in the specified PolicyStatement,\n   // add a child XML element with an added class attribute.\n   static void addXmlMember( interior_ptr&lt;PolicyStatement^&gt;policyStatement )\n   {\n      SecurityElement^ xmlElement = ( *policyStatement)-&gt;ToXml();\n      if ( xmlElement-&gt;Attribute(L&quot;class&quot;) == nullptr )\n      {\n         SecurityElement^ newElement = gcnew SecurityElement(\n            L&quot;PolicyStatement&quot; );\n         newElement-&gt;AddAttribute( L&quot;class&quot;, (\n            *policyStatement)-&gt;ToString() );\n         newElement-&gt;AddAttribute( L&quot;version&quot;, L&quot;1.1&quot; );\n\n         newElement-&gt;AddChild( gcnew SecurityElement( L&quot;PermissionSet&quot; ) );\n\n         ( *policyStatement)-&gt;FromXml( newElement );\n\n         Console::Write( L&quot;Added the class attribute and modified its &quot; );\n         Console::WriteLine( L&quot;version number.\\n{0}&quot;, newElement );\n      }\n   }\n\n   // Verify that the type of the specified object is a PolicyStatement type\n   // then create a copy of the object.\n   static PolicyStatement^ createCopy( Object^ sourceObject )\n   {\n      PolicyStatement^ returnedStatement = gcnew PolicyStatement( nullptr );\n      // Compare specified object type with the PolicyStatement type.\n      if ( sourceObject-&gt;GetType()-&gt;Equals( PolicyStatement::typeid ) )\n      {\n         returnedStatement = getCopy(\n            static_cast&lt;PolicyStatement^&gt;(sourceObject) );\n      }\n      else\n      {\n         throw gcnew ArgumentException(\n            L&quot;Expected the PolicyStatement type.&quot; );\n      }\n\n      return returnedStatement;\n   }\n\n   // Return a copy of the specified PolicyStatement if the result of the\n   // Copy command is an equivalent object. Otherwise, return the\n   // original PolicyStatement object.\n   static PolicyStatement^ getCopy( PolicyStatement^ policyStatement )\n   {\n      // Create an equivalent copy of the policy statement.\n      PolicyStatement^ policyStatementCopy = policyStatement-&gt;Copy();\n\n      // Compare the specified objects for equality.\n      if (  !policyStatementCopy-&gt;Equals( policyStatement ) )\n      {\n         return policyStatementCopy;\n      }\n      else\n      {\n         return policyStatement;\n      }\n   }\n\n   // Summarize the attributes of the specified PolicyStatement on the\n   // console window.\n   static void summarizePolicyStatment( PolicyStatement^ policyStatement )\n   {\n      // Retrieve the class path for policyStatement.\n      String^ policyStatementClass = policyStatement-&gt;ToString();\n\n      int hashCode = policyStatement-&gt;GetHashCode();\n\n      String^ attributeString = L&quot;&quot;;\n      \n      // Retrieve the string representation of the PolicyStatement\n      // attributes.\n      if ( policyStatement-&gt;AttributeString != nullptr )\n      {\n         attributeString = policyStatement-&gt;AttributeString;\n      }\n\n      // Write a summary to the console window.\n      Console::WriteLine( L&quot;\\n*** {0} summary ***&quot;, policyStatementClass );\n      Console::Write( L&quot;This PolicyStatement has been created with hash &quot; );\n      Console::Write( L&quot;code({0}) &quot;, hashCode );\n\n      Console::Write( L&quot;and contains the following attributes: &quot; );\n      Console::WriteLine( attributeString );\n   }\n};\n\nint main()\n{\n   Members::Main();\n}\n\n//\n// This sample produces the following output:\n//\n// Added the class attribute and modified the version number.\n// &lt;PolicyStatement class=&quot;System.Security.Policy.PolicyStatement&quot;\n//                  version=&quot;1.1&quot;&gt;\n//    &lt;PermissionSet/&gt;\n// &lt;/PolicyStatement&gt;\n//\n// *** System.Security.Policy.PolicyStatement summary ***\n// PolicyStatement has been created with hash code(20) containing the\n// following attributes: Exclusive LevelFinal\n// This sample completed successfully; press Enter to exit.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Policy.PolicyStatement_Evt#1\">Imports System\nImports System.Security\nImports System.Security.Policy\nImports System.Security.Principal\nImports System.Security.Permissions\n\nPublic Class Form1\n    Inherits System.Windows.Forms.Form\n\n    &#39; Event handler for Run button.\n    Private Sub Button1_Click( _\n        ByVal sender As System.Object, _\n        ByVal e As System.EventArgs) Handles Button1.Click\n\n        tbxOutput.Cursor = Cursors.WaitCursor\n        tbxOutput.Text = &quot;&quot;\n\n        Dim policyStatement As PolicyStatement = firstConstructorTest()\n        Dim policyStatement2 As PolicyStatement = secondConstructorTest()\n\n        &#39; Add attributes to policy statement.\n        policyStatement.Attributes = PolicyStatementAttribute.All\n\n        Dim policyStatementCopy As PolicyStatement\n        policyStatementCopy = createCopy(policyStatement)\n        addXmlMember(policyStatementCopy)\n\n        summarizePolicyStatment(policyStatement)\n\n        &#39; Align interface and conclude application.\n        tbxOutput.AppendText(vbCrLf + &quot;This sample completed &quot; + _\n            &quot;successfully; press Exit to continue.&quot;)\n\n        tbxOutput.Cursor = Cursors.Default\n    End Sub\n    &#39; Construct a PolicyStatement with an Unrestricted permission set.\n    Private Function firstConstructorTest() As PolicyStatement\n        &#39; Construct policy statement based on newly created permission set.\n        &#39; Assemble permission set.\n        Dim permissions As New PermissionSet(PermissionState.Unrestricted)\n\n        permissions.AddPermission( _\n            New SecurityPermission(SecurityPermissionFlag.Execution))\n        permissions.AddPermission( _\n            New ZoneIdentityPermission(SecurityZone.MyComputer))\n\n        &#39; Instantiate a new policy statement with specified permission set.\n        Dim policyStatement As New PolicyStatement(permissions)\n\n        Return PolicyStatement\n    End Function\n\n    &#39; Construct a PolicyStatement with an Unrestricted permission set with\n    &#39; the LevelFinal attribute.\n    Private Function secondConstructorTest() As PolicyStatement\n        &#39; Construct policy statement based on newly created permission set.\n        &#39; Assemble permission set.\n        Dim permissions As New PermissionSet(PermissionState.Unrestricted)\n        permissions.AddPermission( _\n            New SecurityPermission(SecurityPermissionFlag.Execution))\n        permissions.AddPermission( _\n            New ZoneIdentityPermission(SecurityZone.MyComputer))\n\n        Dim levelFinalAttribute As PolicyStatementAttribute\n        levelFinalAttribute = PolicyStatementAttribute.LevelFinal\n\n        &#39; Instantiate a new policy statement with specified permission set\n        &#39; and the LevelFinal attibute set allowing lower policy levels to be\n        &#39; avoided in a resolve.\n        Dim policyStatement As _\n            New PolicyStatement(permissions, levelFinalAttribute)\n\n        Return policyStatement\n    End Function\n\n    &#39; Add named permission set to specified PolicyStatement.\n    Private Sub AddPermissions(ByRef policyStatement As PolicyStatement)\n        &#39; Set up a NamedPermissionSet with all permissions.\n        Dim allPerms As New NamedPermissionSet(&quot;allPerms&quot;)\n        allPerms.AddPermission( _\n            New SecurityPermission(SecurityPermissionFlag.Execution))\n        allPerms.AddPermission( _\n            New ZoneIdentityPermission(SecurityZone.MyComputer))\n        allPerms.AddPermission( _\n            New SiteIdentityPermission(&quot;www.contoso.com&quot;))\n\n        policyStatement.PermissionSet = allPerms\n    End Sub\n\n    &#39; If the class attribute is not found in specified PolicyStatement,\n    &#39; add a child XML element with an added class attribute.\n    Private Sub addXmlMember(ByRef policyStatement As PolicyStatement)\n        Dim xmlElement As SecurityElement = policyStatement.ToXml()\n\n        If (xmlElement.Attribute(&quot;class&quot;) Is Nothing) Then\n            Dim newElement As New SecurityElement(&quot;PolicyStatement&quot;)\n            newElement.AddAttribute(&quot;class&quot;, policyStatement.ToString())\n            newElement.AddAttribute(&quot;version&quot;, &quot;1.1&quot;)\n\n            newElement.AddChild(New SecurityElement(&quot;PermissionSet&quot;))\n\n            policyStatement.FromXml(newElement)\n\n            tbxOutput.AppendText(&quot;Added the class attribute and modified the&quot;)\n            tbxOutput.AppendText(&quot; version number.&quot; + vbCrLf)\n            tbxOutput.AppendText(newElement.ToString() + vbCrLf)\n        End If\n    End Sub\n\n    &#39; Verify specified object is a PolicyStatement type. Retrieve a copy\n    &#39; using the private getCopy method.\n    Private Function createCopy( _\n        ByVal sourceObject As Object) As PolicyStatement\n\n        Dim returnedStatement = New PolicyStatement(Nothing)\n\n        &#39; Compare specified object&#39;s type with the PolicyStatement type.\n        If (sourceObject.GetType() Is GetType(PolicyStatement)) Then\n            returnedStatement = getCopy(CType(sourceObject, PolicyStatement))\n        Else\n            Throw New ArgumentException(&quot;Excepted PolicyStatement type.&quot;)\n        End If\n\n        Return returnedStatement\n    End Function\n\n    &#39; Return a copy of the specified PolicyStatement if the result of the\n    &#39; Copy command results in an equivalent object. Otherwise, return the\n    &#39; original object.\n    Private Function getCopy( _\n        ByVal policyStatement As PolicyStatement) As PolicyStatement\n\n        &#39; Create an equivalent copy of the policy statement.\n        Dim policyStatementCopy As PolicyStatement = policyStatement.Copy()\n\n        &#39; Compare the specified objects for equality.\n        If (Not policyStatementCopy.Equals(policyStatement)) Then\n            Return policyStatementCopy\n        Else\n            Return policyStatement\n        End If\n    End Function\n\n    &#39; Summarize the specified PolicyStatement to the console window.\n    Private Sub summarizePolicyStatment( _\n        ByVal policyStatement As PolicyStatement)\n\n        &#39; Retrieve the class path for policyStatement.\n        Dim policyStatementClass As String = policyStatement.ToString()\n\n        Dim hashCode As Integer = policyStatement.GetHashCode()\n\n        Dim attributeString As String = &quot;&quot;\n        &#39; Retrieve the string representation of the Policy&#39;s attributes.\n        If (Not policyStatement.AttributeString Is Nothing) Then\n            attributeString = policyStatement.AttributeString\n        End If\n\n        &#39; Write summary to console window.\n        tbxOutput.AppendText(&quot;*** &quot; + policyStatementClass + &quot; summary ***&quot;)\n        tbxOutput.AppendText(vbCrLf)\n        tbxOutput.AppendText(&quot;PolicyStatement has been created with hash &quot;)\n        tbxOutput.AppendText(&quot;code(&quot; + hashCode.ToString() + &quot;) &quot;)\n\n        tbxOutput.AppendText(&quot;containing the following attributes: &quot;)\n        tbxOutput.AppendText(attributeString + vbCrLf)\n    End Sub\n    &#39; Event handler for Exit button.\n    Private Sub Button2_Click( _\n        ByVal sender As System.Object, _\n        ByVal e As System.EventArgs) Handles Button2.Click\n\n        Application.Exit()\n    End Sub\n#Region &quot; Windows Form Designer generated code &quot;\n\n    Public Sub New()\n        MyBase.New()\n\n        &#39;This call is required by the Windows Form Designer.\n        InitializeComponent()\n\n        &#39;Add any initialization after the InitializeComponent() call\n\n    End Sub\n\n    &#39;Form overrides dispose to clean up the component list.\n    Protected Overloads Overrides Sub Dispose(ByVal disposing As Boolean)\n        If disposing Then\n            If Not (components Is Nothing) Then\n                components.Dispose()\n            End If\n        End If\n        MyBase.Dispose(disposing)\n    End Sub\n\n    &#39;Required by the Windows Form Designer\n    Private components As System.ComponentModel.IContainer\n\n    &#39;NOTE: The following procedure is required by the Windows Form Designer\n    &#39;It can be modified using the Windows Form Designer.  \n    &#39;Do not modify it using the code editor.\n    Friend WithEvents Panel2 As System.Windows.Forms.Panel\n    Friend WithEvents Panel1 As System.Windows.Forms.Panel\n    Friend WithEvents Button1 As System.Windows.Forms.Button\n    Friend WithEvents Button2 As System.Windows.Forms.Button\n    Friend WithEvents tbxOutput As System.Windows.Forms.RichTextBox\n    &lt;System.Diagnostics.DebuggerStepThrough()&gt; _\n    Private Sub InitializeComponent()\n        Me.Panel2 = New System.Windows.Forms.Panel\n        Me.Button1 = New System.Windows.Forms.Button\n        Me.Button2 = New System.Windows.Forms.Button\n        Me.Panel1 = New System.Windows.Forms.Panel\n        Me.tbxOutput = New System.Windows.Forms.RichTextBox\n        Me.Panel2.SuspendLayout()\n        Me.Panel1.SuspendLayout()\n        Me.SuspendLayout()\n        &#39;\n        &#39;Panel2\n        &#39;\n        Me.Panel2.Controls.Add(Me.Button1)\n        Me.Panel2.Controls.Add(Me.Button2)\n        Me.Panel2.Dock = System.Windows.Forms.DockStyle.Bottom\n        Me.Panel2.DockPadding.All = 20\n        Me.Panel2.Location = New System.Drawing.Point(0, 320)\n        Me.Panel2.Name = &quot;Panel2&quot;\n        Me.Panel2.Size = New System.Drawing.Size(616, 64)\n        Me.Panel2.TabIndex = 1\n        &#39;\n        &#39;Button1\n        &#39;\n        Me.Button1.Dock = System.Windows.Forms.DockStyle.Right\n        Me.Button1.Font = New System.Drawing.Font( _\n            &quot;Microsoft Sans Serif&quot;, _\n            9.0!, _\n            System.Drawing.FontStyle.Regular, _\n            System.Drawing.GraphicsUnit.Point, _\n            CType(0, Byte))\n        Me.Button1.Location = New System.Drawing.Point(446, 20)\n        Me.Button1.Name = &quot;Button1&quot;\n        Me.Button1.Size = New System.Drawing.Size(75, 24)\n        Me.Button1.TabIndex = 2\n        Me.Button1.Text = &quot;&amp;Run&quot;\n        &#39;\n        &#39;Button2\n        &#39;\n        Me.Button2.Dock = System.Windows.Forms.DockStyle.Right\n        Me.Button2.Font = New System.Drawing.Font( _\n            &quot;Microsoft Sans Serif&quot;, _\n            9.0!, _\n            System.Drawing.FontStyle.Regular, _\n            System.Drawing.GraphicsUnit.Point, _\n            CType(0, Byte))\n        Me.Button2.Location = New System.Drawing.Point(521, 20)\n        Me.Button2.Name = &quot;Button2&quot;\n        Me.Button2.Size = New System.Drawing.Size(75, 24)\n        Me.Button2.TabIndex = 3\n        Me.Button2.Text = &quot;E&amp;xit&quot;\n        &#39;\n        &#39;Panel1\n        &#39;\n        Me.Panel1.Controls.Add(Me.tbxOutput)\n        Me.Panel1.Dock = System.Windows.Forms.DockStyle.Fill\n        Me.Panel1.DockPadding.All = 20\n        Me.Panel1.Location = New System.Drawing.Point(0, 0)\n        Me.Panel1.Name = &quot;Panel1&quot;\n        Me.Panel1.Size = New System.Drawing.Size(616, 320)\n        Me.Panel1.TabIndex = 2\n        &#39;\n        &#39;tbxOutput\n        &#39;\n        Me.tbxOutput.AccessibleDescription = _\n            &quot;Displays output from application.&quot;\n        Me.tbxOutput.AccessibleName = &quot;Output textbox.&quot;\n        Me.tbxOutput.Dock = System.Windows.Forms.DockStyle.Fill\n        Me.tbxOutput.Location = New System.Drawing.Point(20, 20)\n        Me.tbxOutput.Name = &quot;tbxOutput&quot;\n        Me.tbxOutput.Size = New System.Drawing.Size(576, 280)\n        Me.tbxOutput.TabIndex = 1\n        Me.tbxOutput.Text = &quot;Click the Run button to run the application.&quot;\n        &#39;\n        &#39;Form1\n        &#39;\n        Me.AutoScaleBaseSize = New System.Drawing.Size(6, 15)\n        Me.ClientSize = New System.Drawing.Size(616, 384)\n        Me.Controls.Add(Me.Panel1)\n        Me.Controls.Add(Me.Panel2)\n        Me.Name = &quot;Form1&quot;\n        Me.Text = &quot;PolicyStatement&quot;\n        Me.Panel2.ResumeLayout(False)\n        Me.Panel1.ResumeLayout(False)\n        Me.ResumeLayout(False)\n\n    End Sub\n\n#End Region\nEnd Class\n&#39;\n&#39; This sample produces the following output:\n&#39;\n&#39; Added the class attribute and modified the version number.\n&#39; &lt;PolicyStatement class=&quot;System.Security.Policy.PolicyStatement&quot;\n&#39;                  version=&quot;1.1&quot;&gt;\n&#39;    &lt;PermissionSet/&gt;\n&#39; &lt;/PolicyStatement&gt;\n&#39; \n&#39; *** System.Security.Policy.PolicyStatement summary ***\n&#39; PolicyStatement has been created with hash code(20) containing the following\n&#39; attributes: Exclusive LevelFinal\n&#39; \n&#39; This sample completed successfully; press Exit to continue\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>A PolicyStatement consists of a set of granted permissions, and possible special attributes for the code group.  </p>\n<p> Policy statements are typically used as the return value of a <a class=\"xref\" href=\"system.security.policy.policylevel#System_Security_Policy_PolicyLevel_Resolve_\" data-linktype=\"relative-path\">Resolve</a> operation on a <a class=\"xref\" href=\"system.security.policy.policylevel\" data-linktype=\"relative-path\">PolicyLevel</a>.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Policy_PolicyStatement__ctor_System_Security_PermissionSet_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PolicyStatement(PermissionSet)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.policy.policystatement\" data-linktype=\"relative-path\">PolicyStatement</a> class with the specified <a class=\"xref\" href=\"system.security.permissionset\" data-linktype=\"relative-path\">PermissionSet</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public PolicyStatement (System.Security.PermissionSet permSet);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>permSet</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.permissionset\" data-linktype=\"relative-path\">PermissionSet</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.security.permissionset\" data-linktype=\"relative-path\">PermissionSet</a> with which to initialize the new instance.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Policy_PolicyStatement__ctor_System_Security_PermissionSet_System_Security_Policy_PolicyStatementAttribute_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PolicyStatement(PermissionSet, PolicyStatementAttribute)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.policy.policystatement\" data-linktype=\"relative-path\">PolicyStatement</a> class with the specified <a class=\"xref\" href=\"system.security.permissionset\" data-linktype=\"relative-path\">PermissionSet</a> and attributes.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public PolicyStatement (System.Security.PermissionSet permSet, System.Security.Policy.PolicyStatementAttribute attributes);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>permSet</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.permissionset\" data-linktype=\"relative-path\">PermissionSet</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.security.permissionset\" data-linktype=\"relative-path\">PermissionSet</a> with which to initialize the new instance.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>attributes</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.policystatementattribute\" data-linktype=\"relative-path\">PolicyStatementAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A bitwise combination of the <a class=\"xref\" href=\"system.security.policy.policystatementattribute\" data-linktype=\"relative-path\">PolicyStatementAttribute</a> values.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Policy_PolicyStatement_Attributes\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Attributes</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets the attributes of the policy statement.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Security.Policy.PolicyStatementAttribute Attributes { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.policystatementattribute\" data-linktype=\"relative-path\">PolicyStatementAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The attributes of the policy statement.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Policy_PolicyStatement_AttributeString\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">AttributeString</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a string representation of the attributes of the policy statement.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string AttributeString { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A text string representing the attributes of the policy statement.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Use this property to get a text string of the attributes currently set for the <a class=\"xref\" href=\"system.security.policy.policystatement\" data-linktype=\"relative-path\">PolicyStatement</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Policy_PolicyStatement_PermissionSet\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PermissionSet</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets the <a class=\"xref\" href=\"system.security.permissionset\" data-linktype=\"relative-path\">PermissionSet</a> of the policy statement.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Security.PermissionSet PermissionSet { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.permissionset\" data-linktype=\"relative-path\">PermissionSet</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.security.permissionset\" data-linktype=\"relative-path\">PermissionSet</a> of the policy statement.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Policy_PolicyStatement_Copy\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Copy()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Creates an equivalent copy of the current policy statement.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Security.Policy.PolicyStatement Copy ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.policystatement\" data-linktype=\"relative-path\">PolicyStatement</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A new copy of the <a class=\"xref\" href=\"system.security.policy.policystatement\" data-linktype=\"relative-path\">PolicyStatement</a> with <span class=\"xref\">stem.Security.Policy.PolicyStatement.PermissionSet*</span> and <span class=\"xref\">stem.Security.Policy.PolicyStatement.Attributes*</span> identical to those of the current <a class=\"xref\" href=\"system.security.policy.policystatement\" data-linktype=\"relative-path\">PolicyStatement</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Policy_PolicyStatement_Equals_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Equals(Object)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Determines whether the specified <a class=\"xref\" href=\"system.security.policy.policystatement\" data-linktype=\"relative-path\">PolicyStatement</a> object is equal to the current <a class=\"xref\" href=\"system.security.policy.policystatement\" data-linktype=\"relative-path\">PolicyStatement</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override bool Equals (object obj);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>obj</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.security.policy.policystatement\" data-linktype=\"relative-path\">PolicyStatement</a> object to compare with the current <a class=\"xref\" href=\"system.security.policy.policystatement\" data-linktype=\"relative-path\">PolicyStatement</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the specified <a class=\"xref\" href=\"system.security.policy.policystatement\" data-linktype=\"relative-path\">PolicyStatement</a> is equal to the current <a class=\"xref\" href=\"system.security.policy.policystatement\" data-linktype=\"relative-path\">PolicyStatement</a> object; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>For more information, see the <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Policy_PolicyStatement_FromXml_System_Security_SecurityElement_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FromXml(SecurityElement)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reconstructs a security object with a given state from an XML encoding.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void FromXml (System.Security.SecurityElement et);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>et</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The XML encoding to use to reconstruct the security object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <code>et</code> parameter is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <code>et</code> parameter is not a valid <a class=\"xref\" href=\"system.security.policy.policystatement\" data-linktype=\"relative-path\">PolicyStatement</a> encoding.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Policy_PolicyStatement_FromXml_System_Security_SecurityElement_System_Security_Policy_PolicyLevel_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FromXml(SecurityElement, PolicyLevel)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reconstructs a security object with a given state from an XML encoding.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void FromXml (System.Security.SecurityElement et, System.Security.Policy.PolicyLevel level);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>et</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The XML encoding to use to reconstruct the security object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>level</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.policylevel\" data-linktype=\"relative-path\">PolicyLevel</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.security.policy.policylevel\" data-linktype=\"relative-path\">PolicyLevel</a> context for lookup of <a class=\"xref\" href=\"system.security.namedpermissionset\" data-linktype=\"relative-path\">NamedPermissionSet</a> values.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <code>et</code> parameter is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <code>et</code> parameter is not a valid <a class=\"xref\" href=\"system.security.policy.policystatement\" data-linktype=\"relative-path\">PolicyStatement</a> encoding.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Policy_PolicyStatement_GetHashCode\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetHashCode()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a hash code for the <a class=\"xref\" href=\"system.security.policy.policystatement\" data-linktype=\"relative-path\">PolicyStatement</a> object that is suitable for use in hashing algorithms and data structures such as a hash table.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override int GetHashCode ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A hash code for the current <a class=\"xref\" href=\"system.security.policy.policystatement\" data-linktype=\"relative-path\">PolicyStatement</a> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The hash code for two instances of the same permission might be different, hence a hash code should not be used to compare two <a class=\"xref\" href=\"system.security.policy.policystatement\" data-linktype=\"relative-path\">PolicyStatement</a> objects.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Policy_PolicyStatement_ToXml\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ToXml()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Creates an XML encoding of the security object and its current state.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Security.SecurityElement ToXml ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>An XML encoding of the security object, including any state information.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Policy_PolicyStatement_ToXml_System_Security_Policy_PolicyLevel_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ToXml(PolicyLevel)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Creates an XML encoding of the security object and its current state.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Security.SecurityElement ToXml (System.Security.Policy.PolicyLevel level);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>level</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.policylevel\" data-linktype=\"relative-path\">PolicyLevel</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.security.policy.policylevel\" data-linktype=\"relative-path\">PolicyLevel</a> context for lookup of <a class=\"xref\" href=\"system.security.namedpermissionset\" data-linktype=\"relative-path\">NamedPermissionSet</a> values.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>An XML encoding of the security object, including any state information.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Security.Policy.PolicyStatement.yml\">\r\n<meta name=\"APIName\" content=\"System.Security.Policy.PolicyStatement\">\r\n<meta name=\"APIName\" content=\"System.Security.Policy.PolicyStatement..ctor\">\r\n<meta name=\"APIName\" content=\"System.Security.Policy.PolicyStatement.Attributes\">\r\n<meta name=\"APIName\" content=\"System.Security.Policy.PolicyStatement.AttributeString\">\r\n<meta name=\"APIName\" content=\"System.Security.Policy.PolicyStatement.Copy\">\r\n<meta name=\"APIName\" content=\"System.Security.Policy.PolicyStatement.Equals\">\r\n<meta name=\"APIName\" content=\"System.Security.Policy.PolicyStatement.FromXml\">\r\n<meta name=\"APIName\" content=\"System.Security.Policy.PolicyStatement.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Security.Policy.PolicyStatement.PermissionSet\">\r\n<meta name=\"APIName\" content=\"System.Security.Policy.PolicyStatement.ToXml\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-29 05:54 AM\">\r\n<meta name=\"document_id\" content=\"f93498cf-accb-3662-ece4-f6bd4345db01\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the statement of a  describing the permissions and other information that apply to code with a particular set of evidence. This class cannot be inherited.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.security.policy/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Security.Policy.PolicyStatement\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Security.Policy.PolicyStatement.yml","open_to_public_contributors":false,"api_name":["System.Security.Policy.PolicyStatement","System.Security.Policy.PolicyStatement..ctor","System.Security.Policy.PolicyStatement.Attributes","System.Security.Policy.PolicyStatement.AttributeString","System.Security.Policy.PolicyStatement.Copy","System.Security.Policy.PolicyStatement.Equals","System.Security.Policy.PolicyStatement.FromXml","System.Security.Policy.PolicyStatement.GetHashCode","System.Security.Policy.PolicyStatement.PermissionSet","System.Security.Policy.PolicyStatement.ToXml"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Security.Policy.PolicyStatement","System::Security::Policy::PolicyStatement","System.Security.Policy.PolicyStatement.#ctor","System::Security::Policy::PolicyStatement::#ctor","System.Security.Policy.PolicyStatement.Attributes","System::Security::Policy::PolicyStatement::Attributes","System.Security.Policy.PolicyStatement.AttributeString","System::Security::Policy::PolicyStatement::AttributeString","System.Security.Policy.PolicyStatement.Copy","System::Security::Policy::PolicyStatement::Copy","System.Security.Policy.PolicyStatement.Equals","System::Security::Policy::PolicyStatement::Equals","System.Security.Policy.PolicyStatement.FromXml","System::Security::Policy::PolicyStatement::FromXml","System.Security.Policy.PolicyStatement.GetHashCode","System::Security::Policy::PolicyStatement::GetHashCode","System.Security.Policy.PolicyStatement.PermissionSet","System::Security::Policy::PolicyStatement::PermissionSet","System.Security.Policy.PolicyStatement.ToXml","System::Security::Policy::PolicyStatement::ToXml"],"dev_langs":["csharp"],"updated_at":"2017-03-29 05:54 AM","document_id":"f93498cf-accb-3662-ece4-f6bd4345db01","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Security.Policy/PolicyStatement.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"PolicyStatement class | Microsoft Docs","_op_ogTitle":"PolicyStatement class","description":"Represents the statement of a  describing the permissions and other information that apply to code with a particular set of evidence. This class cannot be inherited.\n","toc_asset_id":"api/_splitted/System.Security.Policy/toc.json","toc_rel":"_splitted/System.Security.Policy/toc.json","source_url":"","ms.assetid":"System.Security.Policy.PolicyStatement","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.security.policy.policystatement","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.security.policy.policystatement","fileRelativePath":"api/System.Security.Policy.PolicyStatement.html"},"themesRelativePathToOutputRoot":"_themes/"}