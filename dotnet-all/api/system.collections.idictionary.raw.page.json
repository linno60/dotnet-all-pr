{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">IDictionary</span>\r\n      Interface\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents a nongeneric collection of key/value pairs.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic interface IDictionary : System.Collections.ICollection</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Attributes</dt><dd>\r\n  \t\t<div class=\"cdlHolder\">\r\n  \t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example demonstrates how to define a simple dictionary class that implements the IDictionary interface.  </p>\n<pre><code class=\"lang-cpp\" name=\"Dictionary#1\">using namespace System;\nusing namespace System::Collections;\n\n// This class implements a simple dictionary using an array of\n// DictionaryEntry objects (key/value pairs).\npublic ref class SimpleDictionary : public IDictionary\n{\n    // The array of items\nprivate:\n    array&lt;DictionaryEntry^&gt;^ items;\nprivate:\n    int itemsInUse;\n\n    // Construct the SimpleDictionary with the desired number of\n    // items. The number of items cannot change for the life time of\n    // this SimpleDictionary.\npublic:\n    SimpleDictionary(int size)\n    {\n        items = gcnew array&lt;DictionaryEntry^&gt;(size);\n    }\n\n    #pragma region IDictionary Members\npublic:\n    property virtual bool IsReadOnly\n    {\n        bool get()\n        {\n            return false;\n        }\n    }\npublic:\n    virtual bool Contains(Object^ key)\n    {\n        int index;\n        return TryGetIndexOfKey(key, &amp;index);\n    }\npublic:\n    virtual property bool IsFixedSize\n    {\n        bool get()\n        {\n            return false;\n        }\n    }\npublic:\n    virtual void Remove(Object^ key)\n    {\n        if (key == nullptr)\n        {\n            throw gcnew ArgumentNullException(&quot;key&quot;);\n        }\n        // Try to find the key in the DictionaryEntry array\n        int index;\n        if (TryGetIndexOfKey(key, &amp;index))\n        {\n            // If the key is found, slide all the items down.\n            Array::Copy(items, index + 1, items, index, itemsInUse -\n                index - 1);\n            itemsInUse--;\n        }\n        else\n        {\n            // If the key is not in the dictionary, just return.\n            return;\n        }\n    }\npublic:\n    virtual void Clear()\n    {\n        itemsInUse = 0;\n    }\npublic:\n    virtual void Add(Object^ key, Object^ value)\n    {\n        // Add the new key/value pair even if this key already exists\n        // in the dictionary.\n        if (itemsInUse == items-&gt;Length)\n        {\n            throw gcnew InvalidOperationException\n                (&quot;The dictionary cannot hold any more items.&quot;);\n        }\n        items[itemsInUse++] = gcnew DictionaryEntry(key, value);\n    }\npublic:\n    virtual property ICollection^ Keys\n    {\n        ICollection^ get()\n        {\n            // Return an array where each item is a key.\n            array&lt;Object^&gt;^ keys = gcnew array&lt;Object^&gt;(itemsInUse);\n            for (int i = 0; i &lt; itemsInUse; i++)\n            {\n                keys[i] = items[i]-&gt;Key;\n            }\n            return keys;\n        }\n    }\npublic:\n    virtual property ICollection^ Values\n    {\n        ICollection^ get()\n        {\n            // Return an array where each item is a value.\n            array&lt;Object^&gt;^ values = gcnew array&lt;Object^&gt;(itemsInUse);\n            for (int i = 0; i &lt; itemsInUse; i++)\n            {\n                values[i] = items[i]-&gt;Value;\n            }\n            return values;\n        }\n    }\npublic:\n    virtual property Object^ default[Object^]\n    {\n        Object^ get(Object^ key)\n        {\n            // If this key is in the dictionary, return its value.\n            int index;\n            if (TryGetIndexOfKey(key, &amp;index))\n            {\n                // The key was found; return its value.\n                return items[index]-&gt;Value;\n            }\n            else\n            {\n                // The key was not found; return null.\n                return nullptr;\n            }\n        }\n\n        void set(Object^ key, Object^ value)\n        {\n            // If this key is in the dictionary, change its value.\n            int index;\n            if (TryGetIndexOfKey(key, &amp;index))\n            {\n                // The key was found; change its value.\n                items[index]-&gt;Value = value;\n            }\n            else\n            {\n                // This key is not in the dictionary; add this\n                // key/value pair.\n                Add(key, value);\n            }\n        }\n    }\nprivate:\n    bool TryGetIndexOfKey(Object^ key, int* index)\n    {\n        for (*index = 0; *index &lt; itemsInUse; *index++)\n        {\n            // If the key is found, return true (the index is also\n            // returned).\n            if (items[*index]-&gt;Key-&gt;Equals(key))\n            {\n                return true;\n            }\n        }\n\n        // Key not found, return false (index should be ignored by\n        // the caller).\n        return false;\n    }\nprivate:\n    ref class SimpleDictionaryEnumerator : public IDictionaryEnumerator\n    {\n        // A copy of the SimpleDictionary object&#39;s key/value pairs.\nprivate:\n        array&lt;DictionaryEntry^&gt;^ items;\nprivate:\n        int index;\n\npublic:\n        SimpleDictionaryEnumerator(SimpleDictionary^ sd)\n        {\n            // Make a copy of the dictionary entries currently in the\n            // SimpleDictionary object.\n            items = gcnew array&lt;DictionaryEntry^&gt;(sd-&gt;Count);\n            Array::Copy(sd-&gt;items, 0, items, 0, sd-&gt;Count);\n            index = -1;\n        }\n\n        // Return the current item.\npublic:\n        virtual property Object^ Current\n        {\n            Object^ get()\n            {\n                ValidateIndex();\n                return items[index];\n            }\n        }\n\n        // Return the current dictionary entry.\npublic:\n        virtual property DictionaryEntry Entry\n        {\n            DictionaryEntry get()\n            {\n                return (DictionaryEntry) Current;\n            }\n        }\n\n        // Return the key of the current item.\npublic:\n        virtual property Object^ Key\n        {\n            Object^ get()\n            {\n                ValidateIndex();\n\t\t\t\treturn items[index]-&gt;Key;\n            }\n        }\n\n        // Return the value of the current item.\npublic:\n        virtual property Object^ Value\n        {\n            Object^ get()\n            {\n                ValidateIndex();\n                return items[index]-&gt;Value;\n            }\n        }\n\n        // Advance to the next item.\npublic:\n        virtual bool MoveNext()\n        {\n            if (index &lt; items-&gt;Length - 1)\n            {\n                index++;\n                return true;\n            }\n            return false;\n        }\n\n        // Validate the enumeration index and throw an exception if\n        // the index is out of range.\nprivate:\n        void ValidateIndex()\n        {\n            if (index &lt; 0 || index &gt;= items-&gt;Length)\n            {\n                throw gcnew InvalidOperationException\n                    (&quot;Enumerator is before or after the collection.&quot;);\n            }\n        }\n\n        // Reset the index to restart the enumeration.\npublic:\n        virtual void Reset()\n        {\n            index = -1;\n        }\n    };\npublic:\n    virtual IDictionaryEnumerator^ GetEnumerator()\n    {\n        // Construct and return an enumerator.\n        return gcnew SimpleDictionaryEnumerator(this);\n    }\n    #pragma endregion\n\n    #pragma region ICollection Members\npublic:\n    virtual property bool IsSynchronized\n    {\n        bool get()\n        {\n            return false;\n        }\n    }\n\npublic:\n    virtual property Object^ SyncRoot\n    {\n        Object^ get()\n        {\n            throw gcnew NotImplementedException();\n        }\n    }\n\npublic:\n    virtual property int Count\n    {\n        int get()\n        {\n            return itemsInUse;\n        }\n    }\n\npublic:\n    virtual void CopyTo(Array^ array, int index)\n    {\n        throw gcnew NotImplementedException();\n    }\n    #pragma endregion\n\n    #pragma region IEnumerable Members\n\n    virtual IEnumerator^ IEnumerable_GetEnumerator() \n        = IEnumerable::GetEnumerator\n    {\n        // Construct and return an enumerator.\n        return ((IDictionary^)this)-&gt;GetEnumerator();\n    }\n    #pragma endregion\n};\n\nint main()\n{\n    // Create a dictionary that contains no more than three\n    // entries.\n    IDictionary^ d = gcnew SimpleDictionary(3);\n\n    // Add three people and their ages to the dictionary.\n    d-&gt;Add(&quot;Jeff&quot;, 40);\n    d-&gt;Add(&quot;Kristin&quot;, 34);\n    d-&gt;Add(&quot;Aidan&quot;, 1);\n\n    Console::WriteLine(&quot;Number of elements in dictionary = {0}&quot;,\n        d-&gt;Count);\n\n    Console::WriteLine(&quot;Does dictionary contain &#39;Jeff&#39;? {0}&quot;,\n        d-&gt;Contains(&quot;Jeff&quot;));\n    Console::WriteLine(&quot;Jeff&#39;s age is {0}&quot;, d[&quot;Jeff&quot;]);\n\n    // Display every entry&#39;s key and value.\n    for each (DictionaryEntry^ de in d)\n    {\n        Console::WriteLine(&quot;{0} is {1} years old.&quot;, de-&gt;Key,\n            de-&gt;Value);\n    }\n\n    // Remove an entry that exists.\n    d-&gt;Remove(&quot;Jeff&quot;);\n\n    // Remove an entry that does not exist, but do not throw an\n    // exception.\n    d-&gt;Remove(&quot;Max&quot;);\n\n    // Show the names (keys) of the people in the dictionary.\n    for each (String^ s in d-&gt;Keys)\n    {\n        Console::WriteLine(s);\n    }\n\n    // Show the ages (values) of the people in the dictionary.\n    for each (int age in d-&gt;Values)\n    {\n        Console::WriteLine(age);\n    }\n}\n\n// This code produces the following output.\n//\n// Number of elements in dictionary = 3\n// Does dictionary contain &#39;Jeff&#39;? True\n// Jeff&#39;s age is 40\n// Jeff is 40 years old.\n// Kristin is 34 years old.\n// Aidan is 1 years old.\n// Kristin\n// Aidan\n// 34\n// 1\n</code></pre><pre><code class=\"lang-cs\" name=\"Dictionary#1\">using System;\nusing System.Collections;\n\n// This class implements a simple dictionary using an array of DictionaryEntry objects (key/value pairs).\npublic class SimpleDictionary : IDictionary\n{\n    // The array of items\n    private DictionaryEntry[] items;\n    private Int32 ItemsInUse = 0;\n\n    // Construct the SimpleDictionary with the desired number of items.\n    // The number of items cannot change for the life time of this SimpleDictionary.\n    public SimpleDictionary(Int32 numItems)\n    {\n        items = new DictionaryEntry[numItems];\n    }\n\n\n    #region IDictionary Members\n    public bool IsReadOnly { get { return false; } }\n    public bool Contains(object key)\n    {\n       Int32 index;\n       return TryGetIndexOfKey(key, out index);\n    }\n    public bool IsFixedSize { get { return false; } }\n    public void Remove(object key)\n    {\n        if (key == null) throw new ArgumentNullException(&quot;key&quot;);\n        // Try to find the key in the DictionaryEntry array\n        Int32 index;\n        if (TryGetIndexOfKey(key, out index))\n        {\n            // If the key is found, slide all the items up.\n            Array.Copy(items, index + 1, items, index, ItemsInUse - index - 1);\n            ItemsInUse--;\n        } \n        else\n        {\n            // If the key is not in the dictionary, just return. \n        }\n    }\n    public void Clear() { ItemsInUse = 0; }\n    public void Add(object key, object value) \n    {\n        // Add the new key/value pair even if this key already exists in the dictionary.\n        if (ItemsInUse == items.Length)\n            throw new InvalidOperationException(&quot;The dictionary cannot hold any more items.&quot;);\n        items[ItemsInUse++] = new DictionaryEntry(key, value);\n    }\n    public ICollection Keys\n    {\n        get\n        {\n            // Return an array where each item is a key.\n            Object[] keys = new Object[ItemsInUse];\n            for (Int32 n = 0; n &lt; ItemsInUse; n++)\n                keys[n] = items[n].Key;\n            return keys;\n        }\n    }\n    public ICollection Values\n    {\n        get\n        {\n            // Return an array where each item is a value.\n            Object[] values = new Object[ItemsInUse];\n            for (Int32 n = 0; n &lt; ItemsInUse; n++)\n                values[n] = items[n].Value;\n            return values;\n        }\n    }\n    public object this[object key]\n    {\n        get\n        {   \n            // If this key is in the dictionary, return its value.\n            Int32 index;\n            if (TryGetIndexOfKey(key, out index))\n            {\n                // The key was found; return its value.\n                return items[index].Value;\n            } \n            else\n            {\n                // The key was not found; return null.\n                return null;\n            }\n        }\n\n        set\n        {\n            // If this key is in the dictionary, change its value. \n            Int32 index;\n            if (TryGetIndexOfKey(key, out index))\n            {\n                // The key was found; change its value.\n                items[index].Value = value;\n            } \n            else\n            {\n                // This key is not in the dictionary; add this key/value pair.\n                Add(key, value);\n            }\n        }\n    }\n    private Boolean TryGetIndexOfKey(Object key, out Int32 index)\n    {\n        for (index = 0; index &lt; ItemsInUse; index++)\n        {\n            // If the key is found, return true (the index is also returned).\n            if (items[index].Key.Equals(key)) return true;\n        }\n      \n        // Key not found, return false (index should be ignored by the caller).\n        return false;\n    }\n    private class SimpleDictionaryEnumerator : IDictionaryEnumerator\n    {\n        // A copy of the SimpleDictionary object&#39;s key/value pairs.\n        DictionaryEntry[] items;\n        Int32 index = -1;\n\n        public SimpleDictionaryEnumerator(SimpleDictionary sd)\n        {\n            // Make a copy of the dictionary entries currently in the SimpleDictionary object.\n            items = new DictionaryEntry[sd.Count];\n            Array.Copy(sd.items, 0, items, 0, sd.Count);\n        }\n\n        // Return the current item.\n        public Object Current { get { ValidateIndex(); return items[index]; } }\n\n        // Return the current dictionary entry.\n        public DictionaryEntry Entry\n        {\n            get { return (DictionaryEntry) Current; }\n        }\n\n        // Return the key of the current item.\n        public Object Key { get { ValidateIndex();  return items[index].Key; } }\n\n        // Return the value of the current item.\n        public Object Value { get { ValidateIndex();  return items[index].Value; } }\n\n        // Advance to the next item.\n        public Boolean MoveNext()\n        {\n            if (index &lt; items.Length - 1) { index++; return true; }\n            return false;\n        }\n\n        // Validate the enumeration index and throw an exception if the index is out of range.\n        private void ValidateIndex()\n        {\n            if (index &lt; 0 || index &gt;= items.Length)\n            throw new InvalidOperationException(&quot;Enumerator is before or after the collection.&quot;);\n        }\n\n        // Reset the index to restart the enumeration.\n        public void Reset()\n        {\n            index = -1;\n        }\n    }\n    public IDictionaryEnumerator GetEnumerator()\n    {\n        // Construct and return an enumerator.\n        return new SimpleDictionaryEnumerator(this);\n    }\n    #endregion\n\n    #region ICollection Members\n    public bool IsSynchronized { get { return false; } }\n    public object SyncRoot { get { throw new NotImplementedException(); } }\n    public int Count { get { return ItemsInUse; } }\n    public void CopyTo(Array array, int index) { throw new NotImplementedException(); }\n    #endregion\n\n    #region IEnumerable Members\n    IEnumerator IEnumerable.GetEnumerator() \n    {\n        // Construct and return an enumerator.\n        return ((IDictionary)this).GetEnumerator();\n    }\n    #endregion\n}\n\npublic sealed class App\n{\n    static void Main()\n    {\n        // Create a dictionary that contains no more than three entries.\n        IDictionary d = new SimpleDictionary(3);\n\n        // Add three people and their ages to the dictionary.\n        d.Add(&quot;Jeff&quot;, 40);\n        d.Add(&quot;Kristin&quot;, 34);\n        d.Add(&quot;Aidan&quot;, 1);\n\n        Console.WriteLine(&quot;Number of elements in dictionary = {0}&quot;, d.Count);\n\n        Console.WriteLine(&quot;Does dictionary contain &#39;Jeff&#39;? {0}&quot;, d.Contains(&quot;Jeff&quot;));\n        Console.WriteLine(&quot;Jeff&#39;s age is {0}&quot;, d[&quot;Jeff&quot;]);\n\n        // Display every entry&#39;s key and value.\n        foreach (DictionaryEntry de in d)\n        {\n            Console.WriteLine(&quot;{0} is {1} years old.&quot;, de.Key, de.Value);\n        }\n\n        // Remove an entry that exists.\n        d.Remove(&quot;Jeff&quot;);\n\n        // Remove an entry that does not exist, but do not throw an exception.\n        d.Remove(&quot;Max&quot;);\n\n        // Show the names (keys) of the people in the dictionary.\n        foreach (String s in d.Keys)\n            Console.WriteLine(s);\n\n        // Show the ages (values) of the people in the dictionary.\n        foreach (Int32 age in d.Values)\n            Console.WriteLine(age);\n    }\n}\n\n// This code produces the following output.\n//\n// Number of elements in dictionary = 3\n// Does dictionary contain &#39;Jeff&#39;? True\n// Jeff&#39;s age is 40\n// Jeff is 40 years old.\n// Kristin is 34 years old.\n// Aidan is 1 years old.\n// Kristin\n// Aidan\n// 34\n// 1\n</code></pre><pre><code class=\"lang-vb\" name=\"Dictionary#1\">Imports System\nImports System.Collections\n\n&#39; This class implements a simple dictionary using an array of DictionaryEntry objects (key/value pairs).\nPublic Class SimpleDictionary\n    Implements IDictionary\n\n    &#39; The array of items\n    Dim items() As DictionaryEntry\n    Dim ItemsInUse As Integer = 0\n\n    &#39; Construct the SimpleDictionary with the desired number of items.\n    &#39; The number of items cannot change for the life time of this SimpleDictionary.\n    Public Sub New(ByVal numItems As Integer)\n        items = New DictionaryEntry(numItems - 1) {}\n    End Sub\n\n    &#39; IDictionary Members\n    Public ReadOnly Property IsReadOnly() As Boolean Implements IDictionary.IsReadOnly\n        Get\n            Return False\n        End Get\n    End Property\n\n    Public Function Contains(ByVal key As Object) As Boolean Implements IDictionary.Contains\n        Dim index As Integer\n        Return TryGetIndexOfKey(key, index)\n    End Function\n\n    Public ReadOnly Property IsFixedSize() As Boolean Implements IDictionary.IsFixedSize\n        Get\n            Return False\n        End Get\n    End Property\n\n    Public Sub Remove(ByVal key As Object) Implements IDictionary.Remove\n        If key = Nothing Then\n            Throw New ArgumentNullException(&quot;key&quot;)\n        End If\n        &#39; Try to find the key in the DictionaryEntry array\n        Dim index As Integer\n        If TryGetIndexOfKey(key, index) Then\n\n            &#39; If the key is found, slide all the items up.\n            Array.Copy(items, index + 1, items, index, (ItemsInUse - index) - 1)\n            ItemsInUse = ItemsInUse - 1\n        Else\n\n            &#39; If the key is not in the dictionary, just return. \n        End If\n    End Sub\n\n    Public Sub Clear() Implements IDictionary.Clear\n        ItemsInUse = 0\n    End Sub\n\n    Public Sub Add(ByVal key As Object, ByVal value As Object) Implements IDictionary.Add\n\n        &#39; Add the new key/value pair even if this key already exists in the dictionary.\n        If ItemsInUse = items.Length Then\n            Throw New InvalidOperationException(&quot;The dictionary cannot hold any more items.&quot;)\n        End If\n        items(ItemsInUse) = New DictionaryEntry(key, value)\n        ItemsInUse = ItemsInUse + 1\n    End Sub\n\n    Public ReadOnly Property Keys() As ICollection Implements IDictionary.Keys\n        Get\n\n            &#39; Return an array where each item is a key.\n            &#39; Note: Declaring keyArray() to have a size of ItemsInUse - 1\n            &#39;       ensures that the array is properly sized, in VB.NET\n            &#39;       declaring an array of size N creates an array with\n            &#39;       0 through N elements, including N, as opposed to N - 1\n            &#39;       which is the default behavior in C# and C++.\n            Dim keyArray() As Object = New Object(ItemsInUse - 1) {}\n            Dim n As Integer\n            For n = 0 To ItemsInUse - 1\n                keyArray(n) = items(n).Key\n            Next n\n\n            Return keyArray\n        End Get\n    End Property\n\n    Public ReadOnly Property Values() As ICollection Implements IDictionary.Values\n        Get\n            &#39; Return an array where each item is a value.\n            Dim valueArray() As Object = New Object(ItemsInUse - 1) {}\n            Dim n As Integer\n            For n = 0 To ItemsInUse - 1\n                valueArray(n) = items(n).Value\n            Next n\n\n            Return valueArray\n        End Get\n    End Property\n\n    Public Property Item(ByVal key As Object) As Object Implements IDictionary.Item\n        Get\n\n            &#39; If this key is in the dictionary, return its value.\n            Dim index As Integer\n            If TryGetIndexOfKey(key, index) Then\n\n                &#39; The key was found return its value.\n                Return items(index).Value\n            Else\n\n                &#39; The key was not found return null.\n                Return Nothing\n            End If\n        End Get\n\n        Set(ByVal value As Object)\n            &#39; If this key is in the dictionary, change its value. \n            Dim index As Integer\n            If TryGetIndexOfKey(key, index) Then\n\n                &#39; The key was found change its value.\n                items(index).Value = value\n            Else\n\n                &#39; This key is not in the dictionary add this key/value pair.\n                Add(key, value)\n            End If\n        End Set\n    End Property\n\n    Private Function TryGetIndexOfKey(ByVal key As Object, ByRef index As Integer) As Boolean\n        For index = 0 To ItemsInUse - 1\n            &#39; If the key is found, return true (the index is also returned).\n            If items(index).Key.Equals(key) Then\n                Return True\n            End If\n        Next index\n\n        &#39; Key not found, return false (index should be ignored by the caller).\n        Return False\n    End Function\n\n    Private Class SimpleDictionaryEnumerator\n        Implements IDictionaryEnumerator\n\n        &#39; A copy of the SimpleDictionary object&#39;s key/value pairs.\n        Dim items() As DictionaryEntry\n        Dim index As Integer = -1\n\n        Public Sub New(ByVal sd As SimpleDictionary)\n            &#39; Make a copy of the dictionary entries currently in the SimpleDictionary object.\n            items = New DictionaryEntry(sd.Count - 1) {}\n            Array.Copy(sd.items, 0, items, 0, sd.Count)\n        End Sub\n\n        &#39; Return the current item.\n        Public ReadOnly Property Current() As Object Implements IDictionaryEnumerator.Current\n            Get\n                ValidateIndex()\n                Return items(index)\n            End Get\n        End Property\n\n        &#39; Return the current dictionary entry.\n        Public ReadOnly Property Entry() As DictionaryEntry Implements IDictionaryEnumerator.Entry\n            Get\n                Return Current\n            End Get\n        End Property\n\n        &#39; Return the key of the current item.\n        Public ReadOnly Property Key() As Object Implements IDictionaryEnumerator.Key\n            Get\n                ValidateIndex()\n                Return items(index).Key\n            End Get\n        End Property\n\n        &#39; Return the value of the current item.\n        Public ReadOnly Property Value() As Object Implements IDictionaryEnumerator.Value\n            Get\n                ValidateIndex()\n                Return items(index).Value\n            End Get\n        End Property\n\n        &#39; Advance to the next item.\n        Public Function MoveNext() As Boolean Implements IDictionaryEnumerator.MoveNext\n            If index &lt; items.Length - 1 Then\n                index = index + 1\n                Return True\n            End If\n\n            Return False\n        End Function\n\n        &#39; Validate the enumeration index and throw an exception if the index is out of range.\n        Private Sub ValidateIndex()\n            If index &lt; 0 Or index &gt;= items.Length Then\n                Throw New InvalidOperationException(&quot;Enumerator is before or after the collection.&quot;)\n            End If\n        End Sub\n\n        &#39; Reset the index to restart the enumeration.\n        Public Sub Reset() Implements IDictionaryEnumerator.Reset\n            index = -1\n        End Sub\n\n    End Class\n\n    Public Function GetEnumerator() As IDictionaryEnumerator Implements IDictionary.GetEnumerator\n\n        &#39;Construct and return an enumerator.\n        Return New SimpleDictionaryEnumerator(Me)\n    End Function\n\n\n    &#39; ICollection Members\n    Public ReadOnly Property IsSynchronized() As Boolean Implements IDictionary.IsSynchronized\n        Get\n            Return False\n        End Get\n    End Property\n\n    Public ReadOnly Property SyncRoot() As Object Implements IDictionary.SyncRoot\n        Get\n            Throw New NotImplementedException()\n        End Get\n    End Property\n\n    Public ReadOnly Property Count() As Integer Implements IDictionary.Count\n        Get\n            Return ItemsInUse\n        End Get\n    End Property\n\n    Public Sub CopyTo(ByVal array As Array, ByVal index As Integer) Implements IDictionary.CopyTo\n        Throw New NotImplementedException()\n    End Sub\n\n    &#39; IEnumerable Members\n    Public Function GetEnumerator1() As IEnumerator Implements IEnumerable.GetEnumerator\n\n        &#39; Construct and return an enumerator.\n        Return Me.GetEnumerator()\n    End Function\nEnd Class\n\nPublic NotInheritable Class App\n    Public Shared Sub Main()\n        &#39; Create a dictionary that contains no more than three entries.\n        Dim d As IDictionary = New SimpleDictionary(3)\n\n        &#39; Add three people and their ages to the dictionary.\n        d.Add(&quot;Jeff&quot;, 40)\n        d.Add(&quot;Kristin&quot;, 34)\n        d.Add(&quot;Aidan&quot;, 1)\n\n        Console.WriteLine(&quot;Number of elements in dictionary = {0}&quot;, d.Count)\n\n        Console.WriteLine(&quot;Does dictionary contain &#39;Jeff&#39;? {0}&quot;, d.Contains(&quot;Jeff&quot;))\n        Console.WriteLine(&quot;Jeff&#39;s age is {0}&quot;, d(&quot;Jeff&quot;))\n\n        &#39; Display every entry&#39;s key and value.\n        Dim de As DictionaryEntry\n        For Each de In d\n            Console.WriteLine(&quot;{0} is {1} years old.&quot;, de.Key, de.Value)\n        Next\n\n        &#39; Remove an entry that exists.\n        d.Remove(&quot;Jeff&quot;)\n\n        &#39; Remove an entry that does not exist, but do not throw an exception.\n        d.Remove(&quot;Max&quot;)\n\n        &#39; Show the names (keys) of the people in the dictionary.\n        Dim s As String\n\n        For Each s In d.Keys\n            Console.WriteLine(s)\n        Next\n\n        &#39; Show the ages (values) of the people in the dictionary.\n        Dim age As Integer\n        For Each age In d.Values\n            Console.WriteLine(age)\n        Next\n\n    End Sub\nEnd Class\n\n&#39; This code produces the following output.\n&#39;\n&#39; Number of elements in dictionary = 3\n&#39; Does dictionary contain &#39;Jeff&#39;? True\n&#39; Jeff&#39;s age is 40\n&#39; Jeff is 40 years old.\n&#39; Kristin is 34 years old.\n&#39; Aidan is 1 years old.\n&#39; Kristin\n&#39; Aidan\n&#39; 34\n&#39; 1\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The IDictionary interface is the base interface for nongeneric collections of key/value pairs. For the generic version of this interface, see <a class=\"xref\" href=\"system.collections.generic.idictionary-2\" data-linktype=\"relative-path\">System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;</a>.  </p>\n<p> Each element is a key/value pair stored in a <a class=\"xref\" href=\"system.collections.dictionaryentry\" data-linktype=\"relative-path\">DictionaryEntry</a> object.  </p>\n<p> Each pair must have a unique key. Implementations can vary in whether they allow the key to be null.  The value can be null and does not have to be unique. The IDictionary interface allows the contained keys and values to be enumerated, but it does not imply any particular sort order.  </p>\n<p> IDictionary implementations fall into three categories: read-only, fixed-size, variable-size. A read-only IDictionary object cannot be modified. A fixed-size IDictionary object does not allow the addition or removal of elements, but does allow the modification of existing elements. A variable-size IDictionary object allows the addition, removal, and modification of elements.  </p>\n<p> The <code>foreach</code> statement of the C# language (<code>For Each</code> in Visual Basic) returns an object of the type of the elements in the collection. Since each element of the IDictionary object is a key/value pair, the element type is not the type of the key or the type of the value. Instead, the element type is <a class=\"xref\" href=\"system.collections.dictionaryentry\" data-linktype=\"relative-path\">DictionaryEntry</a>. For example:  </p>\n<pre><code class=\"lang-cs\" name=\"Dictionary#14\">foreach (DictionaryEntry de in myDictionary)\n{\n    //...\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Dictionary#14\">for each (DictionaryEntry de in myDictionary)\n{\n    //...\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Dictionary#14\">For Each de As DictionaryEntry In myDictionary\n    &#39;...\nNext de\n</code></pre><p> The <code>foreach</code> statement is a wrapper around the enumerator, which allows only reading from but not writing to the collection.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Collections_IDictionary_IsFixedSize_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Collections_IDictionary_IsFixedSize\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsFixedSize</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value indicating whether the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object has a fixed size.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsFixedSize { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object has a fixed size; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but does allow the modification of existing elements.  </p>\n<p> A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Collections_IDictionary_IsReadOnly_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Collections_IDictionary_IsReadOnly\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsReadOnly</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value indicating whether the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object is read-only.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsReadOnly { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object is read-only; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Collections_IDictionary_Item_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Collections_IDictionary_Item_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Item(Object)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets the element with the specified key.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public object this[object key] { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>key</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The key of the element to get or set.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The element with the specified key, or <code>null</code> if the key does not exist.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>key</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The property is set and the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object is read-only.  </p>\n<p> -or-  </p>\n<p> The property is set, <code>key</code> does not exist in the collection, and the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> has a fixed size.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This property provides the ability to access a specific element in the collection by using the following syntax: <code>myCollection[key]</code>.  </p>\n<p> You can also use the Item property to add new elements by setting the value of a key that does not exist in the dictionary (for example, <code>myCollection[&quot;myNonexistentKey&quot;] = myValue</code>). However, if the specified key already exists in the dictionary, setting the Item property overwrites the old value. In contrast, the <a class=\"xref\" href=\"system.collections.idictionary#System_Collections_IDictionary_Add_\" data-linktype=\"relative-path\">Add</a> method does not modify existing elements.  </p>\n<p> Implementations can vary in whether they allow the key to be <code>null</code>.  </p>\n<p> The C# language uses the <code>this</code><a href=\"../topic/this%20(c%23%20reference)\" data-linktype=\"relative-path\">this</a> keyword to define the indexers instead of implementing the Item property. Visual Basic implements Item as a default property, which provides the same indexing functionality.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Collections_IDictionary_Keys_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Collections_IDictionary_Keys\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Keys</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets an <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> object containing the keys of the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Collections.ICollection Keys { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> object containing the keys of the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The order of the keys in the returned <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> object is unspecified, but is guaranteed to be the same order as the corresponding values in the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> returned by the <a class=\"xref\" href=\"system.collections.idictionary#System_Collections_IDictionary_Values_\" data-linktype=\"relative-path\">Values</a> property.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Collections_IDictionary_Values_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Collections_IDictionary_Values\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Values</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets an <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> object containing the values in the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Collections.ICollection Values { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> object containing the values in the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The order of the values in the returned <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> object is unspecified, but is guaranteed to be the same order as the corresponding keys in the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> returned by the <a class=\"xref\" href=\"system.collections.idictionary#System_Collections_IDictionary_Keys_\" data-linktype=\"relative-path\">Keys</a> property.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Collections_IDictionary_Add_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Collections_IDictionary_Add_System_Object_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Add(Object, Object)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Adds an element with the provided key and value to the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void Add (object key, object value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>key</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> to use as the key of the element to add.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> to use as the value of the element to add.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>key</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>An element with the same key already exists in the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> is read-only.  </p>\n<p> -or-  </p>\n<p> The <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> has a fixed size.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>You can also use the <a class=\"xref\" href=\"system.collections.idictionary#System_Collections_IDictionary_Item_\" data-linktype=\"relative-path\">Item</a> property to add new elements by setting the value of a key that does not exist in the dictionary (for example, <code>myCollection[&quot;myNonexistentKey&quot;] = myValue</code>). However, if the specified key already exists in the dictionary, setting the <a class=\"xref\" href=\"system.collections.idictionary#System_Collections_IDictionary_Item_\" data-linktype=\"relative-path\">Item</a> property overwrites the old value. In contrast, the Add method does not modify existing elements.  </p>\n<p> Implementations can vary in whether they allow the key to be <code>null</code>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Collections_IDictionary_Clear_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Collections_IDictionary_Clear\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Clear()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Removes all elements from the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void Clear ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object is read-only.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Collections_IDictionary_Contains_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Collections_IDictionary_Contains_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Contains(Object)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Determines whether the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object contains an element with the specified key.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool Contains (object key);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>key</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The key to locate in the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> contains an element with the key; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>key</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Implementations can vary in whether they allow the key to be <code>null</code>.  </p>\n<p> Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods on <code>item</code> to determine whether <code>item</code> exists. In the earlier versions of the .NET Framework, this determination was made by using the <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods of the <code>item</code> parameter on the objects in the collection.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Collections_IDictionary_GetEnumerator_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Collections_IDictionary_GetEnumerator\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetEnumerator()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns an <a class=\"xref\" href=\"system.collections.idictionaryenumerator\" data-linktype=\"relative-path\">IDictionaryEnumerator</a> object for the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Collections.IDictionaryEnumerator GetEnumerator ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.idictionaryenumerator\" data-linktype=\"relative-path\">IDictionaryEnumerator</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.collections.idictionaryenumerator\" data-linktype=\"relative-path\">IDictionaryEnumerator</a> object for the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>[Visual Basic, C#]  </p>\n<p> The <code>foreach</code> statement of the C# language (<code>for each</code> in Visual Basic) hides the complexity of the enumerators.  Therefore, using <code>foreach</code> is recommended instead of directly manipulating the enumerator.  </p>\n<p> Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  </p>\n<p> Initially, the enumerator is positioned before the first element in the collection. <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> also brings the enumerator back to this position.  At this position, the <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> property is undefined. Therefore, you must call <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> to advance the enumerator to the first element of the collection before reading the value of <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a>.  </p>\n<p> <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> returns the same object until either <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> or <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> is called. <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> sets <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> to the next element.  </p>\n<p> If <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> passes the end of the collection, the enumerator is positioned after the last element in the collection and <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returns <code>false</code>. When the enumerator is at this position, subsequent calls to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> also return <code>false</code>. If the last call to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returned <code>false</code>, <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> is undefined. To set <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> to the first element of the collection again, you can call <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> followed by <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a>.  </p>\n<p> An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  </p>\n<p> The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Collections_IDictionary_Remove_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Collections_IDictionary_Remove_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Remove(Object)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Removes the element with the specified key from the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void Remove (object key);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>key</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The key of the element to remove.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>key</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object is read-only.  </p>\n<p> -or-  </p>\n<p> The <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> has a fixed size.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object does not contain an element with the specified key, the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> remains unchanged. No exception is thrown.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"uhfHeaderId\" content=\"MSDocsHeader-DotNet\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Collections.IDictionary.yml\">\r\n<meta name=\"APIName\" content=\"System.Collections.IDictionary\">\r\n<meta name=\"APIName\" content=\"System.Collections.IDictionary.Add\">\r\n<meta name=\"APIName\" content=\"System.Collections.IDictionary.Clear\">\r\n<meta name=\"APIName\" content=\"System.Collections.IDictionary.Contains\">\r\n<meta name=\"APIName\" content=\"System.Collections.IDictionary.GetEnumerator\">\r\n<meta name=\"APIName\" content=\"System.Collections.IDictionary.IsFixedSize\">\r\n<meta name=\"APIName\" content=\"System.Collections.IDictionary.IsReadOnly\">\r\n<meta name=\"APIName\" content=\"System.Collections.IDictionary.Item\">\r\n<meta name=\"APIName\" content=\"System.Collections.IDictionary.Keys\">\r\n<meta name=\"APIName\" content=\"System.Collections.IDictionary.Remove\">\r\n<meta name=\"APIName\" content=\"System.Collections.IDictionary.Values\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-04-01 05:59 PM\">\r\n<meta name=\"document_id\" content=\"a9a4387d-1fa5-4d44-a652-b777ee8388af\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a nongeneric collection of key/value pairs.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.collections/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Collections.IDictionary\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","uhfHeaderId":"MSDocsHeader-DotNet","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Collections.IDictionary.yml","open_to_public_contributors":false,"api_name":["System.Collections.IDictionary","System.Collections.IDictionary.Add","System.Collections.IDictionary.Clear","System.Collections.IDictionary.Contains","System.Collections.IDictionary.GetEnumerator","System.Collections.IDictionary.IsFixedSize","System.Collections.IDictionary.IsReadOnly","System.Collections.IDictionary.Item","System.Collections.IDictionary.Keys","System.Collections.IDictionary.Remove","System.Collections.IDictionary.Values"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Collections.IDictionary","System::Collections::IDictionary","System.Collections.IDictionary.Add","System::Collections::IDictionary::Add","System.Collections.IDictionary.Clear","System::Collections::IDictionary::Clear","System.Collections.IDictionary.Contains","System::Collections::IDictionary::Contains","System.Collections.IDictionary.GetEnumerator","System::Collections::IDictionary::GetEnumerator","System.Collections.IDictionary.IsFixedSize","System::Collections::IDictionary::IsFixedSize","System.Collections.IDictionary.IsReadOnly","System::Collections::IDictionary::IsReadOnly","System.Collections.IDictionary.Item","System::Collections::IDictionary::Item","System.Collections.IDictionary.Keys","System::Collections::IDictionary::Keys","System.Collections.IDictionary.Remove","System::Collections::IDictionary::Remove","System.Collections.IDictionary.Values","System::Collections::IDictionary::Values"],"dev_langs":["csharp"],"updated_at":"2017-04-01 05:59 PM","document_id":"a9a4387d-1fa5-4d44-a652-b777ee8388af","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Collections/IDictionary.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IDictionary interface | Microsoft Docs","_op_ogTitle":"IDictionary interface","description":"Represents a nongeneric collection of key/value pairs.\n","toc_asset_id":"api/_splitted/System.Collections/toc.json","toc_rel":"_splitted/System.Collections/toc.json","source_url":"","ms.assetid":"System.Collections.IDictionary","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.collections.idictionary","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.collections.idictionary","fileRelativePath":"api/System.Collections.IDictionary.html"},"themesRelativePathToOutputRoot":"_themes/"}