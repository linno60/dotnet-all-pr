{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">WorkflowStatus</span>\r\n      Enum\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Specifies the status of a workflow instance.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\r\n  \t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[ECMA2Yaml.Models.ECMAAttribute]\npublic enum WorkflowStatus</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a></span></div><span class=\"lang-csharp\">WorkflowStatus</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Attributes</dt><dd>\r\n  \t\t<div class=\"cdlHolder\">\r\n  \t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.obsoleteattribute\" title=\"System.ObsoleteAttribute\" data-linktype=\"relative-path\">ObsoleteAttribute</a></span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example demonstrates how you can use the WorkflowStatus values to set the <a class=\"xref\" href=\"system.workflow.runtime.tracking.sqltrackingqueryoptions#System_Workflow_Runtime_Tracking_SqlTrackingQueryOptions_WorkflowStatus_\" data-linktype=\"relative-path\">WorkflowStatus</a> property. Each value constrains the <a class=\"xref\" href=\"system.workflow.runtime.tracking.sqltrackingworkflowinstance\" data-linktype=\"relative-path\">SqlTrackingWorkflowInstance</a> in a different way.  </p>\n<p> This code example is part of the Workflow Monitor SDK Sample from the DatabaseService.cs file. For more information, see <a href=\"http://msdn.microsoft.com/en-us/4f70c1c5-f82d-4d5f-8b7d-943b9f99f8e2\" data-linktype=\"external\">Workflow Monitor</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"WF_Samples#127\">internal List&lt;SqlTrackingWorkflowInstance&gt; GetWorkflows(string workflowEvent, DateTime from, DateTime until, TrackingDataItemValue trackingDataItemValue)\n{\n    try\n    {\n        List&lt;SqlTrackingWorkflowInstance&gt; queriedWorkflows = new List&lt;SqlTrackingWorkflowInstance&gt;();\n        SqlTrackingQuery sqlTrackingQuery = new SqlTrackingQuery(connectionString);\n        SqlTrackingQueryOptions sqlTrackingQueryOptions = new SqlTrackingQueryOptions();\n        sqlTrackingQueryOptions.StatusMinDateTime = from.ToUniversalTime();\n        sqlTrackingQueryOptions.StatusMaxDateTime = until.ToUniversalTime();\n        // If QualifiedName, FieldName, or DataValue is not supplied, we will not query since they are all required to match\n        if (!((string.Empty == trackingDataItemValue.QualifiedName) || (string.Empty == trackingDataItemValue.FieldName) || ((string.Empty == trackingDataItemValue.DataValue))))\n            sqlTrackingQueryOptions.TrackingDataItems.Add(trackingDataItemValue);\n\n        queriedWorkflows.Clear();\n\n        if (&quot;created&quot; == workflowEvent.ToLower(CultureInfo.InvariantCulture))\n        {\n            sqlTrackingQueryOptions.WorkflowStatus = WorkflowStatus.Created;\n            queriedWorkflows.AddRange(sqlTrackingQuery.GetWorkflows(sqlTrackingQueryOptions));\n        }\n        else if (&quot;completed&quot; == workflowEvent.ToLower(CultureInfo.InvariantCulture))\n        {\n            sqlTrackingQueryOptions.WorkflowStatus = WorkflowStatus.Completed;\n            queriedWorkflows.AddRange(sqlTrackingQuery.GetWorkflows(sqlTrackingQueryOptions));\n        }\n        else if (&quot;running&quot; == workflowEvent.ToLower(CultureInfo.InvariantCulture))\n        {\n            sqlTrackingQueryOptions.WorkflowStatus = WorkflowStatus.Running;\n            queriedWorkflows.AddRange(sqlTrackingQuery.GetWorkflows(sqlTrackingQueryOptions));\n        }\n        else if (&quot;suspended&quot; == workflowEvent.ToLower(CultureInfo.InvariantCulture))\n        {\n            sqlTrackingQueryOptions.WorkflowStatus = WorkflowStatus.Suspended;\n            queriedWorkflows.AddRange(sqlTrackingQuery.GetWorkflows(sqlTrackingQueryOptions));\n        }\n        else if (&quot;terminated&quot; == workflowEvent.ToLower(CultureInfo.InvariantCulture))\n        {\n            sqlTrackingQueryOptions.WorkflowStatus = WorkflowStatus.Terminated;\n            queriedWorkflows.AddRange(sqlTrackingQuery.GetWorkflows(sqlTrackingQueryOptions));\n        }\n        else if ((&quot;all&quot; == workflowEvent.ToLower(CultureInfo.InvariantCulture)) || (string.Empty == workflowEvent) || (null == workflowEvent))\n        {\n            sqlTrackingQueryOptions.WorkflowStatus = WorkflowStatus.Created;\n            queriedWorkflows.AddRange(sqlTrackingQuery.GetWorkflows(sqlTrackingQueryOptions));\n\n            sqlTrackingQueryOptions.WorkflowStatus = WorkflowStatus.Completed;\n            queriedWorkflows.AddRange(sqlTrackingQuery.GetWorkflows(sqlTrackingQueryOptions));\n\n            sqlTrackingQueryOptions.WorkflowStatus = WorkflowStatus.Running;\n            queriedWorkflows.AddRange(sqlTrackingQuery.GetWorkflows(sqlTrackingQueryOptions));\n\n            sqlTrackingQueryOptions.WorkflowStatus = WorkflowStatus.Suspended;\n            queriedWorkflows.AddRange(sqlTrackingQuery.GetWorkflows(sqlTrackingQueryOptions));\n\n            sqlTrackingQueryOptions.WorkflowStatus = WorkflowStatus.Terminated;\n            queriedWorkflows.AddRange(sqlTrackingQuery.GetWorkflows(sqlTrackingQueryOptions));\n\n        }\n        return queriedWorkflows;\n\n    }\n    catch (Exception exception)\n    {\n        throw new Exception(&quot;Exception in GetWorkflows&quot;, exception);\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"WF_Samples#127\">Friend Function GetWorkflows( _\n    ByVal workflowEvent As String, _\n    ByVal from As System.DateTime, _\n    ByVal until As DateTime, _\n    ByVal trackingDataItemValue As TrackingDataItemValue) _\n    As List(Of SqlTrackingWorkflowInstance)\n    Try\n        Dim queriedWorkflows As List(Of SqlTrackingWorkflowInstance) = New List(Of SqlTrackingWorkflowInstance)()\n        Dim sqlTrackingQuery As SqlTrackingQuery = New SqlTrackingQuery(connectionString)\n        Dim sqlTrackingQueryOptions As SqlTrackingQueryOptions = New SqlTrackingQueryOptions()\n        sqlTrackingQueryOptions.StatusMinDateTime = from.ToUniversalTime()\n        sqlTrackingQueryOptions.StatusMaxDateTime = until.ToUniversalTime()\n        &#39; If QualifiedName, FieldName, or DataValue is not supplied, we will not query since they are all required to match\n        If (Not ((trackingDataItemValue.QualifiedName = String.Empty) Or (trackingDataItemValue.FieldName = String.Empty) Or ((trackingDataItemValue.DataValue = String.Empty)))) Then\n            sqlTrackingQueryOptions.TrackingDataItems.Add(trackingDataItemValue)\n        End If\n\n        queriedWorkflows.Clear()\n        If (workflowEvent.ToLower(CultureInfo.InvariantCulture) = &quot;created&quot;) Then\n            sqlTrackingQueryOptions.WorkflowStatus = System.Workflow.Runtime.WorkflowStatus.Created\n            queriedWorkflows.AddRange(sqlTrackingQuery.GetWorkflows(sqlTrackingQueryOptions))\n        ElseIf (workflowEvent.ToLower(CultureInfo.InvariantCulture) = &quot;completed&quot;) Then\n            sqlTrackingQueryOptions.WorkflowStatus = System.Workflow.Runtime.WorkflowStatus.Completed\n            queriedWorkflows.AddRange(sqlTrackingQuery.GetWorkflows(sqlTrackingQueryOptions))\n        ElseIf (workflowEvent.ToLower(CultureInfo.InvariantCulture) = &quot;running&quot;) Then\n            sqlTrackingQueryOptions.WorkflowStatus = System.Workflow.Runtime.WorkflowStatus.Running\n            queriedWorkflows.AddRange(sqlTrackingQuery.GetWorkflows(sqlTrackingQueryOptions))\n        ElseIf (workflowEvent.ToLower(CultureInfo.InvariantCulture) = &quot;suspended&quot;) Then\n            sqlTrackingQueryOptions.WorkflowStatus = System.Workflow.Runtime.WorkflowStatus.Suspended\n            queriedWorkflows.AddRange(sqlTrackingQuery.GetWorkflows(sqlTrackingQueryOptions))\n        ElseIf (workflowEvent.ToLower(CultureInfo.InvariantCulture) = &quot;terminated&quot;) Then\n            sqlTrackingQueryOptions.WorkflowStatus = System.Workflow.Runtime.WorkflowStatus.Terminated\n            queriedWorkflows.AddRange(sqlTrackingQuery.GetWorkflows(sqlTrackingQueryOptions))\n        ElseIf ((workflowEvent = Nothing) Or _\n                (workflowEvent.ToLower(CultureInfo.InvariantCulture) = &quot;all&quot;) Or _\n                (workflowEvent = String.Empty)) Then\n            sqlTrackingQueryOptions.WorkflowStatus = System.Workflow.Runtime.WorkflowStatus.Created\n            queriedWorkflows.AddRange(sqlTrackingQuery.GetWorkflows(sqlTrackingQueryOptions))\n\n            sqlTrackingQueryOptions.WorkflowStatus = System.Workflow.Runtime.WorkflowStatus.Completed\n            queriedWorkflows.AddRange(sqlTrackingQuery.GetWorkflows(sqlTrackingQueryOptions))\n\n            sqlTrackingQueryOptions.WorkflowStatus = System.Workflow.Runtime.WorkflowStatus.Running\n            queriedWorkflows.AddRange(sqlTrackingQuery.GetWorkflows(sqlTrackingQueryOptions))\n\n            sqlTrackingQueryOptions.WorkflowStatus = System.Workflow.Runtime.WorkflowStatus.Suspended\n            queriedWorkflows.AddRange(sqlTrackingQuery.GetWorkflows(sqlTrackingQueryOptions))\n\n            sqlTrackingQueryOptions.WorkflowStatus = System.Workflow.Runtime.WorkflowStatus.Terminated\n            queriedWorkflows.AddRange(sqlTrackingQuery.GetWorkflows(sqlTrackingQueryOptions))\n\n        End If\n\n        Return queriedWorkflows\n\n    Catch exception As Exception\n        &#39;Dim errorMessage As String = &quot;Exception in GetWorkflows&quot; + vbCrLf + &quot;Database: &quot; + databaseName + vbCrLf + &quot;Server: &quot; + serverName\n        Throw (New Exception(&quot;Exception in GetWorkflows&quot;, exception))\n    End Try\nEnd Function\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<div class=\"NOTE\"><h5>Note</h5><p>This material discusses types and namespaces that are obsolete. For more information, see <a href=\"http://aka.ms/wfdeprecatedtypes\" data-linktype=\"external\">Deprecated Types in Windows Workflow Foundation 4.5</a>.</p>\n</div>\n\r\n  \r\n      \t<h2 class=\"accented\">Fields\r\n      </h2>\r\n      <table class=\"nameValue\">\r\n      \t<tr><td id=\"System_Workflow_Runtime_WorkflowStatus_Completed\">\r\n      \t\t\t<span class=\"lang-csharp\">Completed</span>\r\n      \t</td>\r\n      \t<td><p>The workflow instance has completed.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Workflow_Runtime_WorkflowStatus_Created\">\r\n      \t\t\t<span class=\"lang-csharp\">Created</span>\r\n      \t</td>\r\n      \t<td><p>The workflow instance has been created by a call to one of the overloaded <span class=\"xref\">stem.Workflow.Runtime.WorkflowRuntime.CreateWorkflow*</span> methods.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Workflow_Runtime_WorkflowStatus_Running\">\r\n      \t\t\t<span class=\"lang-csharp\">Running</span>\r\n      \t</td>\r\n      \t<td><p>The workflow instance is running.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Workflow_Runtime_WorkflowStatus_Suspended\">\r\n      \t\t\t<span class=\"lang-csharp\">Suspended</span>\r\n      \t</td>\r\n      \t<td><p>The workflow instance has been suspended by a <a class=\"xref\" href=\"system.workflow.componentmodel.suspendactivity\" data-linktype=\"relative-path\">SuspendActivity</a> activity, by a call to <span class=\"xref\">stem.Workflow.Runtime.WorkflowInstance.Suspend*</span>,or by the workflow runtime engine.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Workflow_Runtime_WorkflowStatus_Terminated\">\r\n      \t\t\t<span class=\"lang-csharp\">Terminated</span>\r\n      \t</td>\r\n      \t<td><p>The workflow instance has been terminated by a</p>\n</td>\r\n      \t</tr>\r\n      </table>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Workflow.Runtime.WorkflowStatus.yml\">\r\n<meta name=\"APIName\" content=\"System.Workflow.Runtime.WorkflowStatus\">\r\n<meta name=\"APIName\" content=\"System.Workflow.Runtime.WorkflowStatus.Completed\">\r\n<meta name=\"APIName\" content=\"System.Workflow.Runtime.WorkflowStatus.Created\">\r\n<meta name=\"APIName\" content=\"System.Workflow.Runtime.WorkflowStatus.Running\">\r\n<meta name=\"APIName\" content=\"System.Workflow.Runtime.WorkflowStatus.Suspended\">\r\n<meta name=\"APIName\" content=\"System.Workflow.Runtime.WorkflowStatus.Terminated\">\r\n<meta name=\"APILocation\" content=\"System.Workflow.Runtime.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 02:21 PM\">\r\n<meta name=\"document_id\" content=\"dcf2ffd4-3b3a-77fa-fc4c-d0d9141852b1\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Specifies the status of a workflow instance.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.workflow.runtime/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Workflow.Runtime.WorkflowStatus\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Workflow.Runtime.WorkflowStatus.yml","open_to_public_contributors":false,"api_name":["System.Workflow.Runtime.WorkflowStatus","System.Workflow.Runtime.WorkflowStatus.Completed","System.Workflow.Runtime.WorkflowStatus.Created","System.Workflow.Runtime.WorkflowStatus.Running","System.Workflow.Runtime.WorkflowStatus.Suspended","System.Workflow.Runtime.WorkflowStatus.Terminated"],"api_location":["System.Workflow.Runtime.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Workflow.Runtime.WorkflowStatus","System::Workflow::Runtime::WorkflowStatus","System.Workflow.Runtime.WorkflowStatus.Completed","System::Workflow::Runtime::WorkflowStatus::Completed","System.Workflow.Runtime.WorkflowStatus.Created","System::Workflow::Runtime::WorkflowStatus::Created","System.Workflow.Runtime.WorkflowStatus.Running","System::Workflow::Runtime::WorkflowStatus::Running","System.Workflow.Runtime.WorkflowStatus.Suspended","System::Workflow::Runtime::WorkflowStatus::Suspended","System.Workflow.Runtime.WorkflowStatus.Terminated","System::Workflow::Runtime::WorkflowStatus::Terminated"],"dev_langs":["csharp"],"updated_at":"2017-03-31 02:21 PM","document_id":"dcf2ffd4-3b3a-77fa-fc4c-d0d9141852b1","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Workflow.Runtime/WorkflowStatus.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"WorkflowStatus enum | Microsoft Docs","_op_ogTitle":"WorkflowStatus enum","description":"Specifies the status of a workflow instance.\n","toc_asset_id":"api/_splitted/System.Workflow.Runtime/toc.json","toc_rel":"_splitted/System.Workflow.Runtime/toc.json","source_url":"","ms.assetid":"System.Workflow.Runtime.WorkflowStatus","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.workflow.runtime.workflowstatus","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.workflow.runtime.workflowstatus","fileRelativePath":"api/System.Workflow.Runtime.WorkflowStatus.html"},"themesRelativePathToOutputRoot":"_themes/"}