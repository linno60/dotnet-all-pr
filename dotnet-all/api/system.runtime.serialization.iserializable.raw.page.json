{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">ISerializable</span>\r\n      Interface\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Allows an object to control its own serialization and deserialization.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic interface ISerializable</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Attributes</dt><dd>\r\n  \t\t<div class=\"cdlHolder\">\r\n  \t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example demonstrates the use of the ISerializable interface to define custom serialization behavior for a class.  </p>\n<pre><code class=\"lang-cpp\" name=\"ISerializable Interface Example#1\">using namespace System;\nusing namespace System::IO;\nusing namespace System::Collections;\nusing namespace System::Runtime::Serialization::Formatters::Binary;\nusing namespace System::Runtime::Serialization;\n\nref class SingletonSerializationHelper;\n\n// There should be only one instance of this type per AppDomain.\n\n[Serializable]\npublic ref class Singleton sealed: public ISerializable\n{\nprivate:\n\n   // This is the one instance of this type.\n   static Singleton^ theOneObject = gcnew Singleton;\n\npublic:\n\n   // Here are the instance fields.\n   String^ someString;\n   Int32 someNumber;\n\nprivate:\n\n   // Private constructor allowing this type to construct the singleton.\n   Singleton()\n   {\n      \n      // Do whatever is necessary to initialize the singleton.\n      someString = &quot;This is a String* field&quot;;\n      someNumber = 123;\n   }\n\npublic:\n\n   // A method returning a reference to the singleton.\n   static Singleton^ GetSingleton()\n   {\n      return theOneObject;\n   }\n\n   // A method called when serializing a Singleton.\n   [System::Security::Permissions::SecurityPermissionAttribute\n   (System::Security::Permissions::SecurityAction::LinkDemand, \n   Flags=System::Security::Permissions::SecurityPermissionFlag::SerializationFormatter)]\n   virtual void GetObjectData( SerializationInfo^ info, StreamingContext context )\n   {\n      // Instead of serializing this Object*, we will  \n      // serialize a SingletonSerializationHelp instead.\n      info-&gt;SetType( SingletonSerializationHelper::typeid );\n\n      // No other values need to be added.\n   }\n\n   // NOTE: ISerializable*&#39;s special constructor is NOT necessary \n   // because it&#39;s never called\n};\n\n[Serializable]\nprivate ref class SingletonSerializationHelper sealed: public IObjectReference\n{\npublic:\n\n   // This Object* has no fields (although it could).\n   // GetRealObject is called after this Object* is deserialized\n   virtual Object^ GetRealObject( StreamingContext context )\n   {\n      // When deserialiing this Object*, return a reference to \n      // the singleton Object* instead.\n      return Singleton::GetSingleton();\n   }\n};\n\n[STAThread]\nint main()\n{\n   FileStream^ fs = gcnew FileStream( &quot;DataFile.dat&quot;,FileMode::Create );\n   try\n   {\n      // Construct a BinaryFormatter and use it \n      // to serialize the data to the stream.\n      BinaryFormatter^ formatter = gcnew BinaryFormatter;\n\n      // Create an array with multiple elements refering to \n      // the one Singleton Object*.\n      array&lt;Singleton^&gt;^a1 = {Singleton::GetSingleton(),Singleton::GetSingleton()};\n\n      // This displays S&quot;True&quot;.\n      Console::WriteLine( &quot;Do both array elements refer to the same Object? {0}&quot;, (a1[ 0 ] == a1[ 1 ]) );\n\n      // Serialize the array elements.\n      formatter-&gt;Serialize( fs, a1 );\n\n      // Deserialize the array elements.\n      fs-&gt;Position = 0;\n      array&lt;Singleton^&gt;^a2 = (array&lt;Singleton^&gt;^)formatter-&gt;Deserialize( fs );\n\n      // This displays S&quot;True&quot;.\n      Console::WriteLine( &quot;Do both array elements refer to the same Object? {0}&quot;, (a2[ 0 ] == a2[ 1 ]) );\n\n      // This displays S&quot;True&quot;.\n      Console::WriteLine( &quot;Do all  array elements refer to the same Object? {0}&quot;, (a1[ 0 ] == a2[ 0 ]) );\n   }\n   catch ( SerializationException^ e ) \n   {\n      Console::WriteLine( &quot;Failed to serialize. Reason: {0}&quot;, e-&gt;Message );\n      throw;\n   }\n   finally\n   {\n      fs-&gt;Close();\n   }\n\n   return 0;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"ISerializable Interface Example#1\">using System;\nusing System.Text;\nusing System.IO;\n// Add references to Soap and Binary formatters.\nusing System.Runtime.Serialization.Formatters.Binary;\nusing System.Runtime.Serialization.Formatters.Soap ;\nusing System.Runtime.Serialization;\n\n\n[Serializable]\npublic class MyItemType : ISerializable\n{\n    public MyItemType()\n    {\n        // Empty constructor required to compile.\n    }\n\n    // The value to serialize.\n    private string myProperty_value;\n\n    public string MyProperty\n    {\n        get { return myProperty_value; }\n        set { myProperty_value = value; }\n    }\n        \n    // Implement this method to serialize data. The method is called \n    // on serialization.\n    public void GetObjectData(SerializationInfo info, StreamingContext context)\n    {\n        // Use the AddValue method to specify serialized values.\n        info.AddValue(&quot;props&quot;, myProperty_value, typeof(string));\n\n    }\n\n    // The special constructor is used to deserialize values.\n    public MyItemType(SerializationInfo info, StreamingContext context)\n    {\n        // Reset the property value using the GetValue method.\n        myProperty_value = (string) info.GetValue(&quot;props&quot;, typeof(string));\n    }\n}\n\n// This is a console application. \npublic static class Test\n{\n    static void Main()\n    {\n        // This is the name of the file holding the data. You can use any file extension you like.\n        string fileName = &quot;dataStuff.myData&quot;;\n\n        // Use a BinaryFormatter or SoapFormatter.\n        IFormatter formatter = new BinaryFormatter();\n        //IFormatter formatter = new SoapFormatter();\n            \n        Test.SerializeItem(fileName, formatter); // Serialize an instance of the class.\n        Test.DeserializeItem(fileName, formatter); // Deserialize the instance.\n        Console.WriteLine(&quot;Done&quot;);\n        Console.ReadLine();\n    }\n\n    public static void SerializeItem(string fileName, IFormatter formatter)\n    {\n        // Create an instance of the type and serialize it.\n        MyItemType t = new MyItemType();\n        t.MyProperty = &quot;Hello World&quot;;\n\n        FileStream s = new FileStream(fileName , FileMode.Create);\n        formatter.Serialize(s, t);            \n        s.Close();\n    }\n\n\n    public static void DeserializeItem(string fileName, IFormatter formatter)\n    {\n        FileStream s = new FileStream(fileName, FileMode.Open);\n        MyItemType t = (MyItemType)formatter.Deserialize(s);\n        Console.WriteLine(t.MyProperty);            \n    }       \n}\n</code></pre><pre><code class=\"lang-vb\" name=\"ISerializable Interface Example#1\">Imports System.Text\nImports System.IO\n&#39; Add references to Soap and Binary formatters.\nImports System.Runtime.Serialization.Formatters.Binary\nImports System.Runtime.Serialization.Formatters.Soap\nImports System.Runtime.Serialization\n\n\n&lt;Serializable()&gt; _\nPublic Class MyItemType\n    Implements ISerializable\n    &#39; Empty constructor required to compile.\n    Public Sub New()\n    End Sub\n\n    &#39; The value to serialize.\n    Private myProperty_value As String\n\n    Public Property MyProperty() As String\n        Get\n            Return myProperty_value\n        End Get\n        Set(value As String)\n            myProperty_value = value\n        End Set\n    End Property\n\n    &#39; Implement this method to serialize data. The method is called \n    &#39; on serialization.\n    Public Sub GetObjectData(info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData\n        &#39; Use the AddValue method to specify serialized values.\n        info.AddValue(&quot;props&quot;, myProperty_value, GetType(String))\n\n    End Sub\n\n    &#39; The special constructor is used to deserialize values.\n    Public Sub New(info As SerializationInfo, context As StreamingContext)\n        &#39; Reset the property value using the GetValue method.\n        myProperty_value = DirectCast(info.GetValue(&quot;props&quot;, GetType(String)), String)\n    End Sub\nEnd Class\n\n&#39; This is a console application. \nPublic Class Test\n\n\n    Public Shared Sub Main()\n        &#39; This is the name of the file holding the data. You can use any file extension you like.\n        Dim fileName As String = &quot;dataStuff.myData&quot;\n\n        &#39; Use a BinaryFormatter or SoapFormatter.\n        Dim formatter As IFormatter = New BinaryFormatter()\n        &#39; Dim formatter As IFormatter = New SoapFormatter()\n\n        Test.SerializeItem(fileName, formatter)\n        &#39; Serialize an instance of the class.\n        Test.DeserializeItem(fileName, formatter)\n        &#39; Deserialize the instance.\n        Console.WriteLine(&quot;Done&quot;)\n        Console.ReadLine()\n    End Sub\n\n    Public Shared Sub SerializeItem(fileName As String, formatter As IFormatter)\n        &#39; Create an instance of the type and serialize it.\n        Dim myType As New MyItemType()\n        myType.MyProperty = &quot;Hello World&quot;\n\n        Dim fs As New FileStream(fileName, FileMode.Create)\n        formatter.Serialize(fs, myType)\n        fs.Close()\n    End Sub\n\n\n    Public Shared Sub DeserializeItem(fileName As String, formatter As IFormatter)\n        Dim fs As New FileStream(fileName, FileMode.Open)\n\n        Dim myType As MyItemType = DirectCast(formatter.Deserialize(fs), MyItemType)\n        Console.WriteLine(myType.MyProperty)\n    End Sub\nEnd Class\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>Any class that might be serialized must be marked with the <a class=\"xref\" href=\"system.serializableattribute\" data-linktype=\"relative-path\">SerializableAttribute</a>. If a class needs to control its serialization process, it can implement the ISerializable interface. The <a class=\"xref\" href=\"system.runtime.serialization.formatter\" data-linktype=\"relative-path\">Formatter</a> calls the <a class=\"xref\" href=\"system.runtime.serialization.iserializable#System_Runtime_Serialization_ISerializable_GetObjectData_\" data-linktype=\"relative-path\">GetObjectData</a> at serialization time and populates the supplied <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> with all the data required to represent the object. The <a class=\"xref\" href=\"system.runtime.serialization.formatter\" data-linktype=\"relative-path\">Formatter</a> creates a <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> with the type of the object in the graph. Objects that need to send proxies for themselves can use the <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo#System_Runtime_Serialization_SerializationInfo_FullTypeName_\" data-linktype=\"relative-path\">FullTypeName</a> and <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo#System_Runtime_Serialization_SerializationInfo_AssemblyName_\" data-linktype=\"relative-path\">AssemblyName</a> methods on <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> to change the transmitted information.  </p>\n<p> In the case of class inheritance, it is possible to serialize a class that derives from a base class that implements ISerializable. In this case, the derived class should call the base class implementation of <a class=\"xref\" href=\"system.runtime.serialization.iserializable#System_Runtime_Serialization_ISerializable_GetObjectData_\" data-linktype=\"relative-path\">GetObjectData</a> inside its implementation of <a class=\"xref\" href=\"system.runtime.serialization.iserializable#System_Runtime_Serialization_ISerializable_GetObjectData_\" data-linktype=\"relative-path\">GetObjectData</a>. Otherwise, the data from the base class will not be serialized.  </p>\n<p> The ISerializable interface implies a constructor with the signature constructor (<a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> information, <a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a> context). At deserialization time, the current constructor is called only after the data in the <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> has been deserialized by the formatter. In general, this constructor should be protected if the class is not sealed.  </p>\n<p> The order in which objects are deserialized cannot be guaranteed. For example, if one type references a type that has not been deserialized yet, an exception will occur. If you are creating types that have such dependencies, you can work around the problem by implementing the <code>IDeserializationCallback</code> interface and the <code>OnDeserialization</code> method.  </p>\n<p> The serialization architecture handles object types that extend <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a> the same as types that extend <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>. These types can be marked with the <a class=\"xref\" href=\"system.serializableattribute\" data-linktype=\"relative-path\">SerializableAttribute</a> and implement the ISerializable interface as any other object type. Their object state will be captured and persisted onto the stream.  </p>\n<p> When these types are being used through <a class=\"xref\" href=\"system.runtime.remoting\" data-linktype=\"relative-path\">System.Runtime.Remoting</a>, the remoting infrastructure provides a surrogate that preempts typical serialization and instead serializes a proxy to the <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>. A surrogate is a helper that knows how to serialize and deserialize objects of a particular type. The proxy, invisible to the user in most cases, will be of type <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a>.  </p>\n<p> As a general design pattern, it would be unusual for a class to be both marked with the serializable attribute and extend <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>. Developers should think carefully about the possible serialization and remoting scenarios when combining these two characteristics. One example where this might be applicable is with a <a class=\"xref\" href=\"system.io.memorystream\" data-linktype=\"relative-path\">MemoryStream</a>. While the base class of <a class=\"xref\" href=\"system.io.memorystream\" data-linktype=\"relative-path\">MemoryStream</a> (<a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>) extends from <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>, it is possible to capture the state of a <a class=\"xref\" href=\"system.io.memorystream\" data-linktype=\"relative-path\">MemoryStream</a> and restore it at will. It might, therefore, be meaningful to serialize the state of this stream into a database and restore it at some later point in time. However, when used through remoting, an object of this type would be proxied.  </p>\n<p> For more information about serialization of classes that extend <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>, see <a class=\"xref\" href=\"system.runtime.remoting.messaging.remotingsurrogateselector\" data-linktype=\"relative-path\">RemotingSurrogateSelector</a>. For more information about implementing ISerializable, see <a href=\"../topic/custom%20serialization\" data-linktype=\"relative-path\">Custom Serialization</a>.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Runtime_Serialization_ISerializable_GetObjectData_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Runtime_Serialization_ISerializable_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetObjectData(SerializationInfo, StreamingContext)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Populates a <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> with the data needed to serialize the target object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>info</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> to populate with data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>context</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The destination (see <a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a>) for this serialization.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.security.securitycriticalattribute\" title=\"System.Security.SecurityCriticalAttribute\" data-linktype=\"relative-path\">SecurityCriticalAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The caller does not have the required permission.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Any objects that are included in the <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> are automatically tracked and serialized by the formatter.  </p>\n<p> Code that calls GetObjectData requires the <a class=\"xref\" href=\"system.security.permissions.securitypermission\" data-linktype=\"relative-path\">SecurityPermission</a> for providing serialization services. Associated enumeration: <a class=\"xref\" href=\"system.security.permissions.securitypermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.SecurityPermissionFlag</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> It is not guaranteed that this method will be called only once per object instance during serialization. Therefore, the method should be implemented in such a way that its behavior will be the same regardless of the number of times it is called.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"uhfHeaderId\" content=\"MSDocsHeader-DotNet\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Runtime.Serialization.ISerializable.yml\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Serialization.ISerializable\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Serialization.ISerializable.GetObjectData\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-04-01 05:59 PM\">\r\n<meta name=\"document_id\" content=\"6d7c4c10-f67b-0c55-62ed-13b9c588c039\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Allows an object to control its own serialization and deserialization.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.runtime.serialization/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Runtime.Serialization.ISerializable\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","uhfHeaderId":"MSDocsHeader-DotNet","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Runtime.Serialization.ISerializable.yml","open_to_public_contributors":false,"api_name":["System.Runtime.Serialization.ISerializable","System.Runtime.Serialization.ISerializable.GetObjectData"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Runtime.Serialization.ISerializable","System::Runtime::Serialization::ISerializable","System.Runtime.Serialization.ISerializable.GetObjectData","System::Runtime::Serialization::ISerializable::GetObjectData"],"dev_langs":["csharp"],"updated_at":"2017-04-01 05:59 PM","document_id":"6d7c4c10-f67b-0c55-62ed-13b9c588c039","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Runtime.Serialization/ISerializable.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ISerializable interface | Microsoft Docs","_op_ogTitle":"ISerializable interface","description":"Allows an object to control its own serialization and deserialization.\n","toc_asset_id":"api/_splitted/System.Runtime.Serialization/toc.json","toc_rel":"_splitted/System.Runtime.Serialization/toc.json","source_url":"","ms.assetid":"System.Runtime.Serialization.ISerializable","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.iserializable","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.iserializable","fileRelativePath":"api/System.Runtime.Serialization.ISerializable.html"},"themesRelativePathToOutputRoot":"_themes/"}