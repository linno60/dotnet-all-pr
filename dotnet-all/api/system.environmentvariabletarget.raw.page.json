{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">EnvironmentVariableTarget</span>\r\n      Enum\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Specifies the location where an environment variable is stored or retrieved in a set or get operation.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\r\n  \t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic enum EnvironmentVariableTarget</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a></span></div><span class=\"lang-csharp\">EnvironmentVariableTarget</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example demonstrates the EnvironmentVariableTarget enumeration in methods that create, modify, and delete environment variables.  </p>\n<pre><code class=\"lang-cpp\" name=\"environment.getsetenvar#1\">// This example demonstrates the\n//     Environment.GetEnvironmentVariable,\n//     Environment.SetEnvironmentVariable, and\n//     Environment.GetEnvironmentVariables overloaded methods.\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace Microsoft::Win32;\n\nnamespace EnvironmentVariablesSample\n{\n    public ref class TestEnvironmentVariables sealed\n    {\n    public:\n        // DoTest: Test get/set environment variables\n        static void DoTest()\n        {     \n            // Environment variable values\n            String^ existsA = &quot;exists in the default target&quot;\n                &quot; (Process)&quot;;\n            String^ existsB = &quot;exists in Process&quot;;\n            String^ existsC = &quot;exists in User&quot;;\n            String^ existsD = &quot;exists in Machine&quot;;     \n            // Messages:\n            String^ messageStep1 = &quot;Step 1:\\n&quot;\n                &quot;  Check whether the environment variables already&quot;\n                &quot; exist in \\n&quot;\n                &quot;  the various targets...\\n&quot;;\n            String^ messageStep2 = &quot;Step 2:\\n&quot;\n                &quot;  Set the environment variable for each&quot;\n                &quot; target...\\n&quot;;\n            String^ messageStep3Part1 = &quot;Step 3, part 1:\\n&quot;\n                &quot;  Display the environment variables in each&quot;\n                &quot; target...\\n&quot;;\n            String^ messageStep3Part2 = &quot;Step 3, part 2:\\n&quot;\n                &quot;  Check whether the User and Machine &quot;\n                &quot; environment variables \\n&quot;\n                &quot;  were created in the Windows operating&quot;\n                &quot; system registry...\\n&quot;;\n            String^ messageStep4Part1 = &quot;Step 4, part 1:\\n&quot;\n                &quot;  Delete the environment variables created &quot;\n                &quot;for this sample...\\n&quot;;\n            String^ messageStep4Part2 = &quot;Step 4, part 2:\\n&quot;\n                &quot;  Check whether the environment variables were &quot;\n                &quot;deleted \\n&quot;\n                &quot;  in each target...\\n&quot;;\n            String^ messageStep4Part3 = &quot;Step 4, part 3:\\n&quot;\n                &quot;  Check whether the User and Machine environment &quot;\n                &quot;variables \\n&quot;\n                &quot;  were deleted from the Windows operating system &quot;\n                &quot;registry...\\n&quot;;\n            String^ step2Format = &quot;  {0,9}: Set {1} = \\&quot;{2}\\&quot;&quot;;  \n\n            // Step 1:\n            // Check whether the sample environment variables already\n            // exist.\n            // WARNING: These variables will be deleted at the end of\n            // this sample.\n            Console::WriteLine(messageStep1);\n            CheckVariables();\n            Console::WriteLine();   \n\n            // Step 2:\n            // Set the environment variable for each target.\n            // This section demonstrates\n            // Environment.SetEnvironmentVariable.\n            Console::WriteLine(messageStep2);     \n\n            // Set the environment variable for the default target\n            // (the current process).\n            Console::WriteLine(step2Format, &quot;(default)&quot;, VariableA,\n                existsA);\n            Environment::SetEnvironmentVariable(VariableA, existsA);  \n\n            // Set the environment variable for the current process.\n            Console::WriteLine(step2Format, &quot;Process&quot;, VariableB,\n                existsB);\n            Environment::SetEnvironmentVariable(VariableB, existsB,\n                EnvironmentVariableTarget::Process);\n\n            // Set the environment variable for the current user.\n            Console::WriteLine(step2Format, &quot;User&quot;, VariableC,\n                existsC);\n            Environment::SetEnvironmentVariable(VariableC, existsC,\n                EnvironmentVariableTarget::User);\n\n            // Set the environment variable for the local machine.\n            Console::WriteLine(step2Format, &quot;Machine&quot;, VariableD,\n                existsD);\n            Environment::SetEnvironmentVariable(VariableD, existsD,\n                EnvironmentVariableTarget::Machine);\n            Console::WriteLine();      \n\n            // Step 3, part 1:\n            // Display the environment variables in each target.\n            Console::WriteLine(messageStep3Part1);\n            PrintVariables();\n            Console::WriteLine();     \n\n            // Step 3, part 2:\n            // Check whether the User and Machine environment\n            // variables were created in the Windows operating system\n            // registry.\n            Console::WriteLine(messageStep3Part2);\n            CheckRegistryVariables();\n            Console::WriteLine();\n\n            // Step 4, part 1:\n            // Delete the environment variables created for this\n            // sample. This section demonstrates using \n            // Environment.SetEnvironmentVariable to delete an \n            // environment variable.\n            Console::WriteLine(messageStep4Part1);\n            Environment::SetEnvironmentVariable(VariableA, nullptr);\n            Environment::SetEnvironmentVariable(VariableB, nullptr,\n                EnvironmentVariableTarget::Process);\n            Environment::SetEnvironmentVariable(VariableC, nullptr,\n                EnvironmentVariableTarget::User);\n            Environment::SetEnvironmentVariable(VariableD, nullptr,\n                EnvironmentVariableTarget::Machine);     \n\n            // Step 4, part 2:\n            // Check whether the environment variables were deleted \n            // in each target.\n            Console::WriteLine(messageStep4Part2);\n            CheckVariables();\n\n            // Step 4, part 3:\n            // Check whether the User and Machine environment\n            // variables were deleted from the Windows operating\n            // system registry.\n            Console::WriteLine(messageStep4Part3);\n            CheckRegistryVariables();\n        }\n\n    protected:\n        // Globals:\n        literal String^ NameValueFormat = &quot;  {0} {1}.&quot;;\n        literal String^ VariableSuffix = &quot;_GETSET_ENVAR_SAMPLE&quot;;\n\n        // Four relatively unique environment variable names.\n        // default process\n\n        literal String^ VariableA = &quot;A_GETSET_ENVAR_SAMPLE&quot;;\n\n        // Current Process\n        literal String^ VariableB = &quot;B_GETSET_ENVAR_SAMPLE&quot;;\n\n        // Current User\n        literal String^ VariableC = &quot;C_GETSET_ENVAR_SAMPLE&quot;;\n\n        // Local Machine\n        literal String^ VariableD = &quot;D_GETSET_ENVAR_SAMPLE&quot;;\n\n    private:\n        // CheckVariablesInTarget:\n        // Test whether a specific environment variable exists\n        // in a target. This section demonstrates\n        // Environment.GetEnvironmentVariable.\n        static void CheckVariablesInTarget(String^ variable,\n            EnvironmentVariableTarget target)\n        {\n            String^ variableName;\n\n            // Zero means use the default target.\n            if (target == (EnvironmentVariableTarget) 0)\n            {\n                variableName =\n                    Environment::GetEnvironmentVariable(variable);\n            }\n            else\n            {\n                variableName = Environment::GetEnvironmentVariable(\n                    variable, target);\n            }\n            Console::WriteLine(NameValueFormat, variable,\n                (String::IsNullOrEmpty(variableName) ?\n                &quot;doesn&#39;t exist&quot; : variableName));\n        }\n\n        // CheckVariable:\n        // Uses CheckVariablesInTarget to test whether each\n        // environment variable exists in a target.\n        static void CheckVariables()\n        {\n            Console::WriteLine(&quot;Process:&quot;);\n\n            // Check the default target(current process)\n            CheckVariablesInTarget(VariableA,\n                (EnvironmentVariableTarget) 0);\n            CheckVariablesInTarget(VariableB,\n                EnvironmentVariableTarget::Process);\n            CheckVariablesInTarget(VariableC,\n                EnvironmentVariableTarget::Process);\n            CheckVariablesInTarget(VariableD,\n                EnvironmentVariableTarget::Process);\n            Console::WriteLine();\n\n            Console::WriteLine(&quot;User:&quot;);\n            CheckVariablesInTarget(VariableA,\n                EnvironmentVariableTarget::User);\n            CheckVariablesInTarget(VariableB,\n                EnvironmentVariableTarget::User);\n            CheckVariablesInTarget(VariableC,\n                EnvironmentVariableTarget::User);\n            CheckVariablesInTarget(VariableD,\n                EnvironmentVariableTarget::User);\n            Console::WriteLine();\n\n            Console::WriteLine(&quot;Machine:&quot;);\n            CheckVariablesInTarget(VariableA,\n                EnvironmentVariableTarget::Machine);\n            CheckVariablesInTarget(VariableB,\n                EnvironmentVariableTarget::Machine);\n            CheckVariablesInTarget(VariableC,\n                EnvironmentVariableTarget::Machine);\n            CheckVariablesInTarget(VariableD,\n                EnvironmentVariableTarget::Machine);\n            Console::WriteLine();\n        }\n\n        // PrintVariablesFromTarget: PrintVariables helper function.\n        // This section demonstrates\n        // Environment.GetEnvironmentVariables.\n        static void PrintVariablesFromTarget(\n            EnvironmentVariableTarget target)\n        {\n            String^ valueString;\n            String^ keyString;\n\n            for each (DictionaryEntry^ dictionary in\n                Environment::GetEnvironmentVariables(target))\n            {\n                keyString = safe_cast&lt;String^&gt; (dictionary-&gt;Key);\n                valueString = safe_cast&lt;String^&gt; (dictionary-&gt;Value);\n                if (keyString-&gt;Contains(VariableSuffix))\n                    Console::WriteLine(NameValueFormat, keyString,\n                    valueString);\n            }\n            Console::WriteLine();\n        }\n\n        // PrintVariables:\n        // Uses PrintVariablesFromTarget to test whether\n        // each environment variable exists in a target.\n        static void PrintVariables()\n        {\n            Console::WriteLine(&quot;Process:&quot;);\n            PrintVariablesFromTarget(EnvironmentVariableTarget::Process);\n\n            Console::WriteLine(&quot;User:&quot;);\n            PrintVariablesFromTarget(EnvironmentVariableTarget::User);\n\n            Console::WriteLine(&quot;Machine:&quot;);\n            PrintVariablesFromTarget(EnvironmentVariableTarget::Machine);\n        }\n\n        // CheckRegistryVariablesForKey: CheckRegistryVariables\n        // helper function. This function filters out irrelevant\n        // environment variables.\n        static void CheckRegistryVariablesForKey(RegistryKey^ targetKey)\n        {\n            bool exists = false;            \n\n            for each (\n                String^ variableName in targetKey-&gt;GetValueNames())\n            {\n                if (variableName-&gt;Contains(VariableSuffix))\n                {\n                    String^ variableValue =\n                        safe_cast&lt;String^&gt;\n                        (targetKey-&gt;GetValue(variableName));\n                    Console::WriteLine(NameValueFormat, variableName,\n                        variableValue);\n                    exists = true;\n                }\n            }\n            if (!exists)\n            {\n                Console::WriteLine(\n                    &quot;  Environment variable doesn&#39;t exist.&quot;);\n            }\n            Console::WriteLine();\n        }\n\n        // CheckRegistryVariables:\n        // Uses CheckRegistryVariables to display the User and\n        // Machine environment variables in the registry.\n        static void CheckRegistryVariables()\n        {\n            String^ subkeyUser = &quot;Environment&quot;;\n            String^ subkeyMachine = &quot;System\\\\CurrentControlSet\\\\&quot;\n                &quot;Control\\\\Session Manager\\\\Environment&quot;;\n            String^ subkeyFormat = &quot;\\&quot;{0}\\&quot; key:&quot;;\n\n            Console::WriteLine(subkeyFormat, subkeyUser);\n            CheckRegistryVariablesForKey(\n                Registry::CurrentUser-&gt;OpenSubKey(subkeyUser));\n\n            Console::WriteLine(subkeyFormat, subkeyMachine);\n            CheckRegistryVariablesForKey(\n                Registry::LocalMachine-&gt;OpenSubKey(subkeyMachine));\n        }\n    };\n};\n\nusing namespace EnvironmentVariablesSample;\n\nint main()\n{\n    TestEnvironmentVariables::DoTest();\n}\n\n/*\nThis example produces the following results:\n\nStep 1:\nCheck whether the environment variables already exist in\nthe various targets...\n\nProcess:\nA_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nB_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nC_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nD_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n\nUser:\nA_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nB_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nC_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nD_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n\nMachine:\nA_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nB_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nC_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nD_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n\n\nStep 2:\nSet the environment variable for each target...\n\n(default): Set A_GETSET_ENVAR_SAMPLE = &quot;exists in the default target (Process)&quot;\nProcess: Set B_GETSET_ENVAR_SAMPLE = &quot;exists in Process&quot;\nUser: Set C_GETSET_ENVAR_SAMPLE = &quot;exists in User&quot;\nMachine: Set D_GETSET_ENVAR_SAMPLE = &quot;exists in Machine&quot;\n\nStep 3, part 1:\nDisplay the environment variables in each target...\n\nProcess:\nB_GETSET_ENVAR_SAMPLE exists in Process.\nA_GETSET_ENVAR_SAMPLE exists in the default target (Process).\n\nUser:\nC_GETSET_ENVAR_SAMPLE exists in User.\n\nMachine:\nD_GETSET_ENVAR_SAMPLE exists in Machine.\n\n\nStep 3, part 2:\nCheck whether the User and Machine environment variables\nwere created in the Windows operating system registry...\n\n&quot;Environment&quot; key:\nC_GETSET_ENVAR_SAMPLE exists in User.\n\n&quot;System\\CurrentControlSet\\Control\\Session Manager\\Environment&quot; key:\nD_GETSET_ENVAR_SAMPLE exists in Machine.\n\n\nStep 4, part 1:\nDelete the environment variables created for this sample...\n\nStep 4, part 2:\nCheck whether the environment variables were deleted\nin each target...\n\nProcess:\nA_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nB_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nC_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nD_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n\nUser:\nA_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nB_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nC_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nD_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n\nMachine:\nA_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nB_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nC_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nD_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n\nStep 4, part 3:\nCheck whether the User and Machine environment variables\nwere deleted from the Windows operating system registry...\n\n&quot;Environment&quot; key:\nEnvironment variable doesn&#39;t exist.\n\n&quot;System\\CurrentControlSet\\Control\\Session Manager\\Environment&quot; key:\nEnvironment variable doesn&#39;t exist.\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"environment.getsetenvar#1\">&#39; This example demonstrates the \n&#39;     Environment.GetEnvironmentVariable,\n&#39;     Environment.SetEnvironmentVariable, and \n&#39;     Environment.GetEnvironmentVariables overloaded methods.\nImports System\nImports System.Collections\nImports Microsoft.Win32\nImports Microsoft.VisualBasic\n\nClass Sample\n   &#39;-------------------------------------------------------------------------------------\n   &#39; Globals: \n   &#39;-------------------------------------------------------------------------------------\n   Protected Shared fmtNameValue As String = &quot;  {0} {1}.&quot;\n   Protected Shared myVarSuffix As String = &quot;_GETSET_ENVAR_SAMPLE&quot;\n   \n   &#39; Four relatively unique environment variable names.\n   Protected Shared myVarA As String = &quot;A&quot; &amp; myVarSuffix &#39; default process\n   Protected Shared myVarB As String = &quot;B&quot; &amp; myVarSuffix &#39; Current Process\n   Protected Shared myVarC As String = &quot;C&quot; &amp; myVarSuffix &#39; Current User\n   Protected Shared myVarD As String = &quot;D&quot; &amp; myVarSuffix &#39; Local Machine\n   &#39;=====================================================================================\n   &#39; EachVariable: \n   &#39; Test whether a specific environment variable exists in a target.\n   &#39; This section demonstrates Environment.GetEnvironmentVariable.\n   &#39;-------------------------------------------------------------------------------------\n   Protected Shared Sub EachVariable(var As String, tgt As EnvironmentVariableTarget)\n      Dim str As String\n      &#39;\n      If 0 = tgt Then &#39; Zero means use the default target.\n         str = Environment.GetEnvironmentVariable(var)\n      Else\n         str = Environment.GetEnvironmentVariable(var, tgt)\n      End If\n      Console.WriteLine(fmtNameValue, var, IIf(String.IsNullOrEmpty(str), _\n                                              &quot;doesn&#39;t exist&quot;, str))\n   End Sub &#39;EachVariable\n   \n   &#39;-------------------------------------------------------------------------------------\n   &#39; CheckEachVariable: \n   &#39; Uses EachVariable to test whether each environment variable exists in a target.\n   &#39;-------------------------------------------------------------------------------------\n   Protected Shared Sub CheckEachVariable()\n      Console.WriteLine(&quot;Process:&quot;)\n      EachVariable(myVarA, 0) &#39; Check the default target (current process)\n      EachVariable(myVarB, EnvironmentVariableTarget.Process)\n      EachVariable(myVarC, EnvironmentVariableTarget.Process)\n      EachVariable(myVarD, EnvironmentVariableTarget.Process)\n      Console.WriteLine()\n      \n      Console.WriteLine(&quot;User:&quot;)\n      EachVariable(myVarA, EnvironmentVariableTarget.User)\n      EachVariable(myVarB, EnvironmentVariableTarget.User)\n      EachVariable(myVarC, EnvironmentVariableTarget.User)\n      EachVariable(myVarD, EnvironmentVariableTarget.User)\n      Console.WriteLine()\n      \n      Console.WriteLine(&quot;Machine:&quot;)\n      EachVariable(myVarA, EnvironmentVariableTarget.Machine)\n      EachVariable(myVarB, EnvironmentVariableTarget.Machine)\n      EachVariable(myVarC, EnvironmentVariableTarget.Machine)\n      EachVariable(myVarD, EnvironmentVariableTarget.Machine)\n      Console.WriteLine()\n   End Sub &#39;CheckEachVariable\n   \n   &#39;=====================================================================================\n   &#39; AllVariables: CheckAllVariables helper function.\n   &#39; This section demonstrates Environment.GetEnvironmentVariables.\n   &#39;-------------------------------------------------------------------------------------\n   Private Shared Sub AllVariables(tgt As EnvironmentVariableTarget)\n      Dim value As String\n      Dim key As String\n      \n      Dim de As DictionaryEntry\n      For Each de In Environment.GetEnvironmentVariables(tgt)\n         key = CStr(de.Key)\n         value = CStr(de.Value)\n         If key.Contains(myVarSuffix) Then\n            Console.WriteLine(fmtNameValue, key, value)\n         End If\n      Next de\n      Console.WriteLine()\n   End Sub &#39;AllVariables\n   \n   &#39;=====================================================================================\n   &#39; CheckAllVariables: \n   &#39; Uses AllVariables to test whether each environment variable exists in a target.\n   &#39;-------------------------------------------------------------------------------------\n   Protected Shared Sub CheckAllVariables()\n      Console.WriteLine(&quot;Process:&quot;)\n      AllVariables(EnvironmentVariableTarget.Process)\n      \n      Console.WriteLine(&quot;User:&quot;)\n      AllVariables(EnvironmentVariableTarget.User)\n      \n      Console.WriteLine(&quot;Machine:&quot;)\n      AllVariables(EnvironmentVariableTarget.Machine)\n   End Sub &#39;CheckAllVariables\n   \n   &#39;=====================================================================================\n   &#39; ChkReg: CheckRegistry helper function.\n   &#39; This function filters out irrelevant environment variables. \n   &#39;-------------------------------------------------------------------------------------\n   Private Shared Sub ChkReg(rk As RegistryKey)\n      Dim exists As Boolean = False\n      Dim registryNone As String = &quot;  Environment variable doesn&#39;t exist.&quot;\n      \n      Dim s As String\n      For Each s In rk.GetValueNames()\n         If s.Contains(myVarSuffix) Then\n            Console.WriteLine(fmtNameValue, s, CStr(rk.GetValue(s)))\n            exists = True\n         End If\n      Next s\n      If exists = False Then\n         Console.WriteLine(registryNone)\n      End If\n      Console.WriteLine()\n   End Sub &#39;ChkReg\n   \n   &#39;-------------------------------------------------------------------------------------\n   &#39; CheckRegistry: \n   &#39; Uses ChkReg to display the User and Machine environment variables in the registry.\n   &#39;-------------------------------------------------------------------------------------\n   Protected Shared Sub CheckRegistry()\n      Dim subkeyU As String = &quot;Environment&quot;\n      Dim subkeyM As String = &quot;System\\CurrentControlSet\\Control\\Session Manager\\Environment&quot;\n      Dim fmtSubkey As String = &quot;&quot;&quot;{0}&quot;&quot; key:&quot;\n      \n      Console.WriteLine(fmtSubkey, subkeyU)\n      ChkReg(Registry.CurrentUser.OpenSubKey(subkeyU))\n      \n      Console.WriteLine(fmtSubkey, subkeyM)\n      ChkReg(Registry.LocalMachine.OpenSubKey(subkeyM))\n   End Sub &#39;CheckRegistry\n   \n   &#39;=====================================================================================\n   &#39; Main:\n   &#39;-------------------------------------------------------------------------------------\n   Public Shared Sub Main()\n      &#39;-------------------------------------------------------------------------------------\n      &#39; Environment variable values\n      &#39;-------------------------------------------------------------------------------------\n      Dim existsA As String = &quot;exists in the default target (Process)&quot;\n      Dim existsB As String = &quot;exists in Process&quot;\n      Dim existsC As String = &quot;exists in User&quot;\n      Dim existsD As String = &quot;exists in Machine&quot;\n      &#39;-------------------------------------------------------------------------------------\n      &#39; Messages:\n      &#39;-------------------------------------------------------------------------------------\n      Dim msg1  As String = &quot;Step 1:&quot; &amp; vbCrLf &amp; _\n                            &quot;  Check whether the environment variables already exist in &quot; _\n                 &amp; vbCrLf &amp; &quot;  the various targets...&quot; &amp; vbCrLf\n      Dim msg2  As String = &quot;Step 2:&quot; &amp; vbCrLf &amp; _\n                            &quot;  Set the environment variable for each target...&quot; &amp; vbCrLf\n      Dim msg31 As String = &quot;Step 3, part 1:&quot; &amp; vbCrLf &amp; _\n                            &quot;  Display the environment variables in each target...&quot; &amp; vbCrLf\n      Dim msg32 As String = &quot;Step 3, part 2:&quot; &amp; vbCrLf &amp; _\n                            &quot;  Check whether the User and Machine environment variables &quot; _\n                 &amp; vbCrLf &amp; &quot;  were created in the Windows operating system registry...&quot; _\n                 &amp; vbCrLf\n      Dim msg41 As String = &quot;Step 4, part 1:&quot; &amp; vbCrLf &amp; _\n                            &quot;  Delete the environment variables created for this sample...&quot; _\n                 &amp; vbCrLf\n      Dim msg42 As String = &quot;Step 4, part 2:&quot; &amp; vbCrLf &amp; _\n                            &quot;  Check whether the environment variables were deleted &quot; _\n                 &amp; vbCrLf &amp; &quot;  in each target...&quot; &amp; vbCrLf\n      Dim msg43 As String = &quot;Step 4, part 3:&quot; &amp; vbCrLf &amp; _\n                            &quot;  Check whether the User and Machine environment variables &quot; _\n                 &amp; vbCrLf &amp; &quot;  were deleted from the Windows operating system registry...&quot; _\n                 &amp; vbCrLf\n      Dim fmt2x As String = &quot;  {0,9}: Set {1} = &quot;&quot;{2}&quot;&quot;&quot;\n      &#39;-------------------------------------------------------------------------------------\n      &#39; Step 1:\n      &#39; Check whether the sample environment variables already exist.\n      &#39; WARNING: These variables will be deleted at the end of this sample.\n      &#39;-------------------------------------------------------------------------------------\n      Console.WriteLine(msg1)\n      CheckEachVariable()\n      Console.WriteLine()\n      &#39;-------------------------------------------------------------------------------------\n      &#39; Step 2:\n      &#39; Set the environment variable for each target.\n      &#39; This section demonstrates Environment.SetEnvironmentVariable.\n      &#39;-------------------------------------------------------------------------------------\n      Console.WriteLine(msg2)\n      &#39; Set the environment variable for the default target (the current process).\n      Console.WriteLine(fmt2x, &quot;(default)&quot;, myVarA, existsA)\n      Environment.SetEnvironmentVariable(myVarA, existsA)\n      \n      &#39; Set the environment variable for the current process.\n      Console.WriteLine(fmt2x, &quot;Process&quot;, myVarB, existsB)\n      Environment.SetEnvironmentVariable(myVarB, existsB, EnvironmentVariableTarget.Process)\n      \n      &#39; Set the environment variable for the current user.\n      Console.WriteLine(fmt2x, &quot;User&quot;, myVarC, existsC)\n      Environment.SetEnvironmentVariable(myVarC, existsC, EnvironmentVariableTarget.User)\n      \n      &#39; Set the environment variable for the local machine.\n      Console.WriteLine(fmt2x, &quot;Machine&quot;, myVarD, existsD)\n      Environment.SetEnvironmentVariable(myVarD, existsD, EnvironmentVariableTarget.Machine)\n      Console.WriteLine()\n      &#39;-------------------------------------------------------------------------------------\n      &#39; Step 3, part 1:\n      &#39; Display the environment variables in each target.\n      &#39;-------------------------------------------------------------------------------------\n      Console.WriteLine(msg31)\n      CheckAllVariables()\n      Console.WriteLine()\n      &#39;-------------------------------------------------------------------------------------\n      &#39; Step 3, part 2:\n      &#39; Check whether the User and Machine environment variables were created in the Windows \n      &#39; operating system registry.\n      &#39;-------------------------------------------------------------------------------------\n      Console.WriteLine(msg32)\n      CheckRegistry()\n      Console.WriteLine()\n      &#39;-------------------------------------------------------------------------------------\n      &#39; Step 4, part 1:\n      &#39; Delete the environment variables created for this sample.\n      &#39; This section demonstrates using Environment.SetEnvironmentVariable to delete an \n      &#39; environment variable.\n      &#39;-------------------------------------------------------------------------------------\n      Console.WriteLine(msg41)\n      Environment.SetEnvironmentVariable(myVarA, Nothing)\n      Environment.SetEnvironmentVariable(myVarB, Nothing, EnvironmentVariableTarget.Process)\n      Environment.SetEnvironmentVariable(myVarC, Nothing, EnvironmentVariableTarget.User)\n      Environment.SetEnvironmentVariable(myVarD, Nothing, EnvironmentVariableTarget.Machine)\n      &#39;-------------------------------------------------------------------------------------\n      &#39; Step 4, part 2:\n      &#39; Check whether the environment variables were deleted in each target.\n      &#39;-------------------------------------------------------------------------------------\n      Console.WriteLine(msg42)\n      CheckEachVariable()\n      &#39;-------------------------------------------------------------------------------------\n      &#39; Step 4, part 3:\n      &#39; Check whether the User and Machine environment variables were deleted from the \n      &#39; Windows operating system registry.\n      &#39;-------------------------------------------------------------------------------------\n      Console.WriteLine(msg43)\n      CheckRegistry()\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;Step 1:\n&#39;  Check whether the environment variables already exist in\n&#39;  the various targets...\n&#39;\n&#39;Process:\n&#39;  A_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  B_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  C_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  D_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;\n&#39;User:\n&#39;  A_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  B_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  C_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  D_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;\n&#39;Machine:\n&#39;  A_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  B_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  C_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  D_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;\n&#39;\n&#39;Step 2:\n&#39;  Set the environment variable for each target...\n&#39;\n&#39;  (default): Set A_GETSET_ENVAR_SAMPLE = &quot;exists in the default target (Process)&quot;\n&#39;    Process: Set B_GETSET_ENVAR_SAMPLE = &quot;exists in Process&quot;\n&#39;       User: Set C_GETSET_ENVAR_SAMPLE = &quot;exists in User&quot;\n&#39;    Machine: Set D_GETSET_ENVAR_SAMPLE = &quot;exists in Machine&quot;\n&#39;\n&#39;Step 3, part 1:\n&#39;  Display the environment variables in each target...\n&#39;\n&#39;Process:\n&#39;  B_GETSET_ENVAR_SAMPLE exists in Process.\n&#39;  A_GETSET_ENVAR_SAMPLE exists in the default target (Process).\n&#39;\n&#39;User:\n&#39;  C_GETSET_ENVAR_SAMPLE exists in User.\n&#39;\n&#39;Machine:\n&#39;  D_GETSET_ENVAR_SAMPLE exists in Machine.\n&#39;\n&#39;\n&#39;Step 3, part 2:\n&#39;  Check whether the User and Machine environment variables\n&#39;  were created in the Windows operating system registry...\n&#39;\n&#39;&quot;Environment&quot; key:\n&#39;  C_GETSET_ENVAR_SAMPLE exists in User.\n&#39;\n&#39;&quot;System\\CurrentControlSet\\Control\\Session Manager\\Environment&quot; key:\n&#39;  D_GETSET_ENVAR_SAMPLE exists in Machine.\n&#39;\n&#39;\n&#39;Step 4, part 1:\n&#39;  Delete the environment variables created for this sample...\n&#39;\n&#39;Step 4, part 2:\n&#39;  Check whether the environment variables were deleted\n&#39;  in each target...\n&#39;\n&#39;Process:\n&#39;  A_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  B_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  C_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  D_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;\n&#39;User:\n&#39;  A_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  B_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  C_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  D_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;\n&#39;Machine:\n&#39;  A_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  B_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  C_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  D_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;\n&#39;Step 4, part 3:\n&#39;  Check whether the User and Machine environment variables\n&#39;  were deleted from the Windows operating system registry...\n&#39;\n&#39;&quot;Environment&quot; key:\n&#39;  Environment variable doesn&#39;t exist.\n&#39;\n&#39;&quot;System\\CurrentControlSet\\Control\\Session Manager\\Environment&quot; key:\n&#39;  Environment variable doesn&#39;t exist.\n&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"environment.getsetenvar#1\">// This example demonstrates the \n//     Environment.GetEnvironmentVariable,\n//     Environment.SetEnvironmentVariable, and \n//     Environment.GetEnvironmentVariables overloaded methods.\n\nusing System;\nusing System.Collections;\nusing Microsoft.Win32;\n\nclass Sample \n{\n//-------------------------------------------------------------------------------------\n// Globals: \n//-------------------------------------------------------------------------------------\n    protected static string fmtNameValue = &quot;  {0} {1}.&quot;;\n    protected static string myVarSuffix = &quot;_GETSET_ENVAR_SAMPLE&quot;;\n\n// Four relatively unique environment variable names.\n    protected static string myVarA = &quot;A&quot; + myVarSuffix; // default process\n    protected static string myVarB = &quot;B&quot; + myVarSuffix; // Current Process\n    protected static string myVarC = &quot;C&quot; + myVarSuffix; // Current User\n    protected static string myVarD = &quot;D&quot; + myVarSuffix; // Local Machine\n//=====================================================================================\n// EachVariable: \n// Test whether a specific environment variable exists in a target.\n// This section demonstrates Environment.GetEnvironmentVariable.\n//-------------------------------------------------------------------------------------\n    protected static void EachVariable(string var, EnvironmentVariableTarget tgt)\n    {\n    string str;\n    //\n    if (0 == tgt)          // Zero means use the default target.\n        str = Environment.GetEnvironmentVariable(var);\n    else\n        str = Environment.GetEnvironmentVariable(var, tgt);\n    Console.WriteLine(fmtNameValue, \n                      var, (String.IsNullOrEmpty(str) ? &quot;doesn&#39;t exist&quot; : str));\n    }\n//-------------------------------------------------------------------------------------\n// CheckEachVariable: \n// Uses EachVariable to test whether each environment variable exists in a target.\n//-------------------------------------------------------------------------------------\n    protected static void CheckEachVariable()\n    {\n    Console.WriteLine(&quot;Process:&quot;);\n    EachVariable(myVarA, 0);  // Check the default target (current process)\n    EachVariable(myVarB, EnvironmentVariableTarget.Process);\n    EachVariable(myVarC, EnvironmentVariableTarget.Process);\n    EachVariable(myVarD, EnvironmentVariableTarget.Process);\n    Console.WriteLine();\n\n    Console.WriteLine(&quot;User:&quot;);\n    EachVariable(myVarA, EnvironmentVariableTarget.User);\n    EachVariable(myVarB, EnvironmentVariableTarget.User);\n    EachVariable(myVarC, EnvironmentVariableTarget.User);\n    EachVariable(myVarD, EnvironmentVariableTarget.User);\n    Console.WriteLine();\n\n    Console.WriteLine(&quot;Machine:&quot;);\n    EachVariable(myVarA, EnvironmentVariableTarget.Machine);\n    EachVariable(myVarB, EnvironmentVariableTarget.Machine);\n    EachVariable(myVarC, EnvironmentVariableTarget.Machine);\n    EachVariable(myVarD, EnvironmentVariableTarget.Machine);\n    Console.WriteLine();\n    }\n//=====================================================================================\n// AllVariables: CheckAllVariables helper function.\n// This section demonstrates Environment.GetEnvironmentVariables.\n//-------------------------------------------------------------------------------------\n    private static void AllVariables(EnvironmentVariableTarget tgt)\n    {\n    string value;\n    string key;\n\n    foreach(DictionaryEntry de in Environment.GetEnvironmentVariables(tgt))\n        {\n        key   = (string)de.Key;\n        value = (string)de.Value;\n        if (key.Contains(myVarSuffix))\n            Console.WriteLine(fmtNameValue, key, value);\n        }\n    Console.WriteLine();\n    }\n//=====================================================================================\n// CheckAllVariables: \n// Uses AllVariables to test whether each environment variable exists in a target.\n//-------------------------------------------------------------------------------------\n    protected static void CheckAllVariables()\n    {\n    Console.WriteLine(&quot;Process:&quot;);\n    AllVariables(EnvironmentVariableTarget.Process);\n\n    Console.WriteLine(&quot;User:&quot;);\n    AllVariables(EnvironmentVariableTarget.User);\n\n    Console.WriteLine(&quot;Machine:&quot;);\n    AllVariables(EnvironmentVariableTarget.Machine);\n    }\n//=====================================================================================\n// ChkReg: CheckRegistry helper function.\n// This function filters out irrelevant environment variables. \n//-------------------------------------------------------------------------------------\n    private static void ChkReg(RegistryKey rk)\n    {\n    bool exists = false;\n    string registryNone = &quot;  Environment variable doesn&#39;t exist.&quot;;\n\n    foreach (string s in rk.GetValueNames())\n        {\n        if (s.Contains(myVarSuffix))\n            {\n            Console.WriteLine(fmtNameValue, s, (string)rk.GetValue(s));\n            exists = true;\n            }\n        }\n    if (exists == false)\n        Console.WriteLine(registryNone);\n    Console.WriteLine();\n    }\n//-------------------------------------------------------------------------------------\n// CheckRegistry: \n// Uses ChkReg to display the User and Machine environment variables in the registry.\n//-------------------------------------------------------------------------------------\n    protected static void CheckRegistry()\n    {\n    string subkeyU = @&quot;Environment&quot;;\n    string subkeyM = @&quot;System\\CurrentControlSet\\Control\\Session Manager\\Environment&quot;;\n    string fmtSubkey = &quot;\\&quot;{0}\\&quot; key:&quot;;\n\n    Console.WriteLine(fmtSubkey, subkeyU);\n    ChkReg(Registry.CurrentUser.OpenSubKey(subkeyU));\n\n    Console.WriteLine(fmtSubkey, subkeyM);\n    ChkReg(Registry.LocalMachine.OpenSubKey(subkeyM));\n    }\n//=====================================================================================\n// Main:\n//-------------------------------------------------------------------------------------\n    public static void Main() \n    {\n//-------------------------------------------------------------------------------------\n// Environment variable values\n//-------------------------------------------------------------------------------------\n    string existsA = &quot;exists in the default target (Process)&quot;;\n    string existsB = &quot;exists in Process&quot;;\n    string existsC = &quot;exists in User&quot;;\n    string existsD = &quot;exists in Machine&quot;;\n//-------------------------------------------------------------------------------------\n// Messages:\n//-------------------------------------------------------------------------------------\n    string msg1  = &quot;Step 1:\\n&quot; +\n                       &quot;  Check whether the environment variables already exist in \\n&quot; + \n                       &quot;  the various targets...\\n&quot;;\n    string msg2  = &quot;Step 2:\\n&quot; +\n                       &quot;  Set the environment variable for each target...\\n&quot;;\n    string msg31 = &quot;Step 3, part 1:\\n&quot; + \n                       &quot;  Display the environment variables in each target...\\n&quot;;\n    string msg32 = &quot;Step 3, part 2:\\n&quot; +\n                       &quot;  Check whether the User and Machine environment variables \\n&quot; +\n                       &quot;  were created in the Windows operating system registry...\\n&quot;;\n    string msg41 = &quot;Step 4, part 1:\\n&quot; +\n                       &quot;  Delete the environment variables created for this sample...\\n&quot;;\n    string msg42 = &quot;Step 4, part 2:\\n&quot; +\n                       &quot;  Check whether the environment variables were deleted \\n&quot; +\n                       &quot;  in each target...\\n&quot;;\n    string msg43 = &quot;Step 4, part 3:\\n&quot; + \n                       &quot;  Check whether the User and Machine environment variables \\n&quot; +\n                       &quot;  were deleted from the Windows operating system registry...\\n&quot;;\n    string fmt2x   = &quot;  {0,9}: Set {1} = \\&quot;{2}\\&quot;&quot;;\n//-------------------------------------------------------------------------------------\n// Step 1:\n// Check whether the sample environment variables already exist.\n// WARNING: These variables will be deleted at the end of this sample.\n//-------------------------------------------------------------------------------------\n    Console.WriteLine(msg1);\n    CheckEachVariable();\n    Console.WriteLine();\n//-------------------------------------------------------------------------------------\n// Step 2:\n// Set the environment variable for each target.\n// This section demonstrates Environment.SetEnvironmentVariable.\n//-------------------------------------------------------------------------------------\n    Console.WriteLine(msg2);\n// Set the environment variable for the default target (the current process).\n    Console.WriteLine(fmt2x, &quot;(default)&quot;, myVarA, existsA);\n    Environment.SetEnvironmentVariable(myVarA, existsA);\n\n// Set the environment variable for the current process.\n    Console.WriteLine(fmt2x, &quot;Process&quot;, myVarB, existsB);\n    Environment.SetEnvironmentVariable(myVarB, existsB, \n        EnvironmentVariableTarget.Process);\n\n// Set the environment variable for the current user.\n    Console.WriteLine(fmt2x, &quot;User&quot;, myVarC, existsC);\n    Environment.SetEnvironmentVariable(myVarC, existsC, \n        EnvironmentVariableTarget.User);\n\n// Set the environment variable for the local machine.\n    Console.WriteLine(fmt2x, &quot;Machine&quot;, myVarD, existsD);\n    Environment.SetEnvironmentVariable(myVarD, existsD, \n        EnvironmentVariableTarget.Machine);\n    Console.WriteLine();\n//-------------------------------------------------------------------------------------\n// Step 3, part 1:\n// Display the environment variables in each target.\n//-------------------------------------------------------------------------------------\n    Console.WriteLine(msg31);\n    CheckAllVariables();\n    Console.WriteLine();\n//-------------------------------------------------------------------------------------\n// Step 3, part 2:\n// Check whether the User and Machine environment variables were created in the Windows \n// operating system registry.\n//-------------------------------------------------------------------------------------\n    Console.WriteLine(msg32);\n    CheckRegistry();\n    Console.WriteLine();\n//-------------------------------------------------------------------------------------\n// Step 4, part 1:\n// Delete the environment variables created for this sample.\n// This section demonstrates using Environment.SetEnvironmentVariable to delete an \n// environment variable.\n//-------------------------------------------------------------------------------------\n    Console.WriteLine(msg41);\n    Environment.SetEnvironmentVariable(myVarA, null);\n    Environment.SetEnvironmentVariable(myVarB, null, EnvironmentVariableTarget.Process);\n    Environment.SetEnvironmentVariable(myVarC, null, EnvironmentVariableTarget.User);\n    Environment.SetEnvironmentVariable(myVarD, null, EnvironmentVariableTarget.Machine);\n//-------------------------------------------------------------------------------------\n// Step 4, part 2:\n// Check whether the environment variables were deleted in each target.\n//-------------------------------------------------------------------------------------\n    Console.WriteLine(msg42);\n    CheckEachVariable();\n//-------------------------------------------------------------------------------------\n// Step 4, part 3:\n// Check whether the User and Machine environment variables were deleted from the \n// Windows operating system registry.\n//-------------------------------------------------------------------------------------\n    Console.WriteLine(msg43);\n    CheckRegistry();\n    }\n}\n/*\nThis example produces the following results:\n\nStep 1:\n  Check whether the environment variables already exist in\n  the various targets...\n\nProcess:\n  A_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  B_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  C_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  D_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n\nUser:\n  A_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  B_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  C_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  D_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n\nMachine:\n  A_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  B_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  C_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  D_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n\n\nStep 2:\n  Set the environment variable for each target...\n\n  (default): Set A_GETSET_ENVAR_SAMPLE = &quot;exists in the default target (Process)&quot;\n    Process: Set B_GETSET_ENVAR_SAMPLE = &quot;exists in Process&quot;\n       User: Set C_GETSET_ENVAR_SAMPLE = &quot;exists in User&quot;\n    Machine: Set D_GETSET_ENVAR_SAMPLE = &quot;exists in Machine&quot;\n\nStep 3, part 1:\n  Display the environment variables in each target...\n\nProcess:\n  B_GETSET_ENVAR_SAMPLE exists in Process.\n  A_GETSET_ENVAR_SAMPLE exists in the default target (Process).\n\nUser:\n  C_GETSET_ENVAR_SAMPLE exists in User.\n\nMachine:\n  D_GETSET_ENVAR_SAMPLE exists in Machine.\n\n\nStep 3, part 2:\n  Check whether the User and Machine environment variables\n  were created in the Windows operating system registry...\n\n&quot;Environment&quot; key:\n  C_GETSET_ENVAR_SAMPLE exists in User.\n\n&quot;System\\CurrentControlSet\\Control\\Session Manager\\Environment&quot; key:\n  D_GETSET_ENVAR_SAMPLE exists in Machine.\n\n\nStep 4, part 1:\n  Delete the environment variables created for this sample...\n\nStep 4, part 2:\n  Check whether the environment variables were deleted\n  in each target...\n\nProcess:\n  A_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  B_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  C_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  D_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n\nUser:\n  A_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  B_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  C_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  D_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n\nMachine:\n  A_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  B_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  C_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  D_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n\nStep 4, part 3:\n  Check whether the User and Machine environment variables\n  were deleted from the Windows operating system registry...\n\n&quot;Environment&quot; key:\n  Environment variable doesn&#39;t exist.\n\n&quot;System\\CurrentControlSet\\Control\\Session Manager\\Environment&quot; key:\n  Environment variable doesn&#39;t exist.\n*/\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The EnvironmentVariableTarget enumeration is used by certain overloads of the <a class=\"xref\" href=\"system.environment#System_Environment_SetEnvironmentVariable_\" data-linktype=\"relative-path\">SetEnvironmentVariable</a>, <a class=\"xref\" href=\"system.environment#System_Environment_GetEnvironmentVariable_\" data-linktype=\"relative-path\">GetEnvironmentVariable</a>, and <a class=\"xref\" href=\"system.environment#System_Environment_GetEnvironmentVariables_\" data-linktype=\"relative-path\">GetEnvironmentVariables</a> methods to specify the location, or target, where the name and value of an environment variable is stored or retrieved.  </p>\n<p> The target can be one of three locations: the environment block associated with the current process, the Windows operating system registry key reserved for environment variables associated with the current user, or the registry key reserved for environment variables associated with all users on the local machine.</p>\n\r\n  \r\n      \t<h2 class=\"accented\">Fields\r\n      </h2>\r\n      <table class=\"nameValue\">\r\n      \t<tr><td id=\"System_EnvironmentVariableTarget_Machine\">\r\n      \t\t\t<span class=\"lang-csharp\">Machine</span>\r\n      \t</td>\r\n      \t<td><p>The environment variable is stored or retrieved from the <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\Environment</code> key in the Windows operating system registry.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_EnvironmentVariableTarget_Process\">\r\n      \t\t\t<span class=\"lang-csharp\">Process</span>\r\n      \t</td>\r\n      \t<td><p>The environment variable is stored or retrieved from the environment block associated with the current process.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_EnvironmentVariableTarget_User\">\r\n      \t\t\t<span class=\"lang-csharp\">User</span>\r\n      \t</td>\r\n      \t<td><p>The environment variable is stored or retrieved from the <code>HKEY_CURRENT_USER\\Environment</code> key in the Windows operating system registry.</p>\n</td>\r\n      \t</tr>\r\n      </table>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.EnvironmentVariableTarget.yml\">\r\n<meta name=\"APIName\" content=\"System.EnvironmentVariableTarget\">\r\n<meta name=\"APIName\" content=\"System.EnvironmentVariableTarget.Machine\">\r\n<meta name=\"APIName\" content=\"System.EnvironmentVariableTarget.Process\">\r\n<meta name=\"APIName\" content=\"System.EnvironmentVariableTarget.User\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-29 05:54 AM\">\r\n<meta name=\"document_id\" content=\"6a3b3c28-ebe0-ad09-ea94-b10d61992b26\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Specifies the location where an environment variable is stored or retrieved in a set or get operation.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.EnvironmentVariableTarget\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.EnvironmentVariableTarget.yml","open_to_public_contributors":false,"api_name":["System.EnvironmentVariableTarget","System.EnvironmentVariableTarget.Machine","System.EnvironmentVariableTarget.Process","System.EnvironmentVariableTarget.User"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.EnvironmentVariableTarget","System::EnvironmentVariableTarget","System.EnvironmentVariableTarget.Machine","System::EnvironmentVariableTarget::Machine","System.EnvironmentVariableTarget.Process","System::EnvironmentVariableTarget::Process","System.EnvironmentVariableTarget.User","System::EnvironmentVariableTarget::User"],"dev_langs":["csharp"],"updated_at":"2017-03-29 05:54 AM","document_id":"6a3b3c28-ebe0-ad09-ea94-b10d61992b26","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System/EnvironmentVariableTarget.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"EnvironmentVariableTarget enum | Microsoft Docs","_op_ogTitle":"EnvironmentVariableTarget enum","description":"Specifies the location where an environment variable is stored or retrieved in a set or get operation.\n","toc_asset_id":"api/_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.EnvironmentVariableTarget","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.environmentvariabletarget","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.environmentvariabletarget","fileRelativePath":"api/System.EnvironmentVariableTarget.html"},"themesRelativePathToOutputRoot":"_themes/"}