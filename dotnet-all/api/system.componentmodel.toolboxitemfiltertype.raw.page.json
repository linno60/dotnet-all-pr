{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">ToolboxItemFilterType</span>\r\n      Enum\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Defines identifiers used to indicate the type of filter that a <a class=\"xref\" href=\"system.componentmodel.toolboxitemfilterattribute\" data-linktype=\"relative-path\">ToolboxItemFilterAttribute</a> uses.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\r\n  \t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public enum ToolboxItemFilterType</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a></span></div><span class=\"lang-csharp\">ToolboxItemFilterType</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example demonstrates how to apply the <a class=\"xref\" href=\"system.componentmodel.toolboxitemfilterattribute\" data-linktype=\"relative-path\">ToolboxItemFilterAttribute</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"IToolboxUserExample#1\">Imports System\nImports System.Collections\nImports System.ComponentModel\nImports System.ComponentModel.Design\nImports System.Diagnostics\nImports System.Drawing\nImports System.Drawing.Design\nImports System.Windows.Forms\nImports System.Windows.Forms.Design\n\n&#39; This example contains an IRootDesigner that implements the IToolboxUser interface.\n&#39; This example demonstrates how to enable the GetToolSupported method of an IToolboxUser\n&#39; designer in order to disable specific toolbox items, and how to respond to the \n&#39; invocation of a ToolboxItem in the ToolPicked method of an IToolboxUser implementation.\n&#39; This example component class demonstrates the associated IRootDesigner which \n&#39; implements the IToolboxUser interface. When designer view is invoked, Visual \n&#39; Studio .NET attempts to display a design mode view for the class at the top \n&#39; of a code file. This can sometimes fail when the class is one of multiple types \n&#39; in a code file, and has a DesignerAttribute associating it with an IRootDesigner. \n&#39; Placing a derived class at the top of the code file solves this problem. A \n&#39; derived class is not typically needed for this reason, except that placing the \n&#39; RootDesignedComponent class in another file is not a simple solution for a code \n&#39; example that is packaged in one segment of code.\n\nPublic Class RootViewSampleComponent\n    Inherits RootDesignedComponent\nEnd Class\n\n&#39; The following attribute associates the SampleRootDesigner with this example component.\n&lt;DesignerAttribute(GetType(SampleRootDesigner), GetType(IRootDesigner))&gt; _\nPublic Class RootDesignedComponent\n    Inherits System.Windows.Forms.Control\nEnd Class\n\n&#39; This example IRootDesigner implements the IToolboxUser interface and provides a \n&#39; Windows Forms view technology view for its associated component using an internal \n&#39; Control type.     \n&#39; The following ToolboxItemFilterAttribute enables the GetToolSupported method of this\n&#39; IToolboxUser designer to be queried to check for whether to enable or disable all \n&#39; ToolboxItems which create any components whose type name begins with &quot;System.Windows.Forms&quot;.\n&lt;ToolboxItemFilterAttribute(&quot;System.Windows.Forms&quot;, ToolboxItemFilterType.Custom)&gt; _\n&lt;System.Security.Permissions.PermissionSetAttribute(System.Security.Permissions.SecurityAction.Demand, Name:=&quot;FullTrust&quot;)&gt; _\nPublic Class SampleRootDesigner\n    Inherits ParentControlDesigner\n    Implements IRootDesigner, IToolboxUser\n\n    &#39; Member field of custom type RootDesignerView, a control that is shown in the \n    &#39; design mode document window. This member is cached to reduce processing needed \n    &#39; to recreate the view control on each call to GetView().\n    Private m_view As RootDesignerView\n\n    &#39; This string array contains type names of components that should not be added to \n    &#39; the component managed by this designer from the Toolbox.  Any ToolboxItems whose \n    &#39; type name matches a type name in this array will be marked disabled according to  \n    &#39; the signal returned by the IToolboxUser.GetToolSupported method of this designer.\n    Private blockedTypeNames As String() = {&quot;System.Windows.Forms.ListBox&quot;, &quot;System.Windows.Forms.GroupBox&quot;}\n\n    &#39; IRootDesigner.SupportedTechnologies is a required override for an IRootDesigner.\n    &#39; This designer provides a display using the Windows Forms view technology.\n    ReadOnly Property SupportedTechnologies() As ViewTechnology() Implements IRootDesigner.SupportedTechnologies\n        Get\n            Return New ViewTechnology() {ViewTechnology.Default}\n        End Get\n    End Property\n\n    &#39; This method returns an object that provides the view for this root designer. \n    Function GetView(ByVal technology As ViewTechnology) As Object Implements IRootDesigner.GetView\n        &#39; If the design environment requests a view technology other than Windows \n        &#39; Forms, this method throws an Argument Exception.\n        If technology &lt;&gt; ViewTechnology.Default Then\n            Throw New ArgumentException(&quot;An unsupported view technology was requested&quot;, &quot;Unsupported view technology.&quot;)\n        End If\n\n        &#39; Creates the view object if it has not yet been initialized.\n        If m_view Is Nothing Then\n            m_view = New RootDesignerView(Me)\n        End If\n        Return m_view\n    End Function\n\n    &#39; This method can signal whether to enable or disable the specified\n    &#39; ToolboxItem when the component associated with this designer is selected.\n    Function GetToolSupported(ByVal tool As ToolboxItem) As Boolean Implements IToolboxUser.GetToolSupported\n        &#39; Search the blocked type names array for the type name of the tool\n        &#39; for which support for is being tested. Return false to indicate the\n        &#39; tool should be disabled when the associated component is selected.\n        Dim i As Integer\n        For i = 0 To blockedTypeNames.Length - 1\n            If tool.TypeName = blockedTypeNames(i) Then\n                Return False\n            End If\n        Next i &#39; Return true to indicate support for the tool, if the type name of the\n        &#39; tool is not located in the blockedTypeNames string array.\n        Return True\n    End Function\n\n    &#39; This method can perform behavior when the specified tool has been invoked.\n    &#39; Invocation of a ToolboxItem typically creates a component or components, \n    &#39; and adds any created components to the associated component.\n    Sub ToolPicked(ByVal tool As ToolboxItem) Implements IToolboxUser.ToolPicked\n    End Sub\n\n    &#39; This control provides a Windows Forms view technology view object that \n    &#39; provides a display for the SampleRootDesigner.\n    &lt;DesignerAttribute(GetType(ParentControlDesigner), GetType(IDesigner))&gt; _\n    Friend Class RootDesignerView\n        Inherits Control\n        &#39; This field stores a reference to a designer.\n        Private m_designer As IDesigner\n\n        Public Sub New(ByVal designer As IDesigner)\n            &#39; Performs basic control initialization.\n            m_designer = designer\n            BackColor = Color.Blue\n            Font = New Font(Font.FontFamily.Name, 24.0F)\n        End Sub\n\n        &#39; This method is called to draw the view for the SampleRootDesigner.\n        Protected Overrides Sub OnPaint(ByVal pe As PaintEventArgs)\n            MyBase.OnPaint(pe)\n            &#39; Draws the name of the component in large letters.\n            pe.Graphics.DrawString(m_designer.Component.Site.Name, Font, Brushes.Yellow, New RectangleF(ClientRectangle.X, ClientRectangle.Y, ClientRectangle.Width, ClientRectangle.Height))\n        End Sub\n    End Class\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"IToolboxUserExample#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.ComponentModel.Design;\nusing System.Diagnostics;\nusing System.Drawing;\nusing System.Drawing.Design;\nusing System.Windows.Forms;\nusing System.Windows.Forms.Design;\n\n// This example contains an IRootDesigner that implements the IToolboxUser interface.\n// This example demonstrates how to enable the GetToolSupported method of an IToolboxUser\n// designer in order to disable specific toolbox items, and how to respond to the \n// invocation of a ToolboxItem in the ToolPicked method of an IToolboxUser implementation.\nnamespace IToolboxUserExample\n{\n    // This example component class demonstrates the associated IRootDesigner which \n    // implements the IToolboxUser interface. When designer view is invoked, Visual \n    // Studio .NET attempts to display a design mode view for the class at the top \n    // of a code file. This can sometimes fail when the class is one of multiple types \n    // in a code file, and has a DesignerAttribute associating it with an IRootDesigner. \n    // Placing a derived class at the top of the code file solves this problem. A \n    // derived class is not typically needed for this reason, except that placing the \n    // RootDesignedComponent class in another file is not a simple solution for a code \n    // example that is packaged in one segment of code.\n    public class RootViewSampleComponent : RootDesignedComponent\n\t{\n\t}\n\n\t// The following attribute associates the SampleRootDesigner with this example component.\n\t[DesignerAttribute(typeof(SampleRootDesigner), typeof(IRootDesigner))]\n\tpublic class RootDesignedComponent : System.Windows.Forms.Control\n\t{\n\t}\n\n    // This example IRootDesigner implements the IToolboxUser interface and provides a \n    // Windows Forms view technology view for its associated component using an internal \n    // Control type.     \n    // The following ToolboxItemFilterAttribute enables the GetToolSupported method of this\n    // IToolboxUser designer to be queried to check for whether to enable or disable all \n    // ToolboxItems which create any components whose type name begins with &quot;System.Windows.Forms&quot;.\n    [ToolboxItemFilterAttribute(&quot;System.Windows.Forms&quot;, ToolboxItemFilterType.Custom)]\n    [System.Security.Permissions.PermissionSet(System.Security.Permissions.SecurityAction.Demand, Name = &quot;FullTrust&quot;)] \n    public class SampleRootDesigner : ParentControlDesigner, IRootDesigner, IToolboxUser\n    {\n        // This field is a custom Control type named RootDesignerView. This field references\n        // a control that is shown in the design mode document window.\n        private RootDesignerView view;\n\n        // This string array contains type names of components that should not be added to \n        // the component managed by this designer from the Toolbox.  Any ToolboxItems whose \n        // type name matches a type name in this array will be marked disabled according to  \n        // the signal returned by the IToolboxUser.GetToolSupported method of this designer.\n        private string[] blockedTypeNames =\n        {\n            &quot;System.Windows.Forms.ListBox&quot;,\n            &quot;System.Windows.Forms.GroupBox&quot;\n        };\n\n        // IRootDesigner.SupportedTechnologies is a required override for an IRootDesigner.\n        // This designer provides a display using the Windows Forms view technology.\n        ViewTechnology[] IRootDesigner.SupportedTechnologies \n        {\n            get { return new ViewTechnology[] {ViewTechnology.Default}; }\n        }\n\n        // This method returns an object that provides the view for this root designer. \n        object IRootDesigner.GetView(ViewTechnology technology) \n        {\n            // If the design environment requests a view technology other than Windows \n            // Forms, this method throws an Argument Exception.\n            if (technology != ViewTechnology.Default)            \n                throw new ArgumentException(&quot;An unsupported view technology was requested&quot;, \n                &quot;Unsupported view technology.&quot;);            \n            \n            // Creates the view object if it has not yet been initialized.\n            if (view == null)                            \n                view = new RootDesignerView(this);          \n  \n            return view;\n        }\n\n        // This method can signal whether to enable or disable the specified\n        // ToolboxItem when the component associated with this designer is selected.\n        bool IToolboxUser.GetToolSupported(ToolboxItem tool)\n        {       \n            // Search the blocked type names array for the type name of the tool\n            // for which support for is being tested. Return false to indicate the\n            // tool should be disabled when the associated component is selected.\n            for( int i=0; i&lt;blockedTypeNames.Length; i++ )\n                if( tool.TypeName == blockedTypeNames[i] )\n                    return false;\n            \n            // Return true to indicate support for the tool, if the type name of the\n            // tool is not located in the blockedTypeNames string array.\n            return true;\n        }\n    \n        // This method can perform behavior when the specified tool has been invoked.\n        // Invocation of a ToolboxItem typically creates a component or components, \n        // and adds any created components to the associated component.\n        void IToolboxUser.ToolPicked(ToolboxItem tool)\n        {\n        }\n\n        // This control provides a Windows Forms view technology view object that \n        // provides a display for the SampleRootDesigner.\n        [DesignerAttribute(typeof(ParentControlDesigner), typeof(IDesigner))]\n        internal class RootDesignerView : Control\n        {\n            // This field stores a reference to a designer.\n            private IDesigner m_designer;\n\n            public RootDesignerView(IDesigner designer)\n            {\n                // Perform basic control initialization.\n                m_designer = designer;\n                BackColor = Color.Blue;\n                Font = new Font(Font.FontFamily.Name, 24.0f);                \n            }\n\n            // This method is called to draw the view for the SampleRootDesigner.\n            protected override void OnPaint(PaintEventArgs pe)\n            {\n                base.OnPaint(pe);\n                // Draw the name of the component in large letters.\n                pe.Graphics.DrawString(m_designer.Component.Site.Name, Font, Brushes.Yellow, ClientRectangle);\n            }\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"IToolboxUserExample#1\">#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n#using &lt;System.Design.dll&gt;\n#using &lt;System.Windows.Forms.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::ComponentModel::Design;\nusing namespace System::Diagnostics;\nusing namespace System::Drawing;\nusing namespace System::Drawing::Design;\nusing namespace System::Windows::Forms;\nusing namespace System::Windows::Forms::Design;\n\n// This example contains an IRootDesigner that implements the IToolboxUser interface.\n// This example demonstrates how to enable the GetToolSupported method of an IToolboxUser\n// designer in order to disable specific toolbox items, and how to respond to the \n// invocation of a ToolboxItem in the ToolPicked method of an IToolboxUser implementation.\npublic ref class SampleRootDesigner;\n\n// The following attribute associates the SampleRootDesigner with this example component.\n\n[DesignerAttribute(__typeof(SampleRootDesigner),__typeof(IRootDesigner))]\npublic ref class RootDesignedComponent: public Control{};\n\n\n// This example component class demonstrates the associated IRootDesigner which \n// implements the IToolboxUser interface. When designer view is invoked, Visual \n// Studio .NET attempts to display a design mode view for the class at the top \n// of a code file. This can sometimes fail when the class is one of multiple types \n// in a code file, and has a DesignerAttribute associating it with an IRootDesigner. \n// Placing a derived class at the top of the code file solves this problem. A \n// derived class is not typically needed for this reason, except that placing the \n// RootDesignedComponent class in another file is not a simple solution for a code \n// example that is packaged in one segment of code.\npublic ref class RootViewSampleComponent: public RootDesignedComponent{};\n\n\n// This example IRootDesigner implements the IToolboxUser interface and provides a \n// Windows Forms view technology view for its associated component using an internal \n// Control type.     \n// The following ToolboxItemFilterAttribute enables the GetToolSupported method of this\n// IToolboxUser designer to be queried to check for whether to enable or disable all \n// ToolboxItems which create any components whose type name begins with &quot;System.Windows.Forms&quot;.\n\n[ToolboxItemFilterAttribute(S&quot;System.Windows.Forms&quot;,ToolboxItemFilterType::Custom)]\npublic ref class SampleRootDesigner: public ParentControlDesigner, public IRootDesigner, public IToolboxUser\n{\npublic private:\n   ref class RootDesignerView;\n\nprivate:\n\n   // This field is a custom Control type named RootDesignerView. This field references\n   // a control that is shown in the design mode document window.\n   RootDesignerView^ view;\n\n   // This string array contains type names of components that should not be added to \n   // the component managed by this designer from the Toolbox.  Any ToolboxItems whose \n   // type name matches a type name in this array will be marked disabled according to  \n   // the signal returned by the IToolboxUser.GetToolSupported method of this designer.\n   array&lt;String^&gt;^blockedTypeNames;\n\npublic:\n   SampleRootDesigner()\n   {\n      array&lt;String^&gt;^tempTypeNames = {&quot;System.Windows.Forms.ListBox&quot;,&quot;System.Windows.Forms.GroupBox&quot;};\n      blockedTypeNames = tempTypeNames;\n   }\n\n\nprivate:\n\n   property array&lt;ViewTechnology&gt;^ SupportedTechnologies \n   {\n\n      // IRootDesigner.SupportedTechnologies is a required override for an IRootDesigner.\n      // This designer provides a display using the Windows Forms view technology.\n      array&lt;ViewTechnology&gt;^ IRootDesigner::get()\n      {\n         ViewTechnology temp0[] = {ViewTechnology::WindowsForms};\n         return temp0;\n      }\n\n   }\n\n   // This method returns an object that provides the view for this root designer. \n   Object^ IRootDesigner::GetView( ViewTechnology technology )\n   {\n      \n      // If the design environment requests a view technology other than Windows \n      // Forms, this method throws an Argument Exception.\n      if ( technology != ViewTechnology::WindowsForms )\n            throw gcnew ArgumentException( &quot;An unsupported view technology was requested&quot;,&quot;Unsupported view technology.&quot; );\n\n      \n      // Creates the view object if it has not yet been initialized.\n      if ( view == nullptr )\n            view = gcnew RootDesignerView( this );\n\n      return view;\n   }\n\n\n   // This method can signal whether to enable or disable the specified\n   // ToolboxItem when the component associated with this designer is selected.\n   bool IToolboxUser::GetToolSupported( ToolboxItem^ tool )\n   {\n      \n      // Search the blocked type names array for the type name of the tool\n      // for which support for is being tested. Return false to indicate the\n      // tool should be disabled when the associated component is selected.\n      for ( int i = 0; i &lt; blockedTypeNames-&gt;Length; i++ )\n         if ( tool-&gt;TypeName == blockedTypeNames[ i ] )\n                  return false;\n\n      \n      // Return true to indicate support for the tool, if the type name of the\n      // tool is not located in the blockedTypeNames string array.\n      return true;\n   }\n\n\n   // This method can perform behavior when the specified tool has been invoked.\n   // Invocation of a ToolboxItem typically creates a component or components, \n   // and adds any created components to the associated component.\n   void IToolboxUser::ToolPicked( ToolboxItem^ /*tool*/ ){}\n\n\npublic private:\n\n   // This control provides a Windows Forms view technology view object that \n   // provides a display for the SampleRootDesigner.\n\n   [DesignerAttribute(__typeof(ParentControlDesigner),__typeof(IDesigner))]\n   ref class RootDesignerView: public Control\n   {\n   private:\n\n      // This field stores a reference to a designer.\n      IDesigner^ m_designer;\n\n   public:\n      RootDesignerView( IDesigner^ designer )\n      {\n         \n         // Perform basic control initialization.\n         m_designer = designer;\n         BackColor = Color::Blue;\n         Font = gcnew System::Drawing::Font( Font-&gt;FontFamily-&gt;Name,24.0f );\n      }\n\n\n   protected:\n\n      // This method is called to draw the view for the SampleRootDesigner.\n      void OnPaint( PaintEventArgs^ pe )\n      {\n         Control::OnPaint( pe );\n         \n         // Draw the name of the component in large letters.\n         pe-&gt;Graphics-&gt;DrawString( m_designer-&gt;Component-&gt;Site-&gt;Name, Font, Brushes::Yellow, ClientRectangle );\n      }\n\n   };\n\n\n};\n</code></pre>\r\n  \r\n  \r\n      \t<h2 class=\"accented\">Fields\r\n      </h2>\r\n      <table class=\"nameValue\">\r\n      \t<tr><td id=\"System_ComponentModel_ToolboxItemFilterType_Allow\">\r\n      \t\t\t<span class=\"lang-csharp\">Allow</span>\r\n      \t</td>\r\n      \t<td><p>Indicates that a toolbox item filter string is allowed, but not required.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_ComponentModel_ToolboxItemFilterType_Custom\">\r\n      \t\t\t<span class=\"lang-csharp\">Custom</span>\r\n      \t</td>\r\n      \t<td><p>Indicates that custom processing is required to determine whether to use a toolbox item filter string.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_ComponentModel_ToolboxItemFilterType_Prevent\">\r\n      \t\t\t<span class=\"lang-csharp\">Prevent</span>\r\n      \t</td>\r\n      \t<td><p>Indicates that a toolbox item filter string is not allowed.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_ComponentModel_ToolboxItemFilterType_Require\">\r\n      \t\t\t<span class=\"lang-csharp\">Require</span>\r\n      \t</td>\r\n      \t<td><p>Indicates that a toolbox item filter string must be present for a toolbox item to be enabled.</p>\n</td>\r\n      \t</tr>\r\n      </table>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc1.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.ComponentModel.ToolboxItemFilterType.yml\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.ToolboxItemFilterType\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.ToolboxItemFilterType.Allow\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.ToolboxItemFilterType.Custom\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.ToolboxItemFilterType.Prevent\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.ToolboxItemFilterType.Require\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 02:21 PM\">\r\n<meta name=\"document_id\" content=\"62757d84-737e-63f5-0169-e0a73e088b0e\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Defines identifiers used to indicate the type of filter that a  uses.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.componentmodel/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.ComponentModel.ToolboxItemFilterType\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.ComponentModel.ToolboxItemFilterType.yml","open_to_public_contributors":false,"api_name":["System.ComponentModel.ToolboxItemFilterType","System.ComponentModel.ToolboxItemFilterType.Allow","System.ComponentModel.ToolboxItemFilterType.Custom","System.ComponentModel.ToolboxItemFilterType.Prevent","System.ComponentModel.ToolboxItemFilterType.Require"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.ComponentModel.ToolboxItemFilterType","System::ComponentModel::ToolboxItemFilterType","System.ComponentModel.ToolboxItemFilterType.Allow","System::ComponentModel::ToolboxItemFilterType::Allow","System.ComponentModel.ToolboxItemFilterType.Custom","System::ComponentModel::ToolboxItemFilterType::Custom","System.ComponentModel.ToolboxItemFilterType.Prevent","System::ComponentModel::ToolboxItemFilterType::Prevent","System.ComponentModel.ToolboxItemFilterType.Require","System::ComponentModel::ToolboxItemFilterType::Require"],"dev_langs":["csharp"],"updated_at":"2017-03-31 02:21 PM","document_id":"62757d84-737e-63f5-0169-e0a73e088b0e","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.ComponentModel/ToolboxItemFilterType.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ToolboxItemFilterType enum | Microsoft Docs","_op_ogTitle":"ToolboxItemFilterType enum","description":"Defines identifiers used to indicate the type of filter that a  uses.\n","toc_asset_id":"api/_splitted/System.ComponentModel/toc.json","toc_rel":"_splitted/System.ComponentModel/toc.json","source_url":"","ms.assetid":"System.ComponentModel.ToolboxItemFilterType","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.toolboxitemfiltertype","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.toolboxitemfiltertype","fileRelativePath":"api/System.ComponentModel.ToolboxItemFilterType.html"},"themesRelativePathToOutputRoot":"_themes/"}