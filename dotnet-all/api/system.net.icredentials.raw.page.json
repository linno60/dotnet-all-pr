{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">ICredentials</span>\r\n      Interface\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Provides the base authentication interface for retrieving credentials for Web client authentication.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public interface ICredentials</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example illustrates how to use the ICredentials interface.  </p>\n<pre><code class=\"lang-cs\" name=\"ICredential#1\">class CredentialList : ICredentials\n{\n\tclass CredentialInfo\n\t{\n\t\tpublic Uri uriObj;\n\t\tpublic String authenticationType;\n\t\tpublic NetworkCredential networkCredentialObj;\n     \n\t\tpublic CredentialInfo(Uri uriObj, String authenticationType, NetworkCredential networkCredentialObj)\n\t\t{\n\t\t\tthis.uriObj = uriObj;\n\t\t\tthis.authenticationType = authenticationType;\n\t\t\tthis.networkCredentialObj = networkCredentialObj;\n\t\t}\n\t}\n\n\tprivate ArrayList arrayListObj;\n\n\tpublic CredentialList()\n\t{\n\t\tarrayListObj = new ArrayList();\n\t}\n\n\tpublic void Add (Uri uriObj, String authenticationType, NetworkCredential credential)\n\t{\n\t\t// Add a &#39;CredentialInfo&#39; object into a list.\n\t\tarrayListObj.Add (new CredentialInfo(uriObj, authenticationType, credential));      \n\t}\n\t// Remove the &#39;CredentialInfo&#39; object from the list that matches to the given &#39;Uri&#39; and &#39;AuthenticationType&#39;\n\tpublic void Remove (Uri uriObj, String authenticationType)\n\t{\n\t\tfor(int index=0;index &lt; arrayListObj.Count; index++)\n\t\t{\n\t\t\tCredentialInfo credentialInfo = (CredentialInfo)arrayListObj[index];\n\t\t\tif(uriObj.Equals(credentialInfo.uriObj)&amp;&amp; authenticationType.Equals(credentialInfo.authenticationType))\n\t\t\t\tarrayListObj.RemoveAt(index);\n\t\t}\n\t}\n\tpublic NetworkCredential GetCredential (Uri uriObj, String authenticationType)\n\t{\n\t\tfor(int index=0;index &lt; arrayListObj.Count; index++)\n\t\t{\n\t\t\tCredentialInfo credentialInfoObj = (CredentialInfo)arrayListObj[index];\n\t\t\tif(uriObj.Equals(credentialInfoObj.uriObj) &amp;&amp; authenticationType.Equals(credentialInfoObj.authenticationType))\n\t\t\t\treturn credentialInfoObj.networkCredentialObj;\n\t\t}\n\t\treturn null;\n\t}\n};\n</code></pre><pre><code class=\"lang-vb\" name=\"ICredential#1\">\nClass CredentialInfo\n    Public uriObj As Uri\n    Public authenticationType As [String]\n    Public networkCredentialObj As NetworkCredential\n    \n    \n    Public Sub New(uriObj As Uri, authenticationType As [String], networkCredentialObj As NetworkCredential)\n        Me.uriObj = uriObj\n        Me.authenticationType = authenticationType\n        Me.networkCredentialObj = networkCredentialObj\n    End Sub &#39;New\nEnd Class &#39;CredentialInfo\n\nPrivate arrayListObj As ArrayList\n\n\nPublic Sub New()\n    arrayListObj = New ArrayList()\nEnd Sub &#39;New\n\n\nPublic Sub Add(uriObj As Uri, authenticationType As [String], credential As NetworkCredential)\n    &#39; adds a &#39;CredentialInfo&#39; object into a list\n    arrayListObj.Add(New CredentialInfo(uriObj, authenticationType, credential))\nEnd Sub &#39;Add\n\n&#39; Remove the &#39;CredentialInfo&#39; object from the list which matches to the given &#39;Uri&#39; and &#39;AuthenticationType&#39;\nPublic Sub Remove(uriObj As Uri, authenticationType As [String])\n    Dim index As Integer\n    For index = 0 To arrayListObj.Count - 1\n        Dim credentialInfo As CredentialInfo = CType(arrayListObj(index), CredentialInfo)\n        If uriObj.Equals(credentialInfo.uriObj) And authenticationType.Equals(credentialInfo.authenticationType) Then\n            arrayListObj.RemoveAt(index)\n        End If\n    Next index\nEnd Sub &#39;Remove\n\nPublic Function GetCredential(uriObj As Uri, authenticationType As [String]) As NetworkCredential  Implements ICredentials.GetCredential\n    Dim index As Integer\n    For index = 0 To arrayListObj.Count - 1\n        Dim credentialInfoObj As CredentialInfo = CType(arrayListObj(index), CredentialInfo)\n        If uriObj.Equals(credentialInfoObj.uriObj) And authenticationType.Equals(credentialInfoObj.authenticationType) Then\n            Return credentialInfoObj.networkCredentialObj\n        End If\n    Next index\n    Return Nothing\nEnd Function &#39;GetCredential\n</code></pre><pre><code class=\"lang-cpp\" name=\"ICredential#1\">ref class CredentialList: public ICredentials\n{\nprivate:\n   ref class CredentialInfo\n   {\n   public:\n      Uri^ uriObj;\n      String^ authenticationType;\n      NetworkCredential^ networkCredentialObj;\n      CredentialInfo( Uri^ uriObj, String^ authenticationType, NetworkCredential^ networkCredentialObj )\n      {\n         this-&gt;uriObj = uriObj;\n         this-&gt;authenticationType = authenticationType;\n         this-&gt;networkCredentialObj = networkCredentialObj;\n      }\n   };\n\n   ArrayList^ arrayListObj;\n\npublic:\n   CredentialList()\n   {\n      arrayListObj = gcnew ArrayList;\n   }\n\n   void Add( Uri^ uriObj, String^ authenticationType, NetworkCredential^ credential )\n   {\n      \n      // Add a &#39;CredentialInfo&#39; object into a list.\n      arrayListObj-&gt;Add( gcnew CredentialInfo( uriObj,authenticationType,credential ) );\n   }\n\n   // Remove the &#39;CredentialInfo&#39; object from the list that matches to the given &#39;Uri&#39; and &#39;AuthenticationType&#39;\n   void Remove( Uri^ uriObj, String^ authenticationType )\n   {\n      for ( int index = 0; index &lt; arrayListObj-&gt;Count; index++ )\n      {\n         CredentialInfo^ credentialInfo = dynamic_cast&lt;CredentialInfo^&gt;(arrayListObj[ index ]);\n         if ( uriObj-&gt;Equals( credentialInfo-&gt;uriObj ) &amp;&amp; authenticationType-&gt;Equals( credentialInfo-&gt;authenticationType ) )\n                  arrayListObj-&gt;RemoveAt( index );\n      }\n   }\n\n   virtual NetworkCredential^ GetCredential( Uri^ uriObj, String^ authenticationType )\n   {\n      for ( int index = 0; index &lt; arrayListObj-&gt;Count; index++ )\n      {\n         CredentialInfo^ credentialInfoObj = dynamic_cast&lt;CredentialInfo^&gt;(arrayListObj[ index ]);\n         if ( uriObj-&gt;Equals( credentialInfoObj-&gt;uriObj ) &amp;&amp; authenticationType-&gt;Equals( credentialInfoObj-&gt;authenticationType ) )\n                  return credentialInfoObj-&gt;networkCredentialObj;\n      }\n      return nullptr;\n   }\n};\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The ICredentials interface provides the <a class=\"xref\" href=\"system.net.icredentials#System_Net_ICredentials_GetCredential_\" data-linktype=\"relative-path\">GetCredential</a> method to objects that supply network credentials to applications.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Net_ICredentials_GetCredential_System_Uri_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetCredential(Uri, String)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a <a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a> object that is associated with the specified URI, and authentication type.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Net.NetworkCredential GetCredential (Uri uri, string authType);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>uri</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uri\" data-linktype=\"relative-path\">Uri</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.uri\" data-linktype=\"relative-path\">Uri</a> that the client is providing authentication for.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>authType</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The type of authentication, as defined in the <span class=\"xref\">stem.Net.IAuthenticationModule.AuthenticationType*</span> property.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a> that is associated with the specified URI and authentication type, or, if no credentials are available, <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The GetCredential method returns a <a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a> instance that contains the credentials that are associated with the specified URI and authorization scheme. When no credentials are available, the GetCredential method returns <code>null</code>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Net.ICredentials.yml\">\r\n<meta name=\"APIName\" content=\"System.Net.ICredentials\">\r\n<meta name=\"APIName\" content=\"System.Net.ICredentials.GetCredential\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-29 05:54 AM\">\r\n<meta name=\"document_id\" content=\"2656fa70-f712-4628-c2af-690f11d251ed\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides the base authentication interface for retrieving credentials for Web client authentication.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.net/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Net.ICredentials\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Net.ICredentials.yml","open_to_public_contributors":false,"api_name":["System.Net.ICredentials","System.Net.ICredentials.GetCredential"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Net.ICredentials","System::Net::ICredentials","System.Net.ICredentials.GetCredential","System::Net::ICredentials::GetCredential"],"dev_langs":["csharp"],"updated_at":"2017-03-29 05:54 AM","document_id":"2656fa70-f712-4628-c2af-690f11d251ed","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Net/ICredentials.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ICredentials interface | Microsoft Docs","_op_ogTitle":"ICredentials interface","description":"Provides the base authentication interface for retrieving credentials for Web client authentication.\n","toc_asset_id":"api/_splitted/System.Net/toc.json","toc_rel":"_splitted/System.Net/toc.json","source_url":"","ms.assetid":"System.Net.ICredentials","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.net.icredentials","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.net.icredentials","fileRelativePath":"api/System.Net.ICredentials.html"},"themesRelativePathToOutputRoot":"_themes/"}