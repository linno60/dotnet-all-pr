{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">ConfigurationConverterBase</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>The base class for the configuration converter types.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public abstract class ConfigurationConverterBase : System.ComponentModel.TypeConverter</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.typeconverter\" data-linktype=\"relative-path\">TypeConverter</a></span></div><span class=\"lang-csharp\">ConfigurationConverterBase</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Derived</dt><dd>\r\n  \t\t<div class=\"cdlHolder\">\r\n        \t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.commadelimitedstringcollectionconverter\" data-linktype=\"relative-path\">CommaDelimitedStringCollectionConverter</a></span></div>\r\n        \t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.genericenumconverter\" data-linktype=\"relative-path\">GenericEnumConverter</a></span></div>\r\n        \t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.infiniteintconverter\" data-linktype=\"relative-path\">InfiniteIntConverter</a></span></div>\r\n        \t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.infinitetimespanconverter\" data-linktype=\"relative-path\">InfiniteTimeSpanConverter</a></span></div>\r\n        \t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.timespanminutesconverter\" data-linktype=\"relative-path\">TimeSpanMinutesConverter</a></span></div>\r\n        \t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.timespansecondsconverter\" data-linktype=\"relative-path\">TimeSpanSecondsConverter</a></span></div>\r\n        \t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.typenameconverter\" data-linktype=\"relative-path\">TypeNameConverter</a></span></div>\r\n        \t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.whitespacetrimstringconverter\" data-linktype=\"relative-path\">WhiteSpaceTrimStringConverter</a></span></div>\r\n        \t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.configuration.machinekeyvalidationconverter\" data-linktype=\"relative-path\">MachineKeyValidationConverter</a></span></div>\r\n        \t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.mobilecontrols.mobiletypenameconverter\" data-linktype=\"relative-path\">MobileTypeNameConverter</a></span></div>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.typeconverter#System_ComponentModel_TypeConverter_CanConvertFrom_System_Type_\" data-linktype=\"relative-path\">CanConvertFrom(Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.typeconverter#System_ComponentModel_TypeConverter_CanConvertTo_System_Type_\" data-linktype=\"relative-path\">CanConvertTo(Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.typeconverter#System_ComponentModel_TypeConverter_ConvertFrom_System_ComponentModel_ITypeDescriptorContext_System_Globalization_CultureInfo_System_Object_\" data-linktype=\"relative-path\">ConvertFrom(ITypeDescriptorContext, CultureInfo, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.typeconverter#System_ComponentModel_TypeConverter_ConvertFrom_System_Object_\" data-linktype=\"relative-path\">ConvertFrom(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.typeconverter#System_ComponentModel_TypeConverter_ConvertFromInvariantString_System_ComponentModel_ITypeDescriptorContext_System_String_\" data-linktype=\"relative-path\">ConvertFromInvariantString(ITypeDescriptorContext, String)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.typeconverter#System_ComponentModel_TypeConverter_ConvertFromInvariantString_System_String_\" data-linktype=\"relative-path\">ConvertFromInvariantString(String)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.typeconverter#System_ComponentModel_TypeConverter_ConvertFromString_System_ComponentModel_ITypeDescriptorContext_System_Globalization_CultureInfo_System_String_\" data-linktype=\"relative-path\">ConvertFromString(ITypeDescriptorContext, CultureInfo, String)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.typeconverter#System_ComponentModel_TypeConverter_ConvertFromString_System_ComponentModel_ITypeDescriptorContext_System_String_\" data-linktype=\"relative-path\">ConvertFromString(ITypeDescriptorContext, String)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.typeconverter#System_ComponentModel_TypeConverter_ConvertFromString_System_String_\" data-linktype=\"relative-path\">ConvertFromString(String)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.typeconverter#System_ComponentModel_TypeConverter_ConvertTo_System_ComponentModel_ITypeDescriptorContext_System_Globalization_CultureInfo_System_Object_System_Type_\" data-linktype=\"relative-path\">ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.typeconverter#System_ComponentModel_TypeConverter_ConvertTo_System_Object_System_Type_\" data-linktype=\"relative-path\">ConvertTo(Object, Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.typeconverter#System_ComponentModel_TypeConverter_ConvertToInvariantString_System_ComponentModel_ITypeDescriptorContext_System_Object_\" data-linktype=\"relative-path\">ConvertToInvariantString(ITypeDescriptorContext, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.typeconverter#System_ComponentModel_TypeConverter_ConvertToInvariantString_System_Object_\" data-linktype=\"relative-path\">ConvertToInvariantString(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.typeconverter#System_ComponentModel_TypeConverter_ConvertToString_System_ComponentModel_ITypeDescriptorContext_System_Globalization_CultureInfo_System_Object_\" data-linktype=\"relative-path\">ConvertToString(ITypeDescriptorContext, CultureInfo, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.typeconverter#System_ComponentModel_TypeConverter_ConvertToString_System_ComponentModel_ITypeDescriptorContext_System_Object_\" data-linktype=\"relative-path\">ConvertToString(ITypeDescriptorContext, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.typeconverter#System_ComponentModel_TypeConverter_ConvertToString_System_Object_\" data-linktype=\"relative-path\">ConvertToString(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.typeconverter#System_ComponentModel_TypeConverter_CreateInstance_System_Collections_IDictionary_\" data-linktype=\"relative-path\">CreateInstance(IDictionary)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.typeconverter#System_ComponentModel_TypeConverter_CreateInstance_System_ComponentModel_ITypeDescriptorContext_System_Collections_IDictionary_\" data-linktype=\"relative-path\">CreateInstance(ITypeDescriptorContext, IDictionary)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.typeconverter#System_ComponentModel_TypeConverter_GetConvertFromException_System_Object_\" data-linktype=\"relative-path\">GetConvertFromException(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.typeconverter#System_ComponentModel_TypeConverter_GetConvertToException_System_Object_System_Type_\" data-linktype=\"relative-path\">GetConvertToException(Object, Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.typeconverter#System_ComponentModel_TypeConverter_GetCreateInstanceSupported\" data-linktype=\"relative-path\">GetCreateInstanceSupported()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.typeconverter#System_ComponentModel_TypeConverter_GetCreateInstanceSupported_System_ComponentModel_ITypeDescriptorContext_\" data-linktype=\"relative-path\">GetCreateInstanceSupported(ITypeDescriptorContext)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.typeconverter#System_ComponentModel_TypeConverter_GetProperties_System_ComponentModel_ITypeDescriptorContext_System_Object_\" data-linktype=\"relative-path\">GetProperties(ITypeDescriptorContext, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.typeconverter#System_ComponentModel_TypeConverter_GetProperties_System_ComponentModel_ITypeDescriptorContext_System_Object_System_Attribute___\" data-linktype=\"relative-path\">GetProperties(ITypeDescriptorContext, Object, Attribute[])</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.typeconverter#System_ComponentModel_TypeConverter_GetProperties_System_Object_\" data-linktype=\"relative-path\">GetProperties(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.typeconverter#System_ComponentModel_TypeConverter_GetPropertiesSupported\" data-linktype=\"relative-path\">GetPropertiesSupported()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.typeconverter#System_ComponentModel_TypeConverter_GetPropertiesSupported_System_ComponentModel_ITypeDescriptorContext_\" data-linktype=\"relative-path\">GetPropertiesSupported(ITypeDescriptorContext)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.typeconverter#System_ComponentModel_TypeConverter_GetStandardValues\" data-linktype=\"relative-path\">GetStandardValues()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.typeconverter#System_ComponentModel_TypeConverter_GetStandardValues_System_ComponentModel_ITypeDescriptorContext_\" data-linktype=\"relative-path\">GetStandardValues(ITypeDescriptorContext)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.typeconverter#System_ComponentModel_TypeConverter_GetStandardValuesExclusive\" data-linktype=\"relative-path\">GetStandardValuesExclusive()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.typeconverter#System_ComponentModel_TypeConverter_GetStandardValuesExclusive_System_ComponentModel_ITypeDescriptorContext_\" data-linktype=\"relative-path\">GetStandardValuesExclusive(ITypeDescriptorContext)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.typeconverter#System_ComponentModel_TypeConverter_GetStandardValuesSupported\" data-linktype=\"relative-path\">GetStandardValuesSupported()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.typeconverter#System_ComponentModel_TypeConverter_GetStandardValuesSupported_System_ComponentModel_ITypeDescriptorContext_\" data-linktype=\"relative-path\">GetStandardValuesSupported(ITypeDescriptorContext)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.typeconverter#System_ComponentModel_TypeConverter_IsValid_System_ComponentModel_ITypeDescriptorContext_System_Object_\" data-linktype=\"relative-path\">IsValid(ITypeDescriptorContext, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.typeconverter#System_ComponentModel_TypeConverter_IsValid_System_Object_\" data-linktype=\"relative-path\">IsValid(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.typeconverter#System_ComponentModel_TypeConverter_SortProperties_System_ComponentModel_PropertyDescriptorCollection_System_String___\" data-linktype=\"relative-path\">SortProperties(PropertyDescriptorCollection, String[])</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code examples show how to derive from the ConfigurationConverterBase class to create a custom <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> converter type. Also, the examples show how to use this type in a custom section.  </p>\n<p> The following code example shows how to create a custom <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> converter type from the ConfigurationConverterBase class.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Configuration.TimeSpanMinutesConverter#1\">Imports System\nImports System.Collections.Generic\nImports System.Text\nImports System.Configuration\nImports System.Globalization\nImports System.ComponentModel\n\n\n\n\nNotInheritable Public Class CustomTimeSpanMinutesConverter\n    Inherits ConfigurationConverterBase\n    \n    Friend Function ValidateType(ByVal value As Object, _\n    ByVal expected As Type) As Boolean\n        Dim result As Boolean\n\n        If Not (value Is Nothing) _\n        AndAlso value.ToString() &lt;&gt; expected.ToString() Then\n            result = False\n        Else\n            result = True\n        End If\n        Return result\n\n    End Function &#39;ValidateType\n    \n    \n    Public Overrides Function CanConvertTo( _\n    ByVal ctx As ITypeDescriptorContext, _\n    ByVal type As Type) As Boolean\n        Return (type.ToString() = GetType(String).ToString())\n\n    End Function &#39;CanConvertTo\n    \n    Public Overrides Function CanConvertFrom( _\n    ByVal ctx As ITypeDescriptorContext, _\n    ByVal type As Type) As Boolean\n        Return (type.ToString() = GetType(String).ToString())\n\n    End Function &#39;CanConvertFrom\n    \n    Public Overrides Function ConvertTo( _\n    ByVal ctx As ITypeDescriptorContext, _\n    ByVal ci As CultureInfo, ByVal value As Object, _\n    ByVal type As Type) As Object\n        ValidateType(value, GetType(TimeSpan))\n\n        Dim data As Long = _\n        Fix(CType(value, TimeSpan).TotalMinutes)\n\n        Return data.ToString(CultureInfo.InvariantCulture)\n\n    End Function &#39;ConvertTo\n    \n    Public Overrides Function ConvertFrom( _\n    ByVal ctx As ITypeDescriptorContext, _\n    ByVal ci As CultureInfo, ByVal data As Object) As Object\n\n        Dim min As Long = _\n        Long.Parse(CStr(data), CultureInfo.InvariantCulture)\n\n        Return TimeSpan.FromMinutes(System.Convert.ToDouble(min))\n\n    End Function &#39;ConvertFrom\n\nEnd Class &#39;CustomTimeSpanMinutesConverter \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Configuration.TimeSpanMinutesConverter#1\">using System;\nusing System.Collections.Generic;\nusing System.Text;\nusing System.Configuration;\nusing System.Globalization;\nusing System.ComponentModel;\n\n\npublic sealed class CustomTimeSpanMinutesConverter :\n    ConfigurationConverterBase\n{\n    internal bool ValidateType(object value, \n        Type expected)\n    {\n        bool result;\n\n        if ((value != null) &amp;&amp;\n            (value.GetType() != expected))\n            result = false;\n        else\n            result = true;\n\n        return result;\n    }\n\n    public override bool CanConvertTo(\n        ITypeDescriptorContext ctx, Type type)\n    {\n        return (type == typeof(string));\n    }\n\n    public override bool CanConvertFrom(\n        ITypeDescriptorContext ctx, Type type)\n    {\n        return (type == typeof(string));\n    }\n\n    public override object ConvertTo(\n        ITypeDescriptorContext ctx, CultureInfo ci,\n        object value, Type type)\n    {\n        ValidateType(value, typeof(TimeSpan));\n\n        long data = (long)(((TimeSpan)value).TotalMinutes);\n\n        return data.ToString(CultureInfo.InvariantCulture);\n    }\n\n    public override object ConvertFrom(\n        ITypeDescriptorContext ctx, CultureInfo ci, object data)\n    {\n\n        long min = long.Parse((string)data,\n            CultureInfo.InvariantCulture);\n\n        return TimeSpan.FromMinutes((double)min);\n    }\n\n}\n</code></pre><p> The following code example shows how to define a custom section that uses the previous custom <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> converter.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Configuration.ConfigurationConvertersCustomSection#1\">\n    // Define a custom section.\n    public sealed class CustomSection :\n        ConfigurationSection\n    {\n\n        public CustomSection() \n        {\n           \n        }\n\n        [ConfigurationProperty(&quot;fileName&quot;, DefaultValue=&quot;   default.txt  &quot;)]\n        [TypeConverter(typeof(WhiteSpaceTrimStringConverter))]\n        public String FileName\n        {\n            get\n            {\n                return (String)this[&quot;fileName&quot;];\n            }\n            set\n            {\n                this[&quot;fileName&quot;] = value;\n            }\n        }\n\n        [ConfigurationProperty(&quot;maxIdleTime&quot;)]\n        [TypeConverter(typeof(CustomizedTimeSpanMinutesConverter))]\n        public TimeSpan MaxIdleTime\n        {\n            get\n            {\n                return (TimeSpan)this[&quot;maxIdleTime&quot;];\n            }\n            set\n            {\n                this[&quot;maxIdleTime&quot;] = value;\n            }\n        }\n\n        [ConfigurationProperty(&quot;timeDelay&quot;, \n            DefaultValue = &quot;infinite&quot;)]\n        [TypeConverter(typeof(InfiniteTimeSpanConverter))]\n        public TimeSpan TimeDelay\n        {\n            get\n            {\n                return (TimeSpan)this[&quot;timeDelay&quot;];\n            }\n            set\n            {\n                this[&quot;timeDelay&quot;] = value;\n            }\n        }\n\n        [ConfigurationProperty(&quot;cdStr&quot;, \n            DefaultValue = &quot;str0, str1&quot;,\n           IsRequired = true)]\n\n        [TypeConverter(typeof(\n            CommaDelimitedStringCollectionConverter))]\n        public StringCollection CdStr\n        {\n            get\n            {\n                return (StringCollection)this[&quot;cdStr&quot;];\n            }\n\n            set\n            {\n                this[&quot;cdStr&quot;] = value;\n            }\n   \n        }\n\n\n\n        public enum Permissions\n        {\n            FullControl         = 0,\n            Modify              = 1,\n            ReadExecute         = 2,\n            Read                = 3,\n            Write               = 4,\n            SpecialPermissions  = 5\n        }\n\n        [ConfigurationProperty(&quot;permission&quot;, DefaultValue = Permissions.Read)]\n        public Permissions Permission\n        {\n            get\n            {\n                return (Permissions)this[&quot;permission&quot;];\n            }\n\n            set\n            {\n                this[&quot;permission&quot;] = value;\n            }\n\n        }\n\n        \n        [ConfigurationProperty(&quot;maxUsers&quot;, DefaultValue=&quot;infinite&quot;)]\n        [TypeConverter(typeof(InfiniteIntConverter))]\n        public int MaxUsers\n        {\n            get\n            {\n                return (int)this[&quot;maxUsers&quot;];\n            }\n            set\n            {\n                this[&quot;maxUsers&quot;] = value;\n            }\n        }\n\n    }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Configuration.ConfigurationConvertersCustomSection#1\">&#39; Define a custom section.\nNotInheritable Public Class CustomSection\n    Inherits ConfigurationSection\n    \n    \n    Public Sub New() \n    \n    End Sub &#39;New\n    \n    \n    \n    &lt;ConfigurationProperty(&quot;fileName&quot;, _\n    DefaultValue:=&quot;   default.txt  &quot;), _\n    TypeConverter(GetType(WhiteSpaceTrimStringConverter))&gt; _\n    Public Property FileName() As String\n        Get\n            Return CStr(Me(&quot;fileName&quot;))\n        End Get\n        Set(ByVal value As String)\n            Me(&quot;fileName&quot;) = value\n        End Set\n    End Property\n\n    \n    &lt;ConfigurationProperty(&quot;maxIdleTime&quot;), _\n    TypeConverter(GetType(CustomizedTimeSpanMinutesConverter))&gt; _\n    Public Property MaxIdleTime() As TimeSpan\n        Get\n            Return CType(Me(&quot;maxIdleTime&quot;), TimeSpan)\n        End Get\n        Set(ByVal value As TimeSpan)\n            Me(&quot;maxIdleTime&quot;) = value\n        End Set\n    End Property\n    \n    &lt;ConfigurationProperty(&quot;timeDelay&quot;, _\n    DefaultValue:=&quot;infinite&quot;), _\n    TypeConverter(GetType(InfiniteTimeSpanConverter))&gt; _\n    Public Property TimeDelay() As TimeSpan\n        Get\n            Return CType(Me(&quot;timeDelay&quot;), TimeSpan)\n        End Get\n        Set(ByVal value As TimeSpan)\n            Me(&quot;timeDelay&quot;) = Value\n        End Set\n    End Property\n    \n    &lt;ConfigurationProperty(&quot;cdStr&quot;, _\n    DefaultValue:=&quot;str0, str1&quot;, _\n    IsRequired:=True), _\n    TypeConverter(GetType(CommaDelimitedStringCollectionConverter))&gt; _\n    Public Property CdStr() As StringCollection\n        Get\n            Return CType(Me(&quot;cdStr&quot;), StringCollection)\n        End Get\n\n        Set(ByVal value As StringCollection)\n            Me(&quot;cdStr&quot;) = value\n        End Set\n    End Property\n    \n    \n    Public Enum Permissions\n        FullControl = 0\n        Modify = 1\n        ReadExecute = 2\n        Read = 3\n        Write = 4\n        SpecialPermissions = 5\n    End Enum &#39;Permissions\n    \n    \n    &lt;ConfigurationProperty(&quot;permission&quot;, _\n    DefaultValue:=Permissions.Read)&gt; _\n    Public Property Permission() As Permissions\n        Get\n            Return CType(Me(&quot;permission&quot;), Permissions)\n        End Get\n\n        Set(ByVal value As Permissions)\n            Me(&quot;permission&quot;) = Value\n        End Set\n    End Property\n    \n    \n    &lt;ConfigurationProperty(&quot;maxUsers&quot;, _\n    DefaultValue:=&quot;infinite&quot;), _\n    TypeConverter(GetType(InfiniteIntConverter))&gt; _\n    Public Property MaxUsers() As Integer\n        Get\n            Return Fix(Me(&quot;maxUsers&quot;))\n        End Get\n        Set(ByVal value As Integer)\n            Me(&quot;maxUsers&quot;) = Value\n        End Set\n    End Property\nEnd Class &#39;CustomSection \n</code></pre><p> The following code example shows how to create and modify a configuration file using the previous custom section.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Configuration.ConfigurationConverterBase#1\">Imports System\nImports System.Collections.Generic\nImports System.Text\nImports System.Configuration\nImports System.Globalization\nImports System.ComponentModel\n\n\n\n&#39; Define a custom section.\n\nNotInheritable Public Class CustomSection\n   Inherits ConfigurationSection\n   \n   \n   Public Sub New()\n   End Sub &#39;New\n   \n   \n    &lt;ConfigurationProperty(&quot;fileName&quot;, _\n    DefaultValue:=&quot;default.txt&quot;, _\n    IsRequired:=True, IsKey:=False), _\n    StringValidator(InvalidCharacters:=&quot; ~!@#$%^&amp;*()[]{}/;&#39;&quot;&quot;|\\&quot;, _\n    MinLength:=1, MaxLength:=60)&gt; _\n    Public Property FileName() As String\n        Get\n            Return CStr(Me(&quot;fileName&quot;))\n        End Get\n        Set(ByVal value As String)\n            Me(&quot;fileName&quot;) = value\n        End Set\n    End Property\n   \n   \n   \n    &lt;ConfigurationProperty(&quot;maxIdleTime&quot;), _\n    TypeConverter(GetType(TsMinutesConverter))&gt; _\n    Public Property MaxIdleTime() As TimeSpan\n        Get\n            Return CType(Me(&quot;maxIdleTime&quot;), TimeSpan)\n        End Get\n        Set(ByVal value As TimeSpan)\n            Me(&quot;maxIdleTime&quot;) = Value\n        End Set\n    End Property\n\nEnd Class &#39;CustomSection \n\n\nNotInheritable Public Class TsMinutesConverter\n   Inherits ConfigurationConverterBase\n   \n   Friend Function ValidateType(value As Object, expected As Type) As Boolean\n      Dim result As Boolean\n      \n        If Not (value Is Nothing) _\n        AndAlso (value.GetType().Equals(expected) &lt;&gt; True) Then\n            result = False\n        Else\n            result = True\n        End If\n      Return result\n   End Function &#39;ValidateType\n   \n   \n    Public Overrides Function CanConvertTo( _\n    ByVal ctx As ITypeDescriptorContext, _\n    ByVal type As Type) As Boolean\n\n        Return type.Equals(GetType(String))\n\n    End Function &#39;CanConvertTo\n   \n\n    Public Overrides Function CanConvertFrom( _\n    ByVal ctx As ITypeDescriptorContext, _\n    ByVal type As Type) As Boolean\n\n        Return type.Equals(GetType(String))\n\n    End Function &#39;CanConvertFrom\n   \n\n    Public Overrides Function ConvertTo( _\n    ByVal ctx As ITypeDescriptorContext, ByVal ci As CultureInfo, _\n    ByVal value As Object, ByVal type As Type) As Object\n        ValidateType(value, GetType(TimeSpan))\n\n        Dim data As Long = _\n        Fix(CType(value, TimeSpan).TotalMinutes)\n\n        Return data.ToString(CultureInfo.InvariantCulture)\n\n    End Function &#39;ConvertTo\n   \n   \n    Public Overrides Function ConvertFrom( _\n    ByVal ctx As ITypeDescriptorContext, ByVal ci As CultureInfo, _\n    ByVal data As Object) As Object\n\n        Dim min As Long = _\n        Long.Parse(CStr(data), _\n        CultureInfo.InvariantCulture)\n\n        Return TimeSpan.FromMinutes( _\n        System.Convert.ToDouble(min))\n\n    End Function &#39;ConvertFrom\nEnd Class &#39;TsMinutesConverter\n\nClass UsingConfigutationConverterBase\n   \n   \n   &#39; Create a custom section.\n   Shared Sub CreateSection()\n      Try\n         \n         Dim customSection As CustomSection\n         \n         &#39; Get the current configuration file.\n            Dim config _\n            As System.Configuration.Configuration = _\n            ConfigurationManager.OpenExeConfiguration( _\n            ConfigurationUserLevel.None)\n         \n         &#39; Create the section entry  \n         &#39; in the &lt;configSections&gt; and the \n         &#39; related target section in &lt;configuration&gt;.\n         If config.Sections(&quot;CustomSection&quot;) Is Nothing Then\n            customSection = New CustomSection()\n            config.Sections.Add(&quot;CustomSection&quot;, customSection)\n            customSection.SectionInformation.ForceSave = True\n            config.Save(ConfigurationSaveMode.Full)\n         End If\n      Catch err As ConfigurationErrorsException\n         Console.WriteLine(err.ToString())\n      End Try\n   End Sub &#39;CreateSection\n    \n   \n   \n   &#39; Change custom section and write it to disk.\n   Shared Sub SerializeCustomSection()\n      Try\n            Dim config _\n               As System.Configuration.Configuration = _\n               ConfigurationManager.OpenExeConfiguration( _\n               ConfigurationUserLevel.None)\n\n            Dim customSection _\n            As CustomSection = _\n            config.Sections.Get(&quot;CustomSection&quot;)\n         Dim ts As New TimeSpan(1, 30, 30)\n         \n         customSection.MaxIdleTime = ts\n         \n         config.Save()\n         \n            Dim maxIdleTime As String = _\n            customSection.MaxIdleTime.ToString()\n         \n            Console.WriteLine( _\n            &quot;New max idle time: {0}&quot;, maxIdleTime)\n      Catch e As Exception\n         Console.WriteLine(e.ToString())\n      End Try\n   End Sub &#39;SerializeCustomSection\n    \n   \n   &#39; Read custom section from disk.\n   Shared Sub DeserializeCustomSection()\n      \n      Try\n            Dim config _\n            As System.Configuration.Configuration = _\n            ConfigurationManager.OpenExeConfiguration( _\n            ConfigurationUserLevel.None)\n         \n            Dim customSection _\n            As CustomSection = _\n            config.Sections.Get(&quot;CustomSection&quot;)\n         \n            Dim maxIdleTime As TimeSpan = _\n            customSection.MaxIdleTime\n         \n         \n            Console.WriteLine( _\n            &quot;Max idle time: {0}&quot;, maxIdleTime.ToString())\n      Catch e As Exception\n         Console.WriteLine(e.ToString())\n      End Try\n   End Sub &#39;DeserializeCustomSection\n   \n\n    Public Overloads Shared Sub Main(ByVal args() As String)\n        CreateSection()\n        SerializeCustomSection()\n        DeserializeCustomSection()\n    End Sub &#39;Main \nEnd Class &#39;UsingConfigutationConverterBase\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Configuration.ConfigurationConverterBase#1\">using System;\nusing System.Collections.Generic;\nusing System.Text;\nusing System.Configuration;\nusing System.Globalization;\nusing System.ComponentModel;\n\nnamespace Samples.AspNet\n{\n\n    // Define a custom section.\n    public sealed class CustomSection :\n        ConfigurationSection\n    {\n\n        public CustomSection()\n        { }\n\n        [ConfigurationProperty(&quot;fileName&quot;, DefaultValue = &quot;default.txt&quot;,\n            IsRequired = true, IsKey = false)]\n        [StringValidator(InvalidCharacters = &quot; ~!@#$%^&amp;*()[]{}/;&#39;\\&quot;|\\\\&quot;,\n            MinLength = 1, MaxLength = 60)]\n        public string FileName\n        {\n            get\n            {\n                return (string)this[&quot;fileName&quot;];\n            }\n            set\n            {\n                this[&quot;fileName&quot;] = value;\n            }\n        }\n\n\n        [ConfigurationProperty(&quot;maxIdleTime&quot;)]\n        [TypeConverter(typeof(TsMinutesConverter))]\n        public TimeSpan MaxIdleTime\n        {\n            get\n            {\n                return (TimeSpan)this[&quot;maxIdleTime&quot;];\n            }\n            set\n            {\n                this[&quot;maxIdleTime&quot;] = value;\n            }\n        }\n\n    }\n\n    public sealed class TsMinutesConverter :\n        ConfigurationConverterBase\n    {\n        internal bool ValidateType(object value, Type expected)\n        {\n            bool result;\n\n            if ((value != null) &amp;&amp;\n                (value.GetType() != expected))\n                result = false;\n            else\n                result = true;\n\n            return result;\n        }\n\n        public override bool CanConvertTo(\n            ITypeDescriptorContext ctx, Type type)\n        {\n            return (type == typeof(string));\n        }\n\n        public override bool CanConvertFrom(\n            ITypeDescriptorContext ctx, Type type)\n        {\n            return (type == typeof(string));\n        }\n\n        public override object ConvertTo(\n            ITypeDescriptorContext ctx, CultureInfo ci,\n            object value, Type type)\n        {\n            ValidateType(value, typeof(TimeSpan));\n\n            long data = (long)(((TimeSpan)value).TotalMinutes);\n\n            return data.ToString(CultureInfo.InvariantCulture);\n        }\n\n        public override object ConvertFrom(\n            ITypeDescriptorContext ctx, CultureInfo ci, object data)\n        {\n\n            long min = long.Parse((string)data,\n                CultureInfo.InvariantCulture);\n\n            return TimeSpan.FromMinutes((double)min);\n        }\n    }\n\n    class UsingConfigutationConverterBase\n    {\n\n        // Create a custom section.\n        static void CreateSection()\n        {\n            try\n            {\n\n                CustomSection customSection;\n\n                // Get the current configuration file.\n                System.Configuration.Configuration config =\n                        ConfigurationManager.OpenExeConfiguration(\n                        ConfigurationUserLevel.None);\n\n                // Create the section entry  \n                // in the &lt;configSections&gt; and the \n                // related target section in &lt;configuration&gt;.\n                if (config.Sections[&quot;CustomSection&quot;] == null)\n                {\n                    customSection = new CustomSection();\n                    config.Sections.Add(&quot;CustomSection&quot;, customSection);\n                    customSection.SectionInformation.ForceSave = true;\n                    config.Save(ConfigurationSaveMode.Full);\n                }\n            }\n            catch (ConfigurationErrorsException err)\n            {\n                Console.WriteLine(err.ToString());\n            }\n\n        }\n\n\n        // Change custom section and write it to disk.\n        static void SerializeCustomSection()\n        {\n            try\n            {\n                System.Configuration.Configuration config =\n                    ConfigurationManager.OpenExeConfiguration(\n                    ConfigurationUserLevel.None);\n\n                CustomSection customSection =\n                    config.Sections.Get(&quot;CustomSection&quot;)\n                    as CustomSection;\n\n                TimeSpan ts =\n                    new TimeSpan(1, 30, 30);\n\n                customSection.MaxIdleTime = ts;\n\n                config.Save();\n\n                string maxIdleTime =\n                    customSection.MaxIdleTime.ToString();\n\n                Console.WriteLine(&quot;New max idle time: {0}&quot;,\n                    maxIdleTime);\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(e.ToString());\n            }\n\n        }\n\n        // Read custom section from disk.\n        static void DeserializeCustomSection()\n        {\n\n            try\n            {\n                System.Configuration.Configuration config =\n                    ConfigurationManager.OpenExeConfiguration(\n                    ConfigurationUserLevel.None);\n\n                CustomSection customSection =\n                    config.Sections.Get(&quot;CustomSection&quot;)\n                    as CustomSection;\n\n                TimeSpan maxIdleTime =\n                    customSection.MaxIdleTime;\n\n\n                Console.WriteLine(&quot;Max idle time: {0}&quot;,\n                    maxIdleTime.ToString());\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(e.ToString());\n            }\n\n        }\n\n\n        static void Main(string[] args)\n        {\n            CreateSection();\n            SerializeCustomSection();\n            DeserializeCustomSection();\n\n        }\n    }\n}\n</code></pre><p> The following is a configuration excerpt as used by the previous example.  </p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;  \n&lt;configuration&gt;  \n  &lt;configSections&gt;  \n    &lt;section name=&quot;CustomSection&quot;   \n      type=&quot;Samples.AspNet.CustomSection,   \n      ConfigurationConverters,   \n      Version=1.0.0.0, Culture=neutral,   \n      PublicKeyToken=null&quot;   \n      allowDefinition=&quot;Everywhere&quot;   \n      allowExeDefinition=&quot;MachineToApplication&quot;   \n      restartOnExternalChanges=&quot;true&quot; /&gt;  \n  &lt;/configSections&gt;  \n  &lt;CustomSection fileName=&quot;default.txt&quot; maxIdleTime=&quot;90&quot; /&gt;  \n&lt;/configuration&gt;  \n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The ConfigurationConverterBase is the base class for the converter configuration types. These are types that convert strings, found in the configuration file, to and from the related strongly typed properties.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Configuration_ConfigurationConverterBase__ctor_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Configuration_ConfigurationConverterBase__ctor\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ConfigurationConverterBase()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.configuration.configurationconverterbase\" data-linktype=\"relative-path\">ConfigurationConverterBase</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected ConfigurationConverterBase ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Because you normally use the converter types provided by the system, the only time you need the ConfigurationConverterBase constructor is when you must create your own conversion type.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Configuration_ConfigurationConverterBase_CanConvertFrom_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Configuration_ConfigurationConverterBase_CanConvertFrom_System_ComponentModel_ITypeDescriptorContext_System_Type_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CanConvertFrom(ITypeDescriptorContext, Type)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Determines whether the conversion is allowed.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override bool CanConvertFrom (System.ComponentModel.ITypeDescriptorContext ctx, Type type);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>ctx</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.itypedescriptorcontext\" data-linktype=\"relative-path\">ITypeDescriptorContext</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.componentmodel.itypedescriptorcontext\" data-linktype=\"relative-path\">ITypeDescriptorContext</a> object used for type conversions.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>type</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> to convert from.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the conversion is allowed; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The CanConvertFrom method determines whether a conversion can be performed on strongly typed properties to obtain value strings used in the configuration file.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Configuration_ConfigurationConverterBase_CanConvertTo_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Configuration_ConfigurationConverterBase_CanConvertTo_System_ComponentModel_ITypeDescriptorContext_System_Type_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CanConvertTo(ITypeDescriptorContext, Type)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Determines whether the conversion is allowed.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override bool CanConvertTo (System.ComponentModel.ITypeDescriptorContext ctx, Type type);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>ctx</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.itypedescriptorcontext\" data-linktype=\"relative-path\">ITypeDescriptorContext</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.componentmodel.itypedescriptorcontext\" data-linktype=\"relative-path\">ITypeDescriptorContext</a> object used for type conversion.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>type</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The type to convert to.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the conversion is allowed; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.configuration.configurationconverterbase#System_Configuration_ConfigurationConverterBase_CanConvertFrom_\" data-linktype=\"relative-path\">CanConvertFrom</a> method determines whether the strings contained in the configuration file can be converted to the related strongly typed properties.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"uhfHeaderId\" content=\"MSDocsHeader-DotNet\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Configuration.ConfigurationConverterBase.yml\">\r\n<meta name=\"APIName\" content=\"System.Configuration.ConfigurationConverterBase\">\r\n<meta name=\"APIName\" content=\"System.Configuration.ConfigurationConverterBase..ctor\">\r\n<meta name=\"APIName\" content=\"System.Configuration.ConfigurationConverterBase.CanConvertFrom\">\r\n<meta name=\"APIName\" content=\"System.Configuration.ConfigurationConverterBase.CanConvertTo\">\r\n<meta name=\"APILocation\" content=\"System.Configuration.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-04-01 05:59 PM\">\r\n<meta name=\"document_id\" content=\"e4fb5ff0-56f6-94a9-a2e2-e42599b3a766\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"The base class for the configuration converter types.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.configuration/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Configuration.ConfigurationConverterBase\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","uhfHeaderId":"MSDocsHeader-DotNet","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Configuration.ConfigurationConverterBase.yml","open_to_public_contributors":false,"api_name":["System.Configuration.ConfigurationConverterBase","System.Configuration.ConfigurationConverterBase..ctor","System.Configuration.ConfigurationConverterBase.CanConvertFrom","System.Configuration.ConfigurationConverterBase.CanConvertTo"],"api_location":["System.Configuration.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Configuration.ConfigurationConverterBase","System::Configuration::ConfigurationConverterBase","System.Configuration.ConfigurationConverterBase.#ctor","System::Configuration::ConfigurationConverterBase::#ctor","System.Configuration.ConfigurationConverterBase.CanConvertFrom","System::Configuration::ConfigurationConverterBase::CanConvertFrom","System.Configuration.ConfigurationConverterBase.CanConvertTo","System::Configuration::ConfigurationConverterBase::CanConvertTo"],"dev_langs":["csharp"],"updated_at":"2017-04-01 05:59 PM","document_id":"e4fb5ff0-56f6-94a9-a2e2-e42599b3a766","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Configuration/ConfigurationConverterBase.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ConfigurationConverterBase class | Microsoft Docs","_op_ogTitle":"ConfigurationConverterBase class","description":"The base class for the configuration converter types.\n","toc_asset_id":"api/_splitted/System.Configuration/toc.json","toc_rel":"_splitted/System.Configuration/toc.json","source_url":"","ms.assetid":"System.Configuration.ConfigurationConverterBase","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.configuration.configurationconverterbase","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.configuration.configurationconverterbase","fileRelativePath":"api/System.Configuration.ConfigurationConverterBase.html"},"themesRelativePathToOutputRoot":"_themes/"}