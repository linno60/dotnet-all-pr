{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">IDictionary&lt;TKey,TValue&gt;</span>\r\n      Interface\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents a generic collection of key/value pairs.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public interface IDictionary&lt;TKey,TValue&gt; : System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;, System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;</code></pre>\r\n  \r\n  \r\n  \r\n  \t\t<h3 class=\"accented\">Type Parameters</h3>\r\n  \t\t<table class=\"nameValue stack\">\r\n  \t\t\t<tr>\r\n  \t\t\t<td>TKey</td>\r\n  \t\t\t<td><p>The type of keys in the dictionary.</p>\n</td>\r\n  \t\t\t</tr>\r\n  \t\t\t<tr>\r\n  \t\t\t<td>TValue</td>\r\n  \t\t\t<td><p>The type of values in the dictionary.</p>\n</td>\r\n  \t\t\t</tr>\r\n  \t\t</table>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example creates an empty <a class=\"xref\" href=\"system.collections.generic.dictionary-2\" data-linktype=\"relative-path\">Dictionary&lt;TKey,TValue&gt;</a> of strings, with integer keys, and accesses it through the IDictionary(TKey, interface.  </p>\n<p> The code example uses the <a class=\"xref\" href=\"system.collections.generic.idictionary-2#System_Collections_Generic_IDictionary_2_Add_\" data-linktype=\"relative-path\">Add</a> method to add some elements. The example demonstrates that the <a class=\"xref\" href=\"system.collections.generic.idictionary-2#System_Collections_Generic_IDictionary_2_Add_\" data-linktype=\"relative-path\">Add</a> method throws <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a> when attempting to add a duplicate key.  </p>\n<p> The example uses the <a class=\"xref\" href=\"system.collections.generic.idictionary-2#System_Collections_Generic_IDictionary_2_Item_\" data-linktype=\"relative-path\">Item</a> property (the indexer in C#) to retrieve values, demonstrating that a <a class=\"xref\" href=\"system.collections.generic.keynotfoundexception\" data-linktype=\"relative-path\">KeyNotFoundException</a> is thrown when a requested key is not present, and showing that the value associated with a key can be replaced.  </p>\n<p> The example shows how to use the <a class=\"xref\" href=\"system.collections.generic.idictionary-2#System_Collections_Generic_IDictionary_2_TryGetValue_\" data-linktype=\"relative-path\">TryGetValue</a> method as a more efficient way to retrieve values if a program often must try key values that are not in the dictionary, and how to use the <a class=\"xref\" href=\"system.collections.generic.idictionary-2#System_Collections_Generic_IDictionary_2_ContainsKey_\" data-linktype=\"relative-path\">ContainsKey</a> method to test whether a key exists prior to calling the <a class=\"xref\" href=\"system.collections.generic.idictionary-2#System_Collections_Generic_IDictionary_2_Add_\" data-linktype=\"relative-path\">Add</a> method.  </p>\n<p> Finally, the example shows how to enumerate the keys and values in the dictionary, and how to enumerate the values alone using the <a class=\"xref\" href=\"system.collections.generic.idictionary-2#System_Collections_Generic_IDictionary_2_Values_\" data-linktype=\"relative-path\">Values</a> property.  </p>\n<pre><code class=\"lang-cpp\" name=\"Generic.IDictionary#1\">using namespace System;\nusing namespace System::Collections::Generic;\n\npublic ref class Example\n{\npublic:\n    static void Main()\n    {\n        // Create a new dictionary of strings, with string keys,\n        // and access it through the IDictionary generic interface.\n        IDictionary&lt;String^, String^&gt;^ openWith =\n            gcnew Dictionary&lt;String^, String^&gt;();\n\n        // Add some elements to the dictionary. There are no\n        // duplicate keys, but some of the values are duplicates.\n        openWith-&gt;Add(&quot;txt&quot;, &quot;notepad.exe&quot;);\n        openWith-&gt;Add(&quot;bmp&quot;, &quot;paint.exe&quot;);\n        openWith-&gt;Add(&quot;dib&quot;, &quot;paint.exe&quot;);\n        openWith-&gt;Add(&quot;rtf&quot;, &quot;wordpad.exe&quot;);\n\n        // The Add method throws an exception if the new key is\n        // already in the dictionary.\n        try\n        {\n            openWith-&gt;Add(&quot;txt&quot;, &quot;winword.exe&quot;);\n        }\n        catch (ArgumentException^)\n        {\n            Console::WriteLine(&quot;An element with Key = \\&quot;txt\\&quot; already exists.&quot;);\n        }\n\n        // The Item property is another name for the indexer, so you\n        // can omit its name when accessing elements.\n        Console::WriteLine(&quot;For key = \\&quot;rtf\\&quot;, value = {0}.&quot;,\n            openWith[&quot;rtf&quot;]);\n\n        // The indexer can be used to change the value associated\n        // with a key.\n        openWith[&quot;rtf&quot;] = &quot;winword.exe&quot;;\n        Console::WriteLine(&quot;For key = \\&quot;rtf\\&quot;, value = {0}.&quot;,\n            openWith[&quot;rtf&quot;]);\n\n        // If a key does not exist, setting the indexer for that key\n        // adds a new key/value pair.\n        openWith[&quot;doc&quot;] = &quot;winword.exe&quot;;\n\n        // The indexer throws an exception if the requested key is\n        // not in the dictionary.\n        try\n        {\n            Console::WriteLine(&quot;For key = \\&quot;tif\\&quot;, value = {0}.&quot;,\n                openWith[&quot;tif&quot;]);\n        }\n        catch (KeyNotFoundException^)\n        {\n            Console::WriteLine(&quot;Key = \\&quot;tif\\&quot; is not found.&quot;);\n        }\n\n        // When a program often has to try keys that turn out not to\n        // be in the dictionary, TryGetValue can be a more efficient\n        // way to retrieve values.\n        String^ value = &quot;&quot;;\n        if (openWith-&gt;TryGetValue(&quot;tif&quot;, value))\n        {\n            Console::WriteLine(&quot;For key = \\&quot;tif\\&quot;, value = {0}.&quot;, value);\n        }\n        else\n        {\n            Console::WriteLine(&quot;Key = \\&quot;tif\\&quot; is not found.&quot;);\n        }\n\n        // ContainsKey can be used to test keys before inserting\n        // them.\n        if (!openWith-&gt;ContainsKey(&quot;ht&quot;))\n        {\n            openWith-&gt;Add(&quot;ht&quot;, &quot;hypertrm.exe&quot;);\n            Console::WriteLine(&quot;Value added for key = \\&quot;ht\\&quot;: {0}&quot;,\n                openWith[&quot;ht&quot;]);\n        }\n\n        // When you use foreach to enumerate dictionary elements,\n        // the elements are retrieved as KeyValuePair objects.\n        Console::WriteLine();\n        for each( KeyValuePair&lt;String^, String^&gt; kvp in openWith )\n        {\n            Console::WriteLine(&quot;Key = {0}, Value = {1}&quot;,\n                kvp.Key, kvp.Value);\n        }\n\n        // To get the values alone, use the Values property.\n        ICollection&lt;String^&gt;^ icoll = openWith-&gt;Values;\n\n        // The elements of the ValueCollection are strongly typed\n        // with the type that was specified for dictionary values.\n        Console::WriteLine();\n        for each( String^ s in icoll )\n        {\n            Console::WriteLine(&quot;Value = {0}&quot;, s);\n        }\n\n        // To get the keys alone, use the Keys property.\n        icoll = openWith-&gt;Keys;\n\n        // The elements of the ValueCollection are strongly typed\n        // with the type that was specified for dictionary values.\n        Console::WriteLine();\n        for each( String^ s in icoll )\n        {\n            Console::WriteLine(&quot;Key = {0}&quot;, s);\n        }\n\n        // Use the Remove method to remove a key/value pair.\n        Console::WriteLine(&quot;\\nRemove(\\&quot;doc\\&quot;)&quot;);\n        openWith-&gt;Remove(&quot;doc&quot;);\n\n        if (!openWith-&gt;ContainsKey(&quot;doc&quot;))\n        {\n            Console::WriteLine(&quot;Key \\&quot;doc\\&quot; is not found.&quot;);\n        }\n    }\n};\n\nint main()\n{\n    Example::Main();\n}\n\n/* This code example produces the following output:\n\nAn element with Key = &quot;txt&quot; already exists.\nFor key = &quot;rtf&quot;, value = wordpad.exe.\nFor key = &quot;rtf&quot;, value = winword.exe.\nKey = &quot;tif&quot; is not found.\nKey = &quot;tif&quot; is not found.\nValue added for key = &quot;ht&quot;: hypertrm.exe\n\nKey = txt, Value = notepad.exe\nKey = bmp, Value = paint.exe\nKey = dib, Value = paint.exe\nKey = rtf, Value = winword.exe\nKey = doc, Value = winword.exe\nKey = ht, Value = hypertrm.exe\n\nValue = notepad.exe\nValue = paint.exe\nValue = paint.exe\nValue = winword.exe\nValue = winword.exe\nValue = hypertrm.exe\n\nKey = txt\nKey = bmp\nKey = dib\nKey = rtf\nKey = doc\nKey = ht\n\nRemove(&quot;doc&quot;)\nKey &quot;doc&quot; is not found.\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"Generic.IDictionary#1\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Create a new dictionary of strings, with string keys, \n        // and access it through the IDictionary generic interface.\n        IDictionary&lt;string, string&gt; openWith = \n            new Dictionary&lt;string, string&gt;();\n\n        // Add some elements to the dictionary. There are no \n        // duplicate keys, but some of the values are duplicates.\n        openWith.Add(&quot;txt&quot;, &quot;notepad.exe&quot;);\n        openWith.Add(&quot;bmp&quot;, &quot;paint.exe&quot;);\n        openWith.Add(&quot;dib&quot;, &quot;paint.exe&quot;);\n        openWith.Add(&quot;rtf&quot;, &quot;wordpad.exe&quot;);\n\n        // The Add method throws an exception if the new key is \n        // already in the dictionary.\n        try\n        {\n            openWith.Add(&quot;txt&quot;, &quot;winword.exe&quot;);\n        }\n        catch (ArgumentException)\n        {\n            Console.WriteLine(&quot;An element with Key = \\&quot;txt\\&quot; already exists.&quot;);\n        }\n\n        // The Item property is another name for the indexer, so you \n        // can omit its name when accessing elements. \n        Console.WriteLine(&quot;For key = \\&quot;rtf\\&quot;, value = {0}.&quot;, \n            openWith[&quot;rtf&quot;]);\n\n        // The indexer can be used to change the value associated\n        // with a key.\n        openWith[&quot;rtf&quot;] = &quot;winword.exe&quot;;\n        Console.WriteLine(&quot;For key = \\&quot;rtf\\&quot;, value = {0}.&quot;, \n            openWith[&quot;rtf&quot;]);\n\n        // If a key does not exist, setting the indexer for that key\n        // adds a new key/value pair.\n        openWith[&quot;doc&quot;] = &quot;winword.exe&quot;;\n\n        // The indexer throws an exception if the requested key is\n        // not in the dictionary.\n        try\n        {\n            Console.WriteLine(&quot;For key = \\&quot;tif\\&quot;, value = {0}.&quot;, \n                openWith[&quot;tif&quot;]);\n        }\n        catch (KeyNotFoundException)\n        {\n            Console.WriteLine(&quot;Key = \\&quot;tif\\&quot; is not found.&quot;);\n        }\n\n        // When a program often has to try keys that turn out not to\n        // be in the dictionary, TryGetValue can be a more efficient \n        // way to retrieve values.\n        string value = &quot;&quot;;\n        if (openWith.TryGetValue(&quot;tif&quot;, out value))\n        {\n            Console.WriteLine(&quot;For key = \\&quot;tif\\&quot;, value = {0}.&quot;, value);\n        }\n        else\n        {\n            Console.WriteLine(&quot;Key = \\&quot;tif\\&quot; is not found.&quot;);\n        }\n\n        // ContainsKey can be used to test keys before inserting \n        // them.\n        if (!openWith.ContainsKey(&quot;ht&quot;))\n        {\n            openWith.Add(&quot;ht&quot;, &quot;hypertrm.exe&quot;);\n            Console.WriteLine(&quot;Value added for key = \\&quot;ht\\&quot;: {0}&quot;, \n                openWith[&quot;ht&quot;]);\n        }\n\n        // When you use foreach to enumerate dictionary elements,\n        // the elements are retrieved as KeyValuePair objects.\n        Console.WriteLine();\n        foreach( KeyValuePair&lt;string, string&gt; kvp in openWith )\n        {\n            Console.WriteLine(&quot;Key = {0}, Value = {1}&quot;, \n                kvp.Key, kvp.Value);\n        }\n\n        // To get the values alone, use the Values property.\n        ICollection&lt;string&gt; icoll = openWith.Values;\n\n        // The elements of the ValueCollection are strongly typed\n        // with the type that was specified for dictionary values.\n        Console.WriteLine();\n        foreach( string s in icoll )\n        {\n            Console.WriteLine(&quot;Value = {0}&quot;, s);\n        }\n\n        // To get the keys alone, use the Keys property.\n        icoll = openWith.Keys;\n\n        // The elements of the ValueCollection are strongly typed\n        // with the type that was specified for dictionary values.\n        Console.WriteLine();\n        foreach( string s in icoll )\n        {\n            Console.WriteLine(&quot;Key = {0}&quot;, s);\n        }\n\n        // Use the Remove method to remove a key/value pair.\n        Console.WriteLine(&quot;\\nRemove(\\&quot;doc\\&quot;)&quot;);\n        openWith.Remove(&quot;doc&quot;);\n\n        if (!openWith.ContainsKey(&quot;doc&quot;))\n        {\n            Console.WriteLine(&quot;Key \\&quot;doc\\&quot; is not found.&quot;);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nAn element with Key = &quot;txt&quot; already exists.\nFor key = &quot;rtf&quot;, value = wordpad.exe.\nFor key = &quot;rtf&quot;, value = winword.exe.\nKey = &quot;tif&quot; is not found.\nKey = &quot;tif&quot; is not found.\nValue added for key = &quot;ht&quot;: hypertrm.exe\n\nKey = txt, Value = notepad.exe\nKey = bmp, Value = paint.exe\nKey = dib, Value = paint.exe\nKey = rtf, Value = winword.exe\nKey = doc, Value = winword.exe\nKey = ht, Value = hypertrm.exe\n\nValue = notepad.exe\nValue = paint.exe\nValue = paint.exe\nValue = winword.exe\nValue = winword.exe\nValue = hypertrm.exe\n\nKey = txt\nKey = bmp\nKey = dib\nKey = rtf\nKey = doc\nKey = ht\n\nRemove(&quot;doc&quot;)\nKey &quot;doc&quot; is not found.\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Generic.IDictionary#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class Example\n    \n    Public Shared Sub Main() \n\n        &#39; Create a new dictionary of strings, with string keys, \n        &#39; and access it through the IDictionary generic interface.\n        Dim openWith As IDictionary(Of String, String) = _\n            New Dictionary(Of String, String)\n        \n        &#39; Add some elements to the dictionary. There are no \n        &#39; duplicate keys, but some of the values are duplicates.\n        openWith.Add(&quot;txt&quot;, &quot;notepad.exe&quot;)\n        openWith.Add(&quot;bmp&quot;, &quot;paint.exe&quot;)\n        openWith.Add(&quot;dib&quot;, &quot;paint.exe&quot;)\n        openWith.Add(&quot;rtf&quot;, &quot;wordpad.exe&quot;)\n        \n        &#39; The Add method throws an exception if the new key is \n        &#39; already in the dictionary.\n        Try\n            openWith.Add(&quot;txt&quot;, &quot;winword.exe&quot;)\n        Catch \n            Console.WriteLine(&quot;An element with Key = &quot;&quot;txt&quot;&quot; already exists.&quot;)\n        End Try\n\n        &#39; The Item property is the default property, so you \n        &#39; can omit its name when accessing elements. \n        Console.WriteLine(&quot;For key = &quot;&quot;rtf&quot;&quot;, value = {0}.&quot;, _\n            openWith(&quot;rtf&quot;))\n        \n        &#39; The default Item property can be used to change the value\n        &#39; associated with a key.\n        openWith(&quot;rtf&quot;) = &quot;winword.exe&quot;\n        Console.WriteLine(&quot;For key = &quot;&quot;rtf&quot;&quot;, value = {0}.&quot;, _\n            openWith(&quot;rtf&quot;))\n        \n        &#39; If a key does not exist, setting the default item property\n        &#39; for that key adds a new key/value pair.\n        openWith(&quot;doc&quot;) = &quot;winword.exe&quot;\n\n        &#39; The default Item property throws an exception if the requested\n        &#39; key is not in the dictionary.\n        Try\n            Console.WriteLine(&quot;For key = &quot;&quot;tif&quot;&quot;, value = {0}.&quot;, _\n                openWith(&quot;tif&quot;))\n        Catch \n            Console.WriteLine(&quot;Key = &quot;&quot;tif&quot;&quot; is not found.&quot;)\n        End Try\n\n        &#39; When a program often has to try keys that turn out not to\n        &#39; be in the dictionary, TryGetValue can be a more efficient \n        &#39; way to retrieve values.\n        Dim value As String = &quot;&quot;\n        If openWith.TryGetValue(&quot;tif&quot;, value) Then\n            Console.WriteLine(&quot;For key = &quot;&quot;tif&quot;&quot;, value = {0}.&quot;, value)\n        Else\n            Console.WriteLine(&quot;Key = &quot;&quot;tif&quot;&quot; is not found.&quot;)\n        End If\n\n        &#39; ContainsKey can be used to test keys before inserting \n        &#39; them.\n        If Not openWith.ContainsKey(&quot;ht&quot;) Then\n            openWith.Add(&quot;ht&quot;, &quot;hypertrm.exe&quot;)\n            Console.WriteLine(&quot;Value added for key = &quot;&quot;ht&quot;&quot;: {0}&quot;, _\n                openWith(&quot;ht&quot;))\n        End If\n\n        &#39; When you use foreach to enumerate dictionary elements,\n        &#39; the elements are retrieved as KeyValuePair objects.\n        Console.WriteLine()\n        For Each kvp As KeyValuePair(Of String, String) In openWith\n            Console.WriteLine(&quot;Key = {0}, Value = {1}&quot;, _\n                kvp.Key, kvp.Value)\n        Next kvp\n\n        &#39; To get the values alone, use the Values property.\n        Dim icoll As ICollection(Of String) = openWith.Values\n        \n        &#39; The elements of the ValueCollection are strongly typed\n        &#39; with the type that was specified for dictionary values.\n        Console.WriteLine()\n        For Each s As String In  icoll\n            Console.WriteLine(&quot;Value = {0}&quot;, s)\n        Next s\n\n        &#39; To get the keys alone, use the Keys property.\n        icoll = openWith.Keys\n        \n        &#39; The elements of the ValueCollection are strongly typed\n        &#39; with the type that was specified for dictionary values.\n        Console.WriteLine()\n        For Each s As String In  icoll\n            Console.WriteLine(&quot;Key = {0}&quot;, s)\n        Next s\n\n        &#39; Use the Remove method to remove a key/value pair.\n        Console.WriteLine(vbLf + &quot;Remove(&quot;&quot;doc&quot;&quot;)&quot;)\n        openWith.Remove(&quot;doc&quot;)\n        \n        If Not openWith.ContainsKey(&quot;doc&quot;) Then\n            Console.WriteLine(&quot;Key &quot;&quot;doc&quot;&quot; is not found.&quot;)\n        End If\n\n    End Sub\n\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;An element with Key = &quot;txt&quot; already exists.\n&#39;For key = &quot;rtf&quot;, value = wordpad.exe.\n&#39;For key = &quot;rtf&quot;, value = winword.exe.\n&#39;Key = &quot;tif&quot; is not found.\n&#39;Key = &quot;tif&quot; is not found.\n&#39;Value added for key = &quot;ht&quot;: hypertrm.exe\n&#39;\n&#39;Key = txt, Value = notepad.exe\n&#39;Key = bmp, Value = paint.exe\n&#39;Key = dib, Value = paint.exe\n&#39;Key = rtf, Value = winword.exe\n&#39;Key = doc, Value = winword.exe\n&#39;Key = ht, Value = hypertrm.exe\n&#39;\n&#39;Value = notepad.exe\n&#39;Value = paint.exe\n&#39;Value = paint.exe\n&#39;Value = winword.exe\n&#39;Value = winword.exe\n&#39;Value = hypertrm.exe\n&#39;\n&#39;Key = txt\n&#39;Key = bmp\n&#39;Key = dib\n&#39;Key = rtf\n&#39;Key = doc\n&#39;Key = ht\n&#39;\n&#39;Remove(&quot;doc&quot;)\n&#39;Key &quot;doc&quot; is not found.\n&#39; \n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The IDictionary(TKey, interface is the base interface for generic collections of key/value pairs.  </p>\n<p> Each element is a key/value pair stored in a <a class=\"xref\" href=\"system.collections.generic.keyvaluepair-2\" data-linktype=\"relative-path\">KeyValuePair&lt;TKey,TValue&gt;</a> object.  </p>\n<p> Each pair must have a unique key. Implementations can vary in whether they allow <code>key</code> to be <code>null</code>. The value can be <code>null</code> and does not have to be unique. The IDictionary(TKey, interface allows the contained keys and values to be enumerated, but it does not imply any particular sort order.  </p>\n<p> The <code>foreach</code> statement of the C# language (<code>For Each</code> in Visual Basic, <code>for each</code> in C++) returns an object of the type of the elements in the collection. Since each element of the IDictionary(TKey, is a key/value pair, the element type is not the type of the key or the type of the value. Instead, the element type is <a class=\"xref\" href=\"system.collections.generic.keyvaluepair-2\" data-linktype=\"relative-path\">KeyValuePair&lt;TKey,TValue&gt;</a>. For example:  </p>\n<pre><code class=\"lang-cpp\" name=\"Generic.IDictionary#11\">        for each(KeyValuePair&lt;int, String^&gt; kvp in myDictionary)\n        {\n            Console::WriteLine(&quot;Key = {0}, Value = {1}&quot;, kvp.Key, kvp.Value);\n        }\n</code></pre><pre><code class=\"lang-cs\" name=\"Generic.IDictionary#11\">        foreach (KeyValuePair&lt;int, string&gt; kvp in myDictionary)\n        {\n            Console.WriteLine(&quot;Key = {0}, Value = {1}&quot;, kvp.Key, kvp.Value);\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"Generic.IDictionary#11\">        For Each kvp As KeyValuePair(Of Integer, String) In myDictionary\n            Console.WriteLine(&quot;Key = {0}, Value = {1}&quot;, kvp.Key, kvp.Value)\n        Next kvp\n</code></pre><p> The <code>foreach</code> statement is a wrapper around the enumerator, which only allows reading from, not writing to, the collection.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Because keys can be inherited and their behavior changed, their absolute uniqueness cannot be guaranteed by comparisons using the <a class=\"xref\" href=\"system.type#System_Type_Equals_\" data-linktype=\"relative-path\">Equals</a> method.</p>\n</div>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Collections_Generic_IDictionary_2_Item__0_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Item(TKey)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets the element with the specified key.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public TValue this[TKey key] { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>key</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><span class=\"xref\">TKey</span></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The key of the element to get or set.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><span class=\"xref\">TValue</span></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The element with the specified key.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>key</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.keynotfoundexception\" data-linktype=\"relative-path\">KeyNotFoundException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The property is retrieved and <code>key</code> is not found.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The property is set and the <span class=\"xref\">stem.Collections.Generic.IDictionary`2</span> is read-only.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This property provides the ability to access a specific element in the collection by using the following syntax: <code>myCollection[key]</code> (<code>myCollection(key)</code> in Visual Basic).  </p>\n<p> You can also use the Item property to add new elements by setting the value of a key that does not exist in the dictionary; for example, <code>myCollection[&quot;myNonexistentKey&quot;] = myValue</code> in C# (<code>myCollection(&quot;myNonexistentKey&quot;) = myValue</code> in Visual Basic). However, if the specified key already exists in the dictionary, setting the Item property overwrites the old value. In contrast, the <a class=\"xref\" href=\"system.collections.generic.idictionary-2#System_Collections_Generic_IDictionary_2_Add_\" data-linktype=\"relative-path\">Add</a> method does not modify existing elements.  </p>\n<p> Implementations can vary in how they determine equality of objects; for example, the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> class uses <a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a>, whereas the <a class=\"xref\" href=\"system.collections.generic.dictionary-2\" data-linktype=\"relative-path\">Dictionary&lt;TKey,TValue&gt;</a> class allows the user to specify the <a class=\"xref\" href=\"system.collections.generic.icomparer-1\" data-linktype=\"relative-path\">IComparer&lt;T&gt;</a> implementation to use for comparing keys.  </p>\n<p> The C# language uses the  keyword to define the indexers instead of implementing the Item property. Visual Basic implements Item as a default property, which provides the same indexing functionality.  </p>\n<p> Implementations can vary in whether they allow <code>key</code> to be <code>null</code>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Collections_Generic_IDictionary_2_Keys\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Keys</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets an <span class=\"xref\">stem.Collections.Generic.ICollection`1</span> containing the keys of the <span class=\"xref\">stem.Collections.Generic.IDictionary`2</span>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Collections.Generic.ICollection&lt;TKey&gt; Keys { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.icollection-1\" data-linktype=\"relative-path\">ICollection</a>&lt;<span class=\"xref\">TKey</span>&gt;</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <span class=\"xref\">stem.Collections.Generic.ICollection`1</span> containing the keys of the object that implements <span class=\"xref\">stem.Collections.Generic.IDictionary`2</span>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The order of the keys in the returned <a class=\"xref\" href=\"system.collections.generic.icollection-1\" data-linktype=\"relative-path\">ICollection&lt;T&gt;</a> is unspecified, but it is guaranteed to be the same order as the corresponding values in the <a class=\"xref\" href=\"system.collections.generic.icollection-1\" data-linktype=\"relative-path\">ICollection&lt;T&gt;</a> returned by the <a class=\"xref\" href=\"system.collections.generic.idictionary-2#System_Collections_Generic_IDictionary_2_Values_\" data-linktype=\"relative-path\">Values</a> property.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Collections_Generic_IDictionary_2_Values\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Values</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets an <span class=\"xref\">stem.Collections.Generic.ICollection`1</span> containing the values in the <span class=\"xref\">stem.Collections.Generic.IDictionary`2</span>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Collections.Generic.ICollection&lt;TValue&gt; Values { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.icollection-1\" data-linktype=\"relative-path\">ICollection</a>&lt;<span class=\"xref\">TValue</span>&gt;</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <span class=\"xref\">stem.Collections.Generic.ICollection`1</span> containing the values in the object that implements <span class=\"xref\">stem.Collections.Generic.IDictionary`2</span>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The order of the values in the returned <a class=\"xref\" href=\"system.collections.generic.icollection-1\" data-linktype=\"relative-path\">ICollection&lt;T&gt;</a> is unspecified, but it is guaranteed to be the same order as the corresponding keys in the <a class=\"xref\" href=\"system.collections.generic.icollection-1\" data-linktype=\"relative-path\">ICollection&lt;T&gt;</a> returned by the <a class=\"xref\" href=\"system.collections.generic.idictionary-2#System_Collections_Generic_IDictionary_2_Keys_\" data-linktype=\"relative-path\">Keys</a> property.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Collections_Generic_IDictionary_2_Add__0__1_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Add(TKey,TValue)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Adds an element with the provided key and value to the <span class=\"xref\">stem.Collections.Generic.IDictionary`2</span>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void Add (TKey key, TValue value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>key</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><span class=\"xref\">TKey</span></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The object to use as the key of the element to add.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><span class=\"xref\">TValue</span></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The object to use as the value of the element to add.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>key</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>An element with the same key already exists in the <span class=\"xref\">stem.Collections.Generic.IDictionary`2</span>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <span class=\"xref\">stem.Collections.Generic.IDictionary`2</span> is read-only.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>You can also use the <a class=\"xref\" href=\"system.collections.generic.idictionary-2#System_Collections_Generic_IDictionary_2_Item_\" data-linktype=\"relative-path\">Item</a> property to add new elements by setting the value of a key that does not exist in the dictionary; for example, <code>myCollection[&quot;myNonexistentKey&quot;] = myValue</code> in C# (<code>myCollection(&quot;myNonexistentKey&quot;) = myValue</code> in Visual Basic). However, if the specified key already exists in the dictionary, setting the <a class=\"xref\" href=\"system.collections.generic.idictionary-2#System_Collections_Generic_IDictionary_2_Item_\" data-linktype=\"relative-path\">Item</a> property overwrites the old value. In contrast, the Add method does not modify existing elements.  </p>\n<p> Implementations can vary in how they determine equality of objects; for example, the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> class uses <a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a>, whereas the <a class=\"xref\" href=\"system.collections.generic.dictionary-2\" data-linktype=\"relative-path\">Dictionary&lt;TKey,TValue&gt;</a> class allows the user to specify the <a class=\"xref\" href=\"system.collections.generic.icomparer-1\" data-linktype=\"relative-path\">IComparer&lt;T&gt;</a> implementation to use for comparing keys.  </p>\n<p> Implementations can vary in whether they allow <code>key</code> to be <code>null</code>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Collections_Generic_IDictionary_2_ContainsKey__0_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ContainsKey(TKey)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Determines whether the <span class=\"xref\">stem.Collections.Generic.IDictionary`2</span> contains an element with the specified key.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool ContainsKey (TKey key);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>key</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><span class=\"xref\">TKey</span></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The key to locate in the <span class=\"xref\">stem.Collections.Generic.IDictionary`2</span>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the <span class=\"xref\">stem.Collections.Generic.IDictionary`2</span> contains an element with the key; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>key</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Implementations can vary in how they determine equality of objects; for example, the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> class uses <a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a>, whereas the <a class=\"xref\" href=\"system.collections.generic.dictionary-2\" data-linktype=\"relative-path\">Dictionary&lt;TKey,TValue&gt;</a> class allows the user to specify the <a class=\"xref\" href=\"system.collections.generic.icomparer-1\" data-linktype=\"relative-path\">IComparer&lt;T&gt;</a> implementation to use for comparing keys.  </p>\n<p> Implementations can vary in whether they allow <code>key</code> to be <code>null</code>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Collections_Generic_IDictionary_2_Remove__0_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Remove(TKey)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Removes the element with the specified key from the <span class=\"xref\">stem.Collections.Generic.IDictionary`2</span>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool Remove (TKey key);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>key</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><span class=\"xref\">TKey</span></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The key of the element to remove.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the element is successfully removed; otherwise, <code>false</code>.  This method also returns <code>false</code> if <code>key</code> was not found in the original <span class=\"xref\">stem.Collections.Generic.IDictionary`2</span>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>key</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <span class=\"xref\">stem.Collections.Generic.IDictionary`2</span> is read-only.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Implementations can vary in how they determine equality of objects; for example, the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> class uses <a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a>, whereas the <a class=\"xref\" href=\"system.collections.generic.dictionary-2\" data-linktype=\"relative-path\">Dictionary&lt;TKey,TValue&gt;</a> class allows the user to specify the <a class=\"xref\" href=\"system.collections.generic.icomparer-1\" data-linktype=\"relative-path\">IComparer&lt;T&gt;</a> implementation to use for comparing keys.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Collections_Generic_IDictionary_2_TryGetValue__0__1__\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">TryGetValue(TKey,TValue)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the value associated with the specified key.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool TryGetValue (TKey key, out TValue value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>key</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><span class=\"xref\">TKey</span></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The key whose value to get.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><span class=\"xref\">TValue</span></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <code>value</code> parameter. This parameter is passed uninitialized.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the object that implements <span class=\"xref\">stem.Collections.Generic.IDictionary`2</span> contains an element with the specified key; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>key</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method combines the functionality of the <a class=\"xref\" href=\"system.collections.generic.idictionary-2#System_Collections_Generic_IDictionary_2_ContainsKey_\" data-linktype=\"relative-path\">ContainsKey</a> method and the <a class=\"xref\" href=\"system.collections.generic.idictionary-2#System_Collections_Generic_IDictionary_2_Item_\" data-linktype=\"relative-path\">Item</a> property.  </p>\n<p> If the key is not found, then the <code>value</code> parameter gets the appropriate default value for the type <code>TValue</code>; for example, zero (0) for integer types, <code>false</code> for Boolean types, and <code>null</code> for reference types.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t  \r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Collections.Generic.IDictionary-2.yml\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;.Add\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;.ContainsKey\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;.Item\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;.Keys\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;.Remove\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;.TryGetValue\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;.Values\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-24 01:41 AM\">\r\n<meta name=\"document_id\" content=\"511497a7-e178-81c7-e2f9-4faef635de3d\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a generic collection of key/value pairs.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.collections.generic/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Collections.Generic.IDictionary`2\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Collections.Generic.IDictionary-2.yml","open_to_public_contributors":false,"api_name":["System.Collections.Generic.IDictionary<TKey,TValue>","System.Collections.Generic.IDictionary<TKey,TValue>.Add","System.Collections.Generic.IDictionary<TKey,TValue>.ContainsKey","System.Collections.Generic.IDictionary<TKey,TValue>.Item","System.Collections.Generic.IDictionary<TKey,TValue>.Keys","System.Collections.Generic.IDictionary<TKey,TValue>.Remove","System.Collections.Generic.IDictionary<TKey,TValue>.TryGetValue","System.Collections.Generic.IDictionary<TKey,TValue>.Values"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Collections.Generic.IDictionary`2","System::Collections::Generic::IDictionary`2","System.Collections.Generic.IDictionary`2.Add","System::Collections::Generic::IDictionary`2::Add","System.Collections.Generic.IDictionary`2.ContainsKey","System::Collections::Generic::IDictionary`2::ContainsKey","System.Collections.Generic.IDictionary`2.Item","System::Collections::Generic::IDictionary`2::Item","System.Collections.Generic.IDictionary`2.Keys","System::Collections::Generic::IDictionary`2::Keys","System.Collections.Generic.IDictionary`2.Remove","System::Collections::Generic::IDictionary`2::Remove","System.Collections.Generic.IDictionary`2.TryGetValue","System::Collections::Generic::IDictionary`2::TryGetValue","System.Collections.Generic.IDictionary`2.Values","System::Collections::Generic::IDictionary`2::Values"],"dev_langs":["csharp"],"updated_at":"2017-03-24 01:41 AM","document_id":"511497a7-e178-81c7-e2f9-4faef635de3d","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/IDictionary`2.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IDictionary<TKey,TValue> interface | Microsoft Docs","_op_ogTitle":"IDictionary<TKey,TValue> interface","description":"Represents a generic collection of key/value pairs.\n","toc_asset_id":"api/_splitted/System.Collections.Generic/toc.json","toc_rel":"_splitted/System.Collections.Generic/toc.json","source_url":"","ms.assetid":"System.Collections.Generic.IDictionary`2","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.idictionary-2","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.idictionary-2","fileRelativePath":"api/System.Collections.Generic.IDictionary-2.html"},"themesRelativePathToOutputRoot":"_themes/"}