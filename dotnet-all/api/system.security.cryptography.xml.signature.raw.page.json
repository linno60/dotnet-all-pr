{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">Signature</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the <code>&lt;Signature&gt;</code> element of an XML signature.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public class Signature</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><span class=\"lang-csharp\">Signature</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example uses the Signature class with the <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml\" data-linktype=\"relative-path\">SignedXml</a> class to sign and verify an XML document using an envelope signature.  </p>\n<pre><code class=\"lang-cs\" name=\"Cryptography.XML.Signature - Envelope#1\">//\n// This example signs an XML file using an\n// envelope signature. It then verifies the \n// signed XML.\n//\nusing System;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.Xml;\nusing System.Text;\nusing System.Xml;\n\npublic class SignVerifyEnvelope\n{\n\n    public static void Main(String[] args)\n    {\n        // Generate a signing key.\n       RSACryptoServiceProvider Key = new RSACryptoServiceProvider();\n\n       try\n       {\n\n           // Sign an XML file and save the signature to a \n           // new file.\n           SignXmlFile(&quot;Test.xml&quot;, &quot;SignedExample.xml&quot;, Key);\n           Console.WriteLine(&quot;XML file signed.&quot;);\n\n           // Verify the signature of the signed XML.\n           Console.WriteLine(&quot;Verifying signature...&quot;);\n\n           bool result = VerifyXmlFile(&quot;SignedExample.xml&quot;);\n\n           // Display the results of the signature verification to \n           // the console.\n           if (result)\n           {\n               Console.WriteLine(&quot;The XML signature is valid.&quot;);\n           }\n           else\n           {\n               Console.WriteLine(&quot;The XML signature is not valid.&quot;);\n           }\n       }\n       catch (CryptographicException e)\n       {\n           Console.WriteLine(e.Message);\n       }\n       finally\n       {\n           // Clear resources associated with the \n           // RSACryptoServiceProvider.\n           Key.Clear();\n       }\n   }\n\n    // Sign an XML file and save the signature in a new file.\n    public static void SignXmlFile(string FileName, string SignedFileName, RSA Key)\n    {\n        // Check the arguments.  \n        if (FileName == null)\n            throw new ArgumentNullException(&quot;FileName&quot;);\n        if (SignedFileName == null)\n            throw new ArgumentNullException(&quot;SignedFileName&quot;);\n        if (Key == null)\n            throw new ArgumentNullException(&quot;Key&quot;);\n\n\n        // Create a new XML document.\n        XmlDocument doc = new XmlDocument();\n\n        // Format the document to ignore white spaces.\n        doc.PreserveWhitespace = false;\n\n        // Load the passed XML file using it&#39;s name.\n        doc.Load(new XmlTextReader(FileName));\n\n        // Create a SignedXml object.\n        SignedXml signedXml = new SignedXml(doc);\n\n        // Add the key to the SignedXml document. \n        signedXml.SigningKey = Key;\n\n        // Get the signature object from the SignedXml object.\n        Signature XMLSignature = signedXml.Signature;\n\n        // Create a reference to be signed.  Pass &quot;&quot; \n        // to specify that all of the current XML\n        // document should be signed.\n        Reference reference = new Reference(&quot;&quot;);\n\n        // Add an enveloped transformation to the reference.\n        XmlDsigEnvelopedSignatureTransform env = new XmlDsigEnvelopedSignatureTransform();\n        reference.AddTransform(env);\n\n        // Add the Reference object to the Signature object.\n        XMLSignature.SignedInfo.AddReference(reference);\n\n        // Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n        KeyInfo keyInfo = new KeyInfo();\n        keyInfo.AddClause(new RSAKeyValue((RSA)Key));\n\n        // Add the KeyInfo object to the Reference object.\n        XMLSignature.KeyInfo = keyInfo;\n\n        // Compute the signature.\n        signedXml.ComputeSignature();\n\n        // Get the XML representation of the signature and save\n        // it to an XmlElement object.\n        XmlElement xmlDigitalSignature = signedXml.GetXml();\n\n        // Append the element to the XML document.\n        doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, true));\n\n\n        if (doc.FirstChild is XmlDeclaration)\n        {\n            doc.RemoveChild(doc.FirstChild);\n        }\n\n        // Save the signed XML document to a file specified\n        // using the passed string.\n        XmlTextWriter xmltw = new XmlTextWriter(SignedFileName, new UTF8Encoding(false));\n        doc.WriteTo(xmltw);\n        xmltw.Close();\n    }\n    // Verify the signature of an XML file and return the result.\n    public static Boolean VerifyXmlFile(String Name)\n    {\n        // Check the arguments.  \n        if (Name == null)\n            throw new ArgumentNullException(&quot;Name&quot;);\n\n        // Create a new XML document.\n        XmlDocument xmlDocument = new XmlDocument();\n\n        // Format using white spaces.\n        xmlDocument.PreserveWhitespace = true;\n\n        // Load the passed XML file into the document. \n        xmlDocument.Load(Name);\n\n        // Create a new SignedXml object and pass it\n        // the XML document class.\n        SignedXml signedXml = new SignedXml(xmlDocument);\n\n        // Find the &quot;Signature&quot; node and create a new\n        // XmlNodeList object.\n        XmlNodeList nodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;);\n\n        // Load the signature node.\n        signedXml.LoadXml((XmlElement)nodeList[0]);\n\n        // Check the signature and return the result.\n        return signedXml.CheckSignature();\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Cryptography.XML.Signature - Envelope#1\">&#39; This example signs an XML file using an\n&#39; envelope signature. It then verifies the \n&#39; signed XML.\n&#39;\nImports System\nImports System.Security.Cryptography\nImports System.Security.Cryptography.Xml\nImports System.Text\nImports System.Xml\n\n\n\nModule SignVerifyEnvelope\n\n\n    Sub Main(ByVal args() As String)\n        &#39; Generate a signing key.\n        Dim Key As New RSACryptoServiceProvider()\n\n        Try\n\n            &#39; Sign an XML file and save the signature to a \n            &#39; new file.\n            SignXmlFile(&quot;Test.xml&quot;, &quot;SignedExample.xml&quot;, Key)\n            Console.WriteLine(&quot;XML file signed.&quot;)\n\n            &#39; Verify the signature of the signed XML.\n            Console.WriteLine(&quot;Verifying signature...&quot;)\n\n            Dim result As Boolean = VerifyXmlFile(&quot;SignedExample.xml&quot;)\n\n            &#39; Display the results of the signature verification to \n            &#39; the console.\n            If result Then\n                Console.WriteLine(&quot;The XML signature is valid.&quot;)\n            Else\n                Console.WriteLine(&quot;The XML signature is not valid.&quot;)\n            End If\n        Catch e As CryptographicException\n            Console.WriteLine(e.Message)\n        Finally\n            &#39; Clear resources associated with the \n            &#39; RSACryptoServiceProvider.\n            Key.Clear()\n        End Try\n\n    End Sub\n\n\n    &#39; Sign an XML file and save the signature in a new file.\n    Sub SignXmlFile(ByVal FileName As String, ByVal SignedFileName As String, ByVal Key As RSA)\n        &#39; Check the arguments.  \n        If FileName Is Nothing Then\n            Throw New ArgumentNullException(&quot;FileName&quot;)\n        End If\n        If SignedFileName Is Nothing Then\n            Throw New ArgumentNullException(&quot;SignedFileName&quot;)\n        End If\n        If Key Is Nothing Then\n            Throw New ArgumentNullException(&quot;Key&quot;)\n        End If\n\n        &#39; Create a new XML document.\n        Dim doc As New XmlDocument()\n\n        &#39; Format the document to ignore white spaces.\n        doc.PreserveWhitespace = False\n\n        &#39; Load the passed XML file using it&#39;s name.\n        doc.Load(New XmlTextReader(FileName))\n\n        &#39; Create a SignedXml object.\n        Dim signedXml As New SignedXml(doc)\n\n        &#39; Add the key to the SignedXml document. \n        signedXml.SigningKey = Key\n\n        &#39; Get the signature object from the SignedXml object.\n        Dim XMLSignature As Signature = signedXml.Signature\n\n        &#39; Create a reference to be signed.  Pass &quot;&quot; \n        &#39; to specify that all of the current XML\n        &#39; document should be signed.\n        Dim reference As New Reference(&quot;&quot;)\n\n        &#39; Add an enveloped transformation to the reference.\n        Dim env As New XmlDsigEnvelopedSignatureTransform()\n        reference.AddTransform(env)\n\n        &#39; Add the Reference object to the Signature object.\n        XMLSignature.SignedInfo.AddReference(reference)\n\n        &#39; Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n        Dim keyInfo As New KeyInfo()\n        keyInfo.AddClause(New RSAKeyValue(CType(Key, RSA)))\n\n        &#39; Add the KeyInfo object to the Reference object.\n        XMLSignature.KeyInfo = keyInfo\n\n        &#39; Compute the signature.\n        signedXml.ComputeSignature()\n\n        &#39; Get the XML representation of the signature and save\n        &#39; it to an XmlElement object.\n        Dim xmlDigitalSignature As XmlElement = signedXml.GetXml()\n\n        &#39; Append the element to the XML document.\n        doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, True))\n\n\n        If TypeOf doc.FirstChild Is XmlDeclaration Then\n            doc.RemoveChild(doc.FirstChild)\n        End If\n\n        &#39; Save the signed XML document to a file specified\n        &#39; using the passed string.\n        Dim xmltw As New XmlTextWriter(SignedFileName, New UTF8Encoding(False))\n        doc.WriteTo(xmltw)\n        xmltw.Close()\n\n    End Sub\n\n    &#39; Verify the signature of an XML file and return the result.\n    Function VerifyXmlFile(ByVal Name As String) As [Boolean]\n        &#39; Check the arguments.  \n        If Name Is Nothing Then\n            Throw New ArgumentNullException(&quot;Name&quot;)\n        End If\n        &#39; Create a new XML document.\n        Dim xmlDocument As New XmlDocument()\n\n        &#39; Format using white spaces.\n        xmlDocument.PreserveWhitespace = True\n\n        &#39; Load the passed XML file into the document. \n        xmlDocument.Load(Name)\n\n        &#39; Create a new SignedXml object and pass it\n        &#39; the XML document class.\n        Dim signedXml As New SignedXml(xmlDocument)\n\n        &#39; Find the &quot;Signature&quot; node and create a new\n        &#39; XmlNodeList object.\n        Dim nodeList As XmlNodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;)\n\n        &#39; Load the signature node.\n        signedXml.LoadXml(CType(nodeList(0), XmlElement))\n\n        &#39; Check the signature and return the result.\n        Return signedXml.CheckSignature()\n\n    End Function\nEnd Module\n</code></pre><pre><code class=\"lang-cpp\" name=\"Cryptography.XML.Signature - Envelope#1\">//\n// This example signs an XML file using an\n// envelope signature. It then verifies the \n// signed XML.\n//\n#using &lt;System.Xml.dll&gt;\n#using &lt;System.Security.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Cryptography::Xml;\nusing namespace System::Text;\nusing namespace System::Xml;\n\n// Sign an XML file and save the signature in a new file.\nstatic void SignXmlFile( String^ FileName, String^ SignedFileName, RSA^ Key )\n{\n   \n   // Check the arguments.  \n   if ( FileName == nullptr )\n      throw gcnew ArgumentNullException( L&quot;FileName&quot; );\n\n   if ( SignedFileName == nullptr )\n      throw gcnew ArgumentNullException( L&quot;SignedFileName&quot; );\n\n   if ( Key == nullptr )\n      throw gcnew ArgumentNullException( L&quot;Key&quot; );\n\n   \n   // Create a new XML document.\n   XmlDocument^ doc = gcnew XmlDocument;\n   \n   // Format the document to ignore white spaces.\n   doc-&gt;PreserveWhitespace = false;\n   \n   // Load the passed XML file using it&#39;s name.\n   doc-&gt;Load( gcnew XmlTextReader( FileName ) );\n   \n   // Create a SignedXml object.\n   SignedXml^ signedXml = gcnew SignedXml( doc );\n   \n   // Add the key to the SignedXml document. \n   signedXml-&gt;SigningKey = Key;\n   \n   // Get the signature object from the SignedXml object.\n   Signature^ XMLSignature = signedXml-&gt;Signature;\n   \n   // Create a reference to be signed.  Pass &quot;&quot; \n   // to specify that all of the current XML\n   // document should be signed.\n   Reference^ reference = gcnew Reference( L&quot;&quot; );\n   \n   // Add an enveloped transformation to the reference.\n   XmlDsigEnvelopedSignatureTransform^ env = gcnew XmlDsigEnvelopedSignatureTransform;\n   reference-&gt;AddTransform( env );\n   \n   // Add the Reference object to the Signature object.\n   XMLSignature-&gt;SignedInfo-&gt;AddReference( reference );\n   \n   // Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n   KeyInfo^ keyInfo = gcnew KeyInfo;\n   keyInfo-&gt;AddClause( gcnew RSAKeyValue( dynamic_cast&lt;RSA^&gt;(Key) ) );\n   \n   // Add the KeyInfo object to the Reference object.\n   XMLSignature-&gt;KeyInfo = keyInfo;\n   \n   // Compute the signature.\n   signedXml-&gt;ComputeSignature();\n   \n   // Get the XML representation of the signature and save\n   // it to an XmlElement object.\n   XmlElement^ xmlDigitalSignature = signedXml-&gt;GetXml();\n   \n   // Append the element to the XML document.\n   doc-&gt;DocumentElement-&gt;AppendChild( doc-&gt;ImportNode( xmlDigitalSignature, true ) );\n   if ( dynamic_cast&lt;XmlDeclaration^&gt;(doc-&gt;FirstChild) )\n   {\n      doc-&gt;RemoveChild( doc-&gt;FirstChild );\n   }\n\n   \n   // Save the signed XML document to a file specified\n   // using the passed string.\n   XmlTextWriter^ xmltw = gcnew XmlTextWriter( SignedFileName,gcnew UTF8Encoding( false ) );\n   doc-&gt;WriteTo( xmltw );\n   xmltw-&gt;Close();\n}\n\n\n// Verify the signature of an XML file and return the result.\nstatic Boolean VerifyXmlFile( String^ Name )\n{\n   \n   // Check the arguments.  \n   if ( Name == nullptr )\n      throw gcnew ArgumentNullException( L&quot;Name&quot; );\n\n   \n   // Create a new XML document.\n   XmlDocument^ xmlDocument = gcnew XmlDocument;\n   \n   // Format using white spaces.\n   xmlDocument-&gt;PreserveWhitespace = true;\n   \n   // Load the passed XML file into the document. \n   xmlDocument-&gt;Load( Name );\n   \n   // Create a new SignedXml object and pass it\n   // the XML document class.\n   SignedXml^ signedXml = gcnew SignedXml( xmlDocument );\n   \n   // Find the &quot;Signature&quot; node and create a new\n   // XmlNodeList object.\n   XmlNodeList^ nodeList = xmlDocument-&gt;GetElementsByTagName( L&quot;Signature&quot; );\n   \n   // Load the signature node.\n   signedXml-&gt;LoadXml( dynamic_cast&lt;XmlElement^&gt;(nodeList-&gt;Item( 0 )) );\n   \n   // Check the signature and return the result.\n   return signedXml-&gt;CheckSignature();\n}\n\nint main()\n{\n   \n   // Generate a signing key.\n   RSACryptoServiceProvider^ Key = gcnew RSACryptoServiceProvider;\n   try\n   {\n      \n      // Sign an XML file and save the signature to a \n      // new file.\n      SignXmlFile( L&quot;Test.xml&quot;, L&quot;SignedExample.xml&quot;, Key );\n      Console::WriteLine( L&quot;XML file signed.&quot; );\n      \n      // Verify the signature of the signed XML.\n      Console::WriteLine( L&quot;Verifying signature...&quot; );\n      bool result = VerifyXmlFile( L&quot;SignedExample.xml&quot; );\n      \n      // Display the results of the signature verification to \n      // the console.\n      if ( result )\n      {\n         Console::WriteLine( L&quot;The XML signature is valid.&quot; );\n      }\n      else\n      {\n         Console::WriteLine( L&quot;The XML signature is not valid.&quot; );\n      }\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n   finally\n   {\n      \n      // Clear resources associated with the \n      // RSACryptoServiceProvider.\n      Key-&gt;Clear();\n   }\n\n   return 1;\n}\n</code></pre><p> The following code example uses the Signature class with the <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml\" data-linktype=\"relative-path\">SignedXml</a> class to sign an object and verify an XML document using a detached signature.  </p>\n<pre><code class=\"lang-cpp\" name=\"XMLDSIG - Signature - Detached#1\">//\n// This example signs a URL using an\n// envelope signature. It then verifies the \n// signed XML.\n//\n#using &lt;System.dll&gt;\n#using &lt;System.Xml.dll&gt;\n#using &lt;System.Security.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Cryptography::Xml;\nusing namespace System::Text;\nusing namespace System::Xml;\n\n\nnamespace Sample\n{\n    public ref class SignVerifyEnvelope\n    {\n    public:\n        static void Work()\n        {\n            // Generate a signing key.\n            RSACryptoServiceProvider^ key = \n                gcnew RSACryptoServiceProvider();\n\n            try\n            {\n\n                // Sign the detached resource and save the \n                // signature in an XML file.\n                SignDetachedResource(&quot;http://www.microsoft.com&quot;,\n                    &quot;SignedExample.xml&quot;, key);\n\n                Console::WriteLine(&quot;XML file signed.&quot;);\n\n                // Verify the signature of the signed XML.\n                Console::WriteLine(&quot;Verifying signature...&quot;);\n\n                bool result = VerifyXmlFile(&quot;SignedExample.xml&quot;);\n\n                // Display the results of the signature verification \n                // to the console.\n                if (result)\n                {\n                    Console::WriteLine(&quot;The XML signature&quot;\n                        &quot; is valid.&quot;);\n                }\n                else\n                {\n                    Console::WriteLine(&quot;The XML signature&quot;\n                        &quot; is not valid.&quot;);\n                }\n                Console::ReadLine();\n            }\n\n            catch (CryptographicException^ ex)\n            {\n                Console::WriteLine(ex-&gt;Message);\n            }\n            finally\n            {\n                // Clear resources associated with the \n                // RSACryptoServiceProvider.\n                key-&gt;Clear();\n            }\n        }\n\n\n        // Sign an XML file and save the signature in a new file.\n        static void SignDetachedResource(String^ uri, \n            String^ xmlFileName, RSA^ key)\n        {\n            // Check the arguments.  \n            if (uri-&gt;Length == 0)\n            {\n                throw gcnew ArgumentException(&quot;uri&quot;);\n            }\n            if (xmlFileName-&gt;Length == 0)\n            {\n                throw gcnew ArgumentException(&quot;xmlFileName&quot;);\n            } \n            if (key-&gt;KeySize == 0)\n            {\n                throw gcnew ArgumentException(&quot;key&quot;);\n            }\n            // Create a SignedXml object.\n            SignedXml^ signedXml = gcnew SignedXml();\n\n            // Assign the key to the SignedXml object.\n            signedXml-&gt;SigningKey = key;\n\n            // Get the signature object from the SignedXml object.\n            Signature^ xmlSignature = signedXml-&gt;Signature;\n\n            // Create a reference to be signed.\n            Reference^ reference = gcnew Reference();\n\n            // Add the passed URI to the reference object.\n            reference-&gt;Uri = uri;\n\n            // Add the Reference object to the Signature object.\n            xmlSignature-&gt;SignedInfo-&gt;AddReference(reference);\n\n            // Add an RSAKeyValue KeyInfo (optional; helps recipient\n            // find key to validate).\n            KeyInfo^ keyInfo = gcnew KeyInfo();\n            keyInfo-&gt;AddClause(\n                gcnew RSAKeyValue(key));\n\n            // Add the KeyInfo object to the Reference object.\n            xmlSignature-&gt;KeyInfo = keyInfo;\n\n            // Compute the signature.\n            signedXml-&gt;ComputeSignature();\n\n            // Get the XML representation of the signature and save\n            // it to an XmlElement object.\n            XmlElement^ xmlDigitalSignature = signedXml-&gt;GetXml();\n\n            // Save the signed XML document to a file specified\n            // using the passed string.\n            XmlTextWriter^ xmlTextWriter = gcnew XmlTextWriter(\n                xmlFileName, gcnew UTF8Encoding(false));\n\n            xmlDigitalSignature-&gt;WriteTo(xmlTextWriter);\n            xmlTextWriter-&gt;Close();\n        }\n\n\n        // Verify the signature of an XML file and return the result.\n        static Boolean VerifyXmlFile(String^ documentName)\n        {\n            // Check the arguments.  \n            if (documentName-&gt;Length == 0)\n            {\n                throw gcnew ArgumentException(&quot;documentName&quot;);\n            }\n            // Create a new XML document.\n            XmlDocument^ xmlDocument = gcnew XmlDocument();\n\n            // Format using white spaces.\n            xmlDocument-&gt;PreserveWhitespace = true;\n\n            // Load the passed XML file into the document. \n            xmlDocument-&gt;Load(documentName);\n\n            // Create a new SignedXml object and pass it\n            // the XML document class.\n            SignedXml^ signedXml = gcnew SignedXml(xmlDocument);\n\n            // Find the &quot;Signature&quot; node and create a new\n            // XmlNodeList object.\n            XmlNodeList^ nodeList = \n                xmlDocument-&gt;GetElementsByTagName(&quot;Signature&quot;);\n\n            // Load the signature node.\n            signedXml-&gt;LoadXml(\n                (XmlElement^) nodeList-&gt;Item(0));\n\n            // Check the signature and return the result.\n            return signedXml-&gt;CheckSignature();\n        }\n    };\n}\n\n\nint main()\n{\n    Sample::SignVerifyEnvelope::Work();\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"XMLDSIG - Signature - Detached#1\">//\n// This example signs a URL using an\n// envelope signature. It then verifies the \n// signed XML.\n//\nusing System;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.Xml;\nusing System.Text;\nusing System.Xml;\n\npublic class SignVerifyEnvelope\n{\n\n    public static void Main(String[] args)\n    {\n        // Generate a signing key.\n       RSACryptoServiceProvider Key = new RSACryptoServiceProvider();\n\n       try\n       {\n\n           // Sign the detached resource and save the signature in an XML file.\n           SignDetachedResource(&quot;http://www.microsoft.com&quot;, &quot;SignedExample.xml&quot;, Key);\n\n           Console.WriteLine(&quot;XML file signed.&quot;);\n\n           // Verify the signature of the signed XML.\n           Console.WriteLine(&quot;Verifying signature...&quot;);\n\n           bool result = VerifyXmlFile(&quot;SignedExample.xml&quot;);\n\n           // Display the results of the signature verification to \\\n           // the console.\n           if (result)\n           {\n               Console.WriteLine(&quot;The XML signature is valid.&quot;);\n           }\n           else\n           {\n               Console.WriteLine(&quot;The XML signature is not valid.&quot;);\n           }\n       }\n       catch (CryptographicException e)\n       {\n           Console.WriteLine(e.Message);\n       }\n       finally\n       {\n           // Clear resources associated with the \n           // RSACryptoServiceProvider.\n           Key.Clear();\n       }\n   }\n\n    // Sign an XML file and save the signature in a new file.\n    public static void SignDetachedResource(string URIString, string XmlSigFileName, RSA Key)\n    {\n        // Check the arguments.  \n        if (URIString == null)\n            throw new ArgumentNullException(&quot;URIString&quot;);\n        if (XmlSigFileName == null)\n            throw new ArgumentNullException(&quot;XmlSigFileName&quot;);\n        if (Key == null)\n            throw new ArgumentNullException(&quot;Key&quot;);\n\n        // Create a SignedXml object.\n        SignedXml signedXml = new SignedXml();\n\n        // Assign the key to the SignedXml object.\n        signedXml.SigningKey = Key;\n\n        // Get the signature object from the SignedXml object.\n        Signature XMLSignature = signedXml.Signature;\n\n        // Create a reference to be signed.\n        Reference reference = new Reference();\n\n        // Add the passed URI to the reference object.\n        reference.Uri = URIString;\n\n        // Add the Reference object to the Signature object.\n        XMLSignature.SignedInfo.AddReference(reference);\n\n        // Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n        KeyInfo keyInfo = new KeyInfo();\n        keyInfo.AddClause(new RSAKeyValue((RSA)Key));\n\n        // Add the KeyInfo object to the Reference object.\n        XMLSignature.KeyInfo = keyInfo;\n\n        // Compute the signature.\n        signedXml.ComputeSignature();\n\n        // Get the XML representation of the signature and save\n        // it to an XmlElement object.\n        XmlElement xmlDigitalSignature = signedXml.GetXml();\n\n        // Save the signed XML document to a file specified\n        // using the passed string.\n        XmlTextWriter xmltw = new XmlTextWriter(XmlSigFileName, new UTF8Encoding(false));\n        xmlDigitalSignature.WriteTo(xmltw);\n        xmltw.Close();\n    }\n\n\n    // Verify the signature of an XML file and return the result.\n    public static Boolean VerifyXmlFile(String Name)\n    {\n        // Check the arguments.  \n        if (Name == null)\n            throw new ArgumentNullException(&quot;Name&quot;);\n\n        // Create a new XML document.\n        XmlDocument xmlDocument = new XmlDocument();\n\n        // Format using white spaces.\n        xmlDocument.PreserveWhitespace = true;\n\n        // Load the passed XML file into the document. \n        xmlDocument.Load(Name);\n\n        // Create a new SignedXml object and pass it\n        // the XML document class.\n        SignedXml signedXml = new SignedXml(xmlDocument);\n\n        // Find the &quot;Signature&quot; node and create a new\n        // XmlNodeList object.\n        XmlNodeList nodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;);\n\n        // Load the signature node.\n        signedXml.LoadXml((XmlElement)nodeList[0]);\n\n        // Check the signature and return the result.\n        return signedXml.CheckSignature();\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"XMLDSIG - Signature - Detached#1\">&#39; This example signs a URL using an\n&#39; envelope signature. It then verifies the \n&#39; signed XML.\n&#39;\nImports System\nImports System.Security.Cryptography\nImports System.Security.Cryptography.Xml\nImports System.Text\nImports System.Xml\n\n\n\nModule SignVerifyEnvelope\n\n\n    Sub Main(ByVal args() As String)\n        &#39; Generate a signing key.\n        Dim Key As New RSACryptoServiceProvider()\n\n        Try\n\n            &#39; Sign the detached resource and save the signature in an XML file.\n            SignDetachedResource(&quot;http://www.microsoft.com&quot;, &quot;SignedExample.xml&quot;, Key)\n\n            Console.WriteLine(&quot;XML file signed.&quot;)\n\n            &#39; Verify the signature of the signed XML.\n            Console.WriteLine(&quot;Verifying signature...&quot;)\n\n            Dim result As Boolean = VerifyXmlFile(&quot;SignedExample.xml&quot;)\n\n            &#39; Display the results of the signature verification to \\\n            &#39; the console.\n            If result Then\n                Console.WriteLine(&quot;The XML signature is valid.&quot;)\n            Else\n                Console.WriteLine(&quot;The XML signature is not valid.&quot;)\n            End If\n        Catch e As CryptographicException\n            Console.WriteLine(e.Message)\n        Finally\n            &#39; Clear resources associated with the \n            &#39; RSACryptoServiceProvider.\n            Key.Clear()\n        End Try\n\n    End Sub\n\n\n    &#39; Sign an XML file and save the signature in a new file.\n    Sub SignDetachedResource(ByVal URIString As String, ByVal XmlSigFileName As String, ByVal Key As RSA)\n        &#39; Check the arguments.  \n        If URIString Is Nothing Then\n            Throw New ArgumentNullException(&quot;URIString&quot;)\n        End If\n        If XmlSigFileName Is Nothing Then\n            Throw New ArgumentNullException(&quot;XmlSigFileName&quot;)\n        End If\n        If Key Is Nothing Then\n            Throw New ArgumentNullException(&quot;Key&quot;)\n        End If\n        &#39; Create a SignedXml object.\n        Dim signedXml As New SignedXml()\n\n        &#39; Assign the key to the SignedXml object.\n        signedXml.SigningKey = Key\n\n        &#39; Get the signature object from the SignedXml object.\n        Dim XMLSignature As Signature = signedXml.Signature\n\n        &#39; Create a reference to be signed.\n        Dim reference As New Reference()\n\n        &#39; Add the passed URI to the reference object.\n        reference.Uri = URIString\n\n        &#39; Add the Reference object to the Signature object.\n        XMLSignature.SignedInfo.AddReference(reference)\n\n        &#39; Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n        Dim keyInfo As New KeyInfo()\n        keyInfo.AddClause(New RSAKeyValue(CType(Key, RSA)))\n\n        &#39; Add the KeyInfo object to the Reference object.\n        XMLSignature.KeyInfo = keyInfo\n\n        &#39; Compute the signature.\n        signedXml.ComputeSignature()\n\n        &#39; Get the XML representation of the signature and save\n        &#39; it to an XmlElement object.\n        Dim xmlDigitalSignature As XmlElement = signedXml.GetXml()\n\n        &#39; Save the signed XML document to a file specified\n        &#39; using the passed string.\n        Dim xmltw As New XmlTextWriter(XmlSigFileName, New UTF8Encoding(False))\n        xmlDigitalSignature.WriteTo(xmltw)\n        xmltw.Close()\n\n    End Sub\n\n\n\n    &#39; Verify the signature of an XML file and return the result.\n    Function VerifyXmlFile(ByVal Name As String) As [Boolean]\n        &#39; Check the arguments.  \n        If Name Is Nothing Then\n            Throw New ArgumentNullException(&quot;Name&quot;)\n        End If\n        &#39; Create a new XML document.\n        Dim xmlDocument As New XmlDocument()\n\n        &#39; Format using white spaces.\n        xmlDocument.PreserveWhitespace = True\n\n        &#39; Load the passed XML file into the document. \n        xmlDocument.Load(Name)\n\n        &#39; Create a new SignedXml object and pass it\n        &#39; the XML document class.\n        Dim signedXml As New SignedXml(xmlDocument)\n\n        &#39; Find the &quot;Signature&quot; node and create a new\n        &#39; XmlNodeList object.\n        Dim nodeList As XmlNodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;)\n\n        &#39; Load the signature node.\n        signedXml.LoadXml(CType(nodeList(0), XmlElement))\n\n        &#39; Check the signature and return the result.\n        Return signedXml.CheckSignature()\n\n    End Function\nEnd Module\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The Signature class represents the &lt;<code>Signature</code>&gt; element of an XML signature defined by the XML digital signature specification. The &lt;<code>Signature</code>&gt; element is the root element of an XML digital signature. The <a class=\"xref\" href=\"system.security.cryptography.xml.signature#System_Security_Cryptography_Xml_Signature_SignedInfo_\" data-linktype=\"relative-path\">SignedInfo</a>, <a class=\"xref\" href=\"system.security.cryptography.xml.signature#System_Security_Cryptography_Xml_Signature_SignatureValue_\" data-linktype=\"relative-path\">SignatureValue</a>, <a class=\"xref\" href=\"system.security.cryptography.xml.signature#System_Security_Cryptography_Xml_Signature_KeyInfo_\" data-linktype=\"relative-path\">KeyInfo</a>, and <a class=\"xref\" href=\"system.security.cryptography.xml.signature#System_Security_Cryptography_Xml_Signature_ObjectList_\" data-linktype=\"relative-path\">ObjectList</a> properties encapsulate the subelements of the &lt;<code>Signature</code>&gt; element.  </p>\n<p> For more information about the &lt;<code>Signature</code>&gt; element, see the W3C specification at www.w3.org/TR/xmldsig-core/.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_Xml_Signature__ctor\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Signature()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.xml.signature\" data-linktype=\"relative-path\">Signature</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public Signature ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_Xml_Signature_Id\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Id</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets the ID of the current <a class=\"xref\" href=\"system.security.cryptography.xml.signature\" data-linktype=\"relative-path\">Signature</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string Id { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The ID of the current <a class=\"xref\" href=\"system.security.cryptography.xml.signature\" data-linktype=\"relative-path\">Signature</a>. The default is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Use the Id property to add a string ID to the XML representation of the current <a class=\"xref\" href=\"system.security.cryptography.xml.signature\" data-linktype=\"relative-path\">Signature</a> element. The ID is used to reference the <a class=\"xref\" href=\"system.security.cryptography.xml.signature\" data-linktype=\"relative-path\">Signature</a> from another location.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_Xml_Signature_KeyInfo\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">KeyInfo</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets the <a class=\"xref\" href=\"system.security.cryptography.xml.keyinfo\" data-linktype=\"relative-path\">KeyInfo</a> of the current <a class=\"xref\" href=\"system.security.cryptography.xml.signature\" data-linktype=\"relative-path\">Signature</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Security.Cryptography.Xml.KeyInfo KeyInfo { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.xml.keyinfo\" data-linktype=\"relative-path\">KeyInfo</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.security.cryptography.xml.keyinfo\" data-linktype=\"relative-path\">KeyInfo</a> of the current <a class=\"xref\" href=\"system.security.cryptography.xml.signature\" data-linktype=\"relative-path\">Signature</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The KeyInfo property uses a <a class=\"xref\" href=\"system.security.cryptography.xml.keyinfo\" data-linktype=\"relative-path\">KeyInfo</a> object to represent the &lt;<code>KeyInfo</code>&gt; element of an XML digital signature.  </p>\n<p> For more information about XML digital signatures, see the W3C specification at www.w3.org/TR/xmldsig-core/.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_Xml_Signature_ObjectList\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ObjectList</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets a list of objects to be signed.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Collections.IList ObjectList { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A list of objects to be signed.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The ObjectList property uses a collection of <a class=\"xref\" href=\"system.security.cryptography.xml.dataobject\" data-linktype=\"relative-path\">DataObject</a> objects to represent the &lt;<code>Object</code>&gt; tag of an XML digital signature.  </p>\n<p> You can also add a <a class=\"xref\" href=\"system.security.cryptography.xml.dataobject\" data-linktype=\"relative-path\">DataObject</a> to this collection using the <a class=\"xref\" href=\"system.security.cryptography.xml.signature#System_Security_Cryptography_Xml_Signature_AddObject_\" data-linktype=\"relative-path\">AddObject</a> method.  </p>\n<p> For more information about XML digital signatures, see the W3C specification at www.w3.org/TR/xmldsig-core/.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_Xml_Signature_SignatureValue\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">SignatureValue</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets the value of the digital signature.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public byte[] SignatureValue { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A byte array that contains the value of the digital signature.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The SignatureValue property uses a byte array to represent the &lt;<code>SignatureValue</code>&gt; element of an XML digital signature contained within.  </p>\n<p> For more information about XML digital signatures, see the W3C specification at www.w3.org/TR/xmldsig-core/.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_Xml_Signature_SignedInfo\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">SignedInfo</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets the <a class=\"xref\" href=\"system.security.cryptography.xml.signedinfo\" data-linktype=\"relative-path\">SignedInfo</a> of the current <a class=\"xref\" href=\"system.security.cryptography.xml.signature\" data-linktype=\"relative-path\">Signature</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Security.Cryptography.Xml.SignedInfo SignedInfo { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.xml.signedinfo\" data-linktype=\"relative-path\">SignedInfo</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.security.cryptography.xml.signedinfo\" data-linktype=\"relative-path\">SignedInfo</a> of the current <a class=\"xref\" href=\"system.security.cryptography.xml.signature\" data-linktype=\"relative-path\">Signature</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The SignedInfo property uses the <a class=\"xref\" href=\"system.security.cryptography.xml.signedinfo\" data-linktype=\"relative-path\">SignedInfo</a> class to represent the &lt;<code>SignedInfo</code>&gt; element of an XML digital signature contained within.  </p>\n<p> For more information about XML digital signatures, see the W3C specification at www.w3.org/TR/xmldsig-core/.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_Xml_Signature_AddObject_System_Security_Cryptography_Xml_DataObject_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">AddObject(DataObject)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Adds a <a class=\"xref\" href=\"system.security.cryptography.xml.dataobject\" data-linktype=\"relative-path\">DataObject</a> to the list of objects to be signed.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void AddObject (System.Security.Cryptography.Xml.DataObject dataObject);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>dataObject</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.xml.dataobject\" data-linktype=\"relative-path\">DataObject</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.security.cryptography.xml.dataobject\" data-linktype=\"relative-path\">DataObject</a> to be added to the list of objects to be signed.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The AddObject method adds a <a class=\"xref\" href=\"system.security.cryptography.xml.dataobject\" data-linktype=\"relative-path\">DataObject</a> object to a collection that is accessible using the <a class=\"xref\" href=\"system.security.cryptography.xml.signature#System_Security_Cryptography_Xml_Signature_ObjectList_\" data-linktype=\"relative-path\">ObjectList</a> property.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_Xml_Signature_GetXml\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetXml()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns the XML representation of the <a class=\"xref\" href=\"system.security.cryptography.xml.signature\" data-linktype=\"relative-path\">Signature</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Xml.XmlElement GetXml ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlelement\" data-linktype=\"relative-path\">XmlElement</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The XML representation of the <a class=\"xref\" href=\"system.security.cryptography.xml.signature\" data-linktype=\"relative-path\">Signature</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <span class=\"xref\">stem.Security.Cryptography.Xml.Signature.SignedInfo*</span> property is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <span class=\"xref\">stem.Security.Cryptography.Xml.Signature.SignatureValue*</span> property is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_Xml_Signature_LoadXml_System_Xml_XmlElement_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LoadXml(XmlElement)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Loads a <a class=\"xref\" href=\"system.security.cryptography.xml.signature\" data-linktype=\"relative-path\">Signature</a> state from an XML element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void LoadXml (System.Xml.XmlElement value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlelement\" data-linktype=\"relative-path\">XmlElement</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The XML element from which to load the <a class=\"xref\" href=\"system.security.cryptography.xml.signature\" data-linktype=\"relative-path\">Signature</a> state.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <code>value</code> parameter is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <code>value</code> parameter does not contain a valid <span class=\"xref\">stem.Security.Cryptography.Xml.Signature.SignatureValue*</span>.  </p>\n<p> -or-  </p>\n<p> The <code>value</code> parameter does not contain a valid <span class=\"xref\">stem.Security.Cryptography.Xml.Signature.SignedInfo*</span>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Security.Cryptography.Xml.Signature.yml\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.Signature\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.Signature..ctor\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.Signature.AddObject\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.Signature.GetXml\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.Signature.Id\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.Signature.KeyInfo\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.Signature.LoadXml\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.Signature.ObjectList\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.Signature.SignatureValue\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.Signature.SignedInfo\">\r\n<meta name=\"APILocation\" content=\"System.Security.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-29 05:54 AM\">\r\n<meta name=\"document_id\" content=\"e13967c9-c9a4-20dd-dd26-7934baf356df\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the &amp;lt;Signature&amp;gt; element of an XML signature.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.security.cryptography.xml/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Security.Cryptography.Xml.Signature\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Security.Cryptography.Xml.Signature.yml","open_to_public_contributors":false,"api_name":["System.Security.Cryptography.Xml.Signature","System.Security.Cryptography.Xml.Signature..ctor","System.Security.Cryptography.Xml.Signature.AddObject","System.Security.Cryptography.Xml.Signature.GetXml","System.Security.Cryptography.Xml.Signature.Id","System.Security.Cryptography.Xml.Signature.KeyInfo","System.Security.Cryptography.Xml.Signature.LoadXml","System.Security.Cryptography.Xml.Signature.ObjectList","System.Security.Cryptography.Xml.Signature.SignatureValue","System.Security.Cryptography.Xml.Signature.SignedInfo"],"api_location":["System.Security.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Security.Cryptography.Xml.Signature","System::Security::Cryptography::Xml::Signature","System.Security.Cryptography.Xml.Signature.#ctor","System::Security::Cryptography::Xml::Signature::#ctor","System.Security.Cryptography.Xml.Signature.AddObject","System::Security::Cryptography::Xml::Signature::AddObject","System.Security.Cryptography.Xml.Signature.GetXml","System::Security::Cryptography::Xml::Signature::GetXml","System.Security.Cryptography.Xml.Signature.Id","System::Security::Cryptography::Xml::Signature::Id","System.Security.Cryptography.Xml.Signature.KeyInfo","System::Security::Cryptography::Xml::Signature::KeyInfo","System.Security.Cryptography.Xml.Signature.LoadXml","System::Security::Cryptography::Xml::Signature::LoadXml","System.Security.Cryptography.Xml.Signature.ObjectList","System::Security::Cryptography::Xml::Signature::ObjectList","System.Security.Cryptography.Xml.Signature.SignatureValue","System::Security::Cryptography::Xml::Signature::SignatureValue","System.Security.Cryptography.Xml.Signature.SignedInfo","System::Security::Cryptography::Xml::Signature::SignedInfo"],"dev_langs":["csharp"],"updated_at":"2017-03-29 05:54 AM","document_id":"e13967c9-c9a4-20dd-dd26-7934baf356df","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Security.Cryptography.Xml/Signature.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Signature class | Microsoft Docs","_op_ogTitle":"Signature class","description":"Represents the &lt;Signature&gt; element of an XML signature.\n","toc_asset_id":"api/_splitted/System.Security.Cryptography.Xml/toc.json","toc_rel":"_splitted/System.Security.Cryptography.Xml/toc.json","source_url":"","ms.assetid":"System.Security.Cryptography.Xml.Signature","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.xml.signature","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.xml.signature","fileRelativePath":"api/System.Security.Cryptography.Xml.Signature.html"},"themesRelativePathToOutputRoot":"_themes/"}