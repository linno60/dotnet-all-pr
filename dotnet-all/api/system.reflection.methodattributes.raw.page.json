{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">MethodAttributes</span>\r\n      Enum\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Specifies flags for method attributes. These flags are defined in the corhdr.h file.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\r\n  \t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Flags]\n[System.Runtime.InteropServices.ComVisible(true)]\npublic enum MethodAttributes</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a></span></div><span class=\"lang-csharp\">MethodAttributes</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Attributes</dt><dd>\r\n  \t\t<div class=\"cdlHolder\">\r\n  \t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.flagsattribute\" title=\"System.FlagsAttribute\" data-linktype=\"relative-path\">FlagsAttribute</a></span>\r\n  \t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example displays the attributes of the specified method.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic MethodAttributes Example#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Runtime::InteropServices;\n\npublic ref class AttributesSample\n{\npublic:\n   void Mymethod( int int1m, [Out]interior_ptr&lt;String^&gt; str2m, interior_ptr&lt;String^&gt; str3m )\n   {\n       *str2m = &quot;in Mymethod&quot;;\n   }\n};\n\nvoid PrintAttributes( Type^ attribType, int iAttribValue )\n{\n   if (  !attribType-&gt;IsEnum )\n   {\n      Console::WriteLine( &quot;This type is not an enum.&quot; );\n      return;\n   }\n\n   array&lt;FieldInfo^&gt;^fields = attribType-&gt;GetFields( static_cast&lt;BindingFlags&gt;(BindingFlags::Public | BindingFlags::Static) );\n   for ( int i = 0; i &lt; fields-&gt;Length; i++ )\n   {\n      int fieldvalue = safe_cast&lt;Int32&gt;(fields[ i ]-&gt;GetValue( nullptr ));\n      if ( (fieldvalue &amp; iAttribValue) == fieldvalue )\n      {\n         Console::WriteLine( fields[ i ]-&gt;Name );\n      }\n   }\n}\n\nint main()\n{\n   Console::WriteLine( &quot;Reflection.MethodBase.Attributes Sample&quot; );\n\n   // Get the type of the chosen class.\n   Type^ MyType = Type::GetType( &quot;AttributesSample&quot; );\n\n   // Get the method Mymethod on the type.\n   MethodBase^ Mymethodbase = MyType-&gt;GetMethod( &quot;Mymethod&quot; );\n\n   // Display the method name and signature.\n   Console::WriteLine( &quot;Mymethodbase = {0}&quot;, Mymethodbase );\n\n   // Get the MethodAttribute enumerated value.\n   MethodAttributes Myattributes = Mymethodbase-&gt;Attributes;\n\n   // Display the flags that are set.\n   PrintAttributes( System::Reflection::MethodAttributes::typeid, (int)Myattributes );\n   return 0;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic MethodAttributes Example#1\">Imports System\nImports System.Reflection\nImports Microsoft.VisualBasic\n\nClass AttributesSample\n\n    Public Sub Mymethod(ByVal int1m As Integer, ByRef str2m As String, ByRef str3m As String)\n        str2m = &quot;in Mymethod&quot;\n    End Sub &#39;Mymethod\n\n\n    Public Shared Function Main(ByVal args() As String) As Integer\n        Console.WriteLine(&quot;Reflection.MethodBase.Attributes Sample&quot;)\n\n        &#39; Get the type of a chosen class.\n        Dim MyType As Type = Type.GetType(&quot;AttributesSample&quot;)\n\n        &#39; Get the method Mymethod on the type.\n        Dim Mymethodbase As MethodBase = MyType.GetMethod(&quot;Mymethod&quot;)\n\n        &#39; Display the method name and signature.\n        Console.WriteLine(&quot;Mymethodbase = {0}&quot;, Mymethodbase)\n\n        &#39; Get the MethodAttribute enumerated value.\n        Dim Myattributes As MethodAttributes = Mymethodbase.Attributes\n\n        &#39; Display the flags that are set.\n        PrintAttributes(GetType(System.Reflection.MethodAttributes), CInt(Myattributes))\n        Return 0\n    End Function &#39;Main\n\n    Public Shared Sub PrintAttributes(ByVal attribType As Type, ByVal iAttribValue As Integer)\n        If Not attribType.IsEnum Then\n            Console.WriteLine(&quot;This type is not an enum.&quot;)\n            Return\n        End If\n        Dim fields As FieldInfo() = attribType.GetFields((BindingFlags.Public Or BindingFlags.Static))\n        Dim i As Integer\n        For i = 0 To fields.Length - 1\n            Dim fieldvalue As Integer = CType(fields(i).GetValue(Nothing), Int32)\n            If (fieldvalue And iAttribValue) = fieldvalue Then\n                Console.WriteLine(fields(i).Name)\n            End If\n        Next i\n    End Sub &#39;PrintAttributes\nEnd Class &#39;AttributesSample\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic MethodAttributes Example#1\">using System;\nusing System.Reflection;\n \nclass AttributesSample\n{\n    public void Mymethod (int int1m, out string str2m, ref string str3m)\n    {\n        str2m = &quot;in Mymethod&quot;;\n    }\n \n    public static int Main(string[] args)\n    {      \n        Console.WriteLine (&quot;Reflection.MethodBase.Attributes Sample&quot;);\n       \n        // Get the type of the chosen class.\n        Type MyType = Type.GetType(&quot;AttributesSample&quot;);\n \n        // Get the method Mymethod on the type.\n        MethodBase Mymethodbase = MyType.GetMethod(&quot;Mymethod&quot;);\n \n        // Display the method name and signature.\n        Console.WriteLine(&quot;Mymethodbase = &quot; + Mymethodbase);\n \n        // Get the MethodAttribute enumerated value.\n        MethodAttributes Myattributes = Mymethodbase.Attributes;\n \n        // Display the flags that are set.\n        PrintAttributes(typeof(System.Reflection.MethodAttributes), (int) Myattributes);\n        return 0;\n    }\n \n \n    public static void PrintAttributes(Type attribType, int iAttribValue)\n    {\n        if (!attribType.IsEnum) {Console.WriteLine(&quot;This type is not an enum.&quot;); return;}\n \n        FieldInfo[] fields = attribType.GetFields(BindingFlags.Public | BindingFlags.Static);\n        for (int i = 0; i &lt; fields.Length; i++)\n        {\n            int fieldvalue = (Int32)fields[i].GetValue(null);\n            if ((fieldvalue &amp; iAttribValue) == fieldvalue)\n            {\n                Console.WriteLine(fields[i].Name);\n            }\n        }\n    }\n}\n</code></pre>\r\n  \r\n  \r\n      \t<h2 class=\"accented\">Fields\r\n      </h2>\r\n      <table class=\"nameValue\">\r\n      \t<tr><td id=\"System_Reflection_MethodAttributes_Abstract\">\r\n      \t\t\t<span class=\"lang-csharp\">Abstract</span>\r\n      \t</td>\r\n      \t<td><p>Indicates that the class does not provide an implementation of this method.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_MethodAttributes_Assembly\">\r\n      \t\t\t<span class=\"lang-csharp\">Assembly</span>\r\n      \t</td>\r\n      \t<td><p>Indicates that the method is accessible to any class of this assembly.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_MethodAttributes_CheckAccessOnOverride\">\r\n      \t\t\t<span class=\"lang-csharp\">CheckAccessOnOverride</span>\r\n      \t</td>\r\n      \t<td><p>Indicates that the method can only be overridden when it is also accessible.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_MethodAttributes_FamANDAssem\">\r\n      \t\t\t<span class=\"lang-csharp\">FamANDAssem</span>\r\n      \t</td>\r\n      \t<td><p>Indicates that the method is accessible to members of this type and its derived types that are in this assembly only.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_MethodAttributes_Family\">\r\n      \t\t\t<span class=\"lang-csharp\">Family</span>\r\n      \t</td>\r\n      \t<td><p>Indicates that the method is accessible only to members of this class and its derived classes.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_MethodAttributes_FamORAssem\">\r\n      \t\t\t<span class=\"lang-csharp\">FamORAssem</span>\r\n      \t</td>\r\n      \t<td><p>Indicates that the method is accessible to derived classes anywhere, as well as to any class in the assembly.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_MethodAttributes_Final\">\r\n      \t\t\t<span class=\"lang-csharp\">Final</span>\r\n      \t</td>\r\n      \t<td><p>Indicates that the method cannot be overridden.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_MethodAttributes_HasSecurity\">\r\n      \t\t\t<span class=\"lang-csharp\">HasSecurity</span>\r\n      \t</td>\r\n      \t<td><p>Indicates that the method has security associated with it. Reserved flag for runtime use only.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_MethodAttributes_HideBySig\">\r\n      \t\t\t<span class=\"lang-csharp\">HideBySig</span>\r\n      \t</td>\r\n      \t<td><p>Indicates that the method hides by name and signature; otherwise, by name only.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_MethodAttributes_MemberAccessMask\">\r\n      \t\t\t<span class=\"lang-csharp\">MemberAccessMask</span>\r\n      \t</td>\r\n      \t<td><p>Retrieves accessibility information.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_MethodAttributes_NewSlot\">\r\n      \t\t\t<span class=\"lang-csharp\">NewSlot</span>\r\n      \t</td>\r\n      \t<td><p>Indicates that the method always gets a new slot in the vtable.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_MethodAttributes_PinvokeImpl\">\r\n      \t\t\t<span class=\"lang-csharp\">PinvokeImpl</span>\r\n      \t</td>\r\n      \t<td><p>Indicates that the method implementation is forwarded through PInvoke (Platform Invocation Services).</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_MethodAttributes_Private\">\r\n      \t\t\t<span class=\"lang-csharp\">Private</span>\r\n      \t</td>\r\n      \t<td><p>Indicates that the method is accessible only to the current class.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_MethodAttributes_PrivateScope\">\r\n      \t\t\t<span class=\"lang-csharp\">PrivateScope</span>\r\n      \t</td>\r\n      \t<td><p>Indicates that the member cannot be referenced.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_MethodAttributes_Public\">\r\n      \t\t\t<span class=\"lang-csharp\">Public</span>\r\n      \t</td>\r\n      \t<td><p>Indicates that the method is accessible to any object for which this object is in scope.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_MethodAttributes_RequireSecObject\">\r\n      \t\t\t<span class=\"lang-csharp\">RequireSecObject</span>\r\n      \t</td>\r\n      \t<td><p>Indicates that the method calls another method containing security code. Reserved flag for runtime use only.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_MethodAttributes_ReservedMask\">\r\n      \t\t\t<span class=\"lang-csharp\">ReservedMask</span>\r\n      \t</td>\r\n      \t<td><p>Indicates a reserved flag for runtime use only.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_MethodAttributes_ReuseSlot\">\r\n      \t\t\t<span class=\"lang-csharp\">ReuseSlot</span>\r\n      \t</td>\r\n      \t<td><p>Indicates that the method will reuse an existing slot in the vtable. This is the default behavior.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_MethodAttributes_RTSpecialName\">\r\n      \t\t\t<span class=\"lang-csharp\">RTSpecialName</span>\r\n      \t</td>\r\n      \t<td><p>Indicates that the common language runtime checks the name encoding.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_MethodAttributes_SpecialName\">\r\n      \t\t\t<span class=\"lang-csharp\">SpecialName</span>\r\n      \t</td>\r\n      \t<td><p>Indicates that the method is special. The name describes how this method is special.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_MethodAttributes_Static\">\r\n      \t\t\t<span class=\"lang-csharp\">Static</span>\r\n      \t</td>\r\n      \t<td><p>Indicates that the method is defined on the type; otherwise, it is defined per instance.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_MethodAttributes_UnmanagedExport\">\r\n      \t\t\t<span class=\"lang-csharp\">UnmanagedExport</span>\r\n      \t</td>\r\n      \t<td><p>Indicates that the managed method is exported by thunk to unmanaged code.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_MethodAttributes_Virtual\">\r\n      \t\t\t<span class=\"lang-csharp\">Virtual</span>\r\n      \t</td>\r\n      \t<td><p>Indicates that the method is virtual.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_MethodAttributes_VtableLayoutMask\">\r\n      \t\t\t<span class=\"lang-csharp\">VtableLayoutMask</span>\r\n      \t</td>\r\n      \t<td><p>Retrieves vtable attributes.</p>\n</td>\r\n      \t</tr>\r\n      </table>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"uhfHeaderId\" content=\"MSDocsHeader-DotNet\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Reflection.MethodAttributes.yml\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MethodAttributes\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MethodAttributes.Abstract\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MethodAttributes.Assembly\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MethodAttributes.CheckAccessOnOverride\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MethodAttributes.FamANDAssem\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MethodAttributes.Family\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MethodAttributes.FamORAssem\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MethodAttributes.Final\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MethodAttributes.HasSecurity\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MethodAttributes.HideBySig\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MethodAttributes.MemberAccessMask\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MethodAttributes.NewSlot\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MethodAttributes.PinvokeImpl\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MethodAttributes.Private\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MethodAttributes.PrivateScope\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MethodAttributes.Public\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MethodAttributes.RequireSecObject\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MethodAttributes.ReservedMask\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MethodAttributes.ReuseSlot\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MethodAttributes.RTSpecialName\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MethodAttributes.SpecialName\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MethodAttributes.Static\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MethodAttributes.UnmanagedExport\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MethodAttributes.Virtual\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MethodAttributes.VtableLayoutMask\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-04-01 05:59 PM\">\r\n<meta name=\"document_id\" content=\"cd1d5268-f937-7784-397f-6112fec90d9b\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Specifies flags for method attributes. These flags are defined in the corhdr.h file.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.reflection/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Reflection.MethodAttributes\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","uhfHeaderId":"MSDocsHeader-DotNet","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Reflection.MethodAttributes.yml","open_to_public_contributors":false,"api_name":["System.Reflection.MethodAttributes","System.Reflection.MethodAttributes.Abstract","System.Reflection.MethodAttributes.Assembly","System.Reflection.MethodAttributes.CheckAccessOnOverride","System.Reflection.MethodAttributes.FamANDAssem","System.Reflection.MethodAttributes.Family","System.Reflection.MethodAttributes.FamORAssem","System.Reflection.MethodAttributes.Final","System.Reflection.MethodAttributes.HasSecurity","System.Reflection.MethodAttributes.HideBySig","System.Reflection.MethodAttributes.MemberAccessMask","System.Reflection.MethodAttributes.NewSlot","System.Reflection.MethodAttributes.PinvokeImpl","System.Reflection.MethodAttributes.Private","System.Reflection.MethodAttributes.PrivateScope","System.Reflection.MethodAttributes.Public","System.Reflection.MethodAttributes.RequireSecObject","System.Reflection.MethodAttributes.ReservedMask","System.Reflection.MethodAttributes.ReuseSlot","System.Reflection.MethodAttributes.RTSpecialName","System.Reflection.MethodAttributes.SpecialName","System.Reflection.MethodAttributes.Static","System.Reflection.MethodAttributes.UnmanagedExport","System.Reflection.MethodAttributes.Virtual","System.Reflection.MethodAttributes.VtableLayoutMask"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Reflection.MethodAttributes","System::Reflection::MethodAttributes","System.Reflection.MethodAttributes.Abstract","System::Reflection::MethodAttributes::Abstract","System.Reflection.MethodAttributes.Assembly","System::Reflection::MethodAttributes::Assembly","System.Reflection.MethodAttributes.CheckAccessOnOverride","System::Reflection::MethodAttributes::CheckAccessOnOverride","System.Reflection.MethodAttributes.FamANDAssem","System::Reflection::MethodAttributes::FamANDAssem","System.Reflection.MethodAttributes.Family","System::Reflection::MethodAttributes::Family","System.Reflection.MethodAttributes.FamORAssem","System::Reflection::MethodAttributes::FamORAssem","System.Reflection.MethodAttributes.Final","System::Reflection::MethodAttributes::Final","System.Reflection.MethodAttributes.HasSecurity","System::Reflection::MethodAttributes::HasSecurity","System.Reflection.MethodAttributes.HideBySig","System::Reflection::MethodAttributes::HideBySig","System.Reflection.MethodAttributes.MemberAccessMask","System::Reflection::MethodAttributes::MemberAccessMask","System.Reflection.MethodAttributes.NewSlot","System::Reflection::MethodAttributes::NewSlot","System.Reflection.MethodAttributes.PinvokeImpl","System::Reflection::MethodAttributes::PinvokeImpl","System.Reflection.MethodAttributes.Private","System::Reflection::MethodAttributes::Private","System.Reflection.MethodAttributes.PrivateScope","System::Reflection::MethodAttributes::PrivateScope","System.Reflection.MethodAttributes.Public","System::Reflection::MethodAttributes::Public","System.Reflection.MethodAttributes.RequireSecObject","System::Reflection::MethodAttributes::RequireSecObject","System.Reflection.MethodAttributes.ReservedMask","System::Reflection::MethodAttributes::ReservedMask","System.Reflection.MethodAttributes.ReuseSlot","System::Reflection::MethodAttributes::ReuseSlot","System.Reflection.MethodAttributes.RTSpecialName","System::Reflection::MethodAttributes::RTSpecialName","System.Reflection.MethodAttributes.SpecialName","System::Reflection::MethodAttributes::SpecialName","System.Reflection.MethodAttributes.Static","System::Reflection::MethodAttributes::Static","System.Reflection.MethodAttributes.UnmanagedExport","System::Reflection::MethodAttributes::UnmanagedExport","System.Reflection.MethodAttributes.Virtual","System::Reflection::MethodAttributes::Virtual","System.Reflection.MethodAttributes.VtableLayoutMask","System::Reflection::MethodAttributes::VtableLayoutMask"],"dev_langs":["csharp"],"updated_at":"2017-04-01 05:59 PM","document_id":"cd1d5268-f937-7784-397f-6112fec90d9b","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Reflection/MethodAttributes.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"MethodAttributes enum | Microsoft Docs","_op_ogTitle":"MethodAttributes enum","description":"Specifies flags for method attributes. These flags are defined in the corhdr.h file.\n","toc_asset_id":"api/_splitted/System.Reflection/toc.json","toc_rel":"_splitted/System.Reflection/toc.json","source_url":"","ms.assetid":"System.Reflection.MethodAttributes","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.reflection.methodattributes","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.reflection.methodattributes","fileRelativePath":"api/System.Reflection.MethodAttributes.html"},"themesRelativePathToOutputRoot":"_themes/"}