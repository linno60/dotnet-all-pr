{"content":"\r\n  <h1>\r\n    <span class=\"lang-csharp\">System.Diagnostics.PerformanceData</span>\r\n      Namespace\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Use the classes in this namespace to provide counter data. The counters are used to expose performance metrics to consumers such as the Performance Monitor. The namespace does not contain classes for consuming the counter data. For a complete description of the performance counters architecture, see <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/aa373083(v=vs.85).aspx\" data-linktype=\"external\">Performance Counters</a>.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\r\n  \t\t<h2 data-moniker=\" 0\" class=\"accented\" id=\"classes\">Classes\r\n  </h2>\r\n  \r\n  \t<table data-moniker=\" 0\" class=\"nameValue \">\r\n  \t\t<tr id=\"System_Diagnostics_PerformanceData_CounterData\" data-moniker=\" 0\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.diagnostics.performancedata.counterdata\" data-linktype=\"relative-path\">CounterData</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Contains the raw data for a counter.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Diagnostics_PerformanceData_CounterSet\" data-moniker=\" 0\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.diagnostics.performancedata.counterset\" data-linktype=\"relative-path\">CounterSet</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Defines a set of logical counters.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Diagnostics_PerformanceData_CounterSetInstance\" data-moniker=\" 0\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.diagnostics.performancedata.countersetinstance\" data-linktype=\"relative-path\">CounterSetInstance</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Creates an instance of the logical counters defined in the <a class=\"xref\" href=\"system.diagnostics.performancedata.counterset\" data-linktype=\"relative-path\">CounterSet</a> class.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Diagnostics_PerformanceData_CounterSetInstanceCounterDataSet\" data-moniker=\" 0\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.diagnostics.performancedata.countersetinstancecounterdataset\" data-linktype=\"relative-path\">CounterSetInstanceCounterDataSet</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Contains the collection of counter values.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t</table>\r\n  \t\t<h2 data-moniker=\" 0\" class=\"accented\" id=\"enums\">Enums\r\n  </h2>\r\n  \r\n  \t<table data-moniker=\" 0\" class=\"nameValue \">\r\n  \t\t<tr id=\"System_Diagnostics_PerformanceData_CounterSetInstanceType\" data-moniker=\" 0\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.diagnostics.performancedata.countersetinstancetype\" data-linktype=\"relative-path\">CounterSetInstanceType</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Specifies whether the counter set allows multiple instances such as processes and physical disks, or a single instance such as memory.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Diagnostics_PerformanceData_CounterType\" data-moniker=\" 0\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.diagnostics.performancedata.countertype\" data-linktype=\"relative-path\">CounterType</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Defines the possible types of counters. Each counter is assigned a counter type. The counter type determines how the counter data is calculated, averaged, and displayed.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t</table>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following shows a simple manifest:  </p>\n<pre><code>&lt;!-- &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-16&quot;?&gt; --&gt;  \n&lt;instrumentationManifest xsi:schemaLocation=&quot;http://schemas.microsoft.com/win/2004/08/events eventman.xsd&quot;   \n     xmlns:win=&quot;http://manifests.microsoft.com/win/2004/08/windows/events&quot;   \n     xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;   \n     xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;   \n     xmlns:trace=http://schemas.microsoft.com/win/2004/08/events/trace&gt;  \n\n    &lt;instrumentation&gt;  \n\n        &lt;counters xmlns=http://schemas.microsoft.com/win/2005/12/counters&gt;  \n\n            &lt;provider  \n              applicationIdentity = &quot;provider1.exe&quot;  \n              providerType = &quot;userMode&quot;  \n              providerGuid = &quot;{51D1685C-35ED-45be-99FE-17261A4F27F3}&quot;&gt;  \n\n               &lt;counterSet guid = &quot;{582803C9-AACD-45e5-8C30-571141A22092}&quot;  \n                  uri = &quot;Microsoft.Windows.System.PerfCounters.Typing&quot;  \n                  name = &quot;$(string.CounterSet1.Name)&quot;   \n                  description = &quot;$(string.CounterSet1.Description)&quot;   \n                  instances = &quot;single&quot;&gt;  \n\n                    &lt;counter id = &quot;1&quot;  \n                      uri = &quot;Microsoft.Windows.System.PerfCounters.Typing.TotalWords&quot;  \n                      name = &quot;$(string.CS1.Counter1.Name)&quot;  \n                      description = &quot;$(string.CS1.Counter1.Description)&quot;  \n                      type = &quot;perf_counter_rawcount&quot;  \n                      detailLevel = &quot;standard&quot;/&gt;  \n\n                    &lt;counter id = &quot;2&quot;  \n                      uri = &quot;Microsoft.Windows.System.PerfCounters.Typing.WordsInInterval&quot;  \n                      name = &quot;$(string.CS1.Counter2.Name)&quot;  \n                      description = &quot;$(string.CS1.Counter2.Description)&quot;  \n                      type = &quot;perf_counter_delta&quot;  \n                      detailLevel = &quot;standard&quot;/&gt;  \n\n                    &lt;counter id = &quot;3&quot;  \n                      uri = &quot;Microsoft.Windows.System.PerfCounters.Typing.LetterAPressed&quot;  \n                      name = &quot;$(string.CS1.Counter3.Name)&quot;  \n                      description = &quot;$(string.CS1.Counter3.Description)&quot;  \n                      type = &quot;perf_counter_rawcount&quot;  \n                      detailLevel = &quot;standard&quot;/&gt;  \n\n                    &lt;counter id = &quot;4&quot;  \n                      uri = &quot;Microsoft.Windows.System.PerfCounters.Typing.WordsContainingLetterA&quot;  \n                      name = &quot;$(string.CS1.Counter4.Name)&quot;   \n                      description = &quot;$(string.CS1.Counter4.Description)&quot;   \n                      type = &quot;perf_counter_rawcount&quot;  \n                      detailLevel = &quot;standard&quot;/&gt;  \n\n                    &lt;counter id = &quot;5&quot;  \n                      uri = &quot;Microsoft.Windows.System.PerfCounters.Typing.PercentOfWordsContainingLetterA&quot;  \n                      name = &quot;$(string.CS1.Counter5.Name)&quot;   \n                      description = &quot;$(string.CS1.Counter5.Description)&quot;   \n                      type = &quot;perf_sample_fraction&quot;  \n                      baseID = &quot;6&quot;  \n                      detailLevel = &quot;standard&quot;&gt;  \n                      &lt;counterAttributes&gt;  \n                          &lt;counterAttribute name = &quot;displayAsReal&quot; /&gt;  \n                      &lt;/counterAttributes&gt;  \n                    &lt;/counter&gt;  \n\n                    &lt;counter id = &quot;6&quot;  \n                      uri = &quot;Microsoft.Windows.System.PerfCounters.Typing.PercentBase&quot;  \n                      type = &quot;perf_sample_base&quot;  \n                      detailLevel = &quot;standard&quot;&gt;  \n                      &lt;counterAttributes&gt;  \n                          &lt;counterAttribute name = &quot;noDisplay&quot; /&gt;  \n                      &lt;/counterAttributes&gt;  \n                    &lt;/counter&gt;  \n\n                &lt;/counterSet&gt;  \n            &lt;/provider&gt;  \n        &lt;/counters&gt;  \n    &lt;/instrumentation&gt;  \n\n    &lt;localization&gt;  \n        &lt;resources culture=&quot;en-US&quot;&gt;  \n            &lt;stringTable&gt;  \n\n                &lt;string id=&quot;CounterSet1.Name&quot; value=&quot;Typing&quot;/&gt;  \n                &lt;string id=&quot;CounterSet1.Description&quot; value=&quot;Captures simple typing metrics.&quot;/&gt;  \n                &lt;string id=&quot;CS1.Counter1.Name&quot; value=&quot;Total Words Typed&quot;/&gt;   \n                &lt;string id=&quot;CS1.Counter1.Description&quot; value=&quot;The total number of words typed.&quot;/&gt;  \n                &lt;string id=&quot;CS1.Counter2.Name&quot; value=&quot;Words Typed In Interval&quot;/&gt;   \n                &lt;string id=&quot;CS1.Counter2.Description&quot; value=&quot;The total number of words typed in the interval.&quot;/&gt;  \n                &lt;string id=&quot;CS1.Counter3.Name&quot; value=&quot;Letter A Pressed&quot;/&gt;   \n                &lt;string id=&quot;CS1.Counter3.Description&quot; value=&quot;The number of times that the letter A is pressed.&quot;/&gt;  \n                &lt;string id=&quot;CS1.Counter4.Name&quot; value=&quot;Words Containing A&quot;/&gt;   \n                &lt;string id=&quot;CS1.Counter4.Description&quot; value=&quot;The number of words that contain the letter A.&quot;/&gt;  \n                &lt;string id=&quot;CS1.Counter5.Name&quot; value=&quot;Percent of Words Containing A&quot;/&gt;   \n                &lt;string id=&quot;CS1.Counter5.Description&quot; value=&quot;The percent of words that contain the letter A in the last interval.&quot;/&gt;  \n\n            &lt;/stringTable&gt;  \n        &lt;/resources&gt;  \n    &lt;/localization&gt;  \n&lt;/instrumentationManifest&gt;  \n</code></pre><p> The following shows a simple provider implementation for the manifest:  </p>\n<pre><code>using System.Diagnostics.PerformanceData;  \n\n        private static Guid providerId = new Guid(&quot;{51D1685C-35ED-45be-99FE-17261A4F27F3}&quot;);  \n        private static Guid typingCounterSetId = new Guid(&quot;{582803C9-AACD-45e5-8C30-571141A22092}&quot;);  \n\n        private static CounterSet typingCounterSet;         // Defines the counter set  \n        private static CounterSetInstance typingCsInstance; // Instance of the counter set  \n\n        private static int numberOfLetterAInWord = 0;  \n\n        . . .  \n\n            // Create the &#39;Typing&#39; counter set.  \n            typingCounterSet = new CounterSet(providerId, typingCounterSetId, CounterSetInstanceType.Single);  \n\n            // Add the counters to the counter set definition.  \n            typingCounterSet.AddCounter(1, CounterType.RawData32, &quot;Total Word Count&quot;);  \n            typingCounterSet.AddCounter(2, CounterType.Delta32, &quot;Words Typed In Interval&quot;);  \n            typingCounterSet.AddCounter(3, CounterType.RawData32, &quot;A Key Pressed&quot;);  \n            typingCounterSet.AddCounter(4, CounterType.RawData32, &quot;Words Containing A&quot;);  \n            typingCounterSet.AddCounter(5, CounterType.SampleFraction, &quot;Percent of Words Containg A&quot;);  \n            typingCounterSet.AddCounter(6, CounterType.SampleBase, &quot;Percent Base&quot;);  \n\n            // Create an instance of the counter set (contains the counter data).  \n            typingCsInstance = typingCounterSet.CreateCounterSetInstance(&quot;Typing Instance&quot;);  \n            typingCsInstance.Counters[1].Value = 0;  \n            typingCsInstance.Counters[2].Value = 0;  \n            typingCsInstance.Counters[3].Value = 0;  \n            typingCsInstance.Counters[4].Value = 0;  \n            typingCsInstance.Counters[5].Value = 0;  \n            typingCsInstance.Counters[6].Value = 0;  \n\n        . . .  \n\n        private void Form1_FormClosing(object sender, FormClosingEventArgs e)  \n        {  \n            typingCounterSet.Dispose();  \n        }  \n\n        // Simple effort to capture letter A key press and words typed.  \n        private void textInput_KeyDown(object sender, KeyEventArgs e)  \n        {  \n            Keys keyData = e.KeyData;  \n\n            switch (e.KeyData)  \n            {  \n                case Keys.A :  \n                    // In the .NET 3.5 Framework, you had to use the  \n                    // Value property to set and increment the counter   \n                    // value. Beginning with the .NET 4.0 Framework,   \n                    // the Value property is safe to use in a multi-  \n                    // threaded application.  \n                    typingCsInstance.Counters[&quot;A Key Pressed&quot;].Value++;  \n                    numberOfLetterAInWord++;  \n\n                    break;  \n\n                case Keys.Enter:  \n                case Keys.Space:  \n                case Keys.Tab:  \n\n                    if (numberOfLetterAInWord &gt; 0)  \n                    {  \n                        // Beginning with the .NET 4.0 Framework, you   \n                        // can use the Increment method to increment   \n                        // the counter value by 1. The Increment method   \n                        // is safe to use in a multi-threaded   \n                        // application.  \n                        typingCsInstance.Counters[&quot;Words Containing A&quot;].Increment();  \n                        typingCsInstance.Counters[&quot;Percent of Words Containg A&quot;].Increment();  \n                        numberOfLetterAInWord = 0;  \n                    }  \n\n                    typingCsInstance.Counters[&quot;Percent Base&quot;].Increment();  \n                    typingCsInstance.Counters[&quot;Total Word Count&quot;].Increment();  \n                    typingCsInstance.Counters[&quot;Words Typed In Interval&quot;].Increment();  \n\n                    break;  \n            }  \n        }  \n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The classes in this namespace support the new architecture (version 2.0) for performance counters that was introduced in Windows Vista. In the new architecture, the provider no longer responds to consumer requests directly, but instead simply maintains the counter data. The system injects a thread into the provider&#39;s process when the provider creates an instance of the counter set; the thread is responsible for handling consumer requests.  </p>\n<p> The following steps show the process for writing a counters provider.  </p>\n<ol>\n<li><p>The counters that the provider provides is defined in an XML-based manifest. The counters are logically grouped into counter sets. The counters within a counter set are identified by a numeric identifier that is unique within the counter set. A provider can define one or more counter sets. A counter set is identified by a Guid that is unique to a provider. Note that if you use these classes to write your provider:  </p>\n<ul>\n<li><p>The callback attribute of the provider element is ignored.  </p>\n</li>\n<li><p>The reference value for the name attribute of the counterAttribute element is ignored.  </p>\n</li>\n</ul>\n<p> For details on writing the manifest, see <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/aa373092(v=vs.85).aspx\" data-linktype=\"external\">Performance Counters Schema</a>.  </p>\n</li>\n<li><p>After writing your manifest, use the <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/aa372128(v=vs.85).aspx\" data-linktype=\"external\">CTRPP</a> tool to compile the manifest (ctrpp provider.man). The tool generates four files: .h, .c, .rc, and <em>_r.h. You can ignore the .h and .c files. The .rc file contains the localized strings defined in your manifest. You use the .rc and \\</em>_r.h files to create the compiled resource file (.res) that you include in your project. The following call shows how to compile the resource file:  </p>\n<pre><code>rc /r /i &quot;c:\\Program Files\\Microsoft SDKs\\Windows\\v6.0\\Include&quot; provider.rc  \n</code></pre><p> If you get an error that references sal.h, copy the sal.h file from your Microsoft Visual Studio, Visual C include directory to the directory you specify for the /i switch.  </p>\n<p> Add a path to the compiled resource file (.res) to your project&#39;s Application property page.  </p>\n</li>\n<li><p>Write your provider. The following steps show the calls made by a provider:  </p>\n<ol>\n<li><p>Call the <a class=\"xref\" href=\"system.diagnostics.performancedata.counterset#System_Diagnostics_PerformanceData_CounterSet__ctor_\" data-linktype=\"relative-path\">CounterSet</a> constructor to define the counter set. Call this method for each counter set defined in the manifest.  </p>\n</li>\n<li><p>For each counter set, call one of the <a class=\"xref\" href=\"system.diagnostics.performancedata.counterset#System_Diagnostics_PerformanceData_CounterSet_AddCounter_\" data-linktype=\"relative-path\">AddCounter</a> methods to add the counters to the set. Call this method for each counter defined in the counter set.  </p>\n</li>\n<li><p>Call the <a class=\"xref\" href=\"system.diagnostics.performancedata.counterset#System_Diagnostics_PerformanceData_CounterSet_CreateCounterSetInstance_\" data-linktype=\"relative-path\">CreateCounterSetInstance</a> method to create an instance of the counter set (an instance contains the counter data). For single instance counter sets, call this method one time. For multiple instance counter sets, call this method for each instance for which you need to provide counter data (use a unique name for each instance).  </p>\n</li>\n<li><p>Use the <a class=\"xref\" href=\"system.diagnostics.performancedata.countersetinstance#System_Diagnostics_PerformanceData_CounterSetInstance_Counters_\" data-linktype=\"relative-path\">Counters</a> property to access and set the counter data for the counter.  </p>\n</li>\n</ol>\n</li>\n<li><p>After you finish your provider, use the LodCtr tool to register the counters on the computer. For example,  </p>\n<pre><code>lodctr /m:provider.man  \n</code></pre><p> The example assumes the manifest and executable file are in the current directory. For complete details on using the LodCtr, see <a href=\"Http://Go.Microsoft.Com/FWLink/?LinkId=84000\" data-linktype=\"external\">Microsoft Technet</a>.  </p>\n</li>\n</ol>\n<p> You can use the classes in this namespace on computers that run the Windows Vista and later operating systems.</p>\n\r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Diagnostics.PerformanceData.yml\">\r\n<meta name=\"updated_at\" content=\"2017-03-29 05:54 AM\">\r\n<meta name=\"document_id\" content=\"b4caff4d-8be3-39c3-4caa-974d284a613f\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Use the classes in this namespace to provide counter data. The counters are used to expose performance metrics to consumers such as the Performance Monitor. The namespace does not contain classes for…\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.diagnostics.performancedata/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Diagnostics.PerformanceData\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Diagnostics.PerformanceData.yml","open_to_public_contributors":false,"f1_keywords":["System.Diagnostics.PerformanceData","System::Diagnostics::PerformanceData"],"dev_langs":["csharp"],"updated_at":"2017-03-29 05:54 AM","document_id":"b4caff4d-8be3-39c3-4caa-974d284a613f","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/ns-System.Diagnostics.PerformanceData.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"System.Diagnostics.PerformanceData namespace | Microsoft Docs","_op_ogTitle":"System.Diagnostics.PerformanceData namespace","description":"Use the classes in this namespace to provide counter data. The counters are used to expose performance metrics to consumers such as the Performance Monitor. The namespace does not contain classes for…","toc_asset_id":"api/_splitted/System.Diagnostics.PerformanceData/toc.json","toc_rel":"_splitted/System.Diagnostics.PerformanceData/toc.json","source_url":"","ms.assetid":"System.Diagnostics.PerformanceData","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.performancedata","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.performancedata","fileRelativePath":"api/System.Diagnostics.PerformanceData.html"},"themesRelativePathToOutputRoot":"_themes/"}