{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">LockCookie</span>\r\n      Struct\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Defines the lock that implements single-writer/multiple-reader semantics. This is a value type.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic struct LockCookie</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">System.ValueType</a></span></div><span class=\"lang-csharp\">LockCookie</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example shows how to request a reader lock, upgrade the reader lock to a writer lock, and save the LockCookie. It then uses the LockCookie to downgrade to a reader lock again.  </p>\n<p> This code is part of a larger example provided for the <a class=\"xref\" href=\"system.threading.readerwriterlock\" data-linktype=\"relative-path\">ReaderWriterLock</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Threading.ReaderWriterLock#2\">// The complete code is located in the ReaderWriterLock\n// class topic.\nusing namespace System;\nusing namespace System::Threading;\npublic ref class Test\n{\npublic:\n\n   // Declaring the ReaderWriterLock at the class level\n   // makes it visible to all threads.\n   static ReaderWriterLock^ rwl = gcnew ReaderWriterLock;\n\n   // For this example, the shared resource protected by the\n   // ReaderWriterLock is just an integer.\n   static int resource = 0;\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.ReaderWriterLock#2\">// The complete code is located in the ReaderWriterLock class topic.\nusing System;\nusing System.Threading;\n\npublic class Example\n{\n   static ReaderWriterLock rwl = new ReaderWriterLock();\n   // Define the shared resource protected by the ReaderWriterLock.\n   static int resource = 0;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.ReaderWriterLock#2\">&#39; The complete code is located in the ReaderWriterLock class topic.\nImports System.Threading\n\nPublic Module Example\n   Private rwl As New ReaderWriterLock()\n   &#39; Define the shared resource protected by the ReaderWriterLock.\n   Private resource As Integer = 0\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Threading.ReaderWriterLock#5\">   // Shows how to request a reader lock, upgrade the\n   // reader lock to the writer lock, and downgrade to a\n   // reader lock again.\n   static void UpgradeDowngrade( int timeOut )\n   {\n      try\n      {\n         rwl-&gt;AcquireReaderLock( timeOut );\n         try\n         {\n            \n            // It is safe for this thread to read from\n            // the shared resource.\n            Display( String::Format( &quot;reads resource value {0}&quot;, resource ) );\n            Interlocked::Increment( reads );\n            \n            // If it is necessary to write to the resource,\n            // you must either release the reader lock and \n            // then request the writer lock, or upgrade the\n            // reader lock. Note that upgrading the reader lock\n            // puts the thread in the write queue, behind any\n            // other threads that might be waiting for the \n            // writer lock.\n            try\n            {\n               LockCookie lc = rwl-&gt;UpgradeToWriterLock( timeOut );\n               try\n               {\n                  \n                  // It is safe for this thread to read or write\n                  // from the shared resource.\n                  resource = rnd-&gt;Next( 500 );\n                  Display( String::Format( &quot;writes resource value {0}&quot;, resource ) );\n                  Interlocked::Increment( writes );\n               }\n               finally\n               {\n                  \n                  // Ensure that the lock is released.\n                  rwl-&gt;DowngradeFromWriterLock( lc );\n               }\n\n            }\n            catch ( ApplicationException^ ) \n            {\n               \n               // The upgrade request timed out.\n               Interlocked::Increment( writerTimeouts );\n            }\n\n            \n            // When the lock has been downgraded, it is \n            // still safe to read from the resource.\n            Display( String::Format( &quot;reads resource value {0}&quot;, resource ) );\n            Interlocked::Increment( reads );\n         }\n         finally\n         {\n            \n            // Ensure that the lock is released.\n            rwl-&gt;ReleaseReaderLock();\n         }\n\n      }\n      catch ( ApplicationException^ ) \n      {\n         \n         // The reader lock request timed out.\n         Interlocked::Increment( readerTimeouts );\n      }\n\n   }\n\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.ReaderWriterLock#5\">   // Requests a reader lock, upgrades the reader lock to the writer\n   // lock, and downgrades it to a reader lock again.\n   static void UpgradeDowngrade(int timeOut)\n   {\n      try {\n         rwl.AcquireReaderLock(timeOut);\n         try {\n            // It&#39;s safe for this thread to read from the shared resource.\n            Display(&quot;reads resource value &quot; + resource);\n            Interlocked.Increment(ref reads);\n\n            // To write to the resource, either release the reader lock and\n            // request the writer lock, or upgrade the reader lock. Upgrading\n            // the reader lock puts the thread in the write queue, behind any\n            // other threads that might be waiting for the writer lock.\n            try {\n               LockCookie lc = rwl.UpgradeToWriterLock(timeOut);\n               try {\n                  // It&#39;s safe for this thread to read or write from the shared resource.\n                  resource = rnd.Next(500);\n                  Display(&quot;writes resource value &quot; + resource);\n                  Interlocked.Increment(ref writes);\n               }\n               finally {\n                  // Ensure that the lock is released.\n                  rwl.DowngradeFromWriterLock(ref lc);\n               }\n            }\n            catch (ApplicationException) {\n               // The upgrade request timed out.\n               Interlocked.Increment(ref writerTimeouts);\n            }\n\n            // If the lock was downgraded, it&#39;s still safe to read from the resource.\n            Display(&quot;reads resource value &quot; + resource);\n            Interlocked.Increment(ref reads);\n         }\n         finally {\n            // Ensure that the lock is released.\n            rwl.ReleaseReaderLock();\n         }\n      }\n      catch (ApplicationException) {\n         // The reader lock request timed out.\n         Interlocked.Increment(ref readerTimeouts);\n      }\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.ReaderWriterLock#5\">   &#39; Requests a reader lock, upgrades the reader lock to the writer\n   &#39; lock, and downgrades it to a reader lock again.\n   Sub UpgradeDowngrade(timeOut As Integer)\n      Try\n         rwl.AcquireReaderLock(timeOut)\n         Try\n            &#39; It&#39;s safe for this thread to read from the shared resource.\n            Display(&quot;reads resource value &quot; &amp; resource)\n            Interlocked.Increment(reads)\n            \n            &#39; To write to the resource, either release the reader lock and\n            &#39; request the writer lock, or upgrade the reader lock. Upgrading\n            &#39; the reader lock puts the thread in the write queue, behind any\n            &#39; other threads that might be waiting for the writer lock.\n            Try\n               Dim lc As LockCookie = rwl.UpgradeToWriterLock(timeOut)\n               Try\n                  &#39; It&#39;s safe for this thread to read or write from the shared resource.\n                  resource = rnd.Next(500)\n                  Display(&quot;writes resource value &quot; &amp; resource)\n                  Interlocked.Increment(writes)\n               Finally\n                  &#39; Ensure that the lock is released.\n                  rwl.DowngradeFromWriterLock(lc)\n               End Try\n            Catch ex As ApplicationException\n               &#39; The upgrade request timed out.\n               Interlocked.Increment(writerTimeouts)\n            End Try\n            \n            &#39; If the lock was downgraded, it&#39;s still safe to read from the resource.\n            Display(&quot;reads resource value &quot; &amp; resource)\n            Interlocked.Increment(reads)\n         Finally\n            &#39; Ensure that the lock is released.\n            rwl.ReleaseReaderLock()\n         End Try\n      Catch ex As ApplicationException\n         &#39; The reader lock request timed out.\n         Interlocked.Increment(readerTimeouts)\n      End Try\n   End Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Threading.ReaderWriterLock#7\">};\n\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.ReaderWriterLock#7\">}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.ReaderWriterLock#7\">End Module\n</code></pre>\r\n  \r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_LockCookie_Equals_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Equals(Object)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Indicates whether a specified object is a <a class=\"xref\" href=\"system.threading.lockcookie\" data-linktype=\"relative-path\">LockCookie</a> and is equal to the current instance.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override bool Equals (object obj);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>obj</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The object to compare to the current instance.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the value of <code>obj</code> is equal to the value of the current instance; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_LockCookie_Equals_System_Threading_LockCookie_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Equals(LockCookie)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Indicates whether the current instance is equal to the specified <a class=\"xref\" href=\"system.threading.lockcookie\" data-linktype=\"relative-path\">LockCookie</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool Equals (System.Threading.LockCookie obj);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>obj</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.lockcookie\" data-linktype=\"relative-path\">LockCookie</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.threading.lockcookie\" data-linktype=\"relative-path\">LockCookie</a> to compare to the current instance.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if <code>obj</code> is equal to the value of the current instance; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_LockCookie_GetHashCode\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetHashCode()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns the hash code for this instance.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override int GetHashCode ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A 32-bit signed integer hash code.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Operators\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_LockCookie_op_Equality_System_Threading_LockCookie_System_Threading_LockCookie_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_Equality(LockCookie,LockCookie)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Indicates whether two <a class=\"xref\" href=\"system.threading.lockcookie\" data-linktype=\"relative-path\">LockCookie</a> structures are equal.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool op_Equality (System.Threading.LockCookie a, System.Threading.LockCookie b);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>a</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.lockcookie\" data-linktype=\"relative-path\">LockCookie</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.threading.lockcookie\" data-linktype=\"relative-path\">LockCookie</a> to compare to <code>b</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>b</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.lockcookie\" data-linktype=\"relative-path\">LockCookie</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.threading.lockcookie\" data-linktype=\"relative-path\">LockCookie</a> to compare to <code>a</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if <code>a</code> is equal to <code>b</code>; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_LockCookie_op_Inequality_System_Threading_LockCookie_System_Threading_LockCookie_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_Inequality(LockCookie,LockCookie)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Indicates whether two <a class=\"xref\" href=\"system.threading.lockcookie\" data-linktype=\"relative-path\">LockCookie</a> structures are not equal.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool op_Inequality (System.Threading.LockCookie a, System.Threading.LockCookie b);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>a</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.lockcookie\" data-linktype=\"relative-path\">LockCookie</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.threading.lockcookie\" data-linktype=\"relative-path\">LockCookie</a> to compare to <code>b</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>b</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.lockcookie\" data-linktype=\"relative-path\">LockCookie</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.threading.lockcookie\" data-linktype=\"relative-path\">LockCookie</a> to compare to <code>a</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if <code>a</code> is not equal to <code>b</code>; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t  \r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Threading.LockCookie.yml\">\r\n<meta name=\"APIName\" content=\"System.Threading.LockCookie\">\r\n<meta name=\"APIName\" content=\"System.Threading.LockCookie.Equals\">\r\n<meta name=\"APIName\" content=\"System.Threading.LockCookie.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Threading.LockCookie.op_Equality\">\r\n<meta name=\"APIName\" content=\"System.Threading.LockCookie.op_op_Equality\">\r\n<meta name=\"APIName\" content=\"System.Threading.LockCookie.op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.Threading.LockCookie.op_op_Inequality\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-24 01:41 AM\">\r\n<meta name=\"document_id\" content=\"ecae06b1-72b7-2b9c-648c-735dcb47afe9\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Defines the lock that implements single-writer/multiple-reader semantics. This is a value type.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.threading/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Threading.LockCookie\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Threading.LockCookie.yml","open_to_public_contributors":false,"api_name":["System.Threading.LockCookie","System.Threading.LockCookie.Equals","System.Threading.LockCookie.GetHashCode","System.Threading.LockCookie.op_Equality","System.Threading.LockCookie.op_op_Equality","System.Threading.LockCookie.op_Inequality","System.Threading.LockCookie.op_op_Inequality"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Threading.LockCookie","System::Threading::LockCookie","System.Threading.LockCookie.Equals","System::Threading::LockCookie::Equals","System.Threading.LockCookie.GetHashCode","System::Threading::LockCookie::GetHashCode","System.Threading.LockCookie.op_Equality","System::Threading::LockCookie::op_Equality","System.Threading.LockCookie.op_Inequality","System::Threading::LockCookie::op_Inequality"],"dev_langs":["csharp"],"updated_at":"2017-03-24 01:41 AM","document_id":"ecae06b1-72b7-2b9c-648c-735dcb47afe9","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.Threading/LockCookie.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"LockCookie struct | Microsoft Docs","_op_ogTitle":"LockCookie struct","description":"Defines the lock that implements single-writer/multiple-reader semantics. This is a value type.\n","toc_asset_id":"api/_splitted/System.Threading/toc.json","toc_rel":"_splitted/System.Threading/toc.json","source_url":"","ms.assetid":"System.Threading.LockCookie","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.threading.lockcookie","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.threading.lockcookie","fileRelativePath":"api/System.Threading.LockCookie.html"},"themesRelativePathToOutputRoot":"_themes/"}