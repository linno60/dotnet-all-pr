{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">StringComparison</span>\r\n      Enum\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Specifies the culture, case, and sort rules to be used by certain overloads of the <span class=\"xref\">stem.String.Compare*</span> and <span class=\"xref\">stem.String.Equals*</span> methods.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\r\n  \t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic enum StringComparison</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a></span></div><span class=\"lang-csharp\">StringComparison</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Attributes</dt><dd>\r\n  \t\t<div class=\"cdlHolder\">\r\n  \t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example compares four sets of words by using each member of the StringComparison enumeration.  The comparisons use the conventions of the English (United States) and Sami, Nothern (Sweden) cultures. Note that the strings &quot;encyclop√¶dia&quot; and &quot;encyclopedia&quot; are considered equivalent in the en-US culture but not in the Sami, Northern (Sweden) culture.  </p>\n<pre><code class=\"lang-vb\" name=\"System.String.Equals#3\">Imports System.Globalization\nImports System.Threading\n\nModule Example\n   Public Sub Main()\n      Dim cultureNames() As String = { &quot;en-US&quot;, &quot;se-SE&quot; }\n      Dim strings1() As String = { &quot;case&quot;,  &quot;encyclop&#230;dia&quot;,  \n                                   &quot;encyclop&#230;dia&quot;, &quot;Arch&#230;ology&quot; }\n      Dim strings2() As String = { &quot;Case&quot;, &quot;encyclopaedia&quot;, \n                                   &quot;encyclopedia&quot; , &quot;ARCH&#198;OLOGY&quot; }\n      Dim comparisons() As StringComparison = CType([Enum].GetValues(GetType(StringComparison)),\n                                           StringComparison())\n      \n      For Each cultureName In cultureNames\n         Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(cultureName)\n         Console.WriteLine(&quot;Current Culture: {0}&quot;, CultureInfo.CurrentCulture.Name)\n         For ctr As Integer = 0 To strings1.GetUpperBound(0)\n            For Each comparison In comparisons\n               Console.WriteLine(&quot;   {0} = {1} ({2}): {3}&quot;, strings1(ctr),\n                                 strings2(ctr), comparison, \n                                 String.Equals(strings1(ctr), strings2(ctr), comparison))\n            Next\n            Console.WriteLine()         \n         Next\n         Console.WriteLine()\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    Current Culture: en-US\n&#39;       case = Case (CurrentCulture): False\n&#39;       case = Case (CurrentCultureIgnoreCase): True\n&#39;       case = Case (InvariantCulture): False\n&#39;       case = Case (InvariantCultureIgnoreCase): True\n&#39;       case = Case (Ordinal): False\n&#39;       case = Case (OrdinalIgnoreCase): True\n&#39;    \n&#39;       encyclop&#230;dia = encyclopaedia (CurrentCulture): True\n&#39;       encyclop&#230;dia = encyclopaedia (CurrentCultureIgnoreCase): True\n&#39;       encyclop&#230;dia = encyclopaedia (InvariantCulture): True\n&#39;       encyclop&#230;dia = encyclopaedia (InvariantCultureIgnoreCase): True\n&#39;       encyclop&#230;dia = encyclopaedia (Ordinal): False\n&#39;       encyclop&#230;dia = encyclopaedia (OrdinalIgnoreCase): False\n&#39;    \n&#39;       encyclop&#230;dia = encyclopedia (CurrentCulture): False\n&#39;       encyclop&#230;dia = encyclopedia (CurrentCultureIgnoreCase): False\n&#39;       encyclop&#230;dia = encyclopedia (InvariantCulture): False\n&#39;       encyclop&#230;dia = encyclopedia (InvariantCultureIgnoreCase): False\n&#39;       encyclop&#230;dia = encyclopedia (Ordinal): False\n&#39;       encyclop&#230;dia = encyclopedia (OrdinalIgnoreCase): False\n&#39;    \n&#39;       Arch&#230;ology = ARCH&#198;OLOGY (CurrentCulture): False\n&#39;       Arch&#230;ology = ARCH&#198;OLOGY (CurrentCultureIgnoreCase): True\n&#39;       Arch&#230;ology = ARCH&#198;OLOGY (InvariantCulture): False\n&#39;       Arch&#230;ology = ARCH&#198;OLOGY (InvariantCultureIgnoreCase): True\n&#39;       Arch&#230;ology = ARCH&#198;OLOGY (Ordinal): False\n&#39;       Arch&#230;ology = ARCH&#198;OLOGY (OrdinalIgnoreCase): True\n&#39;    \n&#39;    \n&#39;    Current Culture: se-SE\n&#39;       case = Case (CurrentCulture): False\n&#39;       case = Case (CurrentCultureIgnoreCase): True\n&#39;       case = Case (InvariantCulture): False\n&#39;       case = Case (InvariantCultureIgnoreCase): True\n&#39;       case = Case (Ordinal): False\n&#39;       case = Case (OrdinalIgnoreCase): True\n&#39;    \n&#39;       encyclop&#230;dia = encyclopaedia (CurrentCulture): False\n&#39;       encyclop&#230;dia = encyclopaedia (CurrentCultureIgnoreCase): False\n&#39;       encyclop&#230;dia = encyclopaedia (InvariantCulture): True\n&#39;       encyclop&#230;dia = encyclopaedia (InvariantCultureIgnoreCase): True\n&#39;       encyclop&#230;dia = encyclopaedia (Ordinal): False\n&#39;       encyclop&#230;dia = encyclopaedia (OrdinalIgnoreCase): False\n&#39;    \n&#39;       encyclop&#230;dia = encyclopedia (CurrentCulture): False\n&#39;       encyclop&#230;dia = encyclopedia (CurrentCultureIgnoreCase): False\n&#39;       encyclop&#230;dia = encyclopedia (InvariantCulture): False\n&#39;       encyclop&#230;dia = encyclopedia (InvariantCultureIgnoreCase): False\n&#39;       encyclop&#230;dia = encyclopedia (Ordinal): False\n&#39;       encyclop&#230;dia = encyclopedia (OrdinalIgnoreCase): False\n&#39;    \n&#39;       Arch&#230;ology = ARCH&#198;OLOGY (CurrentCulture): False\n&#39;       Arch&#230;ology = ARCH&#198;OLOGY (CurrentCultureIgnoreCase): True\n&#39;       Arch&#230;ology = ARCH&#198;OLOGY (InvariantCulture): False\n&#39;       Arch&#230;ology = ARCH&#198;OLOGY (InvariantCultureIgnoreCase): True\n&#39;       Arch&#230;ology = ARCH&#198;OLOGY (Ordinal): False\n&#39;       Arch&#230;ology = ARCH&#198;OLOGY (OrdinalIgnoreCase): True\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Equals#3\">using System;\nusing System.Globalization;\nusing System.Threading;\n\npublic class Example\n{\n   public static void Main()\n   {\n      String[] cultureNames = { &quot;en-US&quot;, &quot;se-SE&quot; };\n      String[] strings1 = { &quot;case&quot;,  &quot;encyclop&#230;dia&quot;,  \n                            &quot;encyclop&#230;dia&quot;, &quot;Arch&#230;ology&quot; };\n      String[] strings2 = { &quot;Case&quot;, &quot;encyclopaedia&quot;, \n                            &quot;encyclopedia&quot; , &quot;ARCH&#198;OLOGY&quot; };\n      StringComparison[] comparisons = (StringComparison[]) Enum.GetValues(typeof(StringComparison));\n      \n      foreach (var cultureName in cultureNames) {\n         Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(cultureName);\n         Console.WriteLine(&quot;Current Culture: {0}&quot;, CultureInfo.CurrentCulture.Name);\n         for (int ctr = 0; ctr &lt;= strings1.GetUpperBound(0); ctr++) {\n            foreach (var comparison in comparisons) \n               Console.WriteLine(&quot;   {0} = {1} ({2}): {3}&quot;, strings1[ctr],\n                                 strings2[ctr], comparison, \n                                 String.Equals(strings1[ctr], strings2[ctr], comparison));\n\n            Console.WriteLine();         \n         }\n         Console.WriteLine();\n      }\n   }\n}\n// The example displays the following output:\n//    Current Culture: en-US\n//       case = Case (CurrentCulture): False\n//       case = Case (CurrentCultureIgnoreCase): True\n//       case = Case (InvariantCulture): False\n//       case = Case (InvariantCultureIgnoreCase): True\n//       case = Case (Ordinal): False\n//       case = Case (OrdinalIgnoreCase): True\n//    \n//       encyclop&#230;dia = encyclopaedia (CurrentCulture): True\n//       encyclop&#230;dia = encyclopaedia (CurrentCultureIgnoreCase): True\n//       encyclop&#230;dia = encyclopaedia (InvariantCulture): True\n//       encyclop&#230;dia = encyclopaedia (InvariantCultureIgnoreCase): True\n//       encyclop&#230;dia = encyclopaedia (Ordinal): False\n//       encyclop&#230;dia = encyclopaedia (OrdinalIgnoreCase): False\n//    \n//       encyclop&#230;dia = encyclopedia (CurrentCulture): False\n//       encyclop&#230;dia = encyclopedia (CurrentCultureIgnoreCase): False\n//       encyclop&#230;dia = encyclopedia (InvariantCulture): False\n//       encyclop&#230;dia = encyclopedia (InvariantCultureIgnoreCase): False\n//       encyclop&#230;dia = encyclopedia (Ordinal): False\n//       encyclop&#230;dia = encyclopedia (OrdinalIgnoreCase): False\n//    \n//       Arch&#230;ology = ARCH&#198;OLOGY (CurrentCulture): False\n//       Arch&#230;ology = ARCH&#198;OLOGY (CurrentCultureIgnoreCase): True\n//       Arch&#230;ology = ARCH&#198;OLOGY (InvariantCulture): False\n//       Arch&#230;ology = ARCH&#198;OLOGY (InvariantCultureIgnoreCase): True\n//       Arch&#230;ology = ARCH&#198;OLOGY (Ordinal): False\n//       Arch&#230;ology = ARCH&#198;OLOGY (OrdinalIgnoreCase): True\n//    \n//    \n//    Current Culture: se-SE\n//       case = Case (CurrentCulture): False\n//       case = Case (CurrentCultureIgnoreCase): True\n//       case = Case (InvariantCulture): False\n//       case = Case (InvariantCultureIgnoreCase): True\n//       case = Case (Ordinal): False\n//       case = Case (OrdinalIgnoreCase): True\n//    \n//       encyclop&#230;dia = encyclopaedia (CurrentCulture): False\n//       encyclop&#230;dia = encyclopaedia (CurrentCultureIgnoreCase): False\n//       encyclop&#230;dia = encyclopaedia (InvariantCulture): True\n//       encyclop&#230;dia = encyclopaedia (InvariantCultureIgnoreCase): True\n//       encyclop&#230;dia = encyclopaedia (Ordinal): False\n//       encyclop&#230;dia = encyclopaedia (OrdinalIgnoreCase): False\n//    \n//       encyclop&#230;dia = encyclopedia (CurrentCulture): False\n//       encyclop&#230;dia = encyclopedia (CurrentCultureIgnoreCase): False\n//       encyclop&#230;dia = encyclopedia (InvariantCulture): False\n//       encyclop&#230;dia = encyclopedia (InvariantCultureIgnoreCase): False\n//       encyclop&#230;dia = encyclopedia (Ordinal): False\n//       encyclop&#230;dia = encyclopedia (OrdinalIgnoreCase): False\n//    \n//       Arch&#230;ology = ARCH&#198;OLOGY (CurrentCulture): False\n//       Arch&#230;ology = ARCH&#198;OLOGY (CurrentCultureIgnoreCase): True\n//       Arch&#230;ology = ARCH&#198;OLOGY (InvariantCulture): False\n//       Arch&#230;ology = ARCH&#198;OLOGY (InvariantCultureIgnoreCase): True\n//       Arch&#230;ology = ARCH&#198;OLOGY (Ordinal): False\n//       Arch&#230;ology = ARCH&#198;OLOGY (OrdinalIgnoreCase): True\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The StringComparison enumeration is used to specify whether a string comparison should use the current culture or the invariant culture, word or ordinal sort rules, and be case-sensitive or case-insensitive.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> When you call a string comparison method such as <a class=\"xref\" href=\"system.string#System_String_Compare_\" data-linktype=\"relative-path\">Compare</a>, <a class=\"xref\" href=\"system.string#System_String_Equals_\" data-linktype=\"relative-path\">Equals</a>, or <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a>, you should always call an overload that includes a parameter of type StringComparison so that you can specify the type of comparison that the method performs. For more information, see <a href=\"../topic/best%20practices%20for%20using%20strings%20in%20the%20.net%20framework\" data-linktype=\"relative-path\">Best Practices for Using Strings</a>.  </p>\n</div>\n<p> An operation that uses word sort rules performs a culture-sensitive comparison wherein certain nonalphanumeric Unicode characters might have special weights assigned to them. Using word sort rules and the conventions of a specific culture, the hyphen (&quot;-&quot;) might have a very small weight assigned to it so that &quot;coop&quot; and &quot;co-op&quot; appear next to each other in a sorted list.  </p>\n<p> An operation that uses ordinal sort rules performs a comparison based on the numeric value (Unicode code point) of each <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> in the string. An ordinal comparison is fast but culture-insensitive. When you use ordinal sort rules to sort strings that start with Unicode characters (U+), the string U+xxxx comes before the string U+yyyy if the value of xxxx is numerically less than yyyy.  </p>\n<p> For more information about comparisons, see the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">System.String</a> class remarks. For more information about culture, see the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">System.Globalization.CultureInfo</a> class remarks. For guidelines on when to use ordinal or culture-sensitive comparison rules or the rules of the invariant culture, see <a href=\"../topic/best%20practices%20for%20using%20strings%20in%20the%20.net%20framework\" data-linktype=\"relative-path\">Best Practices for Using Strings</a>.</p>\n\r\n  \r\n      \t<h2 class=\"accented\">Fields\r\n      </h2>\r\n      <table class=\"nameValue\">\r\n      \t<tr><td id=\"System_StringComparison_CurrentCulture\">\r\n      \t\t\t<span class=\"lang-csharp\">CurrentCulture</span>\r\n      \t</td>\r\n      \t<td><p>Compare strings using culture-sensitive sort rules and the current culture.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_StringComparison_CurrentCultureIgnoreCase\">\r\n      \t\t\t<span class=\"lang-csharp\">CurrentCultureIgnoreCase</span>\r\n      \t</td>\r\n      \t<td><p>Compare strings using culture-sensitive sort rules, the current culture, and ignoring the case of the strings being compared.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_StringComparison_InvariantCulture\">\r\n      \t\t\t<span class=\"lang-csharp\">InvariantCulture</span>\r\n      \t</td>\r\n      \t<td><p>Compare strings using culture-sensitive sort rules and the invariant culture.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_StringComparison_InvariantCultureIgnoreCase\">\r\n      \t\t\t<span class=\"lang-csharp\">InvariantCultureIgnoreCase</span>\r\n      \t</td>\r\n      \t<td><p>Compare strings using culture-sensitive sort rules, the invariant culture, and ignoring the case of the strings being compared.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_StringComparison_Ordinal\">\r\n      \t\t\t<span class=\"lang-csharp\">Ordinal</span>\r\n      \t</td>\r\n      \t<td><p>Compare strings using ordinal (binary) sort rules.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_StringComparison_OrdinalIgnoreCase\">\r\n      \t\t\t<span class=\"lang-csharp\">OrdinalIgnoreCase</span>\r\n      \t</td>\r\n      \t<td><p>Compare strings using ordinal (binary) sort rules and ignoring the case of the strings being compared.</p>\n</td>\r\n      \t</tr>\r\n      </table>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.StringComparison.yml\">\r\n<meta name=\"APIName\" content=\"System.StringComparison\">\r\n<meta name=\"APIName\" content=\"System.StringComparison.CurrentCulture\">\r\n<meta name=\"APIName\" content=\"System.StringComparison.CurrentCultureIgnoreCase\">\r\n<meta name=\"APIName\" content=\"System.StringComparison.InvariantCulture\">\r\n<meta name=\"APIName\" content=\"System.StringComparison.InvariantCultureIgnoreCase\">\r\n<meta name=\"APIName\" content=\"System.StringComparison.Ordinal\">\r\n<meta name=\"APIName\" content=\"System.StringComparison.OrdinalIgnoreCase\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 05:47 AM\">\r\n<meta name=\"document_id\" content=\"71c00d56-9f16-ec53-d11b-e4b75a5020df\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Specifies the culture, case, and sort rules to be used by certain overloads of the  and  methods.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.StringComparison\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.StringComparison.yml","open_to_public_contributors":false,"api_name":["System.StringComparison","System.StringComparison.CurrentCulture","System.StringComparison.CurrentCultureIgnoreCase","System.StringComparison.InvariantCulture","System.StringComparison.InvariantCultureIgnoreCase","System.StringComparison.Ordinal","System.StringComparison.OrdinalIgnoreCase"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.StringComparison","System::StringComparison","System.StringComparison.CurrentCulture","System::StringComparison::CurrentCulture","System.StringComparison.CurrentCultureIgnoreCase","System::StringComparison::CurrentCultureIgnoreCase","System.StringComparison.InvariantCulture","System::StringComparison::InvariantCulture","System.StringComparison.InvariantCultureIgnoreCase","System::StringComparison::InvariantCultureIgnoreCase","System.StringComparison.Ordinal","System::StringComparison::Ordinal","System.StringComparison.OrdinalIgnoreCase","System::StringComparison::OrdinalIgnoreCase"],"dev_langs":["csharp"],"updated_at":"2017-03-31 05:47 AM","document_id":"71c00d56-9f16-ec53-d11b-e4b75a5020df","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System/StringComparison.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"StringComparison enum | Microsoft Docs","_op_ogTitle":"StringComparison enum","description":"Specifies the culture, case, and sort rules to be used by certain overloads of the  and  methods.\n","toc_asset_id":"api/_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.StringComparison","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.stringcomparison","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.stringcomparison","fileRelativePath":"api/System.StringComparison.html"},"themesRelativePathToOutputRoot":"_themes/"}