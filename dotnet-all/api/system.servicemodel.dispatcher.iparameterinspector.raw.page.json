{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">IParameterInspector</span>\r\n      Interface\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Defines the contract implemented by custom parameter inspectors that enables inspection or modification of information prior to and subsequent to calls on either the client or the service.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public interface IParameterInspector</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example shows an IParameterInspector implementation that:  </p>\n<ul>\n<li><p>Writes the operation name and return value to the console after a response has been deserialized by the service or a request has been serialized by a client.  </p>\n</li>\n<li><p>Writes the operation name to the console after deserializing a response on the client or after a response has been serialized on the service.  </p>\n</li>\n</ul>\n<pre><code class=\"lang-vb\" name=\"Interceptors#4\">#Region &quot;IParameterInspector Members&quot;\n       Public Sub AfterCall(ByVal operationName As String, ByVal outputs() As Object, ByVal returnValue As Object, _\n                            ByVal correlationState As Object) Implements IParameterInspector.AfterCall\n           Console.WriteLine(&quot;IParameterInspector.AfterCall called for {0} with return value {1}.&quot;, _\n                             operationName, returnValue.ToString())\n       End Sub\n\n       Public Function BeforeCall(ByVal operationName As String, ByVal inputs() As Object) As Object Implements _\n       IParameterInspector.BeforeCall\n           Console.WriteLine(&quot;IParameterInspector.BeforeCall called for {0}.&quot;, operationName)\n           Return Nothing\n       End Function\n</code></pre><pre><code class=\"lang-cs\" name=\"Interceptors#4\">#region IParameterInspector Members\npublic void AfterCall(string operationName, object[] outputs, object returnValue, object correlationState)\n{\n  Console.WriteLine(\n    &quot;IParameterInspector.AfterCall called for {0} with return value {1}.&quot;, \n    operationName, \n    returnValue.ToString()\n  );\n}\n\npublic object BeforeCall(string operationName, object[] inputs)\n{\n  Console.WriteLine(&quot;IParameterInspector.BeforeCall called for {0}.&quot;, operationName);\n  return null;\n}\n</code></pre><p> The following code example shows how to use either <a class=\"xref\" href=\"system.servicemodel.description.ioperationbehavior\" data-linktype=\"relative-path\">System.ServiceModel.Description.IOperationBehavior</a>, <a class=\"xref\" href=\"system.servicemodel.description.iendpointbehavior\" data-linktype=\"relative-path\">System.ServiceModel.Description.IEndpointBehavior</a> or <a class=\"xref\" href=\"system.servicemodel.description.iservicebehavior\" data-linktype=\"relative-path\">System.ServiceModel.Description.IServiceBehavior</a> to insert IParameterInspector objects.  </p>\n<pre><code class=\"lang-vb\" name=\"Interceptors#5\">Imports System.ServiceModel\nImports System.ServiceModel.Channels\nImports System.ServiceModel.Configuration\nImports System.ServiceModel.Description\nImports System.ServiceModel.Dispatcher\nImports System.Text\n\nNamespace Microsoft.WCF.Documentation\n  Public Class InspectorInserter\n\t  Inherits BehaviorExtensionElement\n\t  Implements IServiceBehavior, IEndpointBehavior, IOperationBehavior\n\t#Region &quot;IServiceBehavior Members&quot;\n        Public Sub AddBindingParameters(ByVal serviceDescription As ServiceDescription, _\n                       ByVal serviceHostBase As ServiceHostBase, ByVal endpoints As  _\n                       System.Collections.ObjectModel.Collection(Of ServiceEndpoint), _\n                       ByVal bindingParameters As BindingParameterCollection) Implements IServiceBehavior.AddBindingParameters\n            Return\n        End Sub\n\n        Public Sub ApplyDispatchBehavior(ByVal serviceDescription As ServiceDescription, _\n                                         ByVal serviceHostBase As ServiceHostBase) Implements _\n                                         IServiceBehavior.ApplyDispatchBehavior\n            For Each chDisp As ChannelDispatcher In serviceHostBase.ChannelDispatchers\n                For Each epDisp As EndpointDispatcher In chDisp.Endpoints\n                    epDisp.DispatchRuntime.MessageInspectors.Add(New Inspector())\n                    For Each op As DispatchOperation In epDisp.DispatchRuntime.Operations\n                        op.ParameterInspectors.Add(New Inspector())\n                    Next op\n                Next epDisp\n            Next chDisp\n        End Sub\n\n        Public Sub Validate(ByVal serviceDescription As ServiceDescription, ByVal serviceHostBase As ServiceHostBase) _\n        Implements IServiceBehavior.Validate\n            Return\n        End Sub\n\n\t#End Region\n\t#Region &quot;IEndpointBehavior Members&quot;\n        Public Sub AddBindingParameters(ByVal endpoint As ServiceEndpoint, ByVal bindingParameters _\n                                        As BindingParameterCollection) Implements IEndpointBehavior.AddBindingParameters\n            Return\n        End Sub\n\n        Public Sub ApplyClientBehavior(ByVal endpoint As ServiceEndpoint, ByVal clientRuntime As ClientRuntime) _\n        Implements IEndpointBehavior.ApplyClientBehavior\n            clientRuntime.MessageInspectors.Add(New Inspector())\n            For Each op As ClientOperation In clientRuntime.Operations\n                op.ParameterInspectors.Add(New Inspector())\n            Next op\n        End Sub\n\n        Public Sub ApplyDispatchBehavior(ByVal endpoint As ServiceEndpoint, ByVal endpointDispatcher As  _\n                                         EndpointDispatcher) Implements IEndpointBehavior.ApplyDispatchBehavior\n            endpointDispatcher.DispatchRuntime.MessageInspectors.Add(New Inspector())\n            For Each op As DispatchOperation In endpointDispatcher.DispatchRuntime.Operations\n                op.ParameterInspectors.Add(New Inspector())\n            Next op\n        End Sub\n\n\tPublic Sub Validate(ByVal endpoint As ServiceEndpoint) Implements IEndpointBehavior.Validate\n\t\tReturn\n\tEnd Sub\n\t#End Region\n\t#Region &quot;IOperationBehavior Members&quot;\n        Public Sub AddBindingParameters(ByVal operationDescription As OperationDescription, _\n                                        ByVal bindingParameters As BindingParameterCollection) Implements _\n                                        IOperationBehavior.AddBindingParameters\n            Return\n        End Sub\n\n        Public Sub ApplyClientBehavior(ByVal operationDescription As OperationDescription, ByVal _\n                                       clientOperation As ClientOperation) Implements IOperationBehavior.ApplyClientBehavior\n            clientOperation.ParameterInspectors.Add(New Inspector())\n        End Sub\n\n        Public Sub ApplyDispatchBehavior(ByVal operationDescription As OperationDescription, ByVal dispatchOperation As  _\n                                         DispatchOperation) Implements IOperationBehavior.ApplyDispatchBehavior\n            dispatchOperation.ParameterInspectors.Add(New Inspector())\n        End Sub\n\n\tPublic Sub Validate(ByVal operationDescription As OperationDescription) Implements IOperationBehavior.Validate\n\t\tReturn\n\tEnd Sub\n\n\t#End Region\n\n\tPublic Overrides ReadOnly Property BehaviorType() As Type\n\t  Get\n\t\t  Return GetType(InspectorInserter)\n\t  End Get\n\tEnd Property\n\n\tProtected Overrides Function CreateBehavior() As Object\n\t\tReturn New InspectorInserter()\n\tEnd Function\n  End Class\nEnd Namespace\n</code></pre><pre><code class=\"lang-cs\" name=\"Interceptors#5\">using System;\nusing System.Collections.Generic;\nusing System.ServiceModel;\nusing System.ServiceModel.Channels;\nusing System.ServiceModel.Configuration;\nusing System.ServiceModel.Description;\nusing System.ServiceModel.Dispatcher;\nusing System.Text;\n\nnamespace Microsoft.WCF.Documentation\n{\n  public class InspectorInserter : BehaviorExtensionElement, IServiceBehavior, IEndpointBehavior, IOperationBehavior\n  {\n    #region IServiceBehavior Members\n    public void AddBindingParameters(\n      ServiceDescription serviceDescription, \n      ServiceHostBase serviceHostBase, \n      System.Collections.ObjectModel.Collection&lt;ServiceEndpoint&gt; endpoints, \n      BindingParameterCollection bindingParameters\n    )\n    { return; }\n\n    public void ApplyDispatchBehavior(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase)\n    {\n      foreach (ChannelDispatcher chDisp in serviceHostBase.ChannelDispatchers)\n      {\n        foreach (EndpointDispatcher epDisp in chDisp.Endpoints)\n        {\n          epDisp.DispatchRuntime.MessageInspectors.Add(new Inspector());\n          foreach (DispatchOperation op in epDisp.DispatchRuntime.Operations)\n            op.ParameterInspectors.Add(new Inspector());\n        }\n      }\n    }\n\n    public void Validate(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase){ return; }\n\n    #endregion\n    #region IEndpointBehavior Members\n    public void AddBindingParameters(\n      ServiceEndpoint endpoint, BindingParameterCollection bindingParameters\n    ) { return; }\n\n    public void ApplyClientBehavior(ServiceEndpoint endpoint, ClientRuntime clientRuntime)\n    {\n      clientRuntime.MessageInspectors.Add(new Inspector());\n      foreach (ClientOperation op in clientRuntime.Operations)\n        op.ParameterInspectors.Add(new Inspector());\n    }\n\n    public void ApplyDispatchBehavior(ServiceEndpoint endpoint, EndpointDispatcher endpointDispatcher)\n    {\n      endpointDispatcher.DispatchRuntime.MessageInspectors.Add(new Inspector());\n      foreach (DispatchOperation op in endpointDispatcher.DispatchRuntime.Operations)\n        op.ParameterInspectors.Add(new Inspector());\n    }\n\n    public void Validate(ServiceEndpoint endpoint){ return; }\n    #endregion\n    #region IOperationBehavior Members\n    public void AddBindingParameters(\n      OperationDescription operationDescription, BindingParameterCollection bindingParameters\n    )\n    { return; }\n\n    public void ApplyClientBehavior(OperationDescription operationDescription, ClientOperation clientOperation)\n    {\n      clientOperation.ParameterInspectors.Add(new Inspector());\n    }\n\n    public void ApplyDispatchBehavior(OperationDescription operationDescription, DispatchOperation dispatchOperation)\n    {\n      dispatchOperation.ParameterInspectors.Add(new Inspector());\n    }\n\n    public void Validate(OperationDescription operationDescription){ return; }\n\n    #endregion\n\n    public override Type BehaviorType\n    {\n      get { return typeof(InspectorInserter); }\n    }\n\n    protected override object CreateBehavior()\n    { return new InspectorInserter(); }\n  }\n}\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>Implement the IParameterInspector interface to create a custom parameter inspector that can view and modify the contents of a call both before the call and after the call in either client or service applications.  </p>\n<p> On outbound calls from a client, the inspector is invoked before the request contents are serialized and sent to the service. The inspector is also called after the response has been deserialized but before the return values have been dispatched to the proxy method.  </p>\n<p> On inbound calls to a service, the inspector is invoked after parameters are deserialized but before they are dispatched to the service operation.  </p>\n<p> Use the <a class=\"xref\" href=\"system.servicemodel.dispatcher.clientoperation#System_ServiceModel_Dispatcher_ClientOperation_ParameterInspectors_\" data-linktype=\"relative-path\">ParameterInspectors</a> or the <a class=\"xref\" href=\"system.servicemodel.dispatcher.dispatchoperation#System_ServiceModel_Dispatcher_DispatchOperation_ParameterInspectors_\" data-linktype=\"relative-path\">ParameterInspectors</a> properties to add an IParameterInspector implementation to the inspectors collection for a particular operation.  </p>\n<p> <strong>Note</strong> Developers and administrators must ensure that the interaction with other IParameterInspector implementations is understood.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ServiceModel_Dispatcher_IParameterInspector_AfterCall_System_String_System_Object___System_Object_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">AfterCall(String, Object[], Object, Object)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Called after client calls are returned and before service responses are sent.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void AfterCall (string operationName, object[] outputs, object returnValue, object correlationState);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>operationName</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The name of the invoked operation.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>outputs</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Any output objects.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>returnValue</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The return value of the operation.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>correlationState</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Any correlation state returned from the <span class=\"xref\">stem.ServiceModel.Dispatcher.IParameterInspector.BeforeCall*</span> method, or <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>On outbound calls from a client, the inspector is invoked before the request contents are serialized and sent to the service. The inspector is also called after the response has been deserialized but before the return values have been dispatched to the proxy method.  </p>\n<p> On inbound calls to a service, the inspector is invoked after parameters are deserialized but before they are dispatched to the service operation.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ServiceModel_Dispatcher_IParameterInspector_BeforeCall_System_String_System_Object___\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">BeforeCall(String, Object[])</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Called before client calls are sent and after service responses are returned.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public object BeforeCall (string operationName, object[] inputs);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>operationName</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The name of the operation.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>inputs</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The objects passed to the method by the client.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The correlation state that is returned as the <code>correlationState</code> parameter in <span class=\"xref\">stem.ServiceModel.Dispatcher.IParameterInspector.AfterCall*</span>. Return <code>null</code> if you do not intend to use correlation state.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>On outbound calls from a client, the inspector is invoked before the request contents are serialized and sent to the service. The inspector is also called after the response has been deserialized but before the return values have been dispatched to the proxy method.  </p>\n<p> On inbound calls to a service, the inspector is invoked after the request contents are deserialized and dispatched to the service operation and before the response contents are serialized and sent to the client.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.ServiceModel.Dispatcher.IParameterInspector.yml\">\r\n<meta name=\"APIName\" content=\"System.ServiceModel.Dispatcher.IParameterInspector\">\r\n<meta name=\"APIName\" content=\"System.ServiceModel.Dispatcher.IParameterInspector.AfterCall\">\r\n<meta name=\"APIName\" content=\"System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall\">\r\n<meta name=\"APILocation\" content=\"System.ServiceModel.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-29 05:54 AM\">\r\n<meta name=\"document_id\" content=\"406eadf1-3b3e-1432-c0d2-18a70b252e6f\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Defines the contract implemented by custom parameter inspectors that enables inspection or modification of information prior to and subsequent to calls on either the client or the service.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.servicemodel.dispatcher/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.ServiceModel.Dispatcher.IParameterInspector\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.ServiceModel.Dispatcher.IParameterInspector.yml","open_to_public_contributors":false,"api_name":["System.ServiceModel.Dispatcher.IParameterInspector","System.ServiceModel.Dispatcher.IParameterInspector.AfterCall","System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall"],"api_location":["System.ServiceModel.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.ServiceModel.Dispatcher.IParameterInspector","System::ServiceModel::Dispatcher::IParameterInspector","System.ServiceModel.Dispatcher.IParameterInspector.AfterCall","System::ServiceModel::Dispatcher::IParameterInspector::AfterCall","System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall","System::ServiceModel::Dispatcher::IParameterInspector::BeforeCall"],"dev_langs":["csharp"],"updated_at":"2017-03-29 05:54 AM","document_id":"406eadf1-3b3e-1432-c0d2-18a70b252e6f","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.ServiceModel.Dispatcher/IParameterInspector.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IParameterInspector interface | Microsoft Docs","_op_ogTitle":"IParameterInspector interface","description":"Defines the contract implemented by custom parameter inspectors that enables inspection or modification of information prior to and subsequent to calls on either the client or the service.\n","toc_asset_id":"api/_splitted/System.ServiceModel.Dispatcher/toc.json","toc_rel":"_splitted/System.ServiceModel.Dispatcher/toc.json","source_url":"","ms.assetid":"System.ServiceModel.Dispatcher.IParameterInspector","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.servicemodel.dispatcher.iparameterinspector","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.servicemodel.dispatcher.iparameterinspector","fileRelativePath":"api/System.ServiceModel.Dispatcher.IParameterInspector.html"},"themesRelativePathToOutputRoot":"_themes/"}