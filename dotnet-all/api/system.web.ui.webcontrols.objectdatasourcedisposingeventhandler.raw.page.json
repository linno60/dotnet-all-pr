{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">ObjectDataSourceDisposingEventHandler</span>\r\n      Delegate\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the method that will handle the <a class=\"xref\" href=\"system.web.ui.webcontrols.objectdatasourceview#System_Web_UI_WebControls_ObjectDataSourceView_ObjectDisposing\" data-linktype=\"relative-path\">ObjectDisposing</a> event of the <a class=\"xref\" href=\"system.web.ui.webcontrols.objectdatasource\" data-linktype=\"relative-path\">ObjectDataSource</a> control.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public delegate void ObjectDataSourceDisposingEventHandler(object sender, ObjectDataSourceDisposingEventArgs e);</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">System.Delegate</a></span></div><span class=\"lang-csharp\">ObjectDataSourceDisposingEventHandler</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>This section contains two code examples. The first code example demonstrates how to use an <a class=\"xref\" href=\"system.web.ui.webcontrols.objectdatasource\" data-linktype=\"relative-path\">ObjectDataSource</a> control with a business object and a <a class=\"xref\" href=\"system.web.ui.webcontrols.gridview\" data-linktype=\"relative-path\">GridView</a> control to display information. The second code example provides an example middle-tier business object that the first code example uses.  </p>\n<p> The following code example demonstrates how to use an <a class=\"xref\" href=\"system.web.ui.webcontrols.objectdatasource\" data-linktype=\"relative-path\">ObjectDataSource</a> control with a business object and a <a class=\"xref\" href=\"system.web.ui.webcontrols.gridview\" data-linktype=\"relative-path\">GridView</a> control to display information. You might work with a business object that is very expensive (in terms of time or resources) to create for every data operation that your Web page performs. One way to work with an expensive object might be to create an instance of it once, and then cache it for subsequent operations instead of creating and destroying it for every data operation. This example demonstrates this pattern. You can handle the <a class=\"xref\" href=\"system.web.ui.webcontrols.objectdatasource#System_Web_UI_WebControls_ObjectDataSource_ObjectCreating\" data-linktype=\"relative-path\">ObjectCreating</a> event to check the cache first for an object, and then create an instance, only if one is not already cached. Then, handle the  <a class=\"xref\" href=\"system.web.ui.webcontrols.objectdatasource#System_Web_UI_WebControls_ObjectDataSource_ObjectDisposing\" data-linktype=\"relative-path\">ObjectDisposing</a> event to cache the business object for future use, instead of destroying it. In this example, the <a class=\"xref\" href=\"system.componentmodel.canceleventargs#System_ComponentModel_CancelEventArgs_Cancel\" data-linktype=\"relative-path\">System.ComponentModel.CancelEventArgs.Cancel</a> property of the <a class=\"xref\" href=\"system.web.ui.webcontrols.objectdatasourcedisposingeventargs\" data-linktype=\"relative-path\">ObjectDataSourceDisposingEventArgs</a> class is set to <code>true</code>, to direct the <a class=\"xref\" href=\"system.web.ui.webcontrols.objectdatasource\" data-linktype=\"relative-path\">ObjectDataSource</a> to not call <a class=\"xref\" href=\"system.idisposable#System_IDisposable_Dispose_\" data-linktype=\"relative-path\">Dispose</a> on the instance.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Web.UI.WebControls.ObjectDataSource_16#1\">&lt;%@ Import namespace=&quot;Samples.AspNet.CS&quot; %&gt;\n&lt;%@ Page language=&quot;c#&quot; %&gt;\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n// Instead of creating and destroying the business object each time, the \n// business object is cached in the ASP.NET Cache.\nprivate void GetEmployeeLogic(object sender, ObjectDataSourceEventArgs e)\n{\n    // First check to see if an instance of this object already exists in the Cache.\n    EmployeeLogic cachedLogic;\n    \n    cachedLogic = Cache[&quot;ExpensiveEmployeeLogicObject&quot;] as EmployeeLogic;\n    \n    if (null == cachedLogic) {\n            cachedLogic = new EmployeeLogic();            \n    }\n        \n    e.ObjectInstance = cachedLogic;     \n}\n\nprivate void ReturnEmployeeLogic(object sender, ObjectDataSourceDisposingEventArgs e)\n{    \n    // Get the instance of the business object that the ObjectDataSource is working with.\n    EmployeeLogic cachedLogic = e.ObjectInstance as EmployeeLogic;        \n    \n    // Test to determine whether the object already exists in the cache.\n    EmployeeLogic temp = Cache[&quot;ExpensiveEmployeeLogicObject&quot;] as EmployeeLogic;\n    \n    if (null == temp) {\n        // If it does not yet exist in the Cache, add it.\n        Cache.Insert(&quot;ExpensiveEmployeeLogicObject&quot;, cachedLogic);\n    }\n    \n    // Cancel the event, so that the object will \n    // not be Disposed if it implements IDisposable.\n    e.Cancel = true;\n}\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head&gt;\n    &lt;title&gt;ObjectDataSource - C# Example&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;form id=&quot;Form1&quot; method=&quot;post&quot; runat=&quot;server&quot;&gt;\n\n        &lt;asp:gridview\n          id=&quot;GridView1&quot;\n          runat=&quot;server&quot;          \n          datasourceid=&quot;ObjectDataSource1&quot;&gt;\n        &lt;/asp:gridview&gt;\n\n        &lt;asp:objectdatasource \n          id=&quot;ObjectDataSource1&quot;\n          runat=&quot;server&quot;          \n          selectmethod=&quot;GetCreateTime&quot;          \n          typename=&quot;Samples.AspNet.CS.EmployeeLogic&quot;\n          onobjectcreating=&quot;GetEmployeeLogic&quot;\n          onobjectdisposing=&quot;ReturnEmployeeLogic&quot; &gt;\n        &lt;/asp:objectdatasource&gt;        \n\n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Web.UI.WebControls.ObjectDataSource_16#1\">&lt;%@ Import namespace=&quot;Samples.AspNet.VB&quot; %&gt;\n&lt;%@ Page language=&quot;vb&quot; %&gt;\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n&#39; Instead of creating and destroying the business object each time, the \n&#39; business object is cached in the ASP.NET Cache.\nSub GetEmployeeLogic(sender As Object, e As ObjectDataSourceEventArgs)\n\n    &#39; First check to see if an instance of this object already exists in the Cache.\n    Dim cachedLogic As EmployeeLogic \n    \n    cachedLogic = CType( Cache(&quot;ExpensiveEmployeeLogicObject&quot;), EmployeeLogic)\n    \n    If (cachedLogic Is Nothing) Then\n            cachedLogic = New EmployeeLogic            \n    End If\n        \n    e.ObjectInstance = cachedLogic\n    \nEnd Sub &#39; GetEmployeeLogic\n\nSub ReturnEmployeeLogic(sender As Object, e As ObjectDataSourceDisposingEventArgs)\n    \n    &#39; Get the instance of the business object that the ObjectDataSource is working with.\n    Dim cachedLogic  As EmployeeLogic  \n    cachedLogic = CType( e.ObjectInstance, EmployeeLogic)\n    \n    &#39; Test to determine whether the object already exists in the cache.\n    Dim temp As EmployeeLogic \n    temp = CType( Cache(&quot;ExpensiveEmployeeLogicObject&quot;), EmployeeLogic)\n    \n    If (temp Is Nothing) Then\n        &#39; If it does not yet exist in the Cache, add it.\n        Cache.Insert(&quot;ExpensiveEmployeeLogicObject&quot;, cachedLogic)\n    End If\n    \n    &#39; Cancel the event, so that the object will \n    &#39; not be Disposed if it implements IDisposable.\n    e.Cancel = True\nEnd Sub &#39; ReturnEmployeeLogic\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head&gt;\n    &lt;title&gt;ObjectDataSource - VB Example&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;form id=&quot;Form1&quot; method=&quot;post&quot; runat=&quot;server&quot;&gt;\n\n        &lt;asp:gridview\n          id=&quot;GridView1&quot;\n          runat=&quot;server&quot;          \n          datasourceid=&quot;ObjectDataSource1&quot;&gt;\n        &lt;/asp:gridview&gt;\n\n        &lt;asp:objectdatasource \n          id=&quot;ObjectDataSource1&quot;\n          runat=&quot;server&quot;          \n          selectmethod=&quot;GetCreateTime&quot;          \n          typename=&quot;Samples.AspNet.VB.EmployeeLogic&quot;\n          onobjectcreating=&quot;GetEmployeeLogic&quot;\n          onobjectdisposing=&quot;ReturnEmployeeLogic&quot; &gt;\n        &lt;/asp:objectdatasource&gt;        \n\n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p> The following code example provides an example middle-tier business object that the preceding code example uses. The code example consists of a basic business object, defined by the <code>EmployeeLogic</code> class, which is a class that maintains state and encapsulates business logic. For a complete working example, you must compile this code as a library, and then use these classes from an ASP page.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Web.UI.WebControls.ObjectDataSource_16#2\">namespace Samples.AspNet.CS {\n\nusing System;\nusing System.Collections;\nusing System.Web.UI;\nusing System.Web.UI.WebControls;\n  //\n  // EmployeeLogic is a stateless business object that encapsulates\n  // the operations you can perform on a NorthwindEmployee object.\n  //\n  public class EmployeeLogic {\n\n    public EmployeeLogic () : this(DateTime.Now) {        \n    }\n    \n    public EmployeeLogic (DateTime creationTime) { \n        _creationTime = creationTime;\n    }\n\n    private DateTime _creationTime;\n    \n    // Returns a collection of NorthwindEmployee objects.\n    public ICollection GetCreateTime () {\n      ArrayList al = new ArrayList();\n      \n      // Returns creation time for this example.      \n      al.Add(&quot;The business object that you are using was created at &quot; + _creationTime);\n      \n      return al;\n    }\n  }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Web.UI.WebControls.ObjectDataSource_16#2\">Imports System\nImports System.Collections\nImports System.Web.UI\nImports System.Web.UI.WebControls\n\nNamespace Samples.AspNet.VB\n\n  Public Class EmployeeLogic\n    \n    \n    Public Sub New() \n        MyClass.New(DateTime.Now)\n    \n    End Sub &#39;New\n    \n    \n    Public Sub New(ByVal creationTime As DateTime) \n        _creationTime = creationTime\n    \n    End Sub &#39;New\n    \n    Private _creationTime As DateTime\n    \n    \n    &#39; Returns a collection of NorthwindEmployee objects.\n    Public Function GetCreateTime() As ICollection \n        Dim al As New ArrayList()\n        \n        &#39; Returns creation time for this example.      \n        al.Add(&quot;The business object that you are using was created at &quot; + _creationTime)\n        \n        Return al\n    \n    End Function &#39;GetCreateTime\n  End Class &#39;EmployeeLogic\nEnd Namespace &#39; Samples.AspNet.VB\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>When you create an ObjectDataSourceDisposingEventHandler delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event handler delegates, see <a href=\"http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67\" data-linktype=\"external\">NIB: Consuming Events</a>.</p>\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler.yml\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler..ctor\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-24 01:41 AM\">\r\n<meta name=\"document_id\" content=\"1885717a-50b8-510e-a246-2fb74cdae607\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the method that will handle the  event of the  control.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.web.ui.webcontrols/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler.yml","open_to_public_contributors":false,"api_name":["System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler","System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler..ctor","System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler.Invoke","System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler.BeginInvoke","System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler","System::Web::UI::WebControls::ObjectDataSourceDisposingEventHandler"],"dev_langs":["csharp"],"updated_at":"2017-03-24 01:41 AM","document_id":"1885717a-50b8-510e-a246-2fb74cdae607","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.WebControls/ObjectDataSourceDisposingEventHandler.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ObjectDataSourceDisposingEventHandler delegate | Microsoft Docs","_op_ogTitle":"ObjectDataSourceDisposingEventHandler delegate","description":"Represents the method that will handle the  event of the  control.\n","toc_asset_id":"api/_splitted/System.Web.UI.WebControls/toc.json","toc_rel":"_splitted/System.Web.UI.WebControls/toc.json","source_url":"","ms.assetid":"System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.webcontrols.objectdatasourcedisposingeventhandler","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.webcontrols.objectdatasourcedisposingeventhandler","fileRelativePath":"api/System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler.html"},"themesRelativePathToOutputRoot":"_themes/"}