{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">ITypeDescriptorFilterService</span>\r\n      Interface\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Provides an interface to modify the set of member descriptors for a component in design mode.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public interface ITypeDescriptorFilterService</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example demonstrates a designer that uses the ITypeDescriptorFilterService to filter the attributes collection of any new or existing <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> to add a designer attribute for a new designer before loading or reloading the designer for the button.  </p>\n<p> To use the example, add the code to a Windows Forms project and load the components from the class library into the Toolbox.  </p>\n<p> Also see <a href=\"http://msdn.microsoft.com/library/fw694kde(v=vs.110).aspx\" data-linktype=\"external\">Walkthrough: Automatically Populating the Toolbox with Custom Components</a>.  </p>\n<p> Add some buttons to your form. Add a <code>ButtonDesignerFilterComponent</code> to your form, and it will appear in the component tray. The <code>ButtonDesignerFilterComponent</code> will add a <code>ButtonDesignerFilterService</code>, which implements ITypeDescriptorFilterService, as a design mode service provider. Existing or new <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> objects on the form will begin color cycling after the <code>ButtonDesignerFilterService</code> replaces the designer for each existing and new button with a <code>ColorCycleButtonDesigner</code>. The buttons will color cycle when you move the mouse pointer over them, and alternately continue cycling or reset the background and foreground colors on <code>MouseLeave</code> events. New <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> objects will be given the <code>ColorCycleButtonDesigner</code> through the <a class=\"xref\" href=\"system.componentmodel.design.itypedescriptorfilterservice#System_ComponentModel_Design_ITypeDescriptorFilterService_FilterAttributes_\" data-linktype=\"relative-path\">FilterAttributes</a> method of the <code>ButtonDesignerFilterService</code> that has been loaded, until the <code>ButtonDesignerFilterComponent</code> is disposed and replaces the original ITypeDescriptorFilterService. The <code>ColorCycleButton</code> class in this example is a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> associated with a <code>ColorCycleButtonDesigner</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"ITypeDescriptorFilterService#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.ComponentModel.Design;\nusing System.ComponentModel.Design.Serialization;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Timers;\nusing System.Windows.Forms;\nusing System.Windows.Forms.Design;\n\nnamespace ITypeDescriptorFilterSample\n{\t\n    // Component to host the ButtonDesignerFilterComponentDesigner that loads the \n    // ButtonDesignerFilterService ITypeDescriptorFilterService.\n    [Designer(typeof(ButtonDesignerFilterComponentDesigner))]\n    public class ButtonDesignerFilterComponent : System.ComponentModel.Component\n    {\t\t\n        public ButtonDesignerFilterComponent(System.ComponentModel.IContainer container)\n        {\n            container.Add(this);\n        }\n\n        public ButtonDesignerFilterComponent()\n        {}\n    }\n\n    // Provides a designer that can add a ColorCycleButtonDesigner to each \n    // button in a design time project using the ButtonDesignerFilterService \n    // ITypeDescriptorFilterService.\n    public class ButtonDesignerFilterComponentDesigner : System.ComponentModel.Design.ComponentDesigner\n    {\n        // Indicates whether the service has been loaded.\n        private bool serviceloaded = false;\t\t\n        // Stores any old ITypeDescriptorFilterService to restore later.\n        private ITypeDescriptorFilterService oldservice = null;\n        \n        public ButtonDesignerFilterComponentDesigner()\n        {}\n        \n        // Loads the new ITypeDescriptorFilterService and reloads the \n        // designers for each button.\n        public override void Initialize(System.ComponentModel.IComponent component)\n        {\n            base.Initialize(component);\n            \n            // Loads the custom service if it has not been loaded already\n            LoadService();\n            \n            // Build list of buttons from Container.Components.\n            ArrayList buttons = new ArrayList();\n            foreach(IComponent c in this.Component.Site.Container.Components)\n                if(c.GetType() == typeof(System.Windows.Forms.Button))\n                    buttons.Add((System.Windows.Forms.Button)c);\n            if(buttons.Count &gt; 0)\n            {\t\t\n                // Tests each Button for an existing \n                // ColorCycleButtonDesigner;\n                // if it has no designer of type \n                // ColorCycleButtonDesigner, adds a designer.\n                foreach(System.Windows.Forms.Button b in buttons)\n                {\n                    bool loaddesigner = true;\n                    // Gets the attributes for each button.\n                    AttributeCollection ac = TypeDescriptor.GetAttributes(b);\n                    for(int i=0; i&lt;ac.Count; i++)\n                    {\n                        // If designer attribute is not for a \n                        // ColorCycleButtonDesigner, adds a new \n                        // ColorCycleButtonDesigner.\n                        if( ac[i] is DesignerAttribute )\n                        {\n                            DesignerAttribute da = (DesignerAttribute)ac[i];\n                            if( da.DesignerTypeName.Substring(da.DesignerTypeName.LastIndexOf(&quot;.&quot;)+1) == &quot;ColorCycleButtonDesigner&quot; )\n                                loaddesigner = false;\n                        }\n                    }\n                    if(loaddesigner)\n                    {\n                        // Saves the button location so that it \n                        // can be repositioned.\n                        Point p = b.Location;\t\n                    \n                        // Gets an IMenuCommandService to cut and \n                        // paste control in order to register with \n                        // selection and movement interface after \n                        // designer is changed without reloading.\n                        IMenuCommandService imcs = (IMenuCommandService)this.GetService(typeof(IMenuCommandService));\n                        if( imcs == null )\n                            throw new Exception(&quot;Could not obtain IMenuCommandService interface.&quot;);\t\t\t\t\t\t\t\n                        // Gets an ISelectionService to select the \n                        // button so that it can be cut and pasted.\n                        ISelectionService iss = (ISelectionService)this.GetService(typeof(ISelectionService));\n                        if( iss == null)\n                            throw new Exception(&quot;Could not obtain ISelectionService interface.&quot;);\n                        iss.SetSelectedComponents(new IComponent[] { b }, SelectionTypes.Auto);\t\t\t\t\t\t\n                        // Invoke Cut and Paste.\n                        imcs.GlobalInvoke(StandardCommands.Cut);\n                        imcs.GlobalInvoke(StandardCommands.Paste);\t\t\t\t\t\t\t\n                        // Regains reference to button from \n                        // selection service.\n                        System.Windows.Forms.Button b2 = (System.Windows.Forms.Button)iss.PrimarySelection;\n                        iss.SetSelectedComponents(null);\t\t\t\t\t\t\t\n                        // Refreshes TypeDescriptor properties of \n                        // button to load new attributes from\n                        // ButtonDesignerFilterService.\n                        TypeDescriptor.Refresh(b2);\t\t\t\t\t\t\t\n                        b2.Location = p;\n                        b2.Focus();\n                    }\n                }\n            }\n        }\n\n        // Loads a ButtonDesignerFilterService ITypeDescriptorFilterService \n        // to add ColorCycleButtonDesigner designers to each button.\n        private void LoadService()\n        {\n            // If no custom ITypeDescriptorFilterService is loaded, \n            // loads it now.\n            if(!serviceloaded)\n            {\n                // Stores the current ITypeDescriptorFilterService \n                // to restore later.\n                ITypeDescriptorFilterService tdfs = (ITypeDescriptorFilterService)this.Component.Site.GetService(typeof(ITypeDescriptorFilterService));\n                if( tdfs != null )\t\t\t\t\t\t\t\t\n                    oldservice = tdfs;\t\t\t\t\t\t\t\t\n                // Retrieves an IDesignerHost interface to use to \n                // remove and add services.\n                IDesignerHost dh = (IDesignerHost)this.Component.Site.GetService(typeof(IDesignerHost));\n                if( dh == null )\n                    throw new Exception(&quot;Could not obtain IDesignerHost interface.&quot;);\t\t\t\t\n                // Removes standard ITypeDescriptorFilterService.\n                dh.RemoveService(typeof(ITypeDescriptorFilterService));\n                // Adds new custom ITypeDescriptorFilterService.\n                dh.AddService(typeof(ITypeDescriptorFilterService), new ButtonDesignerFilterService());\t\t\t\t\n                serviceloaded = true;\n            }\n        }\n        \n        // Removes the custom service and reloads any stored, \n        // preexisting service.\n        private void RemoveService()\n        {\n            IDesignerHost dh = (IDesignerHost)this.GetService(typeof(IDesignerHost));\n            if( dh == null )\n                throw new Exception(&quot;Could not obtain IDesignerHost interface.&quot;);\n            dh.RemoveService(typeof(ITypeDescriptorFilterService));\n            if( oldservice != null )\n                dh.AddService(typeof(ITypeDescriptorFilterService), oldservice);\n            serviceloaded = false;\n        }\n\n        protected override void Dispose(bool disposing)\n        {\n            if(serviceloaded)\n                RemoveService();\n        }\n    }\n\n    // Provides a TypeDescriptorFilterService to add the \n    // ColorCycleButtonDesigner using a DesignerAttribute.\n    public class ButtonDesignerFilterService : System.ComponentModel.Design.ITypeDescriptorFilterService\n    {\n        public ITypeDescriptorFilterService oldService = null;\n\n        public ButtonDesignerFilterService()\n        {}\n\n        public ButtonDesignerFilterService(ITypeDescriptorFilterService oldService_)\n        {\n            // Stores any previous ITypeDescriptorFilterService to implement service chaining.\n            this.oldService = oldService_;\n        }\n\n        public bool FilterAttributes(System.ComponentModel.IComponent component, System.Collections.IDictionary attributes)\n        {\n            if(oldService != null)\n                oldService.FilterAttributes(component, attributes);\n            \n            // Creates a designer attribute to compare its TypeID with the TypeID of existing attributes of the component.\n            DesignerAttribute da = new DesignerAttribute(typeof(ColorCycleButtonDesigner));\n            // Adds the designer attribute if the attribute collection does not contain a DesignerAttribute of the same TypeID.\n            if(component is System.Windows.Forms.Button &amp;&amp; attributes.Contains(da.TypeId))\n                attributes[da.TypeId]=da;\n            return true;\n        }\n\n        public bool FilterEvents(System.ComponentModel.IComponent component, System.Collections.IDictionary events)\n        {\n            if(oldService != null)\n                oldService.FilterEvents(component, events);\n            return true;\n        }\n\n        public bool FilterProperties(System.ComponentModel.IComponent component, System.Collections.IDictionary properties)\n        {\n            if(oldService != null)\n                oldService.FilterProperties(component, properties);\n            return true;\n        }\n    }\n    \n    // Designer for a Button control which cycles the background color.\n    public class ColorCycleButtonDesigner : System.Windows.Forms.Design.ControlDesigner\n    {\n        private System.Windows.Forms.Timer timer1;\n        private Color initial_bcolor, initial_fcolor;\n        private int r, g, b;\n        private bool ru, gu, bu, continue_;\n\n        public ColorCycleButtonDesigner()\n        {\t\t\t\t\t\t\n            timer1 = new System.Windows.Forms.Timer();\n            timer1.Interval = 50;\n            timer1.Tick += new EventHandler(this.Elapsed);\n            ru = true;\n            gu = false;\n            bu = true;\t\t\t\n            continue_ = false;\n            timer1.Start();\n        }\n\n        private void Elapsed(object sender, EventArgs e)\n        {\n            this.Control.BackColor = Color.FromArgb(r%255, g%255, b%255);\n            this.Control.Refresh();\n\n            // Updates color.\t\t\n            if(ru)\n                r+=10;\n            else if(r&gt;10) \n                r-=10;\n            if(gu)\n                g+=10;\n            else if(g&gt;10)\n                g-=10;\n            if(bu)\n                b+=10;\n            else if(b&gt;10)\n                b-=10;\n\n            // Randomly switches direction of color component values.\n            Random rand = new Random();\n            for(int i=0; i&lt;4; i++)\t\t\t\n                switch(rand.Next(0, 2))\n                {\n                    case 0:\n                        if(ru)\n                            ru=false;\n                        else\n                            ru=true;\n                        break;\n                    case 1:\n                        if(gu)\n                            gu=false;\n                        else\n                            gu=true;\n                        break;\n                    case 2:\n                        if(bu)\n                            bu=false;\n                        else\n                            bu=true;\n                        break;\n                }\n\n            this.Control.ForeColor = Color.FromArgb((this.Control.BackColor.R+128)%255, (this.Control.BackColor.G+128)%255, (this.Control.BackColor.B+128)%255);\n        }\n\n        protected override void OnMouseEnter()\n        {\n            if(!timer1.Enabled)\n            {\n                initial_bcolor = this.Control.BackColor;\n                initial_fcolor = this.Control.ForeColor;\n                r = initial_bcolor.R;\n                g = initial_bcolor.G;\n                b = initial_bcolor.B;\t\t\t\n                timer1.Start();\n            }\n        }\n\n        protected override void OnMouseLeave()\n        {\n            if(!continue_)\n            {\n                continue_ = true;\n                timer1.Stop();\n            }\n            else\n                continue_ = false;\n            \n            this.Control.BackColor = initial_bcolor;\n            this.Control.ForeColor = initial_fcolor;\t\t\t\n        }\n\n        protected override void Dispose(bool disposing)\n        {\n            timer1.Stop();\n            this.Control.BackColor = initial_bcolor;\n            this.Control.ForeColor = initial_fcolor;\n            base.Dispose(disposing);\n        }\n    }\n\n    // System.Windows.Forms.Button associated with the ColorCycleButtonDesigner.\n    [Designer(typeof(ColorCycleButtonDesigner))]\n    public class ColorCycleButton : System.Windows.Forms.Button\n    {\n        public ColorCycleButton()\n        {}\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"ITypeDescriptorFilterService#1\">Imports System\nImports System.Collections\nImports System.ComponentModel\nImports System.ComponentModel.Design\nImports System.ComponentModel.Design.Serialization\nImports System.Drawing\nImports System.Reflection\nImports System.Timers\nImports System.Windows.Forms\nImports System.Windows.Forms.Design\n\nNamespace ITypeDescriptorFilterSample\n\n    &#39; Component to host the ButtonDesignerFilterComponentDesigner that loads the \n    &#39; ButtonDesignerFilterService ITypeDescriptorFilterService.\n    &lt;Designer(GetType(ButtonDesignerFilterComponentDesigner))&gt; _\n    Public Class ButtonDesignerFilterComponent\n        Inherits System.ComponentModel.Component\n\n        Public Sub New(ByVal container As System.ComponentModel.IContainer)\n            container.Add(Me)\n        End Sub &#39;New\n\n        Public Sub New()\n        End Sub &#39;New\n    End Class &#39;ButtonDesignerFilterComponent\n\n    &#39; Provides a designer that can add a ColorCycleButtonDesigner to each \n    &#39; button in a design time project using the ButtonDesignerFilterService \n    &#39; ITypeDescriptorFilterService.\n    Public Class ButtonDesignerFilterComponentDesigner\n        Inherits System.ComponentModel.Design.ComponentDesigner\n\n        &#39; Indicates whether the service has been loaded.\n        Private serviceloaded As Boolean = False\n        &#39; Stores any old ITypeDescriptorFilterService to restore later.\n        Private oldservice As ITypeDescriptorFilterService = Nothing\n\n        Public Sub New()\n        End Sub\n\n        &#39; Loads the new ITypeDescriptorFilterService and reloads the \n        &#39; designers for each Button.\n        Public Overrides Sub Initialize(ByVal component As System.ComponentModel.IComponent)\n\n            MyBase.Initialize(component)\n\n            &#39; Loads the custom service if it has not been loaded already.\n            LoadService()\n\n            &#39; Build list of buttons from Container.Components.\n            Dim buttons As New ArrayList()\n            Dim c As IComponent\n            For Each c In Me.Component.Site.Container.Components\n                If TypeOf c Is System.Windows.Forms.Button Then\n                    buttons.Add(CType(c, System.Windows.Forms.Button))\n                End If\n            Next c\n            If buttons.Count &gt; 0 Then\n                &#39; Tests each Button for an existing \n                &#39; ColorCycleButtonDesigner;\n\t\t&#39; if it has no designer of type \n                &#39; ColorCycleButtonDesigner, adds a designer.\n                Dim b As System.Windows.Forms.Button\n                For Each b In buttons\n                    Dim loaddesigner As Boolean = True\n                    &#39; Gets the attributes for each button.\n                    Dim ac As AttributeCollection = TypeDescriptor.GetAttributes(b)\n                    Dim i As Integer\n                    For i = 0 To ac.Count - 1\n                        &#39; If designer attribute is not for a \n                        &#39; ColorCycleButtonDesigner, adds a new \n                        &#39; ColorCycleButtonDesigner.\n                        If TypeOf ac(i) Is DesignerAttribute Then\n                            Dim da As DesignerAttribute = CType(ac(i), DesignerAttribute)\n                            If da.DesignerTypeName.Substring((da.DesignerTypeName.LastIndexOf(&quot;.&quot;) + 1)) = &quot;ColorCycleButtonDesigner&quot; Then\n                                loaddesigner = False\n                            End If\n                        End If\n                    Next i\n                    If loaddesigner Then\n                        &#39; Saves the button location so that it \n                        &#39; can be repositioned.\n                        Dim p As Point = b.Location\n\n                        &#39; Gets an IMenuCommandService to cut and \n                        &#39; paste control in order to register with \n                        &#39; selection and movement interface after \n                        &#39; designer is changed without reloading.\n                        Dim imcs As IMenuCommandService = CType(Me.GetService(GetType(IMenuCommandService)), IMenuCommandService)\n                        If imcs Is Nothing Then\n                            Throw New Exception(&quot;Could not obtain IMenuCommandService interface.&quot;)\n                        End If \n\n                        &#39; Gets an ISelectionService to select the \n                        &#39; button so that it can be cut and pasted.\n                        Dim iss As ISelectionService = CType(Me.GetService(GetType(ISelectionService)), ISelectionService)\n                        If iss Is Nothing Then\n                            Throw New Exception(&quot;Could not obtain ISelectionService interface.&quot;)\n                        End If\n                        iss.SetSelectedComponents(New IComponent() {b}, SelectionTypes.Auto)\n\n                        &#39; Invoke Cut and Paste.\n                        imcs.GlobalInvoke(StandardCommands.Cut)\n                        imcs.GlobalInvoke(StandardCommands.Paste)\n\n                        &#39; Regains reference to button from \n                        &#39; selection service.\n                        Dim b2 As System.Windows.Forms.Button = CType(iss.PrimarySelection, System.Windows.Forms.Button)\n                        iss.SetSelectedComponents(Nothing)\n\n                        &#39; Refreshes TypeDescriptor properties of \n                        &#39; button to load new attributes from \n                        &#39; ButtonDesignerFilterService.\n                        TypeDescriptor.Refresh(b2)\n                        b2.Location = p\n                        b2.Focus()\n                    End If\n                Next b\n            End If\n        End Sub \n\n        &#39; Loads a ButtonDesignerFilterService ITypeDescriptorFilterService \n        &#39; to add ColorCycleButtonDesigner designers to each button.\n        Private Sub LoadService()\n            &#39; If no custom ITypeDescriptorFilterService is loaded, \n            &#39; loads it now.\n            If Not serviceloaded Then\n                &#39; Stores the current ITypeDescriptorFilterService \n                &#39; to restore later.\n                Dim tdfs As ITypeDescriptorFilterService = CType(Me.Component.Site.GetService(GetType(ITypeDescriptorFilterService)), ITypeDescriptorFilterService)\n                If (tdfs IsNot Nothing) Then\n                    oldservice = tdfs\n                End If \n                \n                &#39; Retrieves an IDesignerHost interface to use to \n                &#39; remove and add services.\n                Dim dh As IDesignerHost = CType(Me.Component.Site.GetService(GetType(IDesignerHost)), IDesignerHost)\n                If dh Is Nothing Then\n                    Throw New Exception(&quot;Could not obtain IDesignerHost interface.&quot;)\n                End If \n\n                &#39; Removes the standard ITypeDescriptorFilterService.\n                dh.RemoveService(GetType(ITypeDescriptorFilterService))\n                &#39; Adds the new custom ITypeDescriptorFilterService.\n                dh.AddService(GetType(ITypeDescriptorFilterService), New ButtonDesignerFilterService())\n                serviceloaded = True\n            End If\n        End Sub\n\n        &#39; Removes the custom service and reloads any stored, \n        &#39; preexisting service.\n        Private Sub RemoveService()\n            Dim dh As IDesignerHost = CType(Me.GetService(GetType(IDesignerHost)), IDesignerHost)\n            If dh Is Nothing Then\n                Throw New Exception(&quot;Could not obtain IDesignerHost interface.&quot;)\n            End If\n            dh.RemoveService(GetType(ITypeDescriptorFilterService))\n            If (oldservice IsNot Nothing) Then\n                dh.AddService(GetType(ITypeDescriptorFilterService), oldservice)\n            End If\n            serviceloaded = False\n        End Sub\n\n        Protected Overloads Overrides Sub Dispose(ByVal disposing As Boolean)\n            If serviceloaded Then\n                RemoveService()\n            End If\n        End Sub\n\n    End Class\n\n    &#39; Provides a TypeDescriptorFilterService to add the \n    &#39; ColorCycleButtonDesigner using a DesignerAttribute.\n    Public Class ButtonDesignerFilterService\n        Implements System.ComponentModel.Design.ITypeDescriptorFilterService\n\n        Public oldService As ITypeDescriptorFilterService = Nothing\n\n        Public Sub New()\n        End Sub \n\n        Public Sub New(ByVal oldService_ As ITypeDescriptorFilterService)\n            &#39; Stores any previous ITypeDescriptorFilterService to implement service chaining.\n            Me.oldService = oldService_\n        End Sub \n\n        Public Function FilterAttributes(ByVal component As System.ComponentModel.IComponent, ByVal attributes As System.Collections.IDictionary) As Boolean Implements ITypeDescriptorFilterService.FilterAttributes\n            If (oldService IsNot Nothing) Then\n                oldService.FilterAttributes(component, attributes)\n            End If\n            &#39; Creates a designer attribute to compare its TypeID with the TypeID of existing attributes of the component.\n            Dim da As New DesignerAttribute(GetType(ColorCycleButtonDesigner))\n            &#39; Adds the designer attribute if the attribute collection does not contain a DesignerAttribute of the same TypeID.\n            If TypeOf component Is System.Windows.Forms.Button And attributes.Contains(da.TypeId) Then\n                attributes(da.TypeId) = da\n            End If\n            Return True\n        End Function \n\n        Public Function FilterEvents(ByVal component As System.ComponentModel.IComponent, ByVal events As System.Collections.IDictionary) As Boolean Implements ITypeDescriptorFilterService.FilterEvents\n            If (oldService IsNot Nothing) Then\n                oldService.FilterEvents(component, events)\n            End If\n            Return True\n        End Function \n\n        Public Function FilterProperties(ByVal component As System.ComponentModel.IComponent, ByVal properties As System.Collections.IDictionary) As Boolean Implements ITypeDescriptorFilterService.FilterProperties\n            If (oldService IsNot Nothing) Then\n                oldService.FilterProperties(component, properties)\n            End If\n            Return True\n        End Function \n\n    End Class   \n\n    &#39; Designer for a Button control which cycles the background color.\n    Public Class ColorCycleButtonDesigner\n        Inherits System.Windows.Forms.Design.ControlDesigner\n\n        Private timer1 As System.Windows.Forms.Timer\n        Private initial_bcolor, initial_fcolor As Color\n        Private r, g, b As Integer\n        Private ru, gu, bu, continue_ As Boolean\n\n        Public Sub New()\n            timer1 = New System.Windows.Forms.Timer()\n            timer1.Interval = 50\n            AddHandler timer1.Tick, AddressOf Me.Elapsed\n            ru = True\n            gu = False\n            bu = True\n            continue_ = False\n            timer1.Start()\n        End Sub \n\n        Private Sub Elapsed(ByVal sender As Object, ByVal e As EventArgs)\n            Me.Control.BackColor = Color.FromArgb(r Mod 255, g Mod 255, b Mod 255)\n            Me.Control.Refresh()\n\n            &#39; Updates color.\t\t\t\n            If ru Then\n                r += 10\n            Else\n                If r &gt; 10 Then\n                    r -= 10\n                End If\n            End If\n            If gu Then\n                g += 10\n            Else\n                If g &gt; 10 Then\n                    g -= 10\n                End If\n            End If\n            If bu Then\n                b += 10\n            Else\n                If b &gt; 10 Then\n                    b -= 10\n                End If\n            End If \n\n            &#39; Randomly switches direction of color component values.\n            Dim rand As New Random()\n            Dim i As Integer\n            For i = 0 To 3\n                Select Case rand.Next(0, 2)\n                    Case 0\n                        If ru Then\n                            ru = False\n                        Else\n                            ru = True\n                        End If\n                    Case 1\n                        If gu Then\n                            gu = False\n                        Else\n                            gu = True\n                        End If\n                    Case 2\n                        If bu Then\n                            bu = False\n                        Else\n                            bu = True\n                        End If\n                End Select\n            Next i\n            Me.Control.ForeColor = Color.FromArgb((Me.Control.BackColor.R + 128) Mod 255, (Me.Control.BackColor.G + 128) Mod 255, (Me.Control.BackColor.B + 128) Mod 255)\n        End Sub \n\n        Protected Overrides Sub OnMouseEnter()\n            If Not timer1.Enabled Then\n                initial_bcolor = Me.Control.BackColor\n                initial_fcolor = Me.Control.ForeColor\n                r = initial_bcolor.R\n                g = initial_bcolor.G\n                b = initial_bcolor.B\n                timer1.Start()\n            End If\n        End Sub \n\n        Protected Overrides Sub OnMouseLeave()\n            If Not continue_ Then\n                continue_ = True\n                timer1.Stop()\n            Else\n                continue_ = False\n            End If\n            Me.Control.BackColor = initial_bcolor\n            Me.Control.ForeColor = initial_fcolor\n        End Sub \n\n        Protected Overloads Overrides Sub Dispose(ByVal disposing As Boolean)\n            timer1.Stop()\n            Me.Control.BackColor = initial_bcolor\n            Me.Control.ForeColor = initial_fcolor\n            MyBase.Dispose(disposing)\n        End Sub \n\n    End Class \n\n    &#39; System.Windows.Forms.Button associated with the ColorCycleButtonDesigner.\n    &lt;Designer(GetType(ColorCycleButtonDesigner))&gt; _\n    Public Class ColorCycleButton\n        Inherits System.Windows.Forms.Button\n\n        Public Sub New()\n        End Sub \n    End Class \n\nEnd Namespace \n</code></pre><pre><code class=\"lang-cpp\" name=\"ITypeDescriptorFilterService#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.Design.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::ComponentModel::Design;\nusing namespace System::ComponentModel::Design::Serialization;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Timers;\nusing namespace System::Windows::Forms;\nusing namespace System::Windows::Forms::Design;\n\n// Designer for a Button control which cycles the background color.\npublic ref class ColorCycleButtonDesigner: public System::Windows::Forms::Design::ControlDesigner\n{\nprivate:\n   System::Windows::Forms::Timer^ timer1;\n   Color initial_bcolor;\n   Color initial_fcolor;\n   int r;\n   int g;\n   int b;\n   bool ru;\n   bool gu;\n   bool bu;\n   bool continue_;\n\npublic:\n   ColorCycleButtonDesigner()\n   {\n      timer1 = gcnew System::Windows::Forms::Timer;\n      timer1-&gt;Interval = 50;\n      timer1-&gt;Tick += gcnew EventHandler( this, &amp;ColorCycleButtonDesigner::Elapsed );\n      ru = true;\n      gu = false;\n      bu = true;\n      continue_ = false;\n      timer1-&gt;Start();\n   }\n\nprivate:\n   void Elapsed( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      this-&gt;Control-&gt;BackColor = Color::FromArgb( r % 255, g % 255, b % 255 );\n      this-&gt;Control-&gt;Refresh();\n      \n      // Updates color.\n      if ( ru )\n            r += 10;\n      else\n      if ( r &gt; 10 )\n            r -= 10;\n\n      if ( gu )\n            g += 10;\n      else\n      if ( g &gt; 10 )\n            g -= 10;\n\n      if ( bu )\n            b += 10;\n      else\n      if ( b &gt; 10 )\n            b -= 10;\n      \n      // Randomly switches direction of color component values.\n      Random^ rand = gcnew Random;\n      for ( int i = 0; i &lt; 4; i++ )\n         switch ( rand-&gt;Next( 0, 2 ) )\n         {\n            case 0:\n               if ( ru )\n                              ru = false;\n               else\n                              ru = true;\n\n               break;\n\n            case 1:\n               if ( gu )\n                              gu = false;\n               else\n                              gu = true;\n\n               break;\n\n            case 2:\n               if ( bu )\n                              bu = false;\n               else\n                              bu = true;\n\n               break;\n         }\n      this-&gt;Control-&gt;ForeColor = Color::FromArgb( (this-&gt;Control-&gt;BackColor.R + 128) % 255, (this-&gt;Control-&gt;BackColor.G + 128) % 255, (this-&gt;Control-&gt;BackColor.B + 128) % 255 );\n   }\n\nprotected:\n   virtual void OnMouseEnter() override\n   {\n      if (  !timer1-&gt;Enabled )\n      {\n         initial_bcolor = this-&gt;Control-&gt;BackColor;\n         initial_fcolor = this-&gt;Control-&gt;ForeColor;\n         r = initial_bcolor.R;\n         g = initial_bcolor.G;\n         b = initial_bcolor.B;\n         timer1-&gt;Start();\n      }\n   }\n\n   virtual void OnMouseLeave() override\n   {\n      if (  !continue_ )\n      {\n         continue_ = true;\n         timer1-&gt;Stop();\n      }\n      else\n            continue_ = false;\n\n      this-&gt;Control-&gt;BackColor = initial_bcolor;\n      this-&gt;Control-&gt;ForeColor = initial_fcolor;\n   }\n\npublic:\n   ~ColorCycleButtonDesigner()\n   {\n      timer1-&gt;Stop();\n      this-&gt;Control-&gt;BackColor = initial_bcolor;\n      this-&gt;Control-&gt;ForeColor = initial_fcolor;\n   }\n};\n\n// Provides a TypeDescriptorFilterService to add the\n// ColorCycleButtonDesigner using a DesignerAttribute.\npublic ref class ButtonDesignerFilterService: public System::ComponentModel::Design::ITypeDescriptorFilterService\n{\npublic:\n   ITypeDescriptorFilterService^ oldService;\n   ButtonDesignerFilterService(){}\n\n   ButtonDesignerFilterService( ITypeDescriptorFilterService^ oldService_ )\n   {\n      // Stores any previous ITypeDescriptorFilterService to implement service chaining.\n      this-&gt;oldService = oldService_;\n   }\n\n   virtual bool FilterAttributes( System::ComponentModel::IComponent^ component, System::Collections::IDictionary^ attributes )\n   {\n      if ( oldService != nullptr )\n            oldService-&gt;FilterAttributes( component, attributes );\n\n      // Creates a designer attribute to compare its TypeID with the TypeID of existing attributes of the component.\n      DesignerAttribute^ da = gcnew DesignerAttribute( ColorCycleButtonDesigner::typeid );\n      // Adds the designer attribute if the attribute collection does not contain a DesignerAttribute of the same TypeID.\n      if ( dynamic_cast&lt;System::Windows::Forms::Button^&gt;(component) &amp;&amp; attributes-&gt;Contains( da-&gt;TypeId ) )\n            attributes[ da-&gt;TypeId ] = da;\n\n      return true;\n   }\n\n   virtual bool FilterEvents( System::ComponentModel::IComponent^ component, System::Collections::IDictionary^ events )\n   {\n      if ( oldService != nullptr )\n            oldService-&gt;FilterEvents( component, events );\n\n      return true;\n   }\n\n   virtual bool FilterProperties( System::ComponentModel::IComponent^ component, System::Collections::IDictionary^ properties )\n   {\n      if ( oldService != nullptr )\n            oldService-&gt;FilterProperties( component, properties );\n\n      return true;\n   }\n};\n\n\n// System.Windows.Forms.Button associated with the ColorCycleButtonDesigner.\n\n[Designer(ColorCycleButtonDesigner::typeid)]\npublic ref class ColorCycleButton: public System::Windows::Forms::Button\n{\npublic:\n   ColorCycleButton(){}\n\n};\n\n\n// Provides a designer that can add a ColorCycleButtonDesigner to each\n// button in a design time project using the ButtonDesignerFilterService\n// ITypeDescriptorFilterService.\npublic ref class ButtonDesignerFilterComponentDesigner: public System::ComponentModel::Design::ComponentDesigner\n{\nprivate:\n\n   // Indicates whether the service has been loaded.\n   bool serviceloaded;\n\n   // Stores any old ITypeDescriptorFilterService to restore later.\n   ITypeDescriptorFilterService^ oldservice;\n\npublic:\n   ButtonDesignerFilterComponentDesigner()\n   {\n      serviceloaded = false;\n   }\n\n   // Loads the new ITypeDescriptorFilterService and reloads the\n   // designers for each button.\n   virtual void Initialize( System::ComponentModel::IComponent^ component ) override\n   {\n      ComponentDesigner::Initialize( component );\n\n      // Loads the custom service if it has not been loaded already\n      LoadService();\n\n      // Build list of buttons from Container.Components.\n      ArrayList^ buttons = gcnew ArrayList;\n      IEnumerator^ myEnum = this-&gt;Component-&gt;Site-&gt;Container-&gt;Components-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         IComponent^ c = safe_cast&lt;IComponent^&gt;(myEnum-&gt;Current);\n         if ( c-&gt;GetType() == System::Windows::Forms::Button::typeid )\n                  buttons-&gt;Add( dynamic_cast&lt;System::Windows::Forms::Button^&gt;(c) );\n      }\n\n      if ( buttons-&gt;Count &gt; 0 )\n      {\n         // Tests each Button for an existing\n         // ColorCycleButtonDesigner;\n         // if it has no designer of type\n         // ColorCycleButtonDesigner, adds a designer.\n         IEnumerator^ myEnum1 = buttons-&gt;GetEnumerator();\n         while ( myEnum1-&gt;MoveNext() )\n         {\n            Button^ b = safe_cast&lt;Button^&gt;(myEnum1-&gt;Current);\n            bool loaddesigner = true;\n\n            // Gets the attributes for each button.\n            AttributeCollection^ ac = TypeDescriptor::GetAttributes( b );\n            for ( int i = 0; i &lt; ac-&gt;Count; i++ )\n            {\n               // If designer attribute is not for a\n               // ColorCycleButtonDesigner, adds a new\n               // ColorCycleButtonDesigner.\n               if ( dynamic_cast&lt;DesignerAttribute^&gt;(ac[ i ]) )\n               {\n                  DesignerAttribute^ da = dynamic_cast&lt;DesignerAttribute^&gt;(ac[ i ]);\n                  if ( da-&gt;DesignerTypeName-&gt;Substring( da-&gt;DesignerTypeName-&gt;LastIndexOf( &quot;.&quot; ) + 1 )-&gt;Equals( &quot;ColorCycleButtonDesigner&quot; ) )\n                                    loaddesigner = false;\n               }\n            }\n            if ( loaddesigner )\n            {\n               // Saves the button location so that it\n               // can be repositioned.\n               Point p = b-&gt;Location;\n\n               // Gets an IMenuCommandService to cut and\n               // paste control in order to register with\n               // selection and movement interface after\n               // designer is changed without reloading.\n               IMenuCommandService^ imcs = dynamic_cast&lt;IMenuCommandService^&gt;(this-&gt;GetService( IMenuCommandService::typeid ));\n               if ( imcs == nullptr )\n                              throw gcnew Exception( &quot;Could not obtain IMenuCommandService interface.&quot; );\n\n               // Gets an ISelectionService to select the\n               // button so that it can be cut and pasted.\n               ISelectionService^ iss = dynamic_cast&lt;ISelectionService^&gt;(this-&gt;GetService( ISelectionService::typeid ));\n               if ( iss == nullptr )\n                              throw gcnew Exception( &quot;Could not obtain ISelectionService interface.&quot; );\n               array&lt;IComponent^&gt;^temp0 = {b};\n               iss-&gt;SetSelectedComponents( dynamic_cast&lt;ICollection^&gt;(temp0), SelectionTypes::Normal );\n\n               // Invoke Cut and Paste.\n               imcs-&gt;GlobalInvoke( StandardCommands::Cut );\n               imcs-&gt;GlobalInvoke( StandardCommands::Paste );\n\n               // Regains reference to button from\n               // selection service.\n               System::Windows::Forms::Button^ b2 = dynamic_cast&lt;System::Windows::Forms::Button^&gt;(iss-&gt;PrimarySelection);\n               iss-&gt;SetSelectedComponents( nullptr );\n\n               // Refreshes TypeDescriptor properties of\n               // button to load new attributes from\n               // ButtonDesignerFilterService.\n               TypeDescriptor::Refresh( b2 );\n               b2-&gt;Location = p;\n               b2-&gt;Focus();\n            }\n         }\n      }\n   }\n\n\nprivate:\n\n   // Loads a ButtonDesignerFilterService ITypeDescriptorFilterService\n   // to add ColorCycleButtonDesigner designers to each button.\n   void LoadService()\n   {\n      // If no custom ITypeDescriptorFilterService is loaded,\n      // loads it now.\n      if (  !serviceloaded )\n      {\n         // Stores the current ITypeDescriptorFilterService\n         // to restore later.\n         ITypeDescriptorFilterService^ tdfs = dynamic_cast&lt;ITypeDescriptorFilterService^&gt;(this-&gt;Component-&gt;Site-&gt;GetService( ITypeDescriptorFilterService::typeid ));\n         if ( tdfs != nullptr )\n                  oldservice = tdfs;\n\n         // Retrieves an IDesignerHost interface to use to\n         // remove and add services.\n         IDesignerHost^ dh = dynamic_cast&lt;IDesignerHost^&gt;(this-&gt;Component-&gt;Site-&gt;GetService( IDesignerHost::typeid ));\n         if ( dh == nullptr )\n                  throw gcnew Exception( &quot;Could not obtain IDesignerHost interface.&quot; );\n\n         // Removes standard ITypeDescriptorFilterService.\n         dh-&gt;RemoveService( ITypeDescriptorFilterService::typeid );\n\n         // Adds new custom ITypeDescriptorFilterService.\n         dh-&gt;AddService( ITypeDescriptorFilterService::typeid, gcnew ButtonDesignerFilterService );\n         serviceloaded = true;\n      }\n   }\n\n   // Removes the custom service and reloads any stored,\n   // preexisting service.\n   void RemoveService()\n   {\n      IDesignerHost^ dh = dynamic_cast&lt;IDesignerHost^&gt;(this-&gt;GetService( IDesignerHost::typeid ));\n      if ( dh == nullptr )\n            throw gcnew Exception( &quot;Could not obtain IDesignerHost interface.&quot; );\n\n      dh-&gt;RemoveService( ITypeDescriptorFilterService::typeid );\n      if ( oldservice != nullptr )\n            dh-&gt;AddService( ITypeDescriptorFilterService::typeid, oldservice );\n\n      serviceloaded = false;\n   }\n\npublic:\n   ~ButtonDesignerFilterComponentDesigner()\n   {\n      if ( serviceloaded )\n         RemoveService();\n   }\n};\n\n// Component to host the ButtonDesignerFilterComponentDesigner that loads the\n// ButtonDesignerFilterService ITypeDescriptorFilterService.\n\n[Designer(ButtonDesignerFilterComponentDesigner::typeid)]\npublic ref class ButtonDesignerFilterComponent: public System::ComponentModel::Component\n{\npublic:\n   ButtonDesignerFilterComponent( System::ComponentModel::IContainer^ container )\n   {\n      container-&gt;Add( this );\n   }\n\n   ButtonDesignerFilterComponent(){}\n};\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The ITypeDescriptorFilterService interface provides an interface that allows modification of the properties, events, and class-level attributes of a component at design time. This modification occurs through the set of descriptors that a component provides through a <a class=\"xref\" href=\"system.componentmodel.typedescriptor\" data-linktype=\"relative-path\">TypeDescriptor</a>. The type descriptor will query a component&#39;s site for the ITypeDescriptorFilterService service and, if it exists, the type descriptor will pass all metadata it has collected to this service. The service can then modify the metadata by adding, removing, and altering existing characteristics of the component.  </p>\n<p> For example, the properties of a component can be modified through a call to the <a class=\"xref\" href=\"system.componentmodel.design.itypedescriptorfilterservice#System_ComponentModel_Design_ITypeDescriptorFilterService_FilterProperties_\" data-linktype=\"relative-path\">FilterProperties</a> method. The filter service obtains a dictionary that contains property names and their property descriptors of type <a class=\"xref\" href=\"system.componentmodel.propertydescriptor\" data-linktype=\"relative-path\">PropertyDescriptor</a>. The modifications are implemented using the following logic.  </p>\n<table>\n<thead>\n<tr>\n<th>Modification</th>\n<th>Implementation</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Removal</td>\n<td>Delete the corresponding entry in the dictionary.</td>\n</tr>\n<tr>\n<td>Addition</td>\n<td>Add the appropriate entry to the dictionary.</td>\n</tr>\n<tr>\n<td>Alteration</td>\n<td>Call existing property descriptor methods, replace the associated property descriptor entry, or replace the entire property key/value pair in the dictionary.</td>\n</tr>\n</tbody>\n</table>\n<p> The return value of <a class=\"xref\" href=\"system.componentmodel.design.itypedescriptorfilterservice#System_ComponentModel_Design_ITypeDescriptorFilterService_FilterProperties_\" data-linktype=\"relative-path\">FilterProperties</a> determines if this set of properties is fixed. If this method returns <code>true</code>, the <a class=\"xref\" href=\"system.componentmodel.typedescriptor\" data-linktype=\"relative-path\">TypeDescriptor</a> for this component can cache the results. This cache is maintained until either the component is garbage collected or the <a class=\"xref\" href=\"system.componentmodel.typedescriptor#System_ComponentModel_TypeDescriptor_Refresh_\" data-linktype=\"relative-path\">Refresh</a> method of the type descriptor is called.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_ComponentModel_Design_ITypeDescriptorFilterService_FilterAttributes_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_Design_ITypeDescriptorFilterService_FilterAttributes_System_ComponentModel_IComponent_System_Collections_IDictionary_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FilterAttributes(IComponent, IDictionary)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Filters the attributes that a component exposes through a <a class=\"xref\" href=\"system.componentmodel.typedescriptor\" data-linktype=\"relative-path\">TypeDescriptor</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool FilterAttributes (System.ComponentModel.IComponent component, System.Collections.IDictionary attributes);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>component</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.icomponent\" data-linktype=\"relative-path\">IComponent</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The component to filter the attributes of.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>attributes</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A dictionary of attributes that can be modified.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the set of filtered attributes is to be cached; <code>false</code> if the filter service must query again.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method is called when a user requests a set of attributes for a component. The attributes are added to the dictionary with the attribute&#39;s <a class=\"xref\" href=\"system.attribute#System_Attribute_TypeId_\" data-linktype=\"relative-path\">TypeId</a> as the keys and the actual attribute as the value. Implementers of this service can add, remove, or alter existing attribute entries in the dictionary.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_ComponentModel_Design_ITypeDescriptorFilterService_FilterEvents_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_Design_ITypeDescriptorFilterService_FilterEvents_System_ComponentModel_IComponent_System_Collections_IDictionary_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FilterEvents(IComponent, IDictionary)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Filters the events that a component exposes through a <a class=\"xref\" href=\"system.componentmodel.typedescriptor\" data-linktype=\"relative-path\">TypeDescriptor</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool FilterEvents (System.ComponentModel.IComponent component, System.Collections.IDictionary events);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>component</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.icomponent\" data-linktype=\"relative-path\">IComponent</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The component to filter events for.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>events</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A dictionary of events that can be modified.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the set of filtered events is to be cached; <code>false</code> if the filter service must query again.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method is called when a user requests a set of events for a component. The events are added to the dictionary with the event names as the keys and the corresponding <a class=\"xref\" href=\"system.componentmodel.eventdescriptor\" data-linktype=\"relative-path\">EventDescriptor</a> objects as the values. Implementers of this service can add, remove, or alter event entries in the dictionary.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_ComponentModel_Design_ITypeDescriptorFilterService_FilterProperties_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_Design_ITypeDescriptorFilterService_FilterProperties_System_ComponentModel_IComponent_System_Collections_IDictionary_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FilterProperties(IComponent, IDictionary)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Filters the properties that a component exposes through a <a class=\"xref\" href=\"system.componentmodel.typedescriptor\" data-linktype=\"relative-path\">TypeDescriptor</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool FilterProperties (System.ComponentModel.IComponent component, System.Collections.IDictionary properties);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>component</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.icomponent\" data-linktype=\"relative-path\">IComponent</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The component to filter properties for.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>properties</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A dictionary of properties that can be modified.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the set of filtered properties is to be cached; <code>false</code> if the filter service must query again.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method is called when a user requests a set of properties for a component. The properties are added to the dictionary with the property names as the keys and the corresponding <a class=\"xref\" href=\"system.componentmodel.propertydescriptor\" data-linktype=\"relative-path\">PropertyDescriptor</a> objects as the values. Implementers of this service can add, remove, or alter property entries in the dictionary.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.ComponentModel.Design.ITypeDescriptorFilterService.yml\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.ITypeDescriptorFilterService\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.ITypeDescriptorFilterService.FilterAttributes\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.ITypeDescriptorFilterService.FilterEvents\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 05:47 AM\">\r\n<meta name=\"document_id\" content=\"ba5661a8-5f5b-4caa-4964-2bc2e77174a3\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides an interface to modify the set of member descriptors for a component in design mode.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.componentmodel.design/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.ComponentModel.Design.ITypeDescriptorFilterService\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.ComponentModel.Design.ITypeDescriptorFilterService.yml","open_to_public_contributors":false,"api_name":["System.ComponentModel.Design.ITypeDescriptorFilterService","System.ComponentModel.Design.ITypeDescriptorFilterService.FilterAttributes","System.ComponentModel.Design.ITypeDescriptorFilterService.FilterEvents","System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.ComponentModel.Design.ITypeDescriptorFilterService","System::ComponentModel::Design::ITypeDescriptorFilterService","System.ComponentModel.Design.ITypeDescriptorFilterService.FilterAttributes","System::ComponentModel::Design::ITypeDescriptorFilterService::FilterAttributes","System.ComponentModel.Design.ITypeDescriptorFilterService.FilterEvents","System::ComponentModel::Design::ITypeDescriptorFilterService::FilterEvents","System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties","System::ComponentModel::Design::ITypeDescriptorFilterService::FilterProperties"],"dev_langs":["csharp"],"updated_at":"2017-03-31 05:47 AM","document_id":"ba5661a8-5f5b-4caa-4964-2bc2e77174a3","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.ComponentModel.Design/ITypeDescriptorFilterService.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ITypeDescriptorFilterService interface | Microsoft Docs","_op_ogTitle":"ITypeDescriptorFilterService interface","description":"Provides an interface to modify the set of member descriptors for a component in design mode.\n","toc_asset_id":"api/_splitted/System.ComponentModel.Design/toc.json","toc_rel":"_splitted/System.ComponentModel.Design/toc.json","source_url":"","ms.assetid":"System.ComponentModel.Design.ITypeDescriptorFilterService","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.design.itypedescriptorfilterservice","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.design.itypedescriptorfilterservice","fileRelativePath":"api/System.ComponentModel.Design.ITypeDescriptorFilterService.html"},"themesRelativePathToOutputRoot":"_themes/"}