{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">PolicyUnitType</span>\r\n      Enum\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Specifies the unit of measurement of a <a class=\"xref\" href=\"system.io.log.policyunit\" data-linktype=\"relative-path\">PolicyUnit</a> instance.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\r\n  \t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public enum PolicyUnitType</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">System.Enum</a></span></div><span class=\"lang-csharp\">PolicyUnitType</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>This example shows how to use the <a class=\"xref\" href=\"system.io.log.logpolicy\" data-linktype=\"relative-path\">LogPolicy</a> class, <a class=\"xref\" href=\"system.io.log.policyunit\" data-linktype=\"relative-path\">PolicyUnit</a> structure and PolicyUnitType enumeration to set policy for a log record sequence.  </p>\n<pre><code class=\"lang-cs\" name=\"S_UELogRecordSequence#2\">            // SET LOG POLICY\n\n            LogPolicy policy = sequence.LogStore.Policy;\n\n            // Set AutoGrow policy. This enables the log to automatically grow\n            // when the existing extents are full. New extents are added until\n            // we reach the MaximumExtentCount extents.\n            // AutoGrow policy is supported only in Windows Vista and not available in R2.\n            \n            //policy.AutoGrow = true;\n\n            // Set the Growth Rate in terms of extents. This policy specifies\n            // &quot;how much&quot; the log should grow. \n            policy.GrowthRate = new PolicyUnit(2, PolicyUnitType.Extents);\n\n            // Set the AutoShrink policy. This enables the log to automatically\n            // shrink if the available free space exceeds the shrink percentage. \n            // AutoGrow/shrink policy is supported only in Windows Vista and not available in R2.\n            \n            //policy.AutoShrinkPercentage = new PolicyUnit(30, PolicyUnitType.Percentage);\n\n            // Set the PinnedTailThreshold policy.\n            // A tail pinned event is triggered when there is no\n            // log space available and log space may be freed by advancing the base.\n            // The user must handle the tail pinned event by advancing the base of the log. \n            // If the user is not able to move the base of the log, the user should report with exception in\n            // the tail pinned handler.\n            // PinnedTailThreashold policy dictates the amount of space that the TailPinned event requests \n            // for advancing the base of the log. The amount of space can be in percentage or in terms of bytes \n            // which is rounded off to the nearest containers in CLFS. The default is 35 percent.\n\n            \n            policy.PinnedTailThreshold = new PolicyUnit(10, PolicyUnitType.Percentage);\n\n            // Set the maximum extents the log can have.\n            policy.MaximumExtentCount = 6;\n            \n            // Set the minimum extents the log can have.\n            policy.MinimumExtentCount = 2;\n            \n            // Set the prefix for new containers that are added. \n            // when AutoGrow is enabled.\n            //policy.NewExtentPrefix = &quot;MyLogPrefix&quot;;\n            \n            // Set the suffix number for new containers that are added.\n            // when AutoGrow is enabled. \n            policy.NextExtentSuffix = 3;\n\n            // Commit the log policy.\n            policy.Commit();\n\n            // Refresh updates the IO.Log policy properties with current log policy \n            // set in the log. \n            policy.Refresh();\n\n            // LOG POLICY END\n            // \n</code></pre><pre><code class=\"lang-vb\" name=\"S_UELogRecordSequence#2\">\t\t\t&#39; SET LOG POLICY\n\n\t\t\tDim policy As LogPolicy = sequence.LogStore.Policy\n\n\t\t\t&#39; Set AutoGrow policy. This enables the log to automatically grow\n\t\t\t&#39; when the existing extents are full. New extents are added until\n\t\t\t&#39; we reach the MaximumExtentCount extents.\n\t\t\t&#39; AutoGrow policy is supported only in Windows Vista and not available in R2.\n\n\t\t\t&#39;policy.AutoGrow = true;\n\n\t\t\t&#39; Set the Growth Rate in terms of extents. This policy specifies\n\t\t\t&#39; &quot;how much&quot; the log should grow. \n\t\t\tpolicy.GrowthRate = New PolicyUnit(2, PolicyUnitType.Extents)\n\n\t\t\t&#39; Set the AutoShrink policy. This enables the log to automatically\n\t\t\t&#39; shrink if the available free space exceeds the shrink percentage. \n\t\t\t&#39; AutoGrow/shrink policy is supported only in Windows Vista and not available in R2.\n\n\t\t\t&#39;policy.AutoShrinkPercentage = new PolicyUnit(30, PolicyUnitType.Percentage);\n\n\t\t\t&#39; Set the PinnedTailThreshold policy.\n\t\t\t&#39; A tail pinned event is triggered when there is no\n\t\t\t&#39; log space available and log space may be freed by advancing the base.\n\t\t\t&#39; The user must handle the tail pinned event by advancing the base of the log. \n\t\t\t&#39; If the user is not able to move the base of the log, the user should report with exception in\n\t\t\t&#39; the tail pinned handler.\n\t\t\t&#39; PinnedTailThreashold policy dictates the amount of space that the TailPinned event requests \n\t\t\t&#39; for advancing the base of the log. The amount of space can be in percentage or in terms of bytes \n\t\t\t&#39; which is rounded off to the nearest containers in CLFS. The default is 35 percent.\n\n\n\t\t\tpolicy.PinnedTailThreshold = New PolicyUnit(10, PolicyUnitType.Percentage)\n\n\t\t\t&#39; Set the maximum extents the log can have.\n\t\t\tpolicy.MaximumExtentCount = 6\n\n\t\t\t&#39; Set the minimum extents the log can have.\n\t\t\tpolicy.MinimumExtentCount = 2\n\n\t\t\t&#39; Set the prefix for new containers that are added. \n\t\t\t&#39; when AutoGrow is enabled.\n\t\t\t&#39;policy.NewExtentPrefix = &quot;MyLogPrefix&quot;;\n\n\t\t\t&#39; Set the suffix number for new containers that are added.\n\t\t\t&#39; when AutoGrow is enabled. \n\t\t\tpolicy.NextExtentSuffix = 3\n\n\t\t\t&#39; Commit the log policy.\n\t\t\tpolicy.Commit()\n\n\t\t\t&#39; Refresh updates the IO.Log policy properties with current log policy \n\t\t\t&#39; set in the log. \n\t\t\tpolicy.Refresh()\n\n\t\t\t&#39; LOG POLICY END\n\t\t\t&#39; \n</code></pre>\r\n  \r\n  \r\n      \t<h2 class=\"accented\">Fields\r\n      </h2>\r\n      <table class=\"nameValue\">\r\n      \t<tr><td id=\"System_IO_Log_PolicyUnitType_Extents\">\r\n      \t\t\t<span class=\"lang-csharp\">Extents</span>\r\n      \t</td>\r\n      \t<td><p>The measurement is in containers.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_IO_Log_PolicyUnitType_Percentage\">\r\n      \t\t\t<span class=\"lang-csharp\">Percentage</span>\r\n      \t</td>\r\n      \t<td><p>The measurement is a percentage of the size of the <a class=\"xref\" href=\"system.io.log.logstore\" data-linktype=\"relative-path\">LogStore</a>.</p>\n</td>\r\n      \t</tr>\r\n      </table>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.IO.Log.PolicyUnitType.yml\">\r\n<meta name=\"APIName\" content=\"System.IO.Log.PolicyUnitType\">\r\n<meta name=\"APIName\" content=\"System.IO.Log.PolicyUnitType.Extents\">\r\n<meta name=\"APIName\" content=\"System.IO.Log.PolicyUnitType.Percentage\">\r\n<meta name=\"APILocation\" content=\"System.IO.Log.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-24 01:41 AM\">\r\n<meta name=\"document_id\" content=\"337be15c-ec4d-2b6b-c402-59a5bc60f589\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Specifies the unit of measurement of a  instance.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.io.log/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.IO.Log.PolicyUnitType\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.IO.Log.PolicyUnitType.yml","open_to_public_contributors":false,"api_name":["System.IO.Log.PolicyUnitType","System.IO.Log.PolicyUnitType.Extents","System.IO.Log.PolicyUnitType.Percentage"],"api_location":["System.IO.Log.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.IO.Log.PolicyUnitType","System::IO::Log::PolicyUnitType","System.IO.Log.PolicyUnitType.Extents","System::IO::Log::PolicyUnitType::Extents","System.IO.Log.PolicyUnitType.Percentage","System::IO::Log::PolicyUnitType::Percentage"],"dev_langs":["csharp"],"updated_at":"2017-03-24 01:41 AM","document_id":"337be15c-ec4d-2b6b-c402-59a5bc60f589","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/PolicyUnitType.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"PolicyUnitType enum | Microsoft Docs","_op_ogTitle":"PolicyUnitType enum","description":"Specifies the unit of measurement of a  instance.\n","toc_asset_id":"api/_splitted/System.IO.Log/toc.json","toc_rel":"_splitted/System.IO.Log/toc.json","source_url":"","ms.assetid":"System.IO.Log.PolicyUnitType","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.io.log.policyunittype","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.io.log.policyunittype","fileRelativePath":"api/System.IO.Log.PolicyUnitType.html"},"themesRelativePathToOutputRoot":"_themes/"}