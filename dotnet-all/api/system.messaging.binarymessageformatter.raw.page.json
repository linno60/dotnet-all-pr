{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">BinaryMessageFormatter</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Serializes or deserializes an object, or an entire graph of connected objects, to or from the body of a Message Queuing message, using a binary format.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public class BinaryMessageFormatter : ICloneable, System.Messaging.IMessageFormatter</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span></div><span class=\"lang-csharp\">BinaryMessageFormatter</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<pre><code class=\"lang-cpp\" name=\"MessagingBinaryFormatter#1\">#using &lt;system.dll&gt;\n#using &lt;system.messaging.dll&gt;\n#using &lt;system.drawing.dll&gt;\n\nusing namespace System;\nusing namespace System::Messaging;\nusing namespace System::Drawing;\nusing namespace System::IO;\n\n/// &lt;summary&gt;\n/// Provides a container class for the example.\n/// &lt;/summary&gt;\nref class MyNewQueue\n{\npublic:\n\n   //*************************************************\n   // Creates a new queue.\n   //*************************************************\n   static void CreateQueue( String^ queuePath )\n   {\n      try\n      {\n         if (  !MessageQueue::Exists( queuePath ) )\n         {\n            MessageQueue::Create( queuePath );\n         }\n         else\n         {\n            Console::WriteLine(  &quot;{0} already exists.&quot;, queuePath );\n         }\n      }\n      catch ( MessageQueueException^ e ) \n      {\n         Console::WriteLine( e-&gt;Message );\n      }\n\n   }\n\n\n   //*************************************************\n   // Sends an image to a queue, using the BinaryMessageFormatter.\n   //*************************************************\n   void SendMessage()\n   {\n      try\n      {\n         \n         // Create a new bitmap.\n         // The file must be in the \\bin\\debug or \\bin\\retail folder, or\n         // you must give a full path to its location.\n         Image^ myImage = Bitmap::FromFile( &quot;SentImage::bmp&quot; );\n         \n         // Connect to a queue on the local computer.\n         MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\myQueue&quot; );\n         Message^ myMessage = gcnew Message( myImage,gcnew BinaryMessageFormatter );\n         \n         // Send the image to the queue.\n         myQueue-&gt;Send( myMessage );\n      }\n      catch ( ArgumentException^ e ) \n      {\n         Console::WriteLine( e-&gt;Message );\n      }\n\n      return;\n   }\n\n\n   //*************************************************\n   // Receives a message containing an image.\n   //*************************************************\n   void ReceiveMessage()\n   {\n      try\n      {\n         \n         // Connect to the a queue on the local computer.\n         MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\myQueue&quot; );\n         \n         // Set the formatter to indicate body contains an Order.\n         myQueue-&gt;Formatter = gcnew BinaryMessageFormatter;\n         \n         // Receive and format the message. \n         Message^ myMessage = myQueue-&gt;Receive();\n         Bitmap^ myImage = static_cast&lt;Bitmap^&gt;(myMessage-&gt;Body);\n         \n         // This will be saved in the \\bin\\debug or \\bin\\retail folder.\n         myImage-&gt;Save( &quot;ReceivedImage::bmp&quot;, System::Drawing::Imaging::ImageFormat::Bmp );\n      }\n      catch ( MessageQueueException^ ) \n      {\n         \n         // Handle Message Queuing exceptions.\n      }\n      // Handle invalid serialization format.\n      catch ( InvalidOperationException^ e ) \n      {\n         Console::WriteLine( e-&gt;Message );\n      }\n      catch ( IOException^ e ) \n      {\n         \n         // Handle file access exceptions.\n      }\n\n      \n      // Catch other exceptions as necessary.\n      return;\n   }\n\n};\n\n\n//*************************************************\n// Provides an entry point into the application.\n//         \n// This example sends and receives a message from\n// a queue.\n//*************************************************\nint main()\n{\n   \n   // Create a new instance of the class.\n   MyNewQueue^ myNewQueue = gcnew MyNewQueue;\n   \n   // Create a queue on the local computer.\n   MyNewQueue::CreateQueue( &quot;.\\\\myQueue&quot; );\n   \n   // Send a message to a queue.\n   myNewQueue-&gt;SendMessage();\n   \n   // Receive a message from a queue.\n   myNewQueue-&gt;ReceiveMessage();\n   return 0;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"MessagingBinaryFormatter#1\">using System;\nusing System.Messaging;\nusing System.Drawing;\nusing System.IO;\n\nnamespace MyProject\n{\n\t\n\n\t/// &lt;summary&gt;\n\t/// Provides a container class for the example.\n\t/// &lt;/summary&gt;\n\tpublic class MyNewQueue\n\t{\n\n\t\t//**************************************************\n\t\t// Provides an entry point into the application.\n\t\t//\t\t \n\t\t// This example sends and receives a message from\n\t\t// a queue.\n\t\t//**************************************************\n\n\t\tpublic static void Main()\n\t\t{\n\t\t\t// Create a new instance of the class.\n\t\t\tMyNewQueue myNewQueue = new MyNewQueue();\n\n\t\t\t// Create a queue on the local computer.\n\t\t\tCreateQueue(&quot;.\\\\myQueue&quot;);\n\t\t\t\n\t\t\t// Send a message to a queue.\n\t\t\tmyNewQueue.SendMessage();\n\n\t\t\t// Receive a message from a queue.\n\t\t\tmyNewQueue.ReceiveMessage();\n\n\t\t\treturn;\n\t\t}\n\n\t\t//**************************************************\n\t\t// Creates a new queue.\n\t\t//**************************************************\n\n\t\tpublic static void CreateQueue(string queuePath)\n\t\t{\n\t\t\ttry\t\n\t\t\t\t{\n\t\t\t\tif(!MessageQueue.Exists(queuePath))\n\t\t\t\t{\n\t\t\t\t\tMessageQueue.Create(queuePath);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tConsole.WriteLine(queuePath + &quot; already exists.&quot;);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (MessageQueueException e)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(e.Message);\n\t\t\t}\n\t\t\t\n\t\t}\n\n\t\t//**************************************************\n\t\t// Sends an image to a queue, using the BinaryMessageFormatter.\n\t\t//**************************************************\n\t\t\n\t\tpublic void SendMessage()\n\t\t{\n\t\t\ttry{\n\n\t\t\t\t// Create a new bitmap.\n\t\t\t\t// The file must be in the \\bin\\debug or \\bin\\retail folder, or\n\t\t\t\t// you must give a full path to its location.\n\t\t\t\tImage myImage = Bitmap.FromFile(&quot;SentImage.bmp&quot;);\n\n\t\t\t\t// Connect to a queue on the local computer.\n\t\t\t\tMessageQueue myQueue = new MessageQueue(&quot;.\\\\myQueue&quot;);\n\t\t\t\t\n\t\t\t\tMessage myMessage = new Message(myImage, new BinaryMessageFormatter());\n\n\t\t\t\t// Send the image to the queue.\n\t\t\t\tmyQueue.Send(myMessage);\n\t\t\t}\n\t\t\tcatch(ArgumentException e)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(e.Message);\n\t\t\t\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Receives a message containing an image.\n\t\t//**************************************************\n\t\t\n\t\tpublic  void ReceiveMessage()\n\t\t{\n\t\t\t\t\t\t\n\t\t\ttry\n\t\t\t{\n\n\t\t\t\t// Connect to the a queue on the local computer.\n\t\t\t\tMessageQueue myQueue = new MessageQueue(&quot;.\\\\myQueue&quot;);\n\n\t\t\t\t// Set the formatter to indicate body contains an Order.\n\t\t\t\tmyQueue.Formatter = new BinaryMessageFormatter();\n\n\t\t\t\t// Receive and format the message. \n\t\t\t\tSystem.Messaging.Message myMessage = myQueue.Receive(); \n\t\t\t\tBitmap myImage = (Bitmap)myMessage.Body;\n\t\t\t\t\n\t\t\t\t// This will be saved in the \\bin\\debug or \\bin\\retail folder.\n\t\t\t\tmyImage.Save(&quot;ReceivedImage.bmp&quot;,System.Drawing.Imaging.ImageFormat.Bmp);\n\t\t\t\t\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tcatch (MessageQueueException)\n\t\t\t{\n\t\t\t\t// Handle Message Queuing exceptions.\n\t\t\t}\n\n\t\t\t// Handle invalid serialization format.\n\t\t\tcatch (InvalidOperationException e)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(e.Message);\n\t\t\t}\n\n\t\t\tcatch (IOException e)\n\t\t\t{\n\t\t\t\t// Handle file access exceptions.\n\t\t\t}\n\t\t\t\n\t\t\t// Catch other exceptions as necessary.\n\n\t\t\treturn;\n\t\t}\n\t}\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"MessagingBinaryFormatter#1\">Imports System\nImports System.Messaging\nImports System.Drawing\nImports System.IO\n\n\nNamespace MyProj\n    _\n   \n   \n   Public Class MyNewQueue\n      \n      \n      &#39;**************************************************\n      &#39; Provides an entry point into the application.\n      &#39;\t\t \n      &#39; This example sends and receives a message from\n      &#39; a queue.\n      &#39;**************************************************\n      Public Shared Sub Main()\n         &#39; Create a new instance of the class.\n         Dim myNewQueue As New MyNewQueue()\n         \n         &#39; Create a queue on the local computer.\n         CreateQueue(&quot;.\\myQueue&quot;)\n         \n         &#39; Send a message to a queue.\n         myNewQueue.SendMessage()\n         \n         &#39; Receive a message from a queue.\n         myNewQueue.ReceiveMessage()\n         \n         Return\n      End Sub &#39;Main\n      \n      \n      &#39;**************************************************\n      &#39; Creates a new queue.\n      &#39;**************************************************\n      Public Shared Sub CreateQueue(queuePath As String)\n         Try\n            If Not MessageQueue.Exists(queuePath) Then\n               MessageQueue.Create(queuePath)\n            Else\n               Console.WriteLine((queuePath + &quot; already exists.&quot;))\n            End If\n         Catch e As MessageQueueException\n            Console.WriteLine(e.Message)\n         End Try\n      End Sub &#39;CreateQueue\n       \n      \n      &#39;**************************************************\n      &#39; Sends an image to a queue, using the BinaryMessageFormatter.\n      &#39;**************************************************\n      Public Sub SendMessage()\n         Try\n            \n            &#39; Create a new bitmap.\n            &#39; The file must be in the \\bin\\debug or \\bin\\retail folder, or\n            &#39; you must give a full path to its location.\n            Dim myImage As Image = Bitmap.FromFile(&quot;SentImage.bmp&quot;)\n            \n            &#39; Connect to a queue on the local computer.\n            Dim myQueue As New MessageQueue(&quot;.\\myQueue&quot;)\n            \n            Dim myMessage As New Message(myImage, New BinaryMessageFormatter())\n            \n            &#39; Send the image to the queue.\n            myQueue.Send(myMessage)\n         Catch e As ArgumentException\n            Console.WriteLine(e.Message)\n         End Try \n         \n         Return\n      End Sub &#39;SendMessage\n      \n      \n      \n      &#39;**************************************************\n      &#39; Receives a message containing an image.\n      &#39;**************************************************\n      Public Sub ReceiveMessage()\n         \n         Try\n            \n            &#39; Connect to the a queue on the local computer.\n            Dim myQueue As New MessageQueue(&quot;.\\myQueue&quot;)\n            \n            &#39; Set the formatter to indicate body contains an Order.\n            myQueue.Formatter = New BinaryMessageFormatter()\n            \n            &#39; Receive and format the message. \n            Dim myMessage As System.Messaging.Message = myQueue.Receive()\n            Dim myImage As Bitmap = CType(myMessage.Body, Bitmap)\n            \n            &#39; This will be saved in the \\bin\\debug or \\bin\\retail folder.\n            myImage.Save(&quot;ReceivedImage.bmp&quot;, System.Drawing.Imaging.ImageFormat.Bmp)\n         \n         \n         \n         &#39;Catch\n         &#39; Handle Message Queuing exceptions.\n         \n         &#39; Handle invalid serialization format.\n         Catch e As InvalidOperationException\n            Console.WriteLine(e.Message)\n         \n         Catch e As IOException\n         End Try\n         &#39; Handle file access exceptions.\n         \n         &#39; Catch other exceptions as necessary.\n         Return\n      End Sub &#39;ReceiveMessage\n   End Class &#39;MyNewQueue\nEnd Namespace &#39;MyProj\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The BinaryMessageFormatter is very efficient and can be used to serialize most objects. The result is very compact and fast to parse, but does not allow for loosely coupled messaging as the <a class=\"xref\" href=\"system.messaging.xmlmessageformatter\" data-linktype=\"relative-path\">XmlMessageFormatter</a> does. Loosely coupled means that the client and the server can independently version the type that is sent and received.  </p>\n<p> When the application sends a message to the queue using an instance of the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> class, the formatter serializes the object into a stream and inserts it into the message body. When reading from a queue using a <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a>, the formatter deserializes the message data into the <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_Body_\" data-linktype=\"relative-path\">Body</a> property of a <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a>.  </p>\n<p> BinaryMessageFormatter provides faster throughput than the <a class=\"xref\" href=\"system.messaging.xmlmessageformatter\" data-linktype=\"relative-path\">XmlMessageFormatter</a>. Use the BinaryMessageFormatter when pure speed rather than loosely coupled messaging is desired.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Messaging_BinaryMessageFormatter__ctor\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">BinaryMessageFormatter()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.messaging.binarymessageformatter\" data-linktype=\"relative-path\">BinaryMessageFormatter</a> class without specifying a type style or top object assembly style.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public BinaryMessageFormatter ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>You must specify values for the <a class=\"xref\" href=\"system.messaging.binarymessageformatter#System_Messaging_BinaryMessageFormatter_TopObjectFormat_\" data-linktype=\"relative-path\">TopObjectFormat</a> property (which defines how the root object in a graph is laid out) and the <a class=\"xref\" href=\"system.messaging.binarymessageformatter#System_Messaging_BinaryMessageFormatter_TypeFormat_\" data-linktype=\"relative-path\">TypeFormat</a> property (which defines how object type descriptions are laid out) before using an instance of the <a class=\"xref\" href=\"system.messaging.binarymessageformatter\" data-linktype=\"relative-path\">BinaryMessageFormatter</a> class to serialize and send a message.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Messaging_BinaryMessageFormatter__ctor_System_Runtime_Serialization_Formatters_FormatterAssemblyStyle_System_Runtime_Serialization_Formatters_FormatterTypeStyle_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">BinaryMessageFormatter(FormatterAssemblyStyle,FormatterTypeStyle)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.messaging.binarymessageformatter\" data-linktype=\"relative-path\">BinaryMessageFormatter</a> class, specifying the formats of the root object and the type descriptions.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public BinaryMessageFormatter (System.Runtime.Serialization.Formatters.FormatterAssemblyStyle topObjectFormat, System.Runtime.Serialization.Formatters.FormatterTypeStyle typeFormat);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>topObjectFormat</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.formatters.formatterassemblystyle\" data-linktype=\"relative-path\">FormatterAssemblyStyle</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Determines how the top (root) object of a graph is laid out in the serialized stream.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>typeFormat</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.formatters.formattertypestyle\" data-linktype=\"relative-path\">FormatterTypeStyle</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Determines how type descriptions are laid out in the serialized stream.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Messaging_BinaryMessageFormatter_TopObjectFormat\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">TopObjectFormat</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets a value that defines how the top (root) object of a graph is deserialized with regards to finding and loading its assembly.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Runtime.Serialization.Formatters.FormatterAssemblyStyle TopObjectFormat { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.formatters.formatterassemblystyle\" data-linktype=\"relative-path\">FormatterAssemblyStyle</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>One of the <a class=\"xref\" href=\"system.runtime.serialization.formatters.formatterassemblystyle\" data-linktype=\"relative-path\">FormatterAssemblyStyle</a> values that defines the deserialization behavior.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Currently, you should accept the default value, <code>AssemblyStyle</code>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Messaging_BinaryMessageFormatter_TypeFormat\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">TypeFormat</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets a value that defines how type descriptions are laid out in the serialized stream.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Runtime.Serialization.Formatters.FormatterTypeStyle TypeFormat { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.formatters.formattertypestyle\" data-linktype=\"relative-path\">FormatterTypeStyle</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.runtime.serialization.formatters.formattertypestyle\" data-linktype=\"relative-path\">FormatterTypeStyle</a> that defines the type description format.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Currently, you should accept the default value, <code>TypesWhenNeeded</code>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Messaging_BinaryMessageFormatter_CanRead_System_Messaging_Message_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CanRead(Message)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Determines whether the formatter can deserialize the contents of the message.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool CanRead (System.Messaging.Message message);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>message</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> to inspect.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the binary message formatter can deserialize the message; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <code>message</code> parameter is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>CanRead returns <code>false</code> if the message body is not a binary object.  </p>\n<p> On the receiving computer, CanRead returns <code>true</code> if the assembly for the class to be deserialized exists locally. The assembly must be found in the global assembly cache, or be linked to the application (for example, if the object represents a custom class).</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Messaging_BinaryMessageFormatter_Clone\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Clone()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Creates an instance of the <a class=\"xref\" href=\"system.messaging.binarymessageformatter\" data-linktype=\"relative-path\">BinaryMessageFormatter</a> class whose read/write properties (the root object and type description formats) are the same as the current <a class=\"xref\" href=\"system.messaging.binarymessageformatter\" data-linktype=\"relative-path\">BinaryMessageFormatter</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public object Clone ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object whose properties are identical to those of this <a class=\"xref\" href=\"system.messaging.binarymessageformatter\" data-linktype=\"relative-path\">BinaryMessageFormatter</a>, but whose metadata does not specify it to be a formatter class instance.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method creates a copy of the formatter and initializes all its properties to the values of this <a class=\"xref\" href=\"system.messaging.binarymessageformatter\" data-linktype=\"relative-path\">BinaryMessageFormatter</a>. It is used for scalability, but does not guarantee read or write thread safety.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Messaging_BinaryMessageFormatter_Read_System_Messaging_Message_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Read(Message)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reads the contents from the given message and creates an object that contains the deserialized message.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public object Read (System.Messaging.Message message);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>message</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a>, in binary format, to deserialize.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The deserialized message.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The message&#39;s <span class=\"xref\">stem.Messaging.Message.BodyType*</span> property does not indicate a binary object.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <code>message</code> parameter is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<div class=\"IMPORTANT\"><h5>Important</h5><p> Calling this method with untrusted data is a security risk. Call this method only with trusted data. For more information, see <a href=\"http://go.microsoft.com/fwlink/?LinkId=330378\" data-linktype=\"external\">Untrusted Data Security Risks</a>.  </p>\n</div>\n<p> The body of the message must be in binary format, and the same serializer must be used to deserialize the message as that which initially serialized it. If the body represents a custom class, the assembly for that class must exist locally.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Messaging_BinaryMessageFormatter_Write_System_Messaging_Message_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Write(Message,Object)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Serializes an object into the body of the message.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void Write (System.Messaging.Message message, object obj);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>message</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> whose <span class=\"xref\">stem.Messaging.Message.Body*</span> property will contain the serialized object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>obj</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The object to be serialized into the message body.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <code>message</code> parameter is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The top object format and type format need not be specified to write to the queue as they must be when reading. The <a class=\"xref\" href=\"system.messaging.binarymessageformatter#System_Messaging_BinaryMessageFormatter_TopObjectFormat_\" data-linktype=\"relative-path\">TopObjectFormat</a> and <a class=\"xref\" href=\"system.messaging.binarymessageformatter#System_Messaging_BinaryMessageFormatter_TypeFormat_\" data-linktype=\"relative-path\">TypeFormat</a> properties are used by the formatter only when deserializing a message.  </p>\n<p> The <a class=\"xref\" href=\"system.messaging.binarymessageformatter\" data-linktype=\"relative-path\">BinaryMessageFormatter</a> can serialize most objects, but the result is not loosely coupled. However, it is compact, so the formatter is efficient for large objects.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t  \r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Messaging.BinaryMessageFormatter.yml\">\r\n<meta name=\"APIName\" content=\"System.Messaging.BinaryMessageFormatter\">\r\n<meta name=\"APIName\" content=\"System.Messaging.BinaryMessageFormatter..ctor\">\r\n<meta name=\"APIName\" content=\"System.Messaging.BinaryMessageFormatter.CanRead\">\r\n<meta name=\"APIName\" content=\"System.Messaging.BinaryMessageFormatter.Clone\">\r\n<meta name=\"APIName\" content=\"System.Messaging.BinaryMessageFormatter.Read\">\r\n<meta name=\"APIName\" content=\"System.Messaging.BinaryMessageFormatter.TopObjectFormat\">\r\n<meta name=\"APIName\" content=\"System.Messaging.BinaryMessageFormatter.TypeFormat\">\r\n<meta name=\"APIName\" content=\"System.Messaging.BinaryMessageFormatter.Write\">\r\n<meta name=\"APILocation\" content=\"System.Messaging.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-24 01:41 AM\">\r\n<meta name=\"document_id\" content=\"d5acc43b-76b1-efd9-3e01-e8bfb2d94d07\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Serializes or deserializes an object, or an entire graph of connected objects, to or from the body of a Message Queuing message, using a binary format.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.messaging/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Messaging.BinaryMessageFormatter\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Messaging.BinaryMessageFormatter.yml","open_to_public_contributors":false,"api_name":["System.Messaging.BinaryMessageFormatter","System.Messaging.BinaryMessageFormatter..ctor","System.Messaging.BinaryMessageFormatter.CanRead","System.Messaging.BinaryMessageFormatter.Clone","System.Messaging.BinaryMessageFormatter.Read","System.Messaging.BinaryMessageFormatter.TopObjectFormat","System.Messaging.BinaryMessageFormatter.TypeFormat","System.Messaging.BinaryMessageFormatter.Write"],"api_location":["System.Messaging.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Messaging.BinaryMessageFormatter","System::Messaging::BinaryMessageFormatter","System.Messaging.BinaryMessageFormatter.#ctor","System::Messaging::BinaryMessageFormatter::#ctor","System.Messaging.BinaryMessageFormatter.CanRead","System::Messaging::BinaryMessageFormatter::CanRead","System.Messaging.BinaryMessageFormatter.Clone","System::Messaging::BinaryMessageFormatter::Clone","System.Messaging.BinaryMessageFormatter.Read","System::Messaging::BinaryMessageFormatter::Read","System.Messaging.BinaryMessageFormatter.TopObjectFormat","System::Messaging::BinaryMessageFormatter::TopObjectFormat","System.Messaging.BinaryMessageFormatter.TypeFormat","System::Messaging::BinaryMessageFormatter::TypeFormat","System.Messaging.BinaryMessageFormatter.Write","System::Messaging::BinaryMessageFormatter::Write"],"dev_langs":["csharp"],"updated_at":"2017-03-24 01:41 AM","document_id":"d5acc43b-76b1-efd9-3e01-e8bfb2d94d07","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.Messaging/BinaryMessageFormatter.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"BinaryMessageFormatter class | Microsoft Docs","_op_ogTitle":"BinaryMessageFormatter class","description":"Serializes or deserializes an object, or an entire graph of connected objects, to or from the body of a Message Queuing message, using a binary format.\n","toc_asset_id":"api/_splitted/System.Messaging/toc.json","toc_rel":"_splitted/System.Messaging/toc.json","source_url":"","ms.assetid":"System.Messaging.BinaryMessageFormatter","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.messaging.binarymessageformatter","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.messaging.binarymessageformatter","fileRelativePath":"api/System.Messaging.BinaryMessageFormatter.html"},"themesRelativePathToOutputRoot":"_themes/"}