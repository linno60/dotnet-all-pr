{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">FormViewDeleteEventHandler</span>\r\n      Delegate\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the method that handles the <a class=\"xref\" href=\"system.web.ui.webcontrols.formview#System_Web_UI_WebControls_FormView_ItemDeleting\" data-linktype=\"relative-path\">ItemDeleting</a> event of a <a class=\"xref\" href=\"system.web.ui.webcontrols.formview\" data-linktype=\"relative-path\">FormView</a> control.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public delegate void FormViewDeleteEventHandler(object sender, FormViewDeleteEventArgs e);</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">System.Delegate</a></span></div><span class=\"lang-csharp\">FormViewDeleteEventHandler</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example demonstrates how to programmatically add a FormViewDeleteEventHandler delegate to the <a class=\"xref\" href=\"system.web.ui.webcontrols.formview#System_Web_UI_WebControls_FormView_ItemDeleting\" data-linktype=\"relative-path\">ItemDeleting</a> event of a <a class=\"xref\" href=\"system.web.ui.webcontrols.formview\" data-linktype=\"relative-path\">FormView</a> control.  </p>\n<pre><code class=\"lang-cs\" name=\"FormViewDeleteEventHandler2#1\">\n&lt;%@ page language=&quot;C#&quot; %&gt;\n&lt;%@ import namespace=&quot;System.Data&quot;%&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n  \n  // To dynamically create a template for a FormView control,\n  // you must create a custom template class to represent \n  // the template. This template class represents the item\n  // template for a FormView control.\n  private sealed class EmployeeTemplate : ITemplate\n  {\n\n    // When implementing the ITemplate interface, you must\n    // implement the InstantiateIn method. The FormView\n    // control calls this method to create the template&#39;s \n    // content. \n    void ITemplate.InstantiateIn(Control container)\n    {\n      // Create the child controls contained in the template.\n      // For this example, the item template displays the\n      // FirstName, LastName, and Title fields from the data \n      // source. To support data-binding, create event handlers \n      // for the DataBinding event of each child control.\n      // The event handlers must bind the appropriate value \n      // to each control.\n      Label firstNameLabel = new Label();\n      firstNameLabel.ID = &quot;FirstNameLabel&quot;;\n      firstNameLabel.DataBinding += new EventHandler(FirstNameLabel_DataBinding);\n\n      Label lastNameLabel = new Label();\n      lastNameLabel.ID = &quot;LastNameLabel&quot;;\n      lastNameLabel.DataBinding += new EventHandler(LastNameLabel_DataBinding);\n\n      Label titleNameLabel = new Label();\n      titleNameLabel.ID = &quot;TitleLabel&quot;;\n      titleNameLabel.DataBinding += new EventHandler(TitleLabel_DataBinding);\n\n      LiteralControl space = new LiteralControl(&quot;&amp;nbsp;&quot;);\n      LiteralControl titleLineBreak = new LiteralControl(&quot;&lt;br/&gt;&quot;);\n      LiteralControl buttonLineBreak = new LiteralControl(&quot;&lt;br/&gt;&quot;);\n\n      Button deleteButton = new Button();\n      deleteButton.ID = &quot;DeleteButton&quot;;\n      deleteButton.CommandName = &quot;Delete&quot;;\n      deleteButton.Text = &quot;Delete&quot;;\n\n      // Add the controls to the Controls collection of the \n      // container control.\n      container.Controls.Add(firstNameLabel);\n      container.Controls.Add(space);\n      container.Controls.Add(lastNameLabel);\n      container.Controls.Add(titleLineBreak);\n      container.Controls.Add(titleNameLabel);\n      container.Controls.Add(buttonLineBreak);\n      container.Controls.Add(deleteButton);\n\n    }\n\n    // This event handler binds the value of the FirstName field\n    // to the FirstNameLabel Label control displayed in the template.\n    private void FirstNameLabel_DataBinding(Object sender, EventArgs e)\n    {\n      // Use the sender parameter to retrieve the Label control\n      // being bound to data.\n      Label firstNameLabelControl = (Label)sender;\n\n      // Retrieve the value to bind to the Label control. First,\n      // use the NamingContainer property to retrieve the parent \n      // control of the Label control. In this example, the parent \n      // control is the FormView control.\n      FormView formViewContainer = (FormView)firstNameLabelControl.NamingContainer;\n\n      // Get the data item bound to the FormView control.\n      DataRowView rowView = (DataRowView)formViewContainer.DataItem;\n\n      // Use the data item to retrieve the value of the FirstName field.\n      // Set the Text property of the Label control to this value.        \n      firstNameLabelControl.Text = rowView[&quot;FirstName&quot;].ToString();\n    }\n\n    // This event handler binds the value of the LastName field\n    // to the LastNameLabel Label control displayed in the template.\n    private void LastNameLabel_DataBinding(Object sender, EventArgs e)\n    {\n      // Use the sender parameter to retrieve the Label control\n      // being bound to data.\n      Label lastNameLabelControl = (Label)sender;\n\n      // Retrieve the value to bind to the Label control. First,\n      // use the NamingContainer property to retrieve the parent \n      // control of the Label control. In this example, the parent \n      // control is the FormView control.\n      FormView formViewContainer = (FormView)lastNameLabelControl.NamingContainer;\n\n      // Get the data item bound to the FormView control.\n      DataRowView rowView = (DataRowView)formViewContainer.DataItem;\n\n      // Use the data item to retrieve the value of the LastName field.\n      // Set the Text property of the Label control to this value.         \n      lastNameLabelControl.Text = rowView[&quot;LastName&quot;].ToString();\n    }\n\n    // This event handler binds the value of the Title field\n    // to the TitleLabel Label control displayed in the template.\n    private void TitleLabel_DataBinding(Object sender, EventArgs e)\n    {\n      // Use the sender parameter to retrieve the Label control\n      // being bound to data.\n      Label titleLabelControl = (Label)sender;\n\n      // Retrieve the value to bind to the Label control. First,\n      // use the NamingContainer property to retrieve the parent \n      // control of the Label control. In this example, the parent \n      // control is the FormView control.\n      FormView formViewContainer = (FormView)titleLabelControl.NamingContainer;\n\n      // Get the data item bound to the FormView control.\n      DataRowView rowView = (DataRowView)formViewContainer.DataItem;\n\n      // Use the data item to retrieve the value of the LastName field\n      // Set the Text property of the Label control to this value.         \n      titleLabelControl.Text = rowView[&quot;Title&quot;].ToString();\n    }\n\n  }\n\n  void Page_Load(Object sender, EventArgs e)\n  {\n\n    // Create a new FormView object.\n    FormView employeesFormView = new FormView();\n\n    // Set the FormView object&#39;s properties.\n    employeesFormView.ID = &quot;EmployeesFormView&quot;;\n    employeesFormView.DataSourceID = &quot;EmployeeSource&quot;;\n    employeesFormView.AllowPaging = true;\n    employeesFormView.HeaderText = &quot;Employee Name&quot;;\n    employeesFormView.DataKeyNames = new String[1] { &quot;EmployeeID&quot; };\n\n    // Programmatically register the event handler for the \n    // ItemDeleting event of the FormView control.\n    employeesFormView.ItemDeleting += new FormViewDeleteEventHandler(EmployeeFormView_ItemDeleting);\n\n    // Create the dynamic template using the custom template class.\n    employeesFormView.ItemTemplate = new EmployeeTemplate();\n\n    // Add the FormView object to the Controls collection\n    // of the PlaceHolder control.\n    FormViewPlaceHolder.Controls.Add(employeesFormView);\n\n  }\n\n  void EmployeeFormView_ItemDeleting(Object sender, FormViewDeleteEventArgs e)\n  {\n\n    // Use the sender parameter to retrieve the FormView\n    // control that raised the event.\n    FormView employeeFormView = (FormView)sender;\n\n    // Retrieve the TitleLabel Label control from the\n    // data row.\n    FormViewRow row = employeeFormView.Row;\n    Label titleLabel = (Label)row.FindControl(&quot;TitleLabel&quot;);\n\n    // Cancel the delete operation if the user attempts to \n    // delete a protected record. In this example, records for\n    // employees with a &quot;Sales Manager&quot; job title are protected.\n    if (titleLabel.Text.Equals(&quot;Sales Manager&quot;))\n    {\n      e.Cancel = true;\n      MessageLabel.Text = &quot;You cannot delete this record.&quot;;\n    }\n\n  }\n\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;FormViewDeleteEventHandler Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n        \n      &lt;h3&gt;FormViewDeleteEventHandler Example&lt;/h3&gt;\n      \n      &lt;!-- Use a PlaceHolder control as the container for the --&gt;\n      &lt;!-- dynamically generated FormView control.            --&gt;       \n      &lt;asp:placeholder id=&quot;FormViewPlaceHolder&quot;\n        runat=&quot;server&quot;/&gt;\n            \n      &lt;br/&gt;&lt;br/&gt;\n      \n      &lt;asp:label id=&quot;MessageLabel&quot;\n        forecolor=&quot;Red&quot;\n        runat=&quot;server&quot;/&gt;\n          \n      &lt;!-- This example uses Microsoft SQL Server and connects  --&gt;\n      &lt;!-- to the Northwind sample database. Use an ASP.NET     --&gt;\n      &lt;!-- expression to retrieve the connection string value   --&gt;\n      &lt;!-- from the Web.config file.                            --&gt;\n      &lt;asp:sqldatasource id=&quot;EmployeeSource&quot;\n        selectcommand=&quot;Select [EmployeeID], [LastName], [FirstName], [Title], [PhotoPath] From [Employees]&quot;\n        deletecommand=&quot;Delete [Employees] Where [EmployeeID]=@EmployeeID&quot;\n        connectionstring=&quot;&lt;%$ ConnectionStrings:NorthWindConnectionString%&gt;&quot; \n        runat=&quot;server&quot;/&gt;\n            \n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"FormViewDeleteEventHandler2#1\">\n&lt;%@ page language=&quot;VB&quot; %&gt;\n&lt;%@ import namespace=&quot;System.Data&quot;%&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n  \n  &#39; To dynamically create a template for a FormView control,\n  &#39; you must create a custom template class to represent \n  &#39; the template. This template class represents the item\n  &#39; template for a FormView control.\n  Private NotInheritable Class EmployeeTemplate\n    Implements ITemplate\n    \n    &#39; When implementing the ITemplate interface, you must\n    &#39; implement the InstantiateIn method. The FormView\n    &#39; control calls this method to create the template&#39;s \n    &#39; content. \n    Sub InstantiateIn(ByVal container As Control) Implements ITemplate.InstantiateIn\n\n      &#39; Create the child controls contained in the template.\n      &#39; For this example, the item template displays the\n      &#39; FirstName, LastName, and Title fields from the data \n      &#39; source. To support data-binding, create event handlers \n      &#39; for the DataBinding event of each child control.\n      &#39; The event handlers must bind the appropriate value \n      &#39; to each control.\n      Dim firstNameLabel As New Label()\n      firstNameLabel.ID = &quot;FirstNameLabel&quot;\n      AddHandler firstNameLabel.DataBinding, AddressOf FirstNameLabel_DataBinding\n\n      Dim lastNameLabel As New Label()\n      lastNameLabel.ID = &quot;LastNameLabel&quot;\n      AddHandler lastNameLabel.DataBinding, AddressOf LastNameLabel_DataBinding\n\n      Dim titleNameLabel As New Label()\n      titleNameLabel.ID = &quot;TitleLabel&quot;\n      AddHandler titleNameLabel.DataBinding, AddressOf TitleLabel_DataBinding\n\n      Dim space As New LiteralControl(&quot;&amp;nbsp;&quot;)\n      Dim titleLineBreak As New LiteralControl(&quot;&lt;br/&gt;&quot;)\n      Dim buttonLineBreak As New LiteralControl(&quot;&lt;br/&gt;&quot;)\n\n      Dim deleteButton As New Button()\n      deleteButton.ID = &quot;DeleteButton&quot;\n      deleteButton.CommandName = &quot;Delete&quot;\n      deleteButton.Text = &quot;Delete&quot;\n\n      &#39; Add the controls to the Controls collection of the \n      &#39; container control.\n      container.Controls.Add(firstNameLabel)\n      container.Controls.Add(Space)\n      container.Controls.Add(lastNameLabel)\n      container.Controls.Add(titleLineBreak)\n      container.Controls.Add(titleNameLabel)\n      container.Controls.Add(buttonLineBreak)\n      container.Controls.Add(deleteButton)\n\n    End Sub\n\n    &#39; This event handler binds the value of the FirstName field\n    &#39; to the FirstNameLabel Label control displayed in the template.\n    Private Sub FirstNameLabel_DataBinding(ByVal sender As Object, ByVal e As EventArgs)\n\n      &#39; Use the sender parameter to retrieve the Label control\n      &#39; being bound to data.\n      Dim firstNameLabelControl As Label = CType(sender, Label)\n\n      &#39; Retrieve the value to bind to the Label control. First,\n      &#39; use the NamingContainer property to retrieve the parent \n      &#39; control of the Label control. In this example, the parent \n      &#39; control is the FormView control.\n      Dim formViewContainer As FormView = CType(firstNameLabelControl.NamingContainer, FormView)\n      \n      &#39; Get the data item bound to the FormView control.\n      Dim rowView As DataRowView = CType(formViewContainer.DataItem, DataRowView)\n\n      &#39; Use the data item to retrieve the value of the FirstName field.\n      &#39; Set the Text property of the Label control to this value.        \n      firstNameLabelControl.Text = rowView(&quot;FirstName&quot;).ToString()\n  \n    End Sub\n\n    &#39; This event handler binds the value of the LastName field\n    &#39; to the LastNameLabel Label control displayed in the template.\n    Private Sub LastNameLabel_DataBinding(ByVal sender As Object, ByVal e As EventArgs)\n\n      &#39; Use the sender parameter to retrieve the Label control\n      &#39; being bound to data.\n      Dim lastNameLabelControl As Label = CType(sender, Label)\n\n      &#39; Retrieve the value to bind to the Label control. First,\n      &#39; use the NamingContainer property to retrieve the parent \n      &#39; control of the Label control. In this example, the parent \n      &#39; control is the FormView control.\n      Dim formViewContainer As FormView = CType(lastNameLabelControl.NamingContainer, FormView)\n\n      &#39; Get the data item bound to the FormView control.\n      Dim rowView As DataRowView = CType(formViewContainer.DataItem, DataRowView)\n\n      &#39; Use the data item to retrieve the value of the LastName field.\n      &#39; Set the Text property of the Label control to this value.         \n      lastNameLabelControl.Text = rowView(&quot;LastName&quot;).ToString()\n    \n    End Sub\n\n    &#39; This event handler binds the value of the Title field\n    &#39; to the TitleLabel Label control displayed in the template.\n    Private Sub TitleLabel_DataBinding(ByVal sender As Object, ByVal e As EventArgs)\n\n      &#39; Use the sender parameter to retrieve the Label control\n      &#39; being bound to data.\n      Dim titleLabelControl As Label = CType(sender, Label)\n\n      &#39; Retrieve the value to bind to the Label control. First,\n      &#39; use the NamingContainer property to retrieve the parent \n      &#39; control of the Label control. In this example, the parent \n      &#39; control is the FormView control.\n      Dim formViewContainer As FormView = CType(titleLabelControl.NamingContainer, FormView)\n\n      &#39; Get the data item bound to the FormView control.\n      Dim rowView As DataRowView = CType(formViewContainer.DataItem, DataRowView)\n\n      &#39; Use the data item to retrieve the value of the LastName field\n      &#39; Set the Text property of the Label control to this value.         \n      titleLabelControl.Text = rowView(&quot;Title&quot;).ToString()\n    \n    End Sub\n\n  End Class\n\n  Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)\n\n    &#39; Create a new FormView object.\n    Dim employeesFormView As New FormView()\n\n    &#39; Set the FormView object&#39;s properties.\n    employeesFormView.ID = &quot;EmployeesFormView&quot;\n    employeesFormView.DataSourceID = &quot;EmployeeSource&quot;\n    employeesFormView.AllowPaging = True\n    employeesFormView.HeaderText = &quot;Employee Name&quot;\n    \n    Dim keyArray() As String = {&quot;EmployeeID&quot;}\n    employeesFormView.DataKeyNames = keyArray\n\n    &#39; Programmatically register the event handler for the \n    &#39; ItemDeleting event of the FormView control.\n    AddHandler employeesFormView.ItemDeleting, AddressOf EmployeeFormView_ItemDeleting\n\n    &#39; Create the dynamic template using the custom template class.\n    employeesFormView.ItemTemplate = New EmployeeTemplate()\n\n    &#39; Add the FormView object to the Controls collection\n    &#39; of the PlaceHolder control.\n    FormViewPlaceHolder.Controls.Add(employeesFormView)\n\n  End Sub\n\n  Sub EmployeeFormView_ItemDeleting(ByVal sender As Object, ByVal e As FormViewDeleteEventArgs)\n\n    &#39; Use the sender parameter to retrieve the FormView\n    &#39; control that raised the event.\n    Dim employeeFormView As FormView = CType(sender, FormView)\n\n    &#39; Retrieve the TitleLabel Label control from the\n    &#39; data row.\n    Dim row As FormViewRow = employeeFormView.Row\n    Dim titleLabel As Label = CType(row.FindControl(&quot;TitleLabel&quot;), Label)\n\n    &#39; Cancel the delete operation if the user attempts to \n    &#39; delete a protected record. In this example, records for\n    &#39; employees with a &quot;Sales Manager&quot; job title are protected.\n    If (titleLabel.Text.Equals(&quot;Sales Manager&quot;)) Then\n    \n      e.Cancel = True\n      MessageLabel.Text = &quot;You cannot delete this record.&quot;\n      \n    End If\n\n  End Sub\n\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;FormViewDeleteEventHandler Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n        \n      &lt;h3&gt;FormViewDeleteEventHandler Example&lt;/h3&gt;\n      \n      &lt;!-- Use a PlaceHolder control as the container for the --&gt;\n      &lt;!-- dynamically generated FormView control.            --&gt;       \n      &lt;asp:placeholder id=&quot;FormViewPlaceHolder&quot;\n        runat=&quot;server&quot;/&gt;\n            \n      &lt;br/&gt;&lt;br/&gt;\n      \n      &lt;asp:label id=&quot;MessageLabel&quot;\n        forecolor=&quot;Red&quot;\n        runat=&quot;server&quot;/&gt;\n          \n      &lt;!-- This example uses Microsoft SQL Server and connects  --&gt;\n      &lt;!-- to the Northwind sample database. Use an ASP.NET     --&gt;\n      &lt;!-- expression to retrieve the connection string value   --&gt;\n      &lt;!-- from the Web.config file.                            --&gt;\n      &lt;asp:sqldatasource id=&quot;EmployeeSource&quot;\n        selectcommand=&quot;Select [EmployeeID], [LastName], [FirstName], [Title], [PhotoPath] From [Employees]&quot;\n        deletecommand=&quot;Delete [Employees] Where [EmployeeID]=@EmployeeID&quot;\n        connectionstring=&quot;&lt;%$ ConnectionStrings:NorthWindConnectionString%&gt;&quot; \n        runat=&quot;server&quot;/&gt;\n            \n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p> The following example demonstrates how to declaratively add a FormViewDeleteEventHandler delegate to the <a class=\"xref\" href=\"system.web.ui.webcontrols.formview#System_Web_UI_WebControls_FormView_ItemDeleting\" data-linktype=\"relative-path\">ItemDeleting</a> event of a <a class=\"xref\" href=\"system.web.ui.webcontrols.formview\" data-linktype=\"relative-path\">FormView</a> control.  </p>\n<pre><code class=\"lang-cs\" name=\"FormViewDeleteEventHandlerDeclarative2#1\">\n&lt;%@ Page language=&quot;C#&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  void EmployeeFormView_ItemDeleting(Object sender, FormViewDeleteEventArgs e)\n  {\n    // Get the employee ID, name, and job title from the Keys and Values\n    // properties.\n    String keyValue = e.Keys[&quot;EmployeeID&quot;].ToString();\n    String employeeName = e.Values[&quot;FirstName&quot;].ToString() +\n      &quot; &quot; + e.Values[&quot;LastName&quot;].ToString();\n    String title = e.Values[&quot;Title&quot;].ToString();\n\n    // Cancel the delete operation if the user attempts to \n    // delete a protected record. In this example, records for\n    // employees with a &quot;Sales Manager&quot; job title are protected.\n    if (title.Equals(&quot;Sales Manager&quot;))\n    {\n      e.Cancel = true;\n      MessageLabel.Text = &quot;You cannot delete record &quot; +\n        e.RowIndex.ToString() + &quot;. &quot; + employeeName +\n        &quot; (Employee Number &quot; + keyValue.ToString() +\n        &quot;) is protected.&quot;;\n    }\n\n  }\n   \n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;FormViewDeleteEventHandler Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n        \n      &lt;h3&gt;FormViewDeleteEventHandler Example&lt;/h3&gt;\n                       \n      &lt;asp:formview id=&quot;EmployeeFormView&quot;\n        datasourceid=&quot;EmployeeSource&quot;\n        allowpaging=&quot;true&quot;\n        datakeynames=&quot;EmployeeID&quot;\n        onitemdeleting=&quot;EmployeeFormView_ItemDeleting&quot;  \n        runat=&quot;server&quot;&gt;\n        \n        &lt;itemtemplate&gt;\n        \n          &lt;table&gt;\n            &lt;tr&gt;\n              &lt;td&gt;\n                &lt;asp:image id=&quot;EmployeeImage&quot;\n                  imageurl=&#39;&lt;%# Eval(&quot;PhotoPath&quot;) %&gt;&#39;\n                  alternatetext=&#39;&lt;%# Eval(&quot;LastName&quot;) %&gt;&#39; \n                  runat=&quot;server&quot;/&gt;\n              &lt;/td&gt;\n              &lt;td&gt;\n                &lt;asp:label id=&quot;FirstNameLabel&quot;\n                  text=&#39;&lt;%#Bind(&quot;FirstName&quot;)%&gt;&#39;\n                  font-bold=&quot;true&quot;\n                  runat=&quot;server&quot;/&gt;\n                &lt;asp:label id=&quot;LastNameLabel&quot;\n                  text=&#39;&lt;%#Bind(&quot;LastName&quot;)%&gt;&#39;\n                  font-bold=&quot;true&quot;\n                  runat=&quot;server&quot;/&gt;\n                &lt;br/&gt;     \n                &lt;asp:label id=&quot;TitleLabel&quot;\n                  text=&#39;&lt;%#Bind(&quot;Title&quot;)%&gt;&#39;\n                  runat=&quot;server&quot;/&gt;        \n              &lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n              &lt;td colspan=&quot;2&quot;&gt;\n                &lt;asp:button id=&quot;DeleteButton&quot;\n                  text=&quot;Delete Record&quot;\n                  commandname=&quot;Delete&quot;\n                  runat=&quot;server&quot; /&gt;\n              &lt;/td&gt;\n            &lt;/tr&gt;\n          &lt;/table&gt;\n        \n        &lt;/itemtemplate&gt;         \n                  \n      &lt;/asp:formview&gt;\n      \n      &lt;asp:label id=&quot;MessageLabel&quot;\n        forecolor=&quot;Red&quot;\n        runat=&quot;server&quot;/&gt;\n          \n      &lt;!-- This example uses Microsoft SQL Server and connects  --&gt;\n      &lt;!-- to the Northwind sample database. Use an ASP.NET     --&gt;\n      &lt;!-- expression to retrieve the connection string value   --&gt;\n      &lt;!-- from the Web.config file.                            --&gt;\n      &lt;asp:sqldatasource id=&quot;EmployeeSource&quot;\n        selectcommand=&quot;Select [EmployeeID], [LastName], [FirstName], [Title], [PhotoPath] From [Employees]&quot;\n        deletecommand=&quot;Delete [Employees] Where [EmployeeID]=@EmployeeID&quot;\n        connectionstring=&quot;&lt;%$ ConnectionStrings:NorthWindConnectionString%&gt;&quot; \n        runat=&quot;server&quot;/&gt;\n            \n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"FormViewDeleteEventHandlerDeclarative2#1\">\n&lt;%@ Page language=&quot;VB&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  Sub EmployeeFormView_ItemDeleting(ByVal sender As Object, ByVal e As FormViewDeleteEventArgs)\n  \n    &#39; Get the employee ID, name, and job title from the Keys and Values\n    &#39; properties.\n    Dim keyValue As String = e.Keys(&quot;EmployeeID&quot;).ToString()\n    Dim employeeName As String = e.Values(&quot;FirstName&quot;).ToString() &amp; _\n      &quot; &quot; &amp; e.Values(&quot;LastName&quot;).ToString()\n    Dim title As String = e.Values(&quot;Title&quot;).ToString()\n\n    &#39; Cancel the delete operation if the user attempts to \n    &#39; delete a protected record. In this example, records for\n    &#39; employees with a &quot;Sales Manager&quot; job title are protected.\n    If Title.Equals(&quot;Sales Manager&quot;) Then\n    \n      e.Cancel = True\n      MessageLabel.Text = &quot;You cannot delete record &quot; &amp; _\n        e.RowIndex.ToString() &amp; &quot;. &quot; &amp; employeeName &amp; _\n        &quot; (Employee Number &quot; &amp; keyValue.ToString() &amp; _\n        &quot;) is protected.&quot;\n    \n    End If\n\n  End Sub\n   \n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;FormViewDeleteEventHandler Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n        \n      &lt;h3&gt;FormViewDeleteEventHandler Example&lt;/h3&gt;\n                       \n      &lt;asp:formview id=&quot;EmployeeFormView&quot;\n        datasourceid=&quot;EmployeeSource&quot;\n        allowpaging=&quot;true&quot;\n        datakeynames=&quot;EmployeeID&quot;\n        onitemdeleting=&quot;EmployeeFormView_ItemDeleting&quot;  \n        runat=&quot;server&quot;&gt;\n        \n        &lt;itemtemplate&gt;\n        \n          &lt;table&gt;\n            &lt;tr&gt;\n              &lt;td&gt;\n                &lt;asp:image id=&quot;EmployeeImage&quot;\n                  imageurl=&#39;&lt;%# Eval(&quot;PhotoPath&quot;) %&gt;&#39;\n                  alternatetext=&#39;&lt;%# Eval(&quot;LastName&quot;) %&gt;&#39; \n                  runat=&quot;server&quot;/&gt;\n              &lt;/td&gt;\n              &lt;td&gt;\n                &lt;asp:label id=&quot;FirstNameLabel&quot;\n                  text=&#39;&lt;%#Bind(&quot;FirstName&quot;)%&gt;&#39;\n                  font-bold=&quot;true&quot;\n                  runat=&quot;server&quot;/&gt;\n                &lt;asp:label id=&quot;LastNameLabel&quot;\n                  text=&#39;&lt;%#Bind(&quot;LastName&quot;)%&gt;&#39;\n                  font-bold=&quot;true&quot;\n                  runat=&quot;server&quot;/&gt;\n                &lt;br/&gt;     \n                &lt;asp:label id=&quot;TitleLabel&quot;\n                  text=&#39;&lt;%#Bind(&quot;Title&quot;)%&gt;&#39;\n                  runat=&quot;server&quot;/&gt;        \n              &lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n              &lt;td colspan=&quot;2&quot;&gt;\n                &lt;asp:button id=&quot;DeleteButton&quot;\n                  text=&quot;Delete Record&quot;\n                  commandname=&quot;Delete&quot;\n                  runat=&quot;server&quot; /&gt;\n              &lt;/td&gt;\n            &lt;/tr&gt;\n          &lt;/table&gt;\n        \n        &lt;/itemtemplate&gt;         \n                  \n      &lt;/asp:formview&gt;\n      \n      &lt;asp:label id=&quot;MessageLabel&quot;\n        forecolor=&quot;Red&quot;\n        runat=&quot;server&quot;/&gt;\n          \n      &lt;!-- This example uses Microsoft SQL Server and connects  --&gt;\n      &lt;!-- to the Northwind sample database. Use an ASP.NET     --&gt;\n      &lt;!-- expression to retrieve the connection string value   --&gt;\n      &lt;!-- from the Web.config file.                            --&gt;\n      &lt;asp:sqldatasource id=&quot;EmployeeSource&quot;\n        selectcommand=&quot;Select [EmployeeID], [LastName], [FirstName], [Title], [PhotoPath] From [Employees]&quot;\n        deletecommand=&quot;Delete [Employees] Where [EmployeeID]=@EmployeeID&quot;\n        connectionstring=&quot;&lt;%$ ConnectionStrings:NorthWindConnectionString%&gt;&quot; \n        runat=&quot;server&quot;/&gt;\n            \n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The <a class=\"xref\" href=\"system.web.ui.webcontrols.formview\" data-linktype=\"relative-path\">FormView</a> control raises the <a class=\"xref\" href=\"system.web.ui.webcontrols.formview#System_Web_UI_WebControls_FormView_ItemDeleting\" data-linktype=\"relative-path\">ItemDeleting</a> event when a Delete button (a button with its <code>CommandName</code> property set to &quot;Delete&quot;) within the control is clicked, but before the <a class=\"xref\" href=\"system.web.ui.webcontrols.formview\" data-linktype=\"relative-path\">FormView</a> control deletes the record. This allows you to provide an event-handling method that performs a custom routine, such as verifying a record before deleting it, whenever this event occurs.  </p>\n<p> When you create a FormViewDeleteEventHandler delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see <a href=\"http://msdn.microsoft.com/en-us/d98fd58b-fa4f-4598-8378-addf4355a115\" data-linktype=\"external\">NIB: Events and Delegates</a>.</p>\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.UI.WebControls.FormViewDeleteEventHandler.yml\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.FormViewDeleteEventHandler\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.FormViewDeleteEventHandler..ctor\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.FormViewDeleteEventHandler.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.FormViewDeleteEventHandler.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.FormViewDeleteEventHandler.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-24 01:41 AM\">\r\n<meta name=\"document_id\" content=\"a1fbc72b-2d05-2bf4-9bc1-9ed2af99ff39\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the method that handles the  event of a  control.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.web.ui.webcontrols/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Web.UI.WebControls.FormViewDeleteEventHandler\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.UI.WebControls.FormViewDeleteEventHandler.yml","open_to_public_contributors":false,"api_name":["System.Web.UI.WebControls.FormViewDeleteEventHandler","System.Web.UI.WebControls.FormViewDeleteEventHandler..ctor","System.Web.UI.WebControls.FormViewDeleteEventHandler.Invoke","System.Web.UI.WebControls.FormViewDeleteEventHandler.BeginInvoke","System.Web.UI.WebControls.FormViewDeleteEventHandler.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Web.UI.WebControls.FormViewDeleteEventHandler","System::Web::UI::WebControls::FormViewDeleteEventHandler"],"dev_langs":["csharp"],"updated_at":"2017-03-24 01:41 AM","document_id":"a1fbc72b-2d05-2bf4-9bc1-9ed2af99ff39","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.WebControls/FormViewDeleteEventHandler.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"FormViewDeleteEventHandler delegate | Microsoft Docs","_op_ogTitle":"FormViewDeleteEventHandler delegate","description":"Represents the method that handles the  event of a  control.\n","toc_asset_id":"api/_splitted/System.Web.UI.WebControls/toc.json","toc_rel":"_splitted/System.Web.UI.WebControls/toc.json","source_url":"","ms.assetid":"System.Web.UI.WebControls.FormViewDeleteEventHandler","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.webcontrols.formviewdeleteeventhandler","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.webcontrols.formviewdeleteeventhandler","fileRelativePath":"api/System.Web.UI.WebControls.FormViewDeleteEventHandler.html"},"themesRelativePathToOutputRoot":"_themes/"}