{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">EncoderExceptionFallback</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Provides a failure-handling mechanism, called a fallback, for an input character that cannot be converted to an output byte sequence. The fallback throws an exception if an input character cannot be converted to an output byte sequence. This class cannot be inherited.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public sealed class EncoderExceptionFallback : System.Text.EncoderFallback</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoderfallback\" data-linktype=\"relative-path\">EncoderFallback</a></span></div><span class=\"lang-csharp\">EncoderExceptionFallback</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoderfallback#System_Text_EncoderFallback_ExceptionFallback\" data-linktype=\"relative-path\">ExceptionFallback</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoderfallback#System_Text_EncoderFallback_ReplacementFallback\" data-linktype=\"relative-path\">ReplacementFallback</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example demonstrates the EncoderExceptionFallback and <a class=\"xref\" href=\"system.text.encoderfallbackexception\" data-linktype=\"relative-path\">EncoderFallbackException</a> classes.  </p>\n<pre><code class=\"lang-cpp\" name=\"sys.txt.fallbackEncExc#1\">// This example demonstrates the EncoderExceptionFallback class.\n\nusing namespace System;\nusing namespace System::Text;\n\nint main()\n{\n    // Create an encoding, which is equivalent to calling the\n    // ASCIIEncoding class constructor.\n    // The EncoderExceptionFallback parameter causes an exception to\n    // be thrown when a character cannot be encoded.\n    // A decoder exception fallback is also specified, but it is not\n    // used because this example terminates during the encoding operation.\n\n    Encoding^ asciiEncoding = Encoding::GetEncoding(&quot;us-ascii&quot;,\n        gcnew EncoderExceptionFallback(), gcnew DecoderExceptionFallback());\n\n    // The input string consists of the Unicode characters LEFT POINTING\n    // DOUBLE ANGLE QUOTATION MARK (U+00AB), &#39;X&#39; (U+0058), and RIGHT\n    // POINTING DOUBLE ANGLE QUOTATION MARK (U+00BB).\n    // The encoding can only encode characters in the US-ASCII range of\n    // U+0000 through U+007F. Consequently, the characters bracketing the\n    // &#39;X&#39; character cause an exception.\n    String^ inputString = L&quot;\\u00abX\\u00bb&quot;;\n\n    String^ twoNewLines = Environment::NewLine + Environment::NewLine;\n    array&lt;Byte&gt;^ encodedBytes = gcnew array&lt;Byte&gt;(\n        asciiEncoding-&gt;GetMaxByteCount(inputString-&gt;Length));\n    int numberOfEncodedBytes = 0;\n\n    // ---------------------------------------------------------------------\n    Console::Clear();\n\n    // Display the name of the encoding.\n    Console::WriteLine(&quot;The name of the encoding is \\&quot;{0}\\&quot;.{1}&quot;,\n        asciiEncoding-&gt;WebName, Environment::NewLine);\n\n    // Display the input string in text.\n    Console::WriteLine(&quot;Input string ({0} characters): \\&quot;{1}\\&quot;&quot;,\n        inputString-&gt;Length, inputString);\n\n    // Display the input string in hexadecimal.\n    Console::Write(&quot;Input string in hexadecimal: &quot;);\n    for each (char c in inputString)\n    {\n        Console::Write(&quot;0x{0:X2} &quot;, c);\n    }\n    Console::Write(twoNewLines);\n\n    // ---------------------------------------------------------------------\n    // Attempt to encode the input string. However, an exception is thrown\n    // before the input string can be encoded.\n\n    Console::WriteLine(&quot;Encode the input string...&quot;);\n\n    // The code example terminates during the call to the GetBytes() method.\n    try\n    {\n        numberOfEncodedBytes = asciiEncoding-&gt;GetBytes(inputString, 0,\n            inputString-&gt;Length, encodedBytes, 0);\n        // This statement is never executed.\n        Console::WriteLine(&quot;This statement is never executed.&quot;);\n    }\n    catch (EncoderFallbackException^ ex)\n    {\n        Console::WriteLine(ex);\n        Console::WriteLine(\n            &quot;{0}*** THE CODE EXAMPLE TERMINATES HERE AS INTENDED. ***&quot;,\n            Environment::NewLine);\n    }\n}\n\n/*\nThis code example produces the following results:\n\nThe name of the encoding is &quot;us-ascii&quot;.\n\nInput string (3 characters): &quot;X&quot;\nInput string in hexadecimal: 0xAB 0x58 0xBB\n\nEncode the input string...\nSystem.Text.EncoderFallbackException: Unable to translate Unicode character \\u00AB at inde\nx 0 to specified code page.\nat System.Text.EncoderExceptionFallbackBuffer.Fallback(Char charUnknown, Int32 index)\nat System.Text.EncoderFallbackBuffer.InternalFallback(Char ch, Char*&amp; chars)\nat System.Text.ASCIIEncoding.GetBytes(Char* chars, Int32 charCount, Byte* bytes, Int32\nbyteCount, EncoderNLS encoder)\nat System.Text.ASCIIEncoding.GetBytes(String chars, Int32 charIndex, Int32 charCount, B\nyte[] bytes, Int32 byteIndex)\nat Sample.Main()\n\n*** THE CODE EXAMPLE TERMINATES HERE AS INTENDED. ***\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"sys.txt.fallbackEncExc#1\">// This example demonstrates the EncoderExceptionFallback class.\n\nusing System;\nusing System.Text;\n\nclass Sample \n{\n    public static void Main() \n    {\n\n// Create an encoding, which is equivalent to calling the \n// ASCIIEncoding class constructor. \n// The EncoderExceptionFallback parameter causes an exception to\n// be thrown when a character cannot be encoded. \n// A decoder exception fallback is also specified, but it is not \n// used because this example terminates during the encoding operation.  \n\n    Encoding ae = Encoding.GetEncoding(\n                  &quot;us-ascii&quot;,\n                  new EncoderExceptionFallback(), \n                  new DecoderExceptionFallback());\n\n// The input string consists of the Unicode characters LEFT POINTING \n// DOUBLE ANGLE QUOTATION MARK (U+00AB), &#39;X&#39; (U+0058), and RIGHT POINTING \n// DOUBLE ANGLE QUOTATION MARK (U+00BB). \n// The encoding can only encode characters in the US-ASCII range of U+0000 \n// through U+007F. Consequently, the characters bracketing the &#39;X&#39; character\n// cause an exception.\n    string inputString = &quot;\\u00abX\\u00bb&quot;;\n\n    string twoNewLines = &quot;\\n\\n&quot;;\n    byte[] encodedBytes = new byte[ae.GetMaxByteCount(inputString.Length)];\n    int numberOfEncodedBytes = 0;\n\n// --------------------------------------------------------------------------\n    Console.Clear();\n\n// Display the name of the encoding.\n    Console.WriteLine(&quot;The name of the encoding is \\&quot;{0}\\&quot;.\\n&quot;, ae.WebName);\n\n// Display the input string in text.\n    Console.WriteLine(&quot;Input string ({0} characters): \\&quot;{1}\\&quot;&quot;, \n                       inputString.Length, inputString);\n\n// Display the input string in hexadecimal.\n    Console.Write(&quot;Input string in hexadecimal: &quot;);\n    foreach (char c in inputString.ToCharArray()) {\n        Console.Write(&quot;0x{0:X2} &quot;, (int)c);}\n    Console.Write(twoNewLines);\n\n// --------------------------------------------------------------------------\n// Attempt to encode the input string. However, an exception is thrown before\n// the input string can be encoded.\n\n    Console.WriteLine(&quot;Encode the input string...&quot;);\n\n// The code example terminates during the call to the GetBytes() method.\n    try {\n        numberOfEncodedBytes = ae.GetBytes(inputString, 0, inputString.Length, \n                                           encodedBytes, 0);\n        }\n    catch (EncoderFallbackException e)\n        {\n        Console.WriteLine(e);\n        Console.WriteLine(&quot;\\n*** THE CODE EXAMPLE TERMINATES HERE AS INTENDED. ***&quot;);\n        return;\n        }\n\n// This statement is never executed.\n    Console.WriteLine(&quot;This statement is never executed.&quot;);\n    }\n}\n/*\nThis code example produces the following results:\n\nThe name of the encoding is &quot;us-ascii&quot;.\n\nInput string (3 characters): &quot;�X�&quot;\nInput string in hexadecimal: 0xAB 0x58 0xBB\n\nEncode the input string...\nSystem.Text.EncoderFallbackException: Unable to translate Unicode character \\u00AB at inde\nx 0 to specified code page.\n   at System.Text.EncoderExceptionFallbackBuffer.Fallback(Char charUnknown, Int32 index)\n   at System.Text.EncoderFallbackBuffer.InternalFallback(Char ch, Char*&amp; chars)\n   at System.Text.ASCIIEncoding.GetBytes(Char* chars, Int32 charCount, Byte* bytes, Int32\nbyteCount, EncoderNLS encoder)\n   at System.Text.ASCIIEncoding.GetBytes(String chars, Int32 charIndex, Int32 charCount, B\nyte[] bytes, Int32 byteIndex)\n   at Sample.Main()\n\n*** THE CODE EXAMPLE TERMINATES HERE AS INTENDED. ***\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"sys.txt.fallbackEncExc#1\">&#39; This example demonstrates the EncoderExceptionFallback class.\nImports System\nImports System.Text\n\nClass Sample\n    Public Shared Sub Main() \n        \n        &#39; Create an encoding, which is equivalent to calling the \n        &#39; ASCIIEncoding class constructor. \n        &#39; The EncoderExceptionFallback parameter causes an exception to\n        &#39; be thrown when a character cannot be encoded. \n        &#39; A decoder exception fallback is also specified, but it is not \n        &#39; used because this example terminates during the encoding operation.  \n\n\n        Dim eef As New EncoderExceptionFallback()\n        Dim def As New DecoderExceptionFallback()\n        Dim ae As Encoding = Encoding.GetEncoding(&quot;us-ascii&quot;, eef, def)\n        \n        &#39; The input string consists of the Unicode characters LEFT POINTING \n        &#39; DOUBLE ANGLE QUOTATION MARK (U+00AB), &#39;X&#39; (U+0058), and RIGHT POINTING \n        &#39; DOUBLE ANGLE QUOTATION MARK (U+00BB). \n        &#39; The encoding can only encode characters in the US-ASCII range of U+0000 \n        &#39; through U+007F. Consequently, the characters bracketing the &#39;X&#39; character\n        &#39; cause an exception.\n\n        Dim inputString As String = &quot;&#171;X&#187;&quot;\n        \n        Dim twoNewLines As String = vbCrLf &amp; vbCrLf\n        Dim numberOfEncodedBytes As Integer = ae.GetMaxByteCount(inputString.Length)\n        &#39; Counteract the compiler adding an extra element.\n        Dim encodedBytes(numberOfEncodedBytes - 1) As Byte\n        \n        &#39; --------------------------------------------------------------------------\n        Console.Clear()\n        \n        &#39; Display the name of the encoding.\n        Console.WriteLine(&quot;The name of the encoding is &quot;&quot;{0}&quot;&quot;.&quot; &amp; vbCrLf, ae.WebName)\n        \n        &#39; Display the input string in text.\n        Console.WriteLine(&quot;Input string ({0} characters): &quot;&quot;{1}&quot;&quot;&quot;, _\n                           inputString.Length, inputString)\n        \n        &#39; Display the input string in hexadecimal. \n        &#39; Each element is converted to an integer with Convert.ToInt32.\n        Console.Write(&quot;Input string in hexadecimal: &quot;)\n        Dim c As Char\n        For Each c In  inputString.ToCharArray()\n            Console.Write(&quot;0x{0:X2} &quot;, Convert.ToInt32(c))\n        Next c\n        Console.Write(twoNewLines)\n        \n        &#39; --------------------------------------------------------------------------\n        &#39; Attempt to encode the input string. However, an exception is thrown before\n        &#39; the input string can be encoded.\n        Console.WriteLine(&quot;Encode the input string...&quot;)\n        \n        &#39; The code example terminates during the call to the GetBytes() method.\n        Try\n            numberOfEncodedBytes = ae.GetBytes(inputString, 0, inputString.Length, _\n                                               encodedBytes, 0)\n        Catch e As EncoderFallbackException\n            Console.WriteLine(e)\n            Console.WriteLine(vbCrLf &amp; _\n                              &quot;*** THE CODE EXAMPLE TERMINATES HERE AS INTENDED. ***&quot;)\n            Return\n        End Try\n        \n        &#39; This statement is never executed.\n        Console.WriteLine(&quot;This statement is never executed.&quot;)\n    \n    End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This code example produces the following results:\n&#39;\n&#39;The name of the encoding is &quot;us-ascii&quot;.\n&#39;\n&#39;Input string (3 characters): &quot;X&quot;\n&#39;Input string in hexadecimal: 0xAB 0x58 0xBB\n&#39;\n&#39;Encode the input string...\n&#39;System.Text.EncoderFallbackException: Unable to translate Unicode character \\u00AB at inde\n&#39;x 0 to specified code page.\n&#39;   at System.Text.EncoderExceptionFallbackBuffer.Fallback(Char charUnknown, Int32 index)\n&#39;   at System.Text.EncoderFallbackBuffer.InternalFallback(Char ch, Char*&amp; chars)\n&#39;   at System.Text.ASCIIEncoding.GetBytes(Char* chars, Int32 charCount, Byte* bytes, Int32\n&#39;byteCount, EncoderNLS encoder)\n&#39;   at System.Text.ASCIIEncoding.GetBytes(String chars, Int32 charIndex, Int32 charCount, B\n&#39;yte[] bytes, Int32 byteIndex)\n&#39;   at Sample.Main()\n&#39;\n&#39;*** THE CODE EXAMPLE TERMINATES HERE AS INTENDED. ***\n&#39;\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>An encoding maps a Unicode character to an encoded sequence of bytes, which can subsequently be transferred to a physical medium, such as a disk, or over a communications link. Characters can be mapped in various ways, and a particular encoding is represented by a type derived from the <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> class. Specifically, the encoding type&#39;s <code>GetBytes</code> method encodes a character to a byte sequence, and the <code>GetChars</code> method decodes a byte sequence to a character.  </p>\n<p> An encoding operation can fail if the input character cannot be represented by the encoding. For example, a <a class=\"xref\" href=\"system.text.asciiencoding\" data-linktype=\"relative-path\">ASCIIEncoding</a> object cannot encode a character that yields a Unicode code point value that is outside the range U+0000 to U+007F.  </p>\n<p> In cases where an encoding or decoding conversion cannot be performed, the .NET Framework provides a failure-handling mechanism called a fallback. Your application can use the predefined .NET Framework encoder fallback, or it can create a custom encoder fallback derived from the <a class=\"xref\" href=\"system.text.encoderfallback\" data-linktype=\"relative-path\">EncoderFallback</a> and <a class=\"xref\" href=\"system.text.encoderfallbackbuffer\" data-linktype=\"relative-path\">EncoderFallbackBuffer</a> classes.  </p>\n<p> The .NET Framework provides two predefined classes that implement different fallback strategies for handling encoding conversion failures. The <a class=\"xref\" href=\"system.text.encoderreplacementfallback\" data-linktype=\"relative-path\">EncoderReplacementFallback</a> class substitutes a string provided for any input character that cannot be converted. The substitute string is encoded in place of the invalid character, and then the encoding operation continues converting the remainder of the input. In contrast, the EncoderExceptionFallback class throws a <a class=\"xref\" href=\"system.text.encoderfallbackexception\" data-linktype=\"relative-path\">EncoderFallbackException</a> when an invalid character is encountered.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_EncoderExceptionFallback__ctor\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">EncoderExceptionFallback()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.text.encoderexceptionfallback\" data-linktype=\"relative-path\">EncoderExceptionFallback</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public EncoderExceptionFallback ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_EncoderExceptionFallback_MaxCharCount\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">MaxCharCount</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the maximum number of characters this instance can return.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override int MaxCharCount { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The return value is always zero.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_EncoderExceptionFallback_CreateFallbackBuffer\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CreateFallbackBuffer()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns an encoder fallback buffer that throws an exception if it cannot convert a character sequence to a byte sequence.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override System.Text.EncoderFallbackBuffer CreateFallbackBuffer ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoderfallbackbuffer\" data-linktype=\"relative-path\">EncoderFallbackBuffer</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>An encoder fallback buffer that throws an exception when it cannot encode a character sequence.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>An encoder fallback buffer is responsible for receiving and handling characters that an encoder cannot convert to a byte sequence. This method returns an instance of the <a class=\"xref\" href=\"system.text.encoderexceptionfallbackbuffer\" data-linktype=\"relative-path\">EncoderExceptionFallbackBuffer</a> class, which is a subclass of  the <a class=\"xref\" href=\"system.text.encoderfallbackbuffer\" data-linktype=\"relative-path\">EncoderFallbackBuffer</a> class. An <a class=\"xref\" href=\"system.text.encoderexceptionfallbackbuffer\" data-linktype=\"relative-path\">EncoderExceptionFallbackBuffer</a> object throws an <a class=\"xref\" href=\"system.text.encoderfallbackexception\" data-linktype=\"relative-path\">EncoderFallbackException</a> exception whenever characters are passed to its <a class=\"xref\" href=\"system.text.encoderexceptionfallbackbuffer#System_Text_EncoderExceptionFallbackBuffer_Fallback_\" data-linktype=\"relative-path\">Fallback</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_EncoderExceptionFallback_Equals_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Equals(Object)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Indicates whether the current <a class=\"xref\" href=\"system.text.encoderexceptionfallback\" data-linktype=\"relative-path\">EncoderExceptionFallback</a> object and a specified object are equal.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override bool Equals (object value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object that derives from the <a class=\"xref\" href=\"system.text.encoderexceptionfallback\" data-linktype=\"relative-path\">EncoderExceptionFallback</a> class.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if <code>value</code> is not <code>null</code> (<code>Nothing</code> in Visual Basic .NET) and is a <a class=\"xref\" href=\"system.text.encoderexceptionfallback\" data-linktype=\"relative-path\">EncoderExceptionFallback</a> object; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_EncoderExceptionFallback_GetHashCode\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetHashCode()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Retrieves the hash code for this instance.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override int GetHashCode ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The return value is always the same arbitrary value, and has no special significance.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Because the GetHashCode method always returns the same value, the application should not use this value to distinguish one instance of the <a class=\"xref\" href=\"system.text.encoderexceptionfallback\" data-linktype=\"relative-path\">EncoderExceptionFallback</a> class from another.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Text.EncoderExceptionFallback.yml\">\r\n<meta name=\"APIName\" content=\"System.Text.EncoderExceptionFallback\">\r\n<meta name=\"APIName\" content=\"System.Text.EncoderExceptionFallback..ctor\">\r\n<meta name=\"APIName\" content=\"System.Text.EncoderExceptionFallback.CreateFallbackBuffer\">\r\n<meta name=\"APIName\" content=\"System.Text.EncoderExceptionFallback.Equals\">\r\n<meta name=\"APIName\" content=\"System.Text.EncoderExceptionFallback.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Text.EncoderExceptionFallback.MaxCharCount\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-29 05:54 AM\">\r\n<meta name=\"document_id\" content=\"11a105b5-6a89-0cfd-24e0-7b9db27c11a0\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides a failure-handling mechanism, called a fallback, for an input character that cannot be converted to an output byte sequence. The fallback throws an exception if an input character cannot be…\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.text/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Text.EncoderExceptionFallback\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Text.EncoderExceptionFallback.yml","open_to_public_contributors":false,"api_name":["System.Text.EncoderExceptionFallback","System.Text.EncoderExceptionFallback..ctor","System.Text.EncoderExceptionFallback.CreateFallbackBuffer","System.Text.EncoderExceptionFallback.Equals","System.Text.EncoderExceptionFallback.GetHashCode","System.Text.EncoderExceptionFallback.MaxCharCount"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Text.EncoderExceptionFallback","System::Text::EncoderExceptionFallback","System.Text.EncoderExceptionFallback.#ctor","System::Text::EncoderExceptionFallback::#ctor","System.Text.EncoderExceptionFallback.CreateFallbackBuffer","System::Text::EncoderExceptionFallback::CreateFallbackBuffer","System.Text.EncoderExceptionFallback.Equals","System::Text::EncoderExceptionFallback::Equals","System.Text.EncoderExceptionFallback.GetHashCode","System::Text::EncoderExceptionFallback::GetHashCode","System.Text.EncoderExceptionFallback.MaxCharCount","System::Text::EncoderExceptionFallback::MaxCharCount"],"dev_langs":["csharp"],"updated_at":"2017-03-29 05:54 AM","document_id":"11a105b5-6a89-0cfd-24e0-7b9db27c11a0","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Text/EncoderExceptionFallback.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"EncoderExceptionFallback class | Microsoft Docs","_op_ogTitle":"EncoderExceptionFallback class","description":"Provides a failure-handling mechanism, called a fallback, for an input character that cannot be converted to an output byte sequence. The fallback throws an exception if an input character cannot be…","toc_asset_id":"api/_splitted/System.Text/toc.json","toc_rel":"_splitted/System.Text/toc.json","source_url":"","ms.assetid":"System.Text.EncoderExceptionFallback","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.text.encoderexceptionfallback","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.text.encoderexceptionfallback","fileRelativePath":"api/System.Text.EncoderExceptionFallback.html"},"themesRelativePathToOutputRoot":"_themes/"}