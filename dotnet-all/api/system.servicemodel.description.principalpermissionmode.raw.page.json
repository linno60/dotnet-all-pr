{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">PrincipalPermissionMode</span>\r\n      Enum\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Sets the mode for authorization checks when using the <a class=\"xref\" href=\"system.security.permissions.principalpermissionattribute\" data-linktype=\"relative-path\">PrincipalPermissionAttribute</a> to control access to a method.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\r\n  \t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public enum PrincipalPermissionMode</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a></span></div><span class=\"lang-csharp\">PrincipalPermissionMode</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example shows how to specify UseAspNetRoles.  </p>\n<pre><code class=\"lang-cs\" name=\"PrincipalPermissionMode#7\">namespace TestPrincipalPermission\n{\n    class PrincipalPermissionModeWindows\n    {\n    \n        [ServiceContract]\n        interface ISecureService\n        {\n            [OperationContract]\n            string Method1();\n        }\n                \n        class SecureService : ISecureService\n        {\n            [PrincipalPermission(SecurityAction.Demand, Role = &quot;everyone&quot;)]\n            public string Method1()\n            {\n                return String.Format(&quot;Hello, \\&quot;{0}\\&quot;&quot;, Thread.CurrentPrincipal.Identity.Name);\n            }\n        }\n\n        public void Run()\n        {\n            Uri serviceUri = new Uri(@&quot;http://localhost:8006/Service&quot;);\n            ServiceHost service = new ServiceHost(typeof(SecureService));\n            service.AddServiceEndpoint(typeof(ISecureService), GetBinding(), serviceUri);\n            service.Authorization.PrincipalPermissionMode = PrincipalPermissionMode.UseAspNetRoles;\n            service.Open();\n\n            EndpointAddress sr = new EndpointAddress(\n                serviceUri, EndpointIdentity.CreateUpnIdentity(WindowsIdentity.GetCurrent().Name));\n            ChannelFactory&lt;ISecureService&gt; cf = new ChannelFactory&lt;ISecureService&gt;(GetBinding(), sr);\n            ISecureService client = cf.CreateChannel();\n            Console.WriteLine(&quot;Client received response from Method1: {0}&quot;, client.Method1());\n            ((IChannel)client).Close();\n            Console.ReadLine();\n            service.Close();\n            \n        }\n\n        public static Binding GetBinding()\n        {\n            WSHttpBinding binding = new WSHttpBinding(SecurityMode.Message);\n            binding.Security.Message.ClientCredentialType = MessageCredentialType.Windows;\n            return binding;\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"PrincipalPermissionMode#7\">Namespace TestPrincipalPermission\n\tFriend Class PrincipalPermissionModeWindows\n\n\t\t&lt;ServiceContract&gt; _\n\t\tPrivate Interface ISecureService\n\t\t\t&lt;OperationContract&gt; _\n\t\t\tFunction Method1() As String\n\t\tEnd Interface\n\n\t\tPrivate Class SecureService\n\t\t\tImplements ISecureService\n            &lt;PrincipalPermission(SecurityAction.Demand, Role:=&quot;everyone&quot;)&gt; _\n            Public Function Method1() As String Implements ISecureService.Method1\n                Return String.Format(&quot;Hello, &quot;&quot;{0}&quot;&quot;&quot;, Thread.CurrentPrincipal.Identity.Name)\n            End Function\n\n\t\tEnd Class\n\n\t\tPublic Sub Run()\n\t\t\tDim serviceUri As New Uri(&quot;http://localhost:8006/Service&quot;)\n\t\t\tDim service As New ServiceHost(GetType(SecureService))\n\t\t\tservice.AddServiceEndpoint(GetType(ISecureService), GetBinding(), serviceUri)\n\t\t\tservice.Authorization.PrincipalPermissionMode = PrincipalPermissionMode.UseAspNetRoles\n\t\t\tservice.Open()\n\n\t\t\tDim sr As New EndpointAddress(serviceUri, EndpointIdentity.CreateUpnIdentity(WindowsIdentity.GetCurrent().Name))\n\t\t\tDim cf As New ChannelFactory(Of ISecureService)(GetBinding(), sr)\n\t\t\tDim client As ISecureService = cf.CreateChannel()\n\t\t\tConsole.WriteLine(&quot;Client received response from Method1: {0}&quot;, client.Method1())\n\t\t\tCType(client, IChannel).Close()\n\t\t\tConsole.ReadLine()\n\t\t\tservice.Close()\n\n\t\tEnd Sub\n\n\t\tPublic Shared Function GetBinding() As Binding\n\t\t\tDim binding As New WSHttpBinding(SecurityMode.Message)\n\t\t\tbinding.Security.Message.ClientCredentialType = MessageCredentialType.Windows\n\t\t\tReturn binding\n\t\tEnd Function\n\tEnd Class\nEnd Namespace\n</code></pre><p> The following example shows how to specify Custom.  </p>\n<pre><code class=\"lang-cs\" name=\"PrincipalPermissionMode#8\">namespace CustomMode\n{\n    public class Test\n    {\n        public static void Main()\n        {\n            try\n            {\n                ShowPrincipalPermissionModeCustom ppwm = new ShowPrincipalPermissionModeCustom();\n                ppwm.Run();\n\n            }\n            catch (Exception exc)\n            {\n                Console.WriteLine(&quot;Error: {0}&quot;, exc.Message);\n                Console.ReadLine();\n            }\n        }\n    }\n\n    class ShowPrincipalPermissionModeCustom\n    {\n        [ServiceContract]\n        interface ISecureService\n        {\n            [OperationContract]\n            string Method1(string request);\n        }\n\n        [ServiceBehavior]\n        class SecureService : ISecureService\n        {\n            [PrincipalPermission(SecurityAction.Demand, Role = &quot;everyone&quot;)]\n            public string Method1(string request)\n            {\n                return String.Format(&quot;Hello, \\&quot;{0}\\&quot;&quot;, Thread.CurrentPrincipal.Identity.Name);\n            }\n        }\n\n        public void Run()\n        {\n            Uri serviceUri = new Uri(@&quot;http://localhost:8006/Service&quot;);\n            ServiceHost service = new ServiceHost(typeof(SecureService));\n            service.AddServiceEndpoint(typeof(ISecureService), GetBinding(), serviceUri);\n            List&lt;IAuthorizationPolicy&gt; policies = new List&lt;IAuthorizationPolicy&gt;();\n            policies.Add(new CustomAuthorizationPolicy());\n            service.Authorization.ExternalAuthorizationPolicies = policies.AsReadOnly();\n            service.Authorization.PrincipalPermissionMode = PrincipalPermissionMode.Custom;\n            service.Open();\n\n            EndpointAddress sr = new EndpointAddress(\n                serviceUri, EndpointIdentity.CreateUpnIdentity(WindowsIdentity.GetCurrent().Name));\n            ChannelFactory&lt;ISecureService&gt; cf = new ChannelFactory&lt;ISecureService&gt;(GetBinding(), sr);\n            ISecureService client = cf.CreateChannel();\n            Console.WriteLine(&quot;Client received response from Method1: {0}&quot;, client.Method1(&quot;hello&quot;));\n            ((IChannel)client).Close();\n            Console.ReadLine();\n            service.Close();            \n        }\n\n        public static Binding GetBinding()\n        {\n            WSHttpBinding binding = new WSHttpBinding(SecurityMode.Message);\n            binding.Security.Message.ClientCredentialType = MessageCredentialType.Windows;\n            return binding;\n        }\n\n        class CustomAuthorizationPolicy : IAuthorizationPolicy\n        {\n            string id = Guid.NewGuid().ToString();\n\n            public string Id\n            {\n                get { return this.id; }\n            }\n\n            public ClaimSet Issuer\n            {\n                get { return ClaimSet.System; }\n            }\n\n            public bool Evaluate(EvaluationContext context, ref object state)\n            {\n                object obj;\n                if (!context.Properties.TryGetValue(&quot;Identities&quot;, out obj))\n                    return false;\n\n                IList&lt;IIdentity&gt; identities = obj as IList&lt;IIdentity&gt;;\n                if (obj == null || identities.Count &lt;= 0)\n                    return false;\n\n                context.Properties[&quot;Principal&quot;] = new CustomPrincipal(identities[0]);\n                return true;\n            }\n        }\n\n        class CustomPrincipal : IPrincipal\n        {\n            IIdentity identity;\n            public CustomPrincipal(IIdentity identity)\n            {\n                this.identity = identity;\n            }\n\n            public IIdentity Identity\n            {\n                get { return this.identity; }\n            }\n\n            public bool IsInRole(string role)\n            {\n                return true;\n            }\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"PrincipalPermissionMode#8\">Namespace CustomMode\n\tPublic Class Test\n\t\tPublic Shared Sub Main()\n\t\t\tTry\n\t\t\t\tDim ppwm As New ShowPrincipalPermissionModeCustom()\n\t\t\t\tppwm.Run()\n\n\t\t\tCatch exc As Exception\n\t\t\t\tConsole.WriteLine(&quot;Error: {0}&quot;, exc.Message)\n\t\t\t\tConsole.ReadLine()\n\t\t\tEnd Try\n\t\tEnd Sub\n\tEnd Class\n\n\tFriend Class ShowPrincipalPermissionModeCustom\n\t\t&lt;ServiceContract&gt; _\n\t\tPrivate Interface ISecureService\n\t\t\t&lt;OperationContract&gt; _\n\t\t\tFunction Method1(ByVal request As String) As String\n\t\tEnd Interface\n\n\t\t&lt;ServiceBehavior&gt; _\n\t\tPrivate Class SecureService\n\t\t\tImplements ISecureService\n            &lt;PrincipalPermission(SecurityAction.Demand, Role:=&quot;everyone&quot;)&gt; _\n            Public Function Method1(ByVal request As String) As String Implements ISecureService.Method1\n                Return String.Format(&quot;Hello, &quot;&quot;{0}&quot;&quot;&quot;, Thread.CurrentPrincipal.Identity.Name)\n            End Function\n\t\tEnd Class\n\n\t\tPublic Sub Run()\n\t\t\tDim serviceUri As New Uri(&quot;http://localhost:8006/Service&quot;)\n\t\t\tDim service As New ServiceHost(GetType(SecureService))\n\t\t\tservice.AddServiceEndpoint(GetType(ISecureService), GetBinding(), serviceUri)\n\t\t\tDim policies As New List(Of IAuthorizationPolicy)()\n\t\t\tpolicies.Add(New CustomAuthorizationPolicy())\n\t\t\tservice.Authorization.ExternalAuthorizationPolicies = policies.AsReadOnly()\n\t\t\tservice.Authorization.PrincipalPermissionMode = PrincipalPermissionMode.Custom\n\t\t\tservice.Open()\n\n\t\t\tDim sr As New EndpointAddress(serviceUri, EndpointIdentity.CreateUpnIdentity(WindowsIdentity.GetCurrent().Name))\n\t\t\tDim cf As New ChannelFactory(Of ISecureService)(GetBinding(), sr)\n\t\t\tDim client As ISecureService = cf.CreateChannel()\n\t\t\tConsole.WriteLine(&quot;Client received response from Method1: {0}&quot;, client.Method1(&quot;hello&quot;))\n\t\t\tCType(client, IChannel).Close()\n\t\t\tConsole.ReadLine()\n\t\t\tservice.Close()\n\t\tEnd Sub\n\n\t\tPublic Shared Function GetBinding() As Binding\n\t\t\tDim binding As New WSHttpBinding(SecurityMode.Message)\n\t\t\tbinding.Security.Message.ClientCredentialType = MessageCredentialType.Windows\n\t\t\tReturn binding\n\t\tEnd Function\n\n\t\tPrivate Class CustomAuthorizationPolicy\n\t\t\tImplements IAuthorizationPolicy\n\t\t\tPrivate id_Renamed As String = Guid.NewGuid().ToString()\n\n\t\t\tPublic ReadOnly Property Id() As String Implements System.IdentityModel.Policy.IAuthorizationComponent.Id\n\t\t\t\tGet\n\t\t\t\t\tReturn Me.id_Renamed\n\t\t\t\tEnd Get\n\t\t\tEnd Property\n\n\t\t\tPublic ReadOnly Property Issuer() As ClaimSet Implements IAuthorizationPolicy.Issuer\n\t\t\t\tGet\n\t\t\t\t\tReturn ClaimSet.System\n\t\t\t\tEnd Get\n\t\t\tEnd Property\n\n\t\t\tPublic Function Evaluate(ByVal context As EvaluationContext, ByRef state As Object) As Boolean Implements IAuthorizationPolicy.Evaluate\n                Dim obj As Object = Nothing\n\t\t\t\tIf (Not context.Properties.TryGetValue(&quot;Identities&quot;, obj)) Then\n\t\t\t\t\tReturn False\n\t\t\t\tEnd If\n\n\t\t\t\tDim identities As IList(Of IIdentity) = TryCast(obj, IList(Of IIdentity))\n\t\t\t\tIf obj Is Nothing OrElse identities.Count &lt;= 0 Then\n\t\t\t\t\tReturn False\n\t\t\t\tEnd If\n\n\t\t\t\tcontext.Properties(&quot;Principal&quot;) = New CustomPrincipal(identities(0))\n\t\t\t\tReturn True\n\t\t\tEnd Function\n\t\tEnd Class\n\n\t\tPrivate Class CustomPrincipal\n\t\t\tImplements IPrincipal\n\t\t\tPrivate identity_Renamed As IIdentity\n\t\t\tPublic Sub New(ByVal identity As IIdentity)\n\t\t\t\tMe.identity_Renamed = identity\n\t\t\tEnd Sub\n\n\t\t\tPublic ReadOnly Property Identity() As IIdentity Implements IPrincipal.Identity\n\t\t\t\tGet\n\t\t\t\t\tReturn Me.identity_Renamed\n\t\t\t\tEnd Get\n\t\t\tEnd Property\n\n\t\t\tPublic Function IsInRole(ByVal role As String) As Boolean Implements IPrincipal.IsInRole\n\t\t\t\tReturn True\n\t\t\tEnd Function\n\t\tEnd Class\n\tEnd Class\nEnd Namespace\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>When applying the <a class=\"xref\" href=\"system.security.permissions.principalpermissionattribute\" data-linktype=\"relative-path\">PrincipalPermissionAttribute</a> to a method, this mode specifies which set of roles to use when authorizing access. By default, the attribute uses Windows groups (such as <code>Administrator</code> or <code>Users</code>) to specify the role to which the user must belong.  </p>\n<p> To set the mode programmatically, create an instance of the <code>ServiceHost</code> class, then find the <a class=\"xref\" href=\"system.servicemodel.description.serviceauthorizationbehavior\" data-linktype=\"relative-path\">ServiceAuthorizationBehavior</a> in its collection of behaviors, and set the <a class=\"xref\" href=\"system.servicemodel.description.serviceauthorizationbehavior#System_ServiceModel_Description_ServiceAuthorizationBehavior_PrincipalPermissionMode_\" data-linktype=\"relative-path\">PrincipalPermissionMode</a> to the appropriate enumeration. The following example sets the property to UseAspNetRoles.  </p>\n<pre><code class=\"lang-cs\" name=\"PrincipalPermissionMode#1\">ServiceHost myServiceHost = new ServiceHost(typeof(Calculator), baseUri);\nServiceAuthorizationBehavior myServiceBehavior =\n    myServiceHost.Description.Behaviors.Find&lt;ServiceAuthorizationBehavior&gt;();\nmyServiceBehavior.PrincipalPermissionMode =\n    PrincipalPermissionMode.UseAspNetRoles;\n</code></pre><pre><code class=\"lang-vb\" name=\"PrincipalPermissionMode#1\">Dim myServiceHost As New ServiceHost(GetType(Calculator), baseUri)\nDim myServiceBehavior As ServiceAuthorizationBehavior = myServiceHost.Description.Behaviors.Find(Of ServiceAuthorizationBehavior)()\nmyServiceBehavior.PrincipalPermissionMode = PrincipalPermissionMode.UseAspNetRoles\n</code></pre><p> You can also set the behavior in configuration by adding a <a href=\"../Topic/%3CserviceAuthorization%3E%20element.md\" data-linktype=\"relative-path\">&amp;lt;serviceAuthorization&amp;gt;</a> to the <a href=\"../Topic/%3CserviceBehaviors%3E.md\" data-linktype=\"relative-path\">&amp;lt;serviceBehaviors&amp;gt;</a> of a configuration file, as shown in the following code.  </p>\n<pre><code class=\"lang-cs\" name=\"PrincipalPermissionMode#10\">// Only a client authenticated with a valid certificate that has the \n// specified subject name and thumbprint can call this method.\n[PrincipalPermission(SecurityAction.Demand,\n     Name = &quot;CN=ReplaceWithSubjectName; 123456712345677E8E230FDE624F841B1CE9D41E&quot;)]\npublic double Multiply(double a, double b)\n{\n    return a * b;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"PrincipalPermissionMode#10\">&#39; Only a client authenticated with a valid certificate that has the \n&#39; specified subject name and thumbprint can call this method.\n&lt;PrincipalPermission(SecurityAction.Demand, Name := &quot;CN=ReplaceWithSubjectName; 123456712345677E8E230FDE624F841B1CE9D41E&quot;)&gt; _\nPublic Function Multiply(ByVal a As Double, ByVal b As Double) As Double\n\tReturn a * b\nEnd Function\n</code></pre><p> The enumeration affects how the <a class=\"xref\" href=\"system.security.permissions.principalpermissionattribute\" data-linktype=\"relative-path\">PrincipalPermissionAttribute</a> attribute authorizes a user when it is applied to a method. The following example applies the attribute to a method and demands that the user belong to the Users group on the computer. This code works only when the <a class=\"xref\" href=\"system.servicemodel.description.serviceauthorizationbehavior#System_ServiceModel_Description_ServiceAuthorizationBehavior_PrincipalPermissionMode_\" data-linktype=\"relative-path\">PrincipalPermissionMode</a> is set to <code>UseWindowsGroup</code> (the default setting).  </p>\n<pre><code class=\"lang-cs\" name=\"PrincipalPermissionMode#2\">// Only members of the CalculatorClients group can call this method.\n[PrincipalPermission(SecurityAction.Demand, Role = &quot;Users&quot;)]\npublic double Add(double a, double b)\n{\n    return a + b;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"PrincipalPermissionMode#2\">&#39; Only members of the CalculatorClients group can call this method.\n&lt;PrincipalPermission(SecurityAction.Demand, Role := &quot;Users&quot;)&gt; _\nPublic Function Add(ByVal a As Double, ByVal b As Double) As Double\n\tReturn a + b\nEnd Function\n</code></pre><h3 class=\"accented\" id=\"useaspnetroles\">UseAspNetRoles</h3>\n<p> The UseAspNetRoles value is used for all credential types. This mode enables Windows Communication Foundation (WCF) to use the ASP.NET role provider to make authorization decisions.  </p>\n<p> When the credential for a service is an X.509 certificate, you can set the <code>Name</code> property of the <a class=\"xref\" href=\"system.security.permissions.principalpermissionattribute\" data-linktype=\"relative-path\">PrincipalPermissionAttribute</a> to a string that consists of the concatenated values of the Subject field and the Thumbprint field, as shown in the following example.  </p>\n<pre><code class=\"lang-cs\" name=\"PrincipalPermissionMode#3\">ServiceHost myServiceHost = new ServiceHost(typeof(Calculator), baseUri);\nServiceAuthorizationBehavior myServiceBehavior =\n    myServiceHost.Description.Behaviors.Find&lt;ServiceAuthorizationBehavior&gt;();\nmyServiceBehavior.PrincipalPermissionMode =\n    PrincipalPermissionMode.UseAspNetRoles;\nMyServiceAuthorizationManager sm = new MyServiceAuthorizationManager();\nmyServiceBehavior.ServiceAuthorizationManager = sm;\n</code></pre><pre><code class=\"lang-vb\" name=\"PrincipalPermissionMode#3\">Dim myServiceHost As New ServiceHost(GetType(Calculator), baseUri)\nDim myServiceBehavior As ServiceAuthorizationBehavior = myServiceHost.Description.Behaviors.Find(Of ServiceAuthorizationBehavior)()\nmyServiceBehavior.PrincipalPermissionMode = PrincipalPermissionMode.UseAspNetRoles\nDim sm As New MyServiceAuthorizationManager()\nmyServiceBehavior.ServiceAuthorizationManager = sm\n</code></pre><p> The concatenated string consists of the subject and thumbprint values separated by a semicolon and a space.  </p>\n<p> It is also possible for a certificate to have a Subject field set to a null string. In that case, you can set the <code>Name</code> property to a semicolon followed by a space and then the thumbprint, as shown in the following example.  </p>\n<pre><code class=\"lang-cs\" name=\"PrincipalPermissionMode#4\">// Only a client authenticated with a valid certificate that has the \n// specified thumbprint can call this method.\n[PrincipalPermission(SecurityAction.Demand,\n     Name = &quot;; 123456712345677E8E230FDE624F841B1CE9D41E&quot;)]\npublic double Divide(double a, double b)\n{\n    return a * b;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"PrincipalPermissionMode#4\">&#39; Only a client authenticated with a valid certificate that has the \n&#39; specified thumbprint can call this method.\n&lt;PrincipalPermission(SecurityAction.Demand, Name := &quot;; 123456712345677E8E230FDE624F841B1CE9D41E&quot;)&gt; _\nPublic Function Divide(ByVal a As Double, ByVal b As Double) As Double\n\tReturn a * b\nEnd Function\n</code></pre><p> If an ASP.NET role provider is present, you can also set the <a class=\"xref\" href=\"system.security.permissions.principalpermissionattribute#System_Security_Permissions_PrincipalPermissionAttribute_Role_\" data-linktype=\"relative-path\">Role</a> property to a role in the database. By default, the database is represented by the <a class=\"xref\" href=\"system.web.security.sqlroleprovider\" data-linktype=\"relative-path\">SqlRoleProvider</a>. You can also set a custom role provider with the <a class=\"xref\" href=\"system.servicemodel.description.serviceauthorizationbehavior#System_ServiceModel_Description_ServiceAuthorizationBehavior_RoleProvider_\" data-linktype=\"relative-path\">RoleProvider</a> property of the <a class=\"xref\" href=\"system.servicemodel.description.serviceauthorizationbehavior\" data-linktype=\"relative-path\">ServiceAuthorizationBehavior</a> class. The following code sets the role to <code>Administrators</code>. Note that the role provider must map the user account to that role.  </p>\n<pre><code class=\"lang-cs\" name=\"PrincipalPermissionMode#13\">[PrincipalPermission(SecurityAction.Demand, Role = &quot;Administrators&quot;)]\npublic string ReadFile(string fileName)\n{\n    // Code not shown.\n    return &quot;Not implemented&quot;;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"PrincipalPermissionMode#13\">&lt;PrincipalPermission(SecurityAction.Demand, Role := &quot;Administrators&quot;)&gt; _\nPublic Function ReadFile(ByVal fileName As String) As String\n\t&#39; Code not shown.\n\tReturn &quot;Not implemented&quot;\nEnd Function\n</code></pre><p> For more information about the ASP.NET Role provider, see <a href=\"http://go.microsoft.com/fwlink/?LinkId=96692\" data-linktype=\"external\">How To: Use Role Manager in ASP.NET 2.0</a>.  </p>\n<p> For more information about using WCF and the role provider, see <a href=\"../Topic/How%20to:%20Use%20the%20ASP.NET%20Role%20Provider%20with%20a%20Service.md\" data-linktype=\"relative-path\">How to: Use the ASP.NET Role Provider with a Service</a>.  </p>\n<h3 class=\"accented\" id=\"custom\">Custom</h3>\n<p> When the property is set to Custom, you must also provide a custom class that implements the <a class=\"xref\" href=\"system.identitymodel.policy.iauthorizationpolicy\" data-linktype=\"relative-path\">IAuthorizationPolicy</a> class. This class is responsible for providing the caller&#39;s <code>IPrincipal</code> representation inside the <a class=\"xref\" href=\"system.identitymodel.policy.evaluationcontext#System_IdentityModel_Policy_EvaluationContext_Properties_\" data-linktype=\"relative-path\">Properties</a> collection. It must store the <code>IPrincipal</code> instance to the properties collection using the &quot;Principal&quot; string key, as shown in the following example.  </p>\n<pre><code>evaluationContext.Properties[&quot;Principal&quot;]=new CustomPrincipal(identity);  \n</code></pre><h3 class=\"accented\" id=\"background\">Background</h3>\n<p> The role-based security in .NET Framework enables applications to specify authorizations through code. By specifying the <a class=\"xref\" href=\"system.security.permissions.principalpermission\" data-linktype=\"relative-path\">PrincipalPermission</a> demand, the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_CurrentPrincipal_\" data-linktype=\"relative-path\">CurrentPrincipal</a> must satisfy the <code>PrincipalPermission</code> requirement. For example, that the user must be in a specific role or group. Otherwise, the thread is not authorized to execute the code, which results in an exception. WCF provides a set of PrincipalPermissionMode selections to specify the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_CurrentPrincipal_\" data-linktype=\"relative-path\">CurrentPrincipal</a> based on <a class=\"xref\" href=\"system.security.securitycontext\" data-linktype=\"relative-path\">SecurityContext</a> accordingly.</p>\n\r\n  \r\n      \t<h2 class=\"accented\">Fields\r\n      </h2>\r\n      <table class=\"nameValue\">\r\n      \t<tr><td id=\"System_ServiceModel_Description_PrincipalPermissionMode_Always\">\r\n      \t\t\t<span class=\"lang-csharp\">Always</span>\r\n      \t</td>\r\n      \t<td><p>Always enables the user to specify a <a class=\"xref\" href=\"system.security.principal.iprincipal\" data-linktype=\"relative-path\">IPrincipal</a> class for <span class=\"xref\">stem.Threading.Thread.CurrentPrincipal*</span>.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_ServiceModel_Description_PrincipalPermissionMode_Custom\">\r\n      \t\t\t<span class=\"lang-csharp\">Custom</span>\r\n      \t</td>\r\n      \t<td><p>Enables the user to specify a custom <a class=\"xref\" href=\"system.security.principal.iprincipal\" data-linktype=\"relative-path\">IPrincipal</a> class for <span class=\"xref\">stem.Threading.Thread.CurrentPrincipal*</span>.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_ServiceModel_Description_PrincipalPermissionMode_None\">\r\n      \t\t\t<span class=\"lang-csharp\">None</span>\r\n      \t</td>\r\n      \t<td><p><span class=\"xref\">stem.Threading.Thread.CurrentPrincipal*</span> is not set.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_ServiceModel_Description_PrincipalPermissionMode_UseAspNetRoles\">\r\n      \t\t\t<span class=\"lang-csharp\">UseAspNetRoles</span>\r\n      \t</td>\r\n      \t<td><p><span class=\"xref\">stem.Threading.Thread.CurrentPrincipal*</span> is set based on the ASP.NET role provider (<a class=\"xref\" href=\"system.web.security.roleprovider\" data-linktype=\"relative-path\">RoleProvider</a>).</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_ServiceModel_Description_PrincipalPermissionMode_UseWindowsGroups\">\r\n      \t\t\t<span class=\"lang-csharp\">UseWindowsGroups</span>\r\n      \t</td>\r\n      \t<td><p><span class=\"xref\">stem.Threading.Thread.CurrentPrincipal*</span> is set based on Windows (<a class=\"xref\" href=\"system.security.principal.windowsprincipal\" data-linktype=\"relative-path\">WindowsPrincipal</a>). If the user identity is not associated with a Windows account, anonymous Windows is used.</p>\n</td>\r\n      \t</tr>\r\n      </table>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.ServiceModel.Description.PrincipalPermissionMode.yml\">\r\n<meta name=\"APIName\" content=\"System.ServiceModel.Description.PrincipalPermissionMode\">\r\n<meta name=\"APIName\" content=\"System.ServiceModel.Description.PrincipalPermissionMode.Always\">\r\n<meta name=\"APIName\" content=\"System.ServiceModel.Description.PrincipalPermissionMode.Custom\">\r\n<meta name=\"APIName\" content=\"System.ServiceModel.Description.PrincipalPermissionMode.None\">\r\n<meta name=\"APIName\" content=\"System.ServiceModel.Description.PrincipalPermissionMode.UseAspNetRoles\">\r\n<meta name=\"APIName\" content=\"System.ServiceModel.Description.PrincipalPermissionMode.UseWindowsGroups\">\r\n<meta name=\"APILocation\" content=\"System.ServiceModel.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 05:47 AM\">\r\n<meta name=\"document_id\" content=\"f105d0b5-3f3b-d4ae-4f35-cc8418301af4\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Sets the mode for authorization checks when using the  to control access to a method.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.servicemodel.description/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.ServiceModel.Description.PrincipalPermissionMode\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.ServiceModel.Description.PrincipalPermissionMode.yml","open_to_public_contributors":false,"api_name":["System.ServiceModel.Description.PrincipalPermissionMode","System.ServiceModel.Description.PrincipalPermissionMode.Always","System.ServiceModel.Description.PrincipalPermissionMode.Custom","System.ServiceModel.Description.PrincipalPermissionMode.None","System.ServiceModel.Description.PrincipalPermissionMode.UseAspNetRoles","System.ServiceModel.Description.PrincipalPermissionMode.UseWindowsGroups"],"api_location":["System.ServiceModel.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.ServiceModel.Description.PrincipalPermissionMode","System::ServiceModel::Description::PrincipalPermissionMode","System.ServiceModel.Description.PrincipalPermissionMode.Always","System::ServiceModel::Description::PrincipalPermissionMode::Always","System.ServiceModel.Description.PrincipalPermissionMode.Custom","System::ServiceModel::Description::PrincipalPermissionMode::Custom","System.ServiceModel.Description.PrincipalPermissionMode.None","System::ServiceModel::Description::PrincipalPermissionMode::None","System.ServiceModel.Description.PrincipalPermissionMode.UseAspNetRoles","System::ServiceModel::Description::PrincipalPermissionMode::UseAspNetRoles","System.ServiceModel.Description.PrincipalPermissionMode.UseWindowsGroups","System::ServiceModel::Description::PrincipalPermissionMode::UseWindowsGroups"],"dev_langs":["csharp"],"updated_at":"2017-03-31 05:47 AM","document_id":"f105d0b5-3f3b-d4ae-4f35-cc8418301af4","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.ServiceModel.Description/PrincipalPermissionMode.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"PrincipalPermissionMode enum | Microsoft Docs","_op_ogTitle":"PrincipalPermissionMode enum","description":"Sets the mode for authorization checks when using the  to control access to a method.\n","toc_asset_id":"api/_splitted/System.ServiceModel.Description/toc.json","toc_rel":"_splitted/System.ServiceModel.Description/toc.json","source_url":"","ms.assetid":"System.ServiceModel.Description.PrincipalPermissionMode","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.servicemodel.description.principalpermissionmode","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.servicemodel.description.principalpermissionmode","fileRelativePath":"api/System.ServiceModel.Description.PrincipalPermissionMode.html"},"themesRelativePathToOutputRoot":"_themes/"}