{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">FirstChanceExceptionEventArgs</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Provides data for the notification event that is raised when a managed exception first occurs, before the common language runtime begins searching for event handlers.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public class FirstChanceExceptionEventArgs : EventArgs</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></span></div><span class=\"lang-csharp\">FirstChanceExceptionEventArgs</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs#System_EventArgs_Empty\" data-linktype=\"relative-path\">Empty</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example creates a series of application domains named <code>Child_0</code> through <code>Child_3</code>, with a <code>Worker</code> object in each application domain. Each <code>Worker</code> object has a reference to the <code>Worker</code> object in the next application domain, except for the <code>Worker</code> in the last application domain. The <a class=\"xref\" href=\"system.appdomain#System_AppDomain_FirstChanceException\" data-linktype=\"relative-path\">FirstChanceException</a> event is handled in all application domains except <code>Child_1</code>.  </p>\n<p> When the application domains have been created, the default application domain calls the <code>TestException</code> method for the first child application domain. Each <code>Worker</code> object calls the <code>TestException</code> method for the next, until the last <code>Worker</code> throws an exception that is either handled or unhandled. Thus, the current thread passes through all the application domains, and <code>TestException</code> is added to the stack in each application domain.  </p>\n<p> When the last <code>Worker</code> object handles the exception, the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_FirstChanceException\" data-linktype=\"relative-path\">FirstChanceException</a> event is raised only in the last application domain. The other application domains never get a chance to handle the exception, so the event is not raised.  </p>\n<p> When the last <code>Worker</code> object does not handle the exception, the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_FirstChanceException\" data-linktype=\"relative-path\">FirstChanceException</a> event is raised in each application domain that has an event handler. After each event handler has finished, the stack continues to unwind until the exception is caught by the default application domain.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> To see how the stack display grows as the event is raised closer and closer to the default application domain, change <code>e.Exception.Message</code> to <code>e.Exception</code> in the <code>FirstChanceHandler</code> event handlers. Notice that when <code>TestException</code> is called across application domain boundaries, it appears twice: once for the proxy and once for the stub.  </p>\n</div>\n<pre><code class=\"lang-vb\" name=\"System.AppDomain.FirstChanceException#1\">Imports System.Reflection\nImports System.Runtime.ExceptionServices\n\nClass Example\n\n    Shared Sub Main()\n    \n        AddHandler AppDomain.CurrentDomain.FirstChanceException, AddressOf FirstChanceHandler\n\n        &#39; Create a set of application domains, with a Worker object in each one.\n        &#39; Each Worker object creates the next application domain.\n        Dim ad As AppDomain = AppDomain.CreateDomain(&quot;AD0&quot;)\n        Dim w As Worker = CType(ad.CreateInstanceAndUnwrap(\n                                GetType(Worker).Assembly.FullName, &quot;Worker&quot;),\n                                Worker)\n        w.Initialize(0, 3)\n\n        Console.WriteLine(vbCrLf &amp; &quot;The last application domain throws an exception and catches it:&quot;)\n        Console.WriteLine()\n        w.TestException(true)\n\n        Try\n            Console.WriteLine(vbCrLf &amp; \n                &quot;The last application domain throws an exception and does not catch it:&quot;)\n            Console.WriteLine()\n            w.TestException(false) \n\n        Catch ex As ArgumentException\n        \n            Console.WriteLine(&quot;ArgumentException caught in {0}: {1}&quot;, \n                AppDomain.CurrentDomain.FriendlyName, ex.Message)\n        End Try\n    End Sub\n\n    Shared Sub FirstChanceHandler(ByVal source As Object, \n                                  ByVal e As FirstChanceExceptionEventArgs)\n    \n        Console.WriteLine(&quot;FirstChanceException event raised in {0}: {1}&quot;,\n            AppDomain.CurrentDomain.FriendlyName, e.Exception.Message)\n    End Sub\nEnd Class\n\nPublic Class Worker\n    Inherits MarshalByRefObject\n\n    Private ad As AppDomain = Nothing\n    Private w As Worker = Nothing\n\n    Public Sub Initialize(ByVal count As Integer, ByVal max As Integer)\n    \n        &#39; Handle the FirstChanceException event in all application domains except\n        &#39; AD1.\n        If count &lt;&gt; 1\n        \n            AddHandler AppDomain.CurrentDomain.FirstChanceException, AddressOf FirstChanceHandler\n\n        End If\n\n        &#39; Create another application domain, until the maximum is reached.\n        &#39; Field w remains Nothing in the last application domain, as a signal \n        &#39; to TestException(). \n        If count &lt; max\n            Dim nextAD As Integer = count + 1\n            ad = AppDomain.CreateDomain(&quot;AD&quot; &amp; nextAD)\n            w = CType(ad.CreateInstanceAndUnwrap(\n                      GetType(Worker).Assembly.FullName, &quot;Worker&quot;),\n                      Worker)\n            w.Initialize(nextAD, max)\n        End If\n    End Sub\n\n    Public Sub TestException(ByVal handled As Boolean)\n    \n        &#39; As long as there is another application domain, call TestException() on\n        &#39; its Worker object. When the last application domain is reached, throw a\n        &#39; handled or unhandled exception.\n        If w IsNot Nothing\n        \n            w.TestException(handled)\n\n        Else If handled\n        \n            Try\n                Throw New ArgumentException(&quot;Thrown in &quot; &amp; AppDomain.CurrentDomain.FriendlyName)\n\n            Catch ex As ArgumentException\n            \n                Console.WriteLine(&quot;ArgumentException caught in {0}: {1}&quot;, \n                    AppDomain.CurrentDomain.FriendlyName, ex.Message)\n            End Try\n        Else\n        \n            Throw New ArgumentException(&quot;Thrown in &quot; &amp; AppDomain.CurrentDomain.FriendlyName)\n        End If\n    End Sub\n\n    Shared Sub FirstChanceHandler(ByVal source As Object, \n                                  ByVal e As FirstChanceExceptionEventArgs)\n    \n        Console.WriteLine(&quot;FirstChanceException event raised in {0}: {1}&quot;,\n            AppDomain.CurrentDomain.FriendlyName, e.Exception.Message)\n    End Sub\nEnd Class\n\n&#39; This example produces output similar to the following:\n&#39;\n&#39;The last application domain throws an exception and catches it:\n&#39;\n&#39;FirstChanceException event raised in AD3: Thrown in AD3\n&#39;ArgumentException caught in AD3: Thrown in AD3\n&#39;\n&#39;The last application domain throws an exception and does not catch it:\n&#39;\n&#39;FirstChanceException event raised in AD3: Thrown in AD3\n&#39;FirstChanceException event raised in AD2: Thrown in AD3\n&#39;FirstChanceException event raised in AD0: Thrown in AD3\n&#39;FirstChanceException event raised in Example.exe: Thrown in AD3\n&#39;ArgumentException caught in Example.exe: Thrown in AD3\n</code></pre><pre><code class=\"lang-cs\" name=\"System.AppDomain.FirstChanceException#1\">using System;\nusing System.Reflection;\nusing System.Runtime.ExceptionServices;\n\nclass Example\n{\n    static void Main()\n    {\n        AppDomain.CurrentDomain.FirstChanceException += FirstChanceHandler;\n\n        // Create a set of application domains, with a Worker object in each one.\n        // Each Worker object creates the next application domain.\n        AppDomain ad = AppDomain.CreateDomain(&quot;AD0&quot;);\n        Worker w = (Worker) ad.CreateInstanceAndUnwrap(\n                                typeof(Worker).Assembly.FullName, &quot;Worker&quot;);\n        w.Initialize(0, 3);\n\n        Console.WriteLine(&quot;\\r\\nThe last application domain throws an exception and catches it:&quot;);\n        Console.WriteLine();\n        w.TestException(true);\n\n        try\n        {\n            Console.WriteLine(\n                &quot;\\r\\nThe last application domain throws an exception and does not catch it:&quot;);\n            Console.WriteLine();\n            w.TestException(false);\n        }\n        catch (ArgumentException ex)\n        {\n            Console.WriteLine(&quot;ArgumentException caught in {0}: {1}&quot;, \n                AppDomain.CurrentDomain.FriendlyName, ex.Message);\n        }\n    }\n\n    static void FirstChanceHandler(object source, FirstChanceExceptionEventArgs e)\n    {\n        Console.WriteLine(&quot;FirstChanceException event raised in {0}: {1}&quot;,\n            AppDomain.CurrentDomain.FriendlyName, e.Exception.Message);\n    }\n}\n\npublic class Worker : MarshalByRefObject\n{\n    private AppDomain ad = null;\n    private Worker w = null;\n\n    public void Initialize(int count, int max)\n    {\n        // Handle the FirstChanceException event in all application domains except\n        // AD1.\n        if (count != 1)\n        {\n            AppDomain.CurrentDomain.FirstChanceException += FirstChanceHandler;\n        }\n\n        // Create another application domain, until the maximum is reached.\n        // Field w remains null in the last application domain, as a signal\n        // to TestException(). \n        if (count &lt; max)\n        {\n            int next = count + 1;\n            ad = AppDomain.CreateDomain(&quot;AD&quot; + next);\n            w = (Worker) ad.CreateInstanceAndUnwrap(\n                             typeof(Worker).Assembly.FullName, &quot;Worker&quot;);\n            w.Initialize(next, max);\n        }\n    }\n\n    public void TestException(bool handled)\n    {\n        // As long as there is another application domain, call TestException() on\n        // its Worker object. When the last application domain is reached, throw a\n        // handled or unhandled exception.\n        if (w != null)\n        {\n            w.TestException(handled);\n        }\n        else if (handled)\n        {\n            try\n            {\n                throw new ArgumentException(&quot;Thrown in &quot; + AppDomain.CurrentDomain.FriendlyName);\n            }\n            catch (ArgumentException ex)\n            {\n                Console.WriteLine(&quot;ArgumentException caught in {0}: {1}&quot;, \n                    AppDomain.CurrentDomain.FriendlyName, ex.Message);\n            }\n        }\n        else\n        {\n            throw new ArgumentException(&quot;Thrown in &quot; + AppDomain.CurrentDomain.FriendlyName);\n        }\n    }\n\n    static void FirstChanceHandler(object source, FirstChanceExceptionEventArgs e)\n    {\n        Console.WriteLine(&quot;FirstChanceException event raised in {0}: {1}&quot;,\n            AppDomain.CurrentDomain.FriendlyName, e.Exception.Message);\n    }\n}\n\n/* This example produces output similar to the following:\n\nThe last application domain throws an exception and catches it:\n\nFirstChanceException event raised in AD3: Thrown in AD3\nArgumentException caught in AD3: Thrown in AD3\n\nThe last application domain throws an exception and does not catch it:\n\nFirstChanceException event raised in AD3: Thrown in AD3\nFirstChanceException event raised in AD2: Thrown in AD3\nFirstChanceException event raised in AD0: Thrown in AD3\nFirstChanceException event raised in Example.exe: Thrown in AD3\nArgumentException caught in Example.exe: Thrown in AD3\n */\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>This class provides the exception handler for the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_FirstChanceException\" data-linktype=\"relative-path\">System.AppDomain.FirstChanceException</a> event with access to the exception.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Runtime_ExceptionServices_FirstChanceExceptionEventArgs__ctor_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Runtime_ExceptionServices_FirstChanceExceptionEventArgs__ctor_System_Exception_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FirstChanceExceptionEventArgs(Exception)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.runtime.exceptionservices.firstchanceexceptioneventargs\" data-linktype=\"relative-path\">FirstChanceExceptionEventArgs</a> class with a specified exception.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public FirstChanceExceptionEventArgs (Exception exception);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>exception</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The exception that was just thrown by managed code, and that will be examined by the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_UnhandledException\" data-linktype=\"relative-path\">UnhandledException</a> event.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This constructor is called by the common language runtime, not by application code.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Runtime_ExceptionServices_FirstChanceExceptionEventArgs_Exception_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Runtime_ExceptionServices_FirstChanceExceptionEventArgs_Exception\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Exception</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>The managed exception object that corresponds to the exception thrown in managed code.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public Exception Exception { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The newly thrown exception.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><span class=\"xref\">get: System.Runtime.ConstrainedExecution.ReliabilityContract</span></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The method that handles the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_UnhandledException\" data-linktype=\"relative-path\">System.AppDomain.UnhandledException</a> event can examine the exception and perform appropriate logging or other notification services.  </p>\n<p> For example code, see <a class=\"xref\" href=\"system.runtime.exceptionservices.firstchanceexceptioneventargs\" data-linktype=\"relative-path\">FirstChanceExceptionEventArgs</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs.yml\">\r\n<meta name=\"APIName\" content=\"System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs\">\r\n<meta name=\"APIName\" content=\"System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs..ctor\">\r\n<meta name=\"APIName\" content=\"System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs.Exception\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 02:21 PM\">\r\n<meta name=\"document_id\" content=\"73e215d1-85a8-3a2b-f970-c8444af450d0\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides data for the notification event that is raised when a managed exception first occurs, before the common language runtime begins searching for event handlers.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.runtime.exceptionservices/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs.yml","open_to_public_contributors":false,"api_name":["System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs","System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs..ctor","System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs.Exception"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs","System::Runtime::ExceptionServices::FirstChanceExceptionEventArgs","System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs.#ctor","System::Runtime::ExceptionServices::FirstChanceExceptionEventArgs::#ctor","System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs.Exception","System::Runtime::ExceptionServices::FirstChanceExceptionEventArgs::Exception"],"dev_langs":["csharp"],"updated_at":"2017-03-31 02:21 PM","document_id":"73e215d1-85a8-3a2b-f970-c8444af450d0","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Runtime.ExceptionServices/FirstChanceExceptionEventArgs.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"FirstChanceExceptionEventArgs class | Microsoft Docs","_op_ogTitle":"FirstChanceExceptionEventArgs class","description":"Provides data for the notification event that is raised when a managed exception first occurs, before the common language runtime begins searching for event handlers.\n","toc_asset_id":"api/_splitted/System.Runtime.ExceptionServices/toc.json","toc_rel":"_splitted/System.Runtime.ExceptionServices/toc.json","source_url":"","ms.assetid":"System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.runtime.exceptionservices.firstchanceexceptioneventargs","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.runtime.exceptionservices.firstchanceexceptioneventargs","fileRelativePath":"api/System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs.html"},"themesRelativePathToOutputRoot":"_themes/"}