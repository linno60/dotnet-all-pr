{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">DependentCloneOption</span>\r\n      Enum\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Controls what kind of dependent transaction to create.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\r\n  \t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public enum DependentCloneOption</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">System.Enum</a></span></div><span class=\"lang-csharp\">DependentCloneOption</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example shows you how to create a dependent transaction.  </p>\n<pre><code class=\"lang-vb\" name=\"Tx_DependentTx#1\">\t\tPublic Shared Sub Main()\n\t\t\tTry\n\t\t\t\tUsing scope As TransactionScope = New TransactionScope()\n\n\t\t\t\t\t&#39;Perform transactional work here.\n\n\t\t\t\t\t&#39;Queue work item\n\t\t\t\t\tThreadPool.QueueUserWorkItem(AddressOf WorkerThread, Transaction.Current.DependentClone(DependentCloneOption.BlockCommitUntilComplete))\n\n\t\t\t\t\t&#39;Display transaction information\n\t\t\t\t\tConsole.WriteLine(&quot;Transaction information:&quot;)\n\t\t\t\t\tConsole.WriteLine(&quot;ID:             {0}&quot;, Transaction.Current.TransactionInformation.LocalIdentifier)\n\t\t\t\t\tConsole.WriteLine(&quot;status:         {0}&quot;, Transaction.Current.TransactionInformation.Status)\n\t\t\t\t\tConsole.WriteLine(&quot;isolationlevel: {0}&quot;, Transaction.Current.IsolationLevel)\n\n\t\t\t\t\t&#39;Call Complete on the TransactionScope based on console input\n\t\t\t\t\tDim c As ConsoleKeyInfo\n\t\t\t\t\tWhile (True)\n\n\t\t\t\t\t\tConsole.Write(&quot;Complete the transaction scope? [Y|N] &quot;)\n\t\t\t\t\t\tc = Console.ReadKey()\n\t\t\t\t\t\tConsole.WriteLine()\n\t\t\t\t\t\tIf (c.KeyChar = &quot;Y&quot;) Or (c.KeyChar = &quot;y&quot;) Then\n\t\t\t\t\t\t\tscope.Complete()\n\t\t\t\t\t\t\tExit While\n\t\t\t\t\t\tElseIf ((c.KeyChar = &quot;N&quot;) Or (c.KeyChar = &quot;n&quot;)) Then\n\t\t\t\t\t\t\tExit While\n\t\t\t\t\t\tEnd If\n\t\t\t\t\tEnd While\n\t\t\t\tEnd Using\n\n\t\t\tCatch ex As TransactionException\n\t\t\t\tConsole.WriteLine(ex)\n\t\t\tCatch\n\t\t\t\tConsole.WriteLine(&quot;Cannot complete transaction&quot;)\n\t\t\t\tThrow\n\t\t\tEnd Try\n\t\tEnd Sub\n\n\t\tPublic Shared Sub WorkerThread(ByVal myTransaction As Object)\n\n\t\t\t&#39;Create a DependentTransaction from the object passed to the WorkerThread\n\t\t\tDim dTx As DependentTransaction\n\t\t\tdTx = CType(myTransaction, DependentTransaction)\n\n\t\t\t&#39;Sleep for 1 second to force the worker thread to delay\n\t\t\tThread.Sleep(1000)\n\n\t\t\t&#39;Pass the DependentTransaction to the scope, so that work done in the scope becomes part of the transaction passed to the worker thread\n\t\t\tUsing ts As TransactionScope = New TransactionScope(dTx)\n\t\t\t\t&#39;Perform transactional work here.\n\n\t\t\t\t&#39;Call complete on the transaction scope\n\t\t\t\tts.Complete()\n\t\t\tEnd Using\n\n\t\t\t&#39;Call complete on the dependent transaction\n\t\t\tdTx.Complete()\n\t\tEnd Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"Tx_DependentTx#1\">\t\tstatic void Main(string[] args)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tusing (TransactionScope scope = new TransactionScope())\n\t\t\t\t{\n\t\t\t\t\t// Perform transactional work here.\n\n\t\t\t\t\t//Queue work item\n\t\t\t\t\tThreadPool.QueueUserWorkItem(new WaitCallback(WorkerThread), Transaction.Current.DependentClone(DependentCloneOption.BlockCommitUntilComplete));\n\n\t\t\t\t\t//Display transaction information\n\t\t\t\t\tConsole.WriteLine(&quot;Transaction information:&quot;);\n\t\t\t\t\tConsole.WriteLine(&quot;ID:             {0}&quot;, Transaction.Current.TransactionInformation.LocalIdentifier);\n\t\t\t\t\tConsole.WriteLine(&quot;status:         {0}&quot;, Transaction.Current.TransactionInformation.Status);\n\t\t\t\t\tConsole.WriteLine(&quot;isolationlevel: {0}&quot;, Transaction.Current.IsolationLevel);\n\n\t\t\t\t\t//Call Complete on the TransactionScope based on console input\n\t\t\t\t\tConsoleKeyInfo c;\n\t\t\t\t\twhile (true)\n\t\t\t\t\t{\n                        \t\t\tConsole.Write(&quot;Complete the transaction scope? [Y|N] &quot;);\n\t\t\t\t\t\tc = Console.ReadKey();\n\t\t\t\t\t\tConsole.WriteLine();\n\n\t\t\t\t\t\tif ((c.KeyChar == &#39;Y&#39;) || (c.KeyChar == &#39;y&#39;))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//Call complete on the scope\n\t\t\t\t\t\t\tscope.Complete();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if ((c.KeyChar == &#39;N&#39;) || (c.KeyChar == &#39;n&#39;))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (System.Transactions.TransactionException ex)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(ex);\n\t\t\t}\n\t\t\tcatch\n\t\t\t{\n\t\t\t\tConsole.WriteLine(&quot;Cannot complete transaction&quot;);\n\t\t\t\tthrow;\n\t\t\t}\n\t\t\t\n\t\t}\n\n\t\tprivate static void WorkerThread(object transaction)\n\t\t{\n\t\t\t//Create a DependentTransaction from the object passed to the WorkerThread\n\t\t\tDependentTransaction dTx = (DependentTransaction)transaction;\n\n\t\t\t//Sleep for 1 second to force the worker thread to delay\n\t\t\tThread.Sleep(1000);\n\n\t\t\t//Pass the DependentTransaction to the scope, so that work done in the scope becomes part of the transaction passed to the worker thread\n\t\t\tusing (TransactionScope ts = new TransactionScope(dTx))\n\t\t\t{\n\t\t\t\t//Perform transactional work here.\n\n\t\t\t\t//Call complete on the transaction scope\n\t\t\t\tts.Complete();\n\t\t\t}\n\n\t\t\t//Call complete on the dependent transaction\n\t\t\tdTx.Complete();\n\t\t}\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>A dependent transaction can be obtained using the <a class=\"xref\" href=\"system.transactions.transaction#System_Transactions_Transaction_DependentClone_\" data-linktype=\"relative-path\">DependentClone</a> method, with the DependentCloneOption parameter controlling what kind of dependent transaction to create.  For more information on how this enumeration is used, see <a href=\"http://msdn.microsoft.com/en-us/bdad8468-2a90-4b81-8375-278067120cab\" data-linktype=\"external\">Managing Concurrency with DependentTransaction</a>.</p>\n\r\n  \r\n      \t<h2 class=\"accented\">Fields\r\n      </h2>\r\n      <table class=\"nameValue\">\r\n      \t<tr><td id=\"System_Transactions_DependentCloneOption_BlockCommitUntilComplete\">\r\n      \t\t\t<span class=\"lang-csharp\">BlockCommitUntilComplete</span>\r\n      \t</td>\r\n      \t<td><p>The dependent transaction blocks the commit process of the transaction until the parent transaction times out, or <span class=\"xref\">stem.Transactions.DependentTransaction.Complete*</span> is called. In this case, additional work can be done on the transaction and new enlistments can be created.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Transactions_DependentCloneOption_RollbackIfNotComplete\">\r\n      \t\t\t<span class=\"lang-csharp\">RollbackIfNotComplete</span>\r\n      \t</td>\r\n      \t<td><p>The dependent transaction automatically aborts the transaction if Commit is called on the parent transaction before <span class=\"xref\">stem.Transactions.DependentTransaction.Complete*</span> is called.</p>\n</td>\r\n      \t</tr>\r\n      </table>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Transactions.DependentCloneOption.yml\">\r\n<meta name=\"APIName\" content=\"System.Transactions.DependentCloneOption\">\r\n<meta name=\"APIName\" content=\"System.Transactions.DependentCloneOption.BlockCommitUntilComplete\">\r\n<meta name=\"APIName\" content=\"System.Transactions.DependentCloneOption.RollbackIfNotComplete\">\r\n<meta name=\"APILocation\" content=\"System.Transactions.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-24 01:41 AM\">\r\n<meta name=\"document_id\" content=\"ee9dca10-6840-4317-8263-669b84c6e718\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Controls what kind of dependent transaction to create.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.transactions/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Transactions.DependentCloneOption\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Transactions.DependentCloneOption.yml","open_to_public_contributors":false,"api_name":["System.Transactions.DependentCloneOption","System.Transactions.DependentCloneOption.BlockCommitUntilComplete","System.Transactions.DependentCloneOption.RollbackIfNotComplete"],"api_location":["System.Transactions.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Transactions.DependentCloneOption","System::Transactions::DependentCloneOption","System.Transactions.DependentCloneOption.BlockCommitUntilComplete","System::Transactions::DependentCloneOption::BlockCommitUntilComplete","System.Transactions.DependentCloneOption.RollbackIfNotComplete","System::Transactions::DependentCloneOption::RollbackIfNotComplete"],"dev_langs":["csharp"],"updated_at":"2017-03-24 01:41 AM","document_id":"ee9dca10-6840-4317-8263-669b84c6e718","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.Transactions/DependentCloneOption.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"DependentCloneOption enum | Microsoft Docs","_op_ogTitle":"DependentCloneOption enum","description":"Controls what kind of dependent transaction to create.\n","toc_asset_id":"api/_splitted/System.Transactions/toc.json","toc_rel":"_splitted/System.Transactions/toc.json","source_url":"","ms.assetid":"System.Transactions.DependentCloneOption","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.transactions.dependentcloneoption","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.transactions.dependentcloneoption","fileRelativePath":"api/System.Transactions.DependentCloneOption.html"},"themesRelativePathToOutputRoot":"_themes/"}