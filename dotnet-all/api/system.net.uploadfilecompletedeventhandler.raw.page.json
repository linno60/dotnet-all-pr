{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">UploadFileCompletedEventHandler</span>\r\n      Delegate\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the method that will handle the <a class=\"xref\" href=\"system.net.webclient#System_Net_WebClient_UploadFileCompleted\" data-linktype=\"relative-path\">UploadFileCompleted</a> event of a <a class=\"xref\" href=\"system.net.webclient\" data-linktype=\"relative-path\">WebClient</a>.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public delegate void UploadFileCompletedEventHandler(object sender, UploadFileCompletedEventArgs e);</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></span></div><span class=\"lang-csharp\">UploadFileCompletedEventHandler</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example demonstrates asynchronously uploading a file.  </p>\n<pre><code class=\"lang-cpp\" name=\"NCLWebClientAsync#6\">// Sample call: UploadFileInBackground(&quot;http://www.contoso.com/fileUpload.aspx&quot;, &quot;data.txt&quot;)\nvoid UploadFileInBackground( String^ address, String^ fileName )\n{\n   System::Threading::AutoResetEvent^ waiter = gcnew System::Threading::AutoResetEvent( false );\n   WebClient^ client = gcnew WebClient;\n   Uri ^uri = gcnew Uri(address);\n   String^ method = &quot;POST&quot;;\n   \n   // Specify that that UploadFileCallback method gets called\n   // when the file upload completes.\n   client-&gt;UploadFileCompleted += gcnew UploadFileCompletedEventHandler( UploadFileCallback );\n   client-&gt;UploadFileAsync( uri, method, fileName, waiter );\n   \n   // Block the main application thread. Real applications\n   // can perform other tasks while waiting for the upload to complete.\n   waiter-&gt;WaitOne();\n   Console::WriteLine( &quot;File upload is complete.&quot; );\n}\n\n</code></pre><pre><code class=\"lang-cs\" name=\"NCLWebClientAsync#6\">// Sample call: UploadFileInBackground(&quot;http://www.contoso.com/fileUpload.aspx&quot;, &quot;data.txt&quot;)\npublic static void UploadFileInBackground (string address, string fileName)\n{\n    System.Threading.AutoResetEvent waiter = new System.Threading.AutoResetEvent (false);\n    WebClient client = new WebClient ();\n    Uri uri = new Uri(address);\n    string method = &quot;POST&quot;;\n\n    // Specify that that UploadFileCallback method gets called\n    // when the file upload completes.\n    client.UploadFileCompleted += new UploadFileCompletedEventHandler (UploadFileCallback);\n    client.UploadFileAsync (uri, method, fileName, waiter);\n\n    // Block the main application thread. Real applications\n    // can perform other tasks while waiting for the upload to complete.\n    waiter.WaitOne ();\n    Console.WriteLine (&quot;File upload is complete.&quot;);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"NCLWebClientAsync#6\">&#39;  Sample call: UploadFileInBackground(&quot;http:&#39; www.contoso.com/fileUpload.aspx&quot;, &quot;data.txt&quot;)\nPublic Shared Sub UploadFileInBackground(ByVal address As String, ByVal fileName As String)\n\n\tDim waiter As System.Threading.AutoResetEvent = New System.Threading.AutoResetEvent(False)\n\tDim client As WebClient = New WebClient()\n\tDim method As String = &quot;POST&quot;\n                       Dim uri as Uri =  New Uri(address)\n\n\t&#39;  Specify that that UploadFileCallback method gets called\n\t&#39;  when the file upload completes.\n\tAddHandler client.UploadFileCompleted, AddressOf UploadFileCallback\n\tclient.UploadFileAsync(uri, method, fileName, waiter)\n\n\t&#39;  Block the main application thread. Real applications\n\t&#39;  can perform other tasks while waiting for the upload to complete.\n\twaiter.WaitOne()\n\tConsole.WriteLine(&quot;File upload is complete.&quot;)\nEnd Sub\n</code></pre><p> The following method is called when the upload completes.  </p>\n<pre><code class=\"lang-cpp\" name=\"NCLWebClientAsync#7\">void UploadFileCallback( Object^ /*sender*/, UploadFileCompletedEventArgs^ e )\n{\n   System::Threading::AutoResetEvent^ waiter = dynamic_cast&lt;System::Threading::AutoResetEvent^&gt;(e-&gt;UserState);\n   ;\n   try\n   {\n      String^ reply = System::Text::Encoding::UTF8-&gt;GetString( e-&gt;Result );\n      Console::WriteLine( reply );\n   }\n   finally\n   {\n      \n      // If this thread throws an exception, make sure that\n      // you let the main application thread resume.\n      waiter-&gt;Set();\n   }\n\n}\n\n</code></pre><pre><code class=\"lang-cs\" name=\"NCLWebClientAsync#7\">private static void UploadFileCallback (Object sender, UploadFileCompletedEventArgs e)\n{\n    System.Threading.AutoResetEvent waiter = (System.Threading.AutoResetEvent)e.UserState;;\n    try\n    {\n        string reply = System.Text.Encoding.UTF8.GetString (e.Result);\n\n        Console.WriteLine (reply);\n    }\n    finally\n    {\n        // If this thread throws an exception, make sure that\n        // you let the main application thread resume.\n        waiter.Set ();\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"NCLWebClientAsync#7\">Private Shared Sub UploadFileCallback(ByVal sender As Object, ByVal e As System.Net.UploadFileCompletedEventArgs)\n\n    Dim waiter As System.Threading.AutoResetEvent = CType(e.UserState, System.Threading.AutoResetEvent)\n    Try\n\n        Dim reply As String = System.Text.Encoding.UTF8.GetString(e.Result)\n        Console.WriteLine(reply)\n    Finally\n        &#39;  If this thread throws an exception, make sure that\n        &#39;  you let the main application thread resume.\n        waiter.Set()\n    End Try\nEnd Sub\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>When you create a UploadFileCompletedEventHandler delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event handler delegates, see <a href=\"http://msdn.microsoft.com/en-us/d98fd58b-fa4f-4598-8378-addf4355a115\" data-linktype=\"external\">NIB: Events and Delegates</a>.</p>\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Net.UploadFileCompletedEventHandler.yml\">\r\n<meta name=\"APIName\" content=\"System.Net.UploadFileCompletedEventHandler\">\r\n<meta name=\"APIName\" content=\"System.Net.UploadFileCompletedEventHandler..ctor\">\r\n<meta name=\"APIName\" content=\"System.Net.UploadFileCompletedEventHandler.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Net.UploadFileCompletedEventHandler.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.Net.UploadFileCompletedEventHandler.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 05:47 AM\">\r\n<meta name=\"document_id\" content=\"b2cda7ee-d747-27ec-ecb3-81289c0ad1e8\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the method that will handle the  event of a .\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.net/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Net.UploadFileCompletedEventHandler\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Net.UploadFileCompletedEventHandler.yml","open_to_public_contributors":false,"api_name":["System.Net.UploadFileCompletedEventHandler","System.Net.UploadFileCompletedEventHandler..ctor","System.Net.UploadFileCompletedEventHandler.Invoke","System.Net.UploadFileCompletedEventHandler.BeginInvoke","System.Net.UploadFileCompletedEventHandler.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Net.UploadFileCompletedEventHandler","System::Net::UploadFileCompletedEventHandler"],"dev_langs":["csharp"],"updated_at":"2017-03-31 05:47 AM","document_id":"b2cda7ee-d747-27ec-ecb3-81289c0ad1e8","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Net/UploadFileCompletedEventHandler.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"UploadFileCompletedEventHandler delegate | Microsoft Docs","_op_ogTitle":"UploadFileCompletedEventHandler delegate","description":"Represents the method that will handle the  event of a .\n","toc_asset_id":"api/_splitted/System.Net/toc.json","toc_rel":"_splitted/System.Net/toc.json","source_url":"","ms.assetid":"System.Net.UploadFileCompletedEventHandler","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.net.uploadfilecompletedeventhandler","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.net.uploadfilecompletedeventhandler","fileRelativePath":"api/System.Net.UploadFileCompletedEventHandler.html"},"themesRelativePathToOutputRoot":"_themes/"}