{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">IEnlistmentNotification</span>\r\n      Interface\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Describes an interface that a resource manager should implement to provide two phase commit notification callbacks for the transaction manager upon enlisting for participation.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public interface IEnlistmentNotification</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example shows an implementation of this interface, as well as enlisting the object as a participant in a transaction using the <a class=\"xref\" href=\"system.transactions.transaction#System_Transactions_Transaction_EnlistVolatile_\" data-linktype=\"relative-path\">EnlistVolatile</a> method.  </p>\n<pre><code class=\"lang-cs\" name=\"Tx_Enlist#1\">static void Main(string[] args)\n{\n\ttry\n\t{\n\t\tusing (TransactionScope scope = new TransactionScope())\n\t\t{\n\t\t\n\t\t\t//Create an enlistment object\n\t\t\tmyEnlistmentClass myElistment = new myEnlistmentClass();\n\n\t\t\t//Enlist on the current transaction with the enlistment object\n\t\t\tTransaction.Current.EnlistVolatile(myElistment, EnlistmentOptions.None);\n\n\t\t\t//Perform transactional work here.\n\n\t\t\t//Call complete on the TransactionScope based on console input\n                   \t\t\tConsoleKeyInfo c;\n\t\t\twhile(true)\n                   \t\t\t{\n\t\t\t\tConsole.Write(&quot;Complete the transaction scope? [Y|N] &quot;);\n\t\t\t\tc = Console.ReadKey();\n\t\t\t\tConsole.WriteLine();\n\t\t\n                        \t\t\tif ((c.KeyChar == &#39;Y&#39;) || (c.KeyChar == &#39;y&#39;))\n\t\t\t\t{\n\t\t\t\t\tscope.Complete();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if ((c.KeyChar == &#39;N&#39;) || (c.KeyChar == &#39;n&#39;))\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tcatch (System.Transactions.TransactionException ex)\n\t{\n\t\tConsole.WriteLine(ex);\n\t}\n\tcatch\n\t{\n\t\tConsole.WriteLine(&quot;Cannot complete transaction&quot;);\n\t\tthrow;\n\t}\n}\n\nclass myEnlistmentClass : IEnlistmentNotification\n{\n\tpublic void Prepare(PreparingEnlistment preparingEnlistment)\n\t{\n\t\tConsole.WriteLine(&quot;Prepare notification received&quot;);\n\n\t\t//Perform transactional work\n\n\t\t//If work finished correctly, reply prepared\n\t\tpreparingEnlistment.Prepared();\n\n\t\t// otherwise, do a ForceRollback\n\t\tpreparingEnlistment.ForceRollback();\n\t}\n\n\tpublic void Commit(Enlistment enlistment)\n\t{\n\t\tConsole.WriteLine(&quot;Commit notification received&quot;);\n\n\t\t//Do any work necessary when commit notification is received\n\n\t\t//Declare done on the enlistment\n\t\tenlistment.Done();\n\t}\n\n\tpublic void Rollback(Enlistment enlistment)\n\t{\n\t\tConsole.WriteLine(&quot;Rollback notification received&quot;);\n\n\t\t//Do any work necessary when rollback notification is received\n\n\t\t//Declare done on the enlistment\n\t\tenlistment.Done();\n\t}\n\n\tpublic void InDoubt(Enlistment enlistment)\n\t{\n\t\tConsole.WriteLine(&quot;In doubt notification received&quot;);\n\n\t\t//Do any work necessary when indout notification is received\n\t\t\n\t\t//Declare done on the enlistment\n\t\tenlistment.Done();\n\t}\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Tx_Enlist#1\">\tPublic Shared Sub Main()\n\t\tTry\n\t\t\tUsing scope As TransactionScope = New TransactionScope()\n\n\t\t\t\t&#39;Create an enlistment object\n\t\t\t\tDim myEnlistmentClass As New EnlistmentClass\n\n\t\t\t\t&#39;Enlist on the current transaction with the enlistment object\n\t\t\t\tTransaction.Current.EnlistVolatile(myEnlistmentClass, EnlistmentOptions.None)\n\n\t\t\t\t&#39;Perform transactional work here.\n\n\t\t\t\t&#39;Call complete on the TransactionScope based on console input\n\t\t\t\tDim c As ConsoleKeyInfo\n\t\t\t\tWhile (True)\n\t\t\t\t\tConsole.Write(&quot;Complete the transaction scope? [Y|N] &quot;)\n\t\t\t\t\tc = Console.ReadKey()\n\t\t\t\t\tConsole.WriteLine()\n\t\t\t\t\tIf (c.KeyChar = &quot;Y&quot;) Or (c.KeyChar = &quot;y&quot;) Then\n\t\t\t\t\t\tscope.Complete()\n\t\t\t\t\t\tExit While\n\t\t\t\t\tElseIf ((c.KeyChar = &quot;N&quot;) Or (c.KeyChar = &quot;n&quot;)) Then\n\t\t\t\t\t\tExit While\n\t\t\t\t\tEnd If\n\t\t\t\tEnd While\n\t\t\tEnd Using\n\t\tCatch ex As TransactionException\n\t\t\tConsole.WriteLine(ex)\n\t\tCatch\n\t\t\tConsole.WriteLine(&quot;Cannot complete transaction&quot;)\n\t\t\tThrow\n\t\tEnd Try\n\tEnd Sub\nEnd Class\n\nPublic Class EnlistmentClass\n\tImplements IEnlistmentNotification\n\n\tPublic Sub Prepare(ByVal myPreparingEnlistment As PreparingEnlistment) Implements System.Transactions.IEnlistmentNotification.Prepare\n\t\tConsole.WriteLine(&quot;Prepare notification received&quot;)\n\n\t\t&#39;Perform transactional work\n\n\t\t&#39;If work finished correctly, reply with prepared\n\t\tmyPreparingEnlistment.Prepared()\n\tEnd Sub\n\n\tPublic Sub Commit(ByVal myEnlistment As Enlistment) Implements System.Transactions.IEnlistmentNotification.Commit\n\t\tConsole.WriteLine(&quot;Commit notification received&quot;)\n\n\t\t&#39;Do any work necessary when commit notification is received\n\n\t\t&#39;Declare done on the enlistment\n\t\tmyEnlistment.Done()\n\tEnd Sub\n\n\tPublic Sub Rollback(ByVal myEnlistment As Enlistment) Implements System.Transactions.IEnlistmentNotification.Rollback\n\t\tConsole.WriteLine(&quot;Rollback notification received&quot;)\n\n\t\t&#39;Do any work necessary when rollback notification is received\n\n\t\t&#39;Declare done on the enlistment\n\t\tmyEnlistment.Done()\n\tEnd Sub\n\n\tPublic Sub InDoubt(ByVal myEnlistment As Enlistment) Implements System.Transactions.IEnlistmentNotification.InDoubt\n\t\tConsole.WriteLine(&quot;In doubt notification received&quot;)\n\n\t\t&#39;Do any work necessary when indout notification is received\n\n\t\t&#39;Declare done on the enlistment\n\t\tmyEnlistment.Done()\n\tEnd Sub\nEnd Class\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>In order for a resource manager to participate in a transaction, it must enlist in the transaction through the transaction manager. The <a class=\"xref\" href=\"system.transactions.transaction\" data-linktype=\"relative-path\">Transaction</a> class defines a set of methods whose names begin with <code>Enlist</code> that provide this functionality. The different <code>Enlist</code> methods correspond to the different types of enlistment that a resource maanger may have.  </p>\n<p> This class describes an interface that a resource manager should implement to provide two phase commit notification callbacks for the transaction manager upon enlisting for participation. For each resource manager&#39;s implementation of the IEnlistmentNotification interface, you should enlist it using the <a class=\"xref\" href=\"system.transactions.transaction#System_Transactions_Transaction_EnlistVolatile_\" data-linktype=\"relative-path\">EnlistVolatile</a> method or the <a class=\"xref\" href=\"system.transactions.transaction#System_Transactions_Transaction_EnlistDurable_\" data-linktype=\"relative-path\">EnlistDurable</a> method of the <a class=\"xref\" href=\"system.transactions.transaction\" data-linktype=\"relative-path\">Transaction</a> class, depending on whether your resource is volatile or durable. For more information on enlistment and 2PC, see <a href=\"../topic/enlisting%20resources%20as%20participants%20in%20a%20transaction\" data-linktype=\"relative-path\">Enlisting Resources as Participants in a Transaction</a> and <a href=\"../topic/committing%20a%20transaction%20in%20single-phase%20and%20multi-phase\" data-linktype=\"relative-path\">Committing a Transaction in Single-Phase and Multi-Phase</a> respectively.  </p>\n<p> The transaction manager notifies the enlisted object at different phases of the Two Phase Commit Protocol by the following methods.  </p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.transactions.ienlistmentnotification#System_Transactions_IEnlistmentNotification_Prepare_\" data-linktype=\"relative-path\">Prepare</a></td>\n<td>This method of an enlisted object is used as a callback by the Transaction Manager during the first phase of a transaction, when the transaction manager asks participants whether they can commit the transaction.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.transactions.ienlistmentnotification#System_Transactions_IEnlistmentNotification_Commit_\" data-linktype=\"relative-path\">Commit</a></td>\n<td>This method of an enlisted object is used as a callback by the Transaction Manager during the second phase of a transaction if the transaction is commited.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.transactions.ienlistmentnotification#System_Transactions_IEnlistmentNotification_Rollback_\" data-linktype=\"relative-path\">Rollback</a></td>\n<td>This method of an enlisted object is used as a callback by the Transaction Manager during the second phase of a transaction if the transaction is aborted (that is, rolled back).</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.transactions.ienlistmentnotification#System_Transactions_IEnlistmentNotification_InDoubt_\" data-linktype=\"relative-path\">InDoubt</a></td>\n<td>This method of an enlisted object is used as a callback by the Transaction Manager during the second phase of a transaction if the transaction is in doubt.</td>\n</tr>\n</tbody>\n</table>\n<div class=\"NOTE\"><h5>Note</h5><p> You should be aware that notifications might not be sent sequentially, or in a particular order.</p>\n</div>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Transactions_IEnlistmentNotification_Commit_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Transactions_IEnlistmentNotification_Commit_System_Transactions_Enlistment_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Commit(Enlistment)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Notifies an enlisted object that a transaction is being committed.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void Commit (System.Transactions.Enlistment enlistment);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>enlistment</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.transactions.enlistment\" data-linktype=\"relative-path\">Enlistment</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.transactions.enlistment\" data-linktype=\"relative-path\">Enlistment</a> object used to send a response to the transaction manager.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The transaction manager calls this method of an enlisted object during the second phase of a commitment, when it instructs all participants to commit the transaction.  </p>\n<p> The resource manager should perform any work necessary to finish the transaction and then inform the TM that it has finished by calling the <a class=\"xref\" href=\"system.transactions.enlistment#System_Transactions_Enlistment_Done_\" data-linktype=\"relative-path\">Done</a> method on the <code>enlistment</code> parameter.  </p>\n<p> If the resource manager has enlisted durably, but does not respond by calling <a class=\"xref\" href=\"system.transactions.enlistment#System_Transactions_Enlistment_Done_\" data-linktype=\"relative-path\">Done</a> method, the transaction manager is unsure that the resource manager has received the Commit call. As such, the transaction manager keeps waiting for a response, and maintains information relevant to this transaction.  If <a class=\"xref\" href=\"system.transactions.enlistment#System_Transactions_Enlistment_Done_\" data-linktype=\"relative-path\">Done</a> is never called, this piece of information is kept around indefinitely in memory or in a system-wide resource. This results in resources not being able to be reclaimed. In the case of a distributed transaction, this could eventually fill the MSDTC log which halts the MSDTC process. In the case of a transaction managed by <a class=\"xref\" href=\"system.transactions\" data-linktype=\"relative-path\">System.Transactions</a>, this results in a gradual and continual increase in the memory consumption of the resource manager&#39;s process. Therefore, it is crucial that you call the <a class=\"xref\" href=\"system.transactions.enlistment#System_Transactions_Enlistment_Done_\" data-linktype=\"relative-path\">Done</a> method once your resource manager is done with your prepare work.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Transactions_IEnlistmentNotification_InDoubt_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Transactions_IEnlistmentNotification_InDoubt_System_Transactions_Enlistment_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">InDoubt(Enlistment)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Notifies an enlisted object that the status of a transaction is in doubt.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void InDoubt (System.Transactions.Enlistment enlistment);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>enlistment</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.transactions.enlistment\" data-linktype=\"relative-path\">Enlistment</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.transactions.enlistment\" data-linktype=\"relative-path\">Enlistment</a> object used to send a response to the transaction manager.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method is called for volatile resources when the transaction manager has invoked a single phase commit operation to a single durable resource, and then connection to the durable resource was lost prior to getting the transaction result. At that point, the transaction outcome cannot be safely determined.  </p>\n<p> As InDoubt is considered to be a final state for a transaction, you should not call <a class=\"xref\" href=\"system.transactions.ienlistmentnotification#System_Transactions_IEnlistmentNotification_Commit_\" data-linktype=\"relative-path\">Commit</a> or <a class=\"xref\" href=\"system.transactions.ienlistmentnotification#System_Transactions_IEnlistmentNotification_Rollback_\" data-linktype=\"relative-path\">Rollback</a> after calling InDoubt.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Your implementation of this method for the volatile resource should perform whatever recovery or containment operation it understands on the affected data.  It must also call the <a class=\"xref\" href=\"system.transactions.enlistment#System_Transactions_Enlistment_Done_\" data-linktype=\"relative-path\">Done</a> method on the on the <code>enlistment</code> parameter when it has finished its work.  </p>\n</div>\n<p> If the resource manager has enlisted durably, but does not respond by calling <a class=\"xref\" href=\"system.transactions.enlistment#System_Transactions_Enlistment_Done_\" data-linktype=\"relative-path\">Done</a> method, the transaction manager is unsure that the resource manager has received the InDoubt call. As such, the transaction manager keeps waiting for a response, and maintains information relevant to this transaction.  If <a class=\"xref\" href=\"system.transactions.enlistment#System_Transactions_Enlistment_Done_\" data-linktype=\"relative-path\">Done</a> is never called, this piece of information is kept around indefinitely in memory or in a system-wide resource. This results in resources not being able to be reclaimed. In the case of a distributed transaction, this could eventually fill the MSDTC log which halts the MSDTC process. In the case of a transaction managed by <a class=\"xref\" href=\"system.transactions\" data-linktype=\"relative-path\">System.Transactions</a>, this results in a gradual and continual increase in the memory consumption of the resource manager&#39;s process. Therefore, it is crucial that you call the <a class=\"xref\" href=\"system.transactions.enlistment#System_Transactions_Enlistment_Done_\" data-linktype=\"relative-path\">Done</a> method once your resource manager is done with your prepare work.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Transactions_IEnlistmentNotification_Prepare_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Transactions_IEnlistmentNotification_Prepare_System_Transactions_PreparingEnlistment_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Prepare(PreparingEnlistment)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Notifies an enlisted object that a transaction is being prepared for commitment.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void Prepare (System.Transactions.PreparingEnlistment preparingEnlistment);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>preparingEnlistment</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.transactions.preparingenlistment\" data-linktype=\"relative-path\">PreparingEnlistment</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.transactions.preparingenlistment\" data-linktype=\"relative-path\">PreparingEnlistment</a> object used to send a response to the transaction manager.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The transaction manager calls this method of an enlisted resource manager during the phase 1 of a commitment, when it asks participants whether they can commit the transaction.  </p>\n<p> When you are implementing a durable resource manager, you should log your prepare record during this phase. The record should contain all the necessary information to perform recovery. This includes the <a class=\"xref\" href=\"system.transactions.preparingenlistment#System_Transactions_PreparingEnlistment_RecoveryInformation_\" data-linktype=\"relative-path\">RecoveryInformation</a> property, which is passed to the transaction manager in the <a class=\"xref\" href=\"system.transactions.transactionmanager#System_Transactions_TransactionManager_Reenlist_\" data-linktype=\"relative-path\">Reenlist</a> method during recovery. For more information on recovery, see <a href=\"http://msdn.microsoft.com/en-us/d342c5c7-da64-4a4c-8e63-b52f4fbf2691\" data-linktype=\"external\">Performing Recovery</a>.  </p>\n<p> Your resource manager should complete all work that must be finished before calling the <a class=\"xref\" href=\"system.transactions.preparingenlistment#System_Transactions_PreparingEnlistment_Prepared_\" data-linktype=\"relative-path\">Prepared</a> method of the <code>preparingEnlistment</code> parameter to indicate its vote for commitment. You should make sure that this is accomplished before receiving any phase 2 notification such as commit, rollback or in doubt. This is because phase 2 notifications can happen inline on the same thread that called the <a class=\"xref\" href=\"system.transactions.preparingenlistment#System_Transactions_PreparingEnlistment_Prepared_\" data-linktype=\"relative-path\">Prepared</a> method in phase 1. As such, you should not do any work after the <a class=\"xref\" href=\"system.transactions.preparingenlistment#System_Transactions_PreparingEnlistment_Prepared_\" data-linktype=\"relative-path\">Prepared</a> call (for example, releasing locks) that you would expect to have completed before receiving the phase 2 notifications.  </p>\n<p> You can also call the method of the <code>preparingEnlistment</code> parameter to indicate a vote for rollback.  </p>\n<p> If you want the object to merely observe and react to the progress of the transaction, without participating in it, your implementation of this method should call the <a class=\"xref\" href=\"system.transactions.enlistment#System_Transactions_Enlistment_Done_\" data-linktype=\"relative-path\">Done</a> method of the <code>preparingEnlistment</code> parameter when it has finished its work. By doing so, your resource manager would not receive any phase 2 notification.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Transactions_IEnlistmentNotification_Rollback_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Transactions_IEnlistmentNotification_Rollback_System_Transactions_Enlistment_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Rollback(Enlistment)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Notifies an enlisted object that a transaction is being rolled back (aborted).</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void Rollback (System.Transactions.Enlistment enlistment);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>enlistment</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.transactions.enlistment\" data-linktype=\"relative-path\">Enlistment</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.transactions.enlistment\" data-linktype=\"relative-path\">Enlistment</a> object used to send a response to the transaction manager.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The transaction manager calls this method of an enlisted object when the transaction is being rolled back (aborted) due to the inability of one or more transaction participants to commit the transaction.  </p>\n<p> The resource manager should perform any work necessary to finish the transaction and then inform the TM that it has finished by calling the <a class=\"xref\" href=\"system.transactions.enlistment#System_Transactions_Enlistment_Done_\" data-linktype=\"relative-path\">Done</a> method on the <code>enlistment</code> parameter.  </p>\n<p> If the resource manager has enlisted durably, but does not respond by calling <a class=\"xref\" href=\"system.transactions.enlistment#System_Transactions_Enlistment_Done_\" data-linktype=\"relative-path\">Done</a> method, the transaction manager is unsure that the resource manager has received the Rollback call. As such, the transaction manager keeps waiting for a response, and maintains information relevant to this transaction.  If <a class=\"xref\" href=\"system.transactions.enlistment#System_Transactions_Enlistment_Done_\" data-linktype=\"relative-path\">Done</a> is never called, this piece of information is kept around indefinitely in memory or in a system-wide resource. This results in resources not being able to be reclaimed. In the case of a distributed transaction, this could eventually fill the MSDTC log which halts the MSDTC process. In the case of a transaction managed by <a class=\"xref\" href=\"system.transactions\" data-linktype=\"relative-path\">System.Transactions</a>, this results in a gradual and continual increase in the memory consumption of the resource manager&#39;s process. Therefore, it is crucial that you call the <a class=\"xref\" href=\"system.transactions.enlistment#System_Transactions_Enlistment_Done_\" data-linktype=\"relative-path\">Done</a> method once your resource manager is done with your prepare work.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Transactions.IEnlistmentNotification.yml\">\r\n<meta name=\"APIName\" content=\"System.Transactions.IEnlistmentNotification\">\r\n<meta name=\"APIName\" content=\"System.Transactions.IEnlistmentNotification.Commit\">\r\n<meta name=\"APIName\" content=\"System.Transactions.IEnlistmentNotification.InDoubt\">\r\n<meta name=\"APIName\" content=\"System.Transactions.IEnlistmentNotification.Prepare\">\r\n<meta name=\"APIName\" content=\"System.Transactions.IEnlistmentNotification.Rollback\">\r\n<meta name=\"APILocation\" content=\"System.Transactions.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 05:47 AM\">\r\n<meta name=\"document_id\" content=\"9049ef66-8f5d-153e-97c5-0393f3706556\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Describes an interface that a resource manager should implement to provide two phase commit notification callbacks for the transaction manager upon enlisting for participation.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.transactions/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Transactions.IEnlistmentNotification\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Transactions.IEnlistmentNotification.yml","open_to_public_contributors":false,"api_name":["System.Transactions.IEnlistmentNotification","System.Transactions.IEnlistmentNotification.Commit","System.Transactions.IEnlistmentNotification.InDoubt","System.Transactions.IEnlistmentNotification.Prepare","System.Transactions.IEnlistmentNotification.Rollback"],"api_location":["System.Transactions.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Transactions.IEnlistmentNotification","System::Transactions::IEnlistmentNotification","System.Transactions.IEnlistmentNotification.Commit","System::Transactions::IEnlistmentNotification::Commit","System.Transactions.IEnlistmentNotification.InDoubt","System::Transactions::IEnlistmentNotification::InDoubt","System.Transactions.IEnlistmentNotification.Prepare","System::Transactions::IEnlistmentNotification::Prepare","System.Transactions.IEnlistmentNotification.Rollback","System::Transactions::IEnlistmentNotification::Rollback"],"dev_langs":["csharp"],"updated_at":"2017-03-31 05:47 AM","document_id":"9049ef66-8f5d-153e-97c5-0393f3706556","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Transactions/IEnlistmentNotification.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IEnlistmentNotification interface | Microsoft Docs","_op_ogTitle":"IEnlistmentNotification interface","description":"Describes an interface that a resource manager should implement to provide two phase commit notification callbacks for the transaction manager upon enlisting for participation.\n","toc_asset_id":"api/_splitted/System.Transactions/toc.json","toc_rel":"_splitted/System.Transactions/toc.json","source_url":"","ms.assetid":"System.Transactions.IEnlistmentNotification","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.transactions.ienlistmentnotification","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.transactions.ienlistmentnotification","fileRelativePath":"api/System.Transactions.IEnlistmentNotification.html"},"themesRelativePathToOutputRoot":"_themes/"}