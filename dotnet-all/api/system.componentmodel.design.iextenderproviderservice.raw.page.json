{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">IExtenderProviderService</span>\r\n      Interface\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Provides an interface for adding and removing extender providers at design time.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public interface IExtenderProviderService</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example demosntrates using the IExtenderProviderService from a designer to add and remove an <a class=\"xref\" href=\"system.componentmodel.iextenderprovider\" data-linktype=\"relative-path\">IExtenderProvider</a> implementation.  </p>\n<pre><code class=\"lang-vb\" name=\"ExtenderServiceExample#1\">Imports System\nImports System.Collections\nImports System.ComponentModel\nImports System.ComponentModel.Design\nImports System.Windows.Forms\nImports System.Windows.Forms.Design\n\n&#39; This designer adds a ComponentExtender extender provider, \n&#39; and removes it when the designer is destroyed.\nPublic Class ExtenderServiceDesigner\n    Inherits System.Windows.Forms.Design.ControlDesigner\n\n   &#39; A local reference to an obtained IExtenderProviderService.\n   Private localExtenderServiceReference As IExtenderProviderService\n   &#39; An IExtenderProvider that this designer supplies.\n   Private extender As ComponentExtender   \n   \n   Public Sub New()\n    End Sub\n\n    Public Overrides Sub Initialize(ByVal component As System.ComponentModel.IComponent)\n        MyBase.Initialize(component)\n\n        &#39; Attempts to obtain an IExtenderProviderService.\n        Dim extenderService As IExtenderProviderService = CType(component.Site.GetService(GetType(IExtenderProviderService)), IExtenderProviderService)\n        If (extenderService IsNot Nothing) Then\n            &#39; If the service was obtained, adds a ComponentExtender \n            &#39; that adds an &quot;ExtenderIndex&quot; integer property to the \n            &#39; designer&#39;s component.\n            extender = New ComponentExtender()\n            extenderService.AddExtenderProvider(extender)\n            localExtenderServiceReference = extenderService\n        Else\n            MessageBox.Show(&quot;Could not obtain an IExtenderProviderService.&quot;)\n        End If\n    End Sub\n\n    Protected Overloads Overrides Sub Dispose(ByVal disposing As Boolean)\n        &#39; Removes any previously added extender provider.\n        If (localExtenderServiceReference IsNot Nothing) Then\n            localExtenderServiceReference.RemoveExtenderProvider(extender)\n            localExtenderServiceReference = Nothing\n        End If\n    End Sub\nEnd Class\n\n&#39; IExtenderProviderImplementation that adds an integer property \n&#39; named &quot;ExtenderIndex&quot; to any design-mode document object.\n&lt;ProvidePropertyAttribute(&quot;ExtenderIndex&quot;, GetType(IComponent))&gt; _\nPublic Class ComponentExtender\n    Implements System.ComponentModel.IExtenderProvider\n\n    &#39; Stores the value of the property to extend a component with.\n    Public index As Integer = 0\n\n    Public Sub New()\n    End Sub\n\n    &#39; Extends any type of object.\n    Public Function CanExtend(ByVal extendee As Object) As Boolean Implements IExtenderProvider.CanExtend\n        Return True\n    End Function\n\n    Public Function GetExtenderIndex(ByVal component As IComponent) As Integer\n        Return index\n    End Function\n\n    Public Sub SetExtenderIndex(ByVal component As IComponent, ByVal index As Integer)\n        Me.index = index\n    End Sub\nEnd Class\n\n&#39; Example UserControl associated with the ExtenderServiceDesigner.\n&lt;DesignerAttribute(GetType(ExtenderServiceDesigner))&gt; _\nPublic Class ExtenderServiceTestControl\n    Inherits System.Windows.Forms.UserControl\n\n    Public Sub New()\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"ExtenderServiceExample#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.ComponentModel.Design;\nusing System.Windows.Forms;\nusing System.Windows.Forms.Design;\n\nnamespace ExtenderServiceExample\n{    \n    // This designer adds a ComponentExtender extender provider, \n    // and removes it when the designer is destroyed.\n    public class ExtenderServiceDesigner : System.Windows.Forms.Design.ControlDesigner\n    {\n        // A local reference to an obtained IExtenderProviderService.\n        private IExtenderProviderService localExtenderServiceReference;\n        // An IExtenderProvider that this designer supplies.\n        private ComponentExtender extender;\n        \n        public ExtenderServiceDesigner()\n        {\n        }\n\n        public override void Initialize(System.ComponentModel.IComponent component)\n        {\n            base.Initialize(component);\n\n            // Attempts to obtain an IExtenderProviderService.\n            IExtenderProviderService extenderService = (IExtenderProviderService)component.Site.GetService(typeof(IExtenderProviderService));\n            if( extenderService != null )\n            {\n                // If the service was obtained, adds a ComponentExtender \n                // that adds an &quot;ExtenderIndex&quot; integer property to the \n                // designer&#39;s component.\n                extender = new ComponentExtender();                \n                extenderService.AddExtenderProvider( extender );\n                localExtenderServiceReference = extenderService;\n            }\n            else\n                MessageBox.Show(&quot;Could not obtain an IExtenderProviderService.&quot;);\n        }\n\n        protected override void Dispose(bool disposing)\n        {\n            // Removes any previously added extender provider.\n            if( localExtenderServiceReference != null )\n            {\n                localExtenderServiceReference.RemoveExtenderProvider( extender );\n                localExtenderServiceReference = null;\n            }            \n        }\n    }\n    \n    // IExtenderProviderImplementation that adds an integer property \n    // named &quot;ExtenderIndex&quot; to any design-mode document object.\n    [ProvidePropertyAttribute(&quot;ExtenderIndex&quot;, typeof(IComponent))]\n    public class ComponentExtender : System.ComponentModel.IExtenderProvider\n    {\n        // Stores the value of the property to extend a component with.\n        public int index = 0;        \n    \n        public ComponentExtender()\n        {\n        }\n\n        public bool CanExtend(object extendee)\n        {         \n            // Extends any type of object.\n            return true;\n        }\n\n        public int GetExtenderIndex(IComponent component)\n        {\n            return index;\n        }\n\n        public void SetExtenderIndex(IComponent component, int index)\n        {\n            this.index = index;\n        }\n    }\n\n    // Example UserControl associated with the ExtenderServiceDesigner.\n    [DesignerAttribute(typeof(ExtenderServiceDesigner))]\n    public class ExtenderServiceTestControl : System.Windows.Forms.UserControl\n    {\t\t\n        public ExtenderServiceTestControl()\n        {\t\t\t\t\t\t\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"ExtenderServiceExample#1\">#using &lt;system.dll&gt;\n#using &lt;system.design.dll&gt;\n#using &lt;system.windows.forms.dll&gt;\n#using &lt;system.drawing.dll&gt;\n\nusing namespace System;\nusing namespace System::ComponentModel;\nusing namespace System::ComponentModel::Design;\nusing namespace System::Windows::Forms;\nusing namespace System::Windows::Forms::Design;\n\n// IExtenderProviderImplementation that adds an integer property\n// named &quot;ExtenderIndex&quot; to any design-mode document object.\n\n[ProvidePropertyAttribute(&quot;ExtenderIndex&quot;,IComponent::typeid)]\npublic ref class ComponentExtender: public IExtenderProvider\n{\npublic:\n\n   // Stores the value of the property to extend a component with.\n   int index;\n   ComponentExtender()\n   {\n      index = 0;\n   }\n\n   virtual bool CanExtend( Object^ /*extendee*/ )\n   {\n      // Extends any type of object.\n      return true;\n   }\n\n   int GetExtenderIndex( IComponent^ /*component*/ )\n   {\n      return index;\n   }\n\n   void SetExtenderIndex( IComponent^ /*component*/, int index )\n   {\n      this-&gt;index = index;\n   }\n};\n\n\n// This designer adds a ComponentExtender extender provider,\n// and removes it when the designer is destroyed.\npublic ref class ExtenderServiceDesigner: public ControlDesigner\n{\nprivate:\n\n   // A local reference to an obtained IExtenderProviderService.\n   IExtenderProviderService^ localExtenderServiceReference;\n\n   // An IExtenderProvider that this designer supplies.\n   ComponentExtender^ extender;\n\npublic:\n   ExtenderServiceDesigner(){}\n\n   virtual void Initialize( IComponent^ component ) override\n   {\n      ControlDesigner::Initialize( component );\n\n      // Attempts to obtain an IExtenderProviderService.\n      IExtenderProviderService^ extenderService = dynamic_cast&lt;IExtenderProviderService^&gt;(component-&gt;Site-&gt;GetService( IExtenderProviderService::typeid ));\n      if ( extenderService != nullptr )\n      {\n         // If the service was obtained, adds a ComponentExtender\n         // that adds an &quot;ExtenderIndex&quot; integer property to the\n         // designer&#39;s component.\n         extender = gcnew ComponentExtender;\n         extenderService-&gt;AddExtenderProvider( extender );\n         localExtenderServiceReference = extenderService;\n      }\n      else\n            MessageBox::Show( &quot;Could not obtain an IExtenderProviderService.&quot; );\n   }\n\n   ~ExtenderServiceDesigner()\n   {\n      // Removes any previously added extender provider.\n      if ( localExtenderServiceReference != nullptr )\n      {\n         localExtenderServiceReference-&gt;RemoveExtenderProvider( extender );\n         localExtenderServiceReference = nullptr;\n      }\n   }\n};\n\n// Example UserControl associated with the ExtenderServiceDesigner.\n\n[DesignerAttribute(ExtenderServiceDesigner::typeid)]\npublic ref class ExtenderServiceTestControl: public UserControl\n{\npublic:\n   ExtenderServiceTestControl(){}\n};\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>Typically, only components that have been added to a container offer extender providers. The IExtenderProviderService allows you to extend this capability to objects that are not in the container.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_Design_IExtenderProviderService_AddExtenderProvider_System_ComponentModel_IExtenderProvider_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">AddExtenderProvider(IExtenderProvider)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Adds the specified extender provider.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void AddExtenderProvider (System.ComponentModel.IExtenderProvider provider);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>provider</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.iextenderprovider\" data-linktype=\"relative-path\">IExtenderProvider</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The extender provider to add.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This interface allows objects besides components to add extender providers to the design time set of extender providers. All properties that are displayed from these extender providers are marked as design time only.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_Design_IExtenderProviderService_RemoveExtenderProvider_System_ComponentModel_IExtenderProvider_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">RemoveExtenderProvider(IExtenderProvider)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Removes the specified extender provider.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void RemoveExtenderProvider (System.ComponentModel.IExtenderProvider provider);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>provider</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.iextenderprovider\" data-linktype=\"relative-path\">IExtenderProvider</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The extender provider to remove.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This interface allows objects besides components to add extender providers to the design-time set of extender providers. All properties that are displayed from these extender providers are marked as design time only.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t  \r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.ComponentModel.Design.IExtenderProviderService.yml\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.IExtenderProviderService\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.IExtenderProviderService.AddExtenderProvider\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.IExtenderProviderService.RemoveExtenderProvider\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-24 01:41 AM\">\r\n<meta name=\"document_id\" content=\"59a21514-c867-7b22-0947-160828db7ed3\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides an interface for adding and removing extender providers at design time.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.componentmodel.design/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.ComponentModel.Design.IExtenderProviderService\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.ComponentModel.Design.IExtenderProviderService.yml","open_to_public_contributors":false,"api_name":["System.ComponentModel.Design.IExtenderProviderService","System.ComponentModel.Design.IExtenderProviderService.AddExtenderProvider","System.ComponentModel.Design.IExtenderProviderService.RemoveExtenderProvider"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.ComponentModel.Design.IExtenderProviderService","System::ComponentModel::Design::IExtenderProviderService","System.ComponentModel.Design.IExtenderProviderService.AddExtenderProvider","System::ComponentModel::Design::IExtenderProviderService::AddExtenderProvider","System.ComponentModel.Design.IExtenderProviderService.RemoveExtenderProvider","System::ComponentModel::Design::IExtenderProviderService::RemoveExtenderProvider"],"dev_langs":["csharp"],"updated_at":"2017-03-24 01:41 AM","document_id":"59a21514-c867-7b22-0947-160828db7ed3","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Design/IExtenderProviderService.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IExtenderProviderService interface | Microsoft Docs","_op_ogTitle":"IExtenderProviderService interface","description":"Provides an interface for adding and removing extender providers at design time.\n","toc_asset_id":"api/_splitted/System.ComponentModel.Design/toc.json","toc_rel":"_splitted/System.ComponentModel.Design/toc.json","source_url":"","ms.assetid":"System.ComponentModel.Design.IExtenderProviderService","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.design.iextenderproviderservice","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.design.iextenderproviderservice","fileRelativePath":"api/System.ComponentModel.Design.IExtenderProviderService.html"},"themesRelativePathToOutputRoot":"_themes/"}