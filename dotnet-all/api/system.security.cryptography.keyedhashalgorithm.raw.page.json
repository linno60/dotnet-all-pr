{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">KeyedHashAlgorithm</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the abstract class from which all implementations of keyed hash algorithms must derive.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic abstract class KeyedHashAlgorithm : System.Security.Cryptography.HashAlgorithm</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.hashalgorithm\" data-linktype=\"relative-path\">HashAlgorithm</a></span></div><span class=\"lang-csharp\">KeyedHashAlgorithm</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Derived</dt><dd>\r\n  \t\t<div class=\"cdlHolder\">\r\n        \t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.hmac\" data-linktype=\"relative-path\">HMAC</a></span></div>\r\n        \t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.mactripledes\" data-linktype=\"relative-path\">MACTripleDES</a></span></div>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Attributes</dt><dd>\r\n  \t\t<div class=\"cdlHolder\">\r\n  \t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.hashalgorithm#System_Security_Cryptography_HashAlgorithm_CanReuseTransform\" data-linktype=\"relative-path\">CanReuseTransform</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.hashalgorithm#System_Security_Cryptography_HashAlgorithm_CanTransformMultipleBlocks\" data-linktype=\"relative-path\">CanTransformMultipleBlocks</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.hashalgorithm#System_Security_Cryptography_HashAlgorithm_Clear\" data-linktype=\"relative-path\">Clear()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.hashalgorithm#System_Security_Cryptography_HashAlgorithm_ComputeHash_System_Byte___\" data-linktype=\"relative-path\">ComputeHash(Byte[])</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.hashalgorithm#System_Security_Cryptography_HashAlgorithm_ComputeHash_System_Byte___System_Int32_System_Int32_\" data-linktype=\"relative-path\">ComputeHash(Byte[], Int32, Int32)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.hashalgorithm#System_Security_Cryptography_HashAlgorithm_ComputeHash_System_IO_Stream_\" data-linktype=\"relative-path\">ComputeHash(Stream)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.hashalgorithm#System_Security_Cryptography_HashAlgorithm_Dispose\" data-linktype=\"relative-path\">Dispose()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.hashalgorithm#System_Security_Cryptography_HashAlgorithm_Hash\" data-linktype=\"relative-path\">Hash</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.hashalgorithm#System_Security_Cryptography_HashAlgorithm_HashCore_System_Byte___System_Int32_System_Int32_\" data-linktype=\"relative-path\">HashCore(Byte[], Int32, Int32)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.hashalgorithm#System_Security_Cryptography_HashAlgorithm_HashFinal\" data-linktype=\"relative-path\">HashFinal()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.hashalgorithm#System_Security_Cryptography_HashAlgorithm_HashSize\" data-linktype=\"relative-path\">HashSize</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.hashalgorithm#System_Security_Cryptography_HashAlgorithm_HashSizeValue\" data-linktype=\"relative-path\">HashSizeValue</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.hashalgorithm#System_Security_Cryptography_HashAlgorithm_HashValue\" data-linktype=\"relative-path\">HashValue</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.hashalgorithm#System_Security_Cryptography_HashAlgorithm_Initialize\" data-linktype=\"relative-path\">Initialize()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.hashalgorithm#System_Security_Cryptography_HashAlgorithm_InputBlockSize\" data-linktype=\"relative-path\">InputBlockSize</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.hashalgorithm#System_Security_Cryptography_HashAlgorithm_OutputBlockSize\" data-linktype=\"relative-path\">OutputBlockSize</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.hashalgorithm#System_Security_Cryptography_HashAlgorithm_State\" data-linktype=\"relative-path\">State</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.hashalgorithm#System_Security_Cryptography_HashAlgorithm_TransformBlock_System_Byte___System_Int32_System_Int32_System_Byte___System_Int32_\" data-linktype=\"relative-path\">TransformBlock(Byte[], Int32, Int32, Byte[], Int32)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.hashalgorithm#System_Security_Cryptography_HashAlgorithm_TransformFinalBlock_System_Byte___System_Int32_System_Int32_\" data-linktype=\"relative-path\">TransformFinalBlock(Byte[], Int32, Int32)</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example demonstrates how to derive from the KeyedHashAlgorithm class.  </p>\n<pre><code class=\"lang-cs\" name=\"KeyedHashAlgorithm#1\">using System;\nusing System.Security.Cryptography;\n\npublic class TestHMACMD5\n{\n    static private void PrintByteArray(Byte[] arr)\n    {\n        int i;\n        Console.WriteLine(&quot;Length: &quot; + arr.Length);\n        for (i = 0; i &lt; arr.Length; i++)\n        {\n            Console.Write(&quot;{0:X}&quot;, arr[i]);\n            Console.Write(&quot;    &quot;);\n            if ((i + 9) % 8 == 0) Console.WriteLine();\n        }\n        if (i % 8 != 0) Console.WriteLine();\n    }\n    public static void Main()\n    {\n        // Create a key.\n        byte[] key1 = { 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b };\n        // Pass the key to the constructor of the HMACMD5 class.  \n        HMACMD5 hmac1 = new HMACMD5(key1);\n\n        // Create another key.\n        byte[] key2 = System.Text.Encoding.ASCII.GetBytes(&quot;KeyString&quot;);\n        // Pass the key to the constructor of the HMACMD5 class.  \n        HMACMD5 hmac2 = new HMACMD5(key2);\n\n        // Encode a string into a byte array, create a hash of the array,\n        // and print the hash to the screen.\n        byte[] data1 = System.Text.Encoding.ASCII.GetBytes(&quot;Hi There&quot;);\n        PrintByteArray(hmac1.ComputeHash(data1));\n\n        // Encode a string into a byte array, create a hash of the array,\n        // and print the hash to the screen.\n        byte[] data2 = System.Text.Encoding.ASCII.GetBytes(&quot;This data will be hashed.&quot;);\n        PrintByteArray(hmac2.ComputeHash(data2));\n    }\n}\npublic class HMACMD5 : KeyedHashAlgorithm\n{\n    private MD5 hash1;\n    private MD5 hash2;\n    private bool bHashing = false;\n\n    private byte[] rgbInner = new byte[64];\n    private byte[] rgbOuter = new byte[64];\n\n    public HMACMD5(byte[] rgbKey)\n    {\n        HashSizeValue = 128;\n        // Create the hash algorithms.\n        hash1 = MD5.Create();\n        hash2 = MD5.Create();\n        // Get the key.\n        if (rgbKey.Length &gt; 64)\n        {\n            KeyValue = hash1.ComputeHash(rgbKey);\n            // No need to call Initialize; ComputeHash does it automatically.\n        }\n        else\n        {\n            KeyValue = (byte[])rgbKey.Clone();\n        }\n        // Compute rgbInner and rgbOuter.\n        int i = 0;\n        for (i = 0; i &lt; 64; i++)\n        {\n            rgbInner[i] = 0x36;\n            rgbOuter[i] = 0x5C;\n        }\n        for (i = 0; i &lt; KeyValue.Length; i++)\n        {\n            rgbInner[i] ^= KeyValue[i];\n            rgbOuter[i] ^= KeyValue[i];\n        }\n    }\n\n    public override byte[] Key\n    {\n        get { return (byte[])KeyValue.Clone(); }\n        set\n        {\n            if (bHashing)\n            {\n                throw new Exception(&quot;Cannot change key during hash operation&quot;);\n            }\n            if (value.Length &gt; 64)\n            {\n                KeyValue = hash1.ComputeHash(value);\n                // No need to call Initialize; ComputeHash does it automatically.\n            }\n            else\n            {\n                KeyValue = (byte[])value.Clone();\n            }\n            // Compute rgbInner and rgbOuter.\n            int i = 0;\n            for (i = 0; i &lt; 64; i++)\n            {\n                rgbInner[i] = 0x36;\n                rgbOuter[i] = 0x5C;\n            }\n            for (i = 0; i &lt; KeyValue.Length; i++)\n            {\n                rgbInner[i] ^= KeyValue[i];\n                rgbOuter[i] ^= KeyValue[i];\n            }\n        }\n    }\n    public override void Initialize()\n    {\n        hash1.Initialize();\n        hash2.Initialize();\n        bHashing = false;\n    }\n    protected override void HashCore(byte[] rgb, int ib, int cb)\n    {\n        if (bHashing == false)\n        {\n            hash1.TransformBlock(rgbInner, 0, 64, rgbInner, 0);\n            bHashing = true;\n        }\n        hash1.TransformBlock(rgb, ib, cb, rgb, ib);\n    }\n\n    protected override byte[] HashFinal()\n    {\n        if (bHashing == false)\n        {\n            hash1.TransformBlock(rgbInner, 0, 64, rgbInner, 0);\n            bHashing = true;\n        }\n        // Finalize the original hash.\n        hash1.TransformFinalBlock(new byte[0], 0, 0);\n        // Write the outer array.\n        hash2.TransformBlock(rgbOuter, 0, 64, rgbOuter, 0);\n        // Write the inner hash and finalize the hash.\n        hash2.TransformFinalBlock(hash1.Hash, 0, hash1.Hash.Length);\n        bHashing = false;\n        return hash2.Hash;\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"KeyedHashAlgorithm#1\">Imports System\nImports System.Security.Cryptography\n _\n\nPublic Class TestHMACMD5\n\n    Private Shared Sub PrintByteArray(ByVal arr() As [Byte])\n        Dim i As Integer\n        Console.WriteLine((&quot;Length: &quot; + arr.Length.ToString()))\n        For i = 0 To arr.Length - 1\n            Console.Write(&quot;{0:X}&quot;, arr(i))\n            Console.Write(&quot;    &quot;)\n            If (i + 9) Mod 8 = 0 Then\n                Console.WriteLine()\n            End If\n        Next i\n        If i Mod 8 &lt;&gt; 0 Then\n            Console.WriteLine()\n        End If\n    End Sub\n\n    Public Shared Sub Main()\n        &#39; Create a key.\n        Dim key1 As Byte() = {&amp;HB, &amp;HB, &amp;HB, &amp;HB, &amp;HB, &amp;HB, &amp;HB, &amp;HB, &amp;HB, &amp;HB, &amp;HB, &amp;HB, &amp;HB, &amp;HB, &amp;HB, &amp;HB}\n        &#39; Pass the key to the constructor of the HMACMD5 class.  \n        Dim hmac1 As New HMACMD5(key1)\n\n        &#39; Create another key.\n        Dim key2 As Byte() = System.Text.Encoding.ASCII.GetBytes(&quot;KeyString&quot;)\n        &#39; Pass the key to the constructor of the HMACMD5 class.  \n        Dim hmac2 As New HMACMD5(key2)\n\n        &#39; Encode a string into a byte array, create a hash of the array,\n        &#39; and print the hash to the screen.\n        Dim data1 As Byte() = System.Text.Encoding.ASCII.GetBytes(&quot;Hi There&quot;)\n        PrintByteArray(hmac1.ComputeHash(data1))\n\n        &#39; Encode a string into a byte array, create a hash of the array,\n        &#39; and print the hash to the screen.\n        Dim data2 As Byte() = System.Text.Encoding.ASCII.GetBytes(&quot;This data will be hashed.&quot;)\n        PrintByteArray(hmac2.ComputeHash(data2))\n    End Sub\nEnd Class\n _\n\nPublic Class HMACMD5\n    Inherits KeyedHashAlgorithm\n    Private hash1 As MD5\n    Private hash2 As MD5\n    Private bHashing As Boolean = False\n\n    Private rgbInner(64) As Byte\n    Private rgbOuter(64) As Byte\n\n\n    Public Sub New(ByVal rgbKey() As Byte)\n        HashSizeValue = 128\n        &#39; Create the hash algorithms.\n        hash1 = MD5.Create()\n        hash2 = MD5.Create()\n        &#39; Get the key.\n        If rgbKey.Length &gt; 64 Then\n            KeyValue = hash1.ComputeHash(rgbKey)\n            &#39; No need to call Initialize; ComputeHash does it automatically.\n        Else\n            KeyValue = CType(rgbKey.Clone(), Byte())\n        End If\n        &#39; Compute rgbInner and rgbOuter.\n        Dim i As Integer = 0\n        For i = 0 To 63\n            rgbInner(i) = &amp;H36\n            rgbOuter(i) = &amp;H5C\n        Next i\n        i = 0\n        For i = 0 To KeyValue.Length - 1\n            rgbInner(i) = rgbInner(i) Xor KeyValue(i)\n            rgbOuter(i) = rgbOuter(i) Xor KeyValue(i)\n        Next i\n    End Sub\n\n\n    Public Overrides Property Key() As Byte()\n        Get\n            Return CType(KeyValue.Clone(), Byte())\n        End Get\n        Set(ByVal Value As Byte())\n            If bHashing Then\n                Throw New Exception(&quot;Cannot change key during hash operation&quot;)\n            End If\n            If value.Length &gt; 64 Then\n                KeyValue = hash1.ComputeHash(value)\n                &#39; No need to call Initialize; ComputeHash does it automatically.\n            Else\n                KeyValue = CType(value.Clone(), Byte())\n            End If\n            &#39; Compute rgbInner and rgbOuter.\n            Dim i As Integer = 0\n            For i = 0 To 63\n                rgbInner(i) = &amp;H36\n                rgbOuter(i) = &amp;H5C\n            Next i\n            For i = 0 To KeyValue.Length - 1\n                rgbInner(i) ^= KeyValue(i)\n                rgbOuter(i) ^= KeyValue(i)\n            Next i\n        End Set\n    End Property\n\n\n    Public Overrides Sub Initialize()\n        hash1.Initialize()\n        hash2.Initialize()\n        bHashing = False\n    End Sub\n\n\n    Protected Overrides Sub HashCore(ByVal rgb() As Byte, ByVal ib As Integer, ByVal cb As Integer)\n        If bHashing = False Then\n            hash1.TransformBlock(rgbInner, 0, 64, rgbInner, 0)\n            bHashing = True\n        End If\n        hash1.TransformBlock(rgb, ib, cb, rgb, ib)\n    End Sub\n\n\n    Protected Overrides Function HashFinal() As Byte()\n        If bHashing = False Then\n            hash1.TransformBlock(rgbInner, 0, 64, rgbInner, 0)\n            bHashing = True\n        End If\n        &#39; Finalize the original hash.\n        hash1.TransformFinalBlock(New Byte(0) {}, 0, 0)\n        &#39; Write the outer array.\n        hash2.TransformBlock(rgbOuter, 0, 64, rgbOuter, 0)\n        &#39; Write the inner hash and finalize the hash.\n        hash2.TransformFinalBlock(hash1.Hash, 0, hash1.Hash.Length)\n        bHashing = False\n        Return hash2.Hash\n    End Function\nEnd Class\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>Hash functions map binary strings of an arbitrary length to small binary strings of a fixed length. A cryptographic hash function has the property that it is computationally infeasible to find two distinct inputs that hash to the same value. Small changes to the data result in large, unpredictable changes in the hash.  </p>\n<p> A keyed hash algorithm is a key-dependent, one-way hash function used as a message authentication code. Only someone who knows the key can verify the hash. Keyed hash algorithms provide authenticity without secrecy.  </p>\n<p> Hash functions are commonly used with digital signatures and for data integrity. The <a class=\"xref\" href=\"system.security.cryptography.hmacsha1\" data-linktype=\"relative-path\">HMACSHA1</a> class is an example of a keyed hash algorithm.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Security_Cryptography_KeyedHashAlgorithm__ctor_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_KeyedHashAlgorithm__ctor\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">KeyedHashAlgorithm()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.keyedhashalgorithm\" data-linktype=\"relative-path\">KeyedHashAlgorithm</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected KeyedHashAlgorithm ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>You cannot create an instance of an abstract class. Application code creates a new instance of a derived class.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Fields\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_KeyedHashAlgorithm_KeyValue\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">KeyValue</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>The key to use in the hash algorithm.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected byte[] KeyValue;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This field is accessed through the <a class=\"xref\" href=\"system.security.cryptography.keyedhashalgorithm#System_Security_Cryptography_KeyedHashAlgorithm_Key_\" data-linktype=\"relative-path\">Key</a> property.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Security_Cryptography_KeyedHashAlgorithm_Key_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_KeyedHashAlgorithm_Key\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Key</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets the key to use in the hash algorithm.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual byte[] Key { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The key to use in the hash algorithm.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>An attempt was made to change the Key property after hashing has begun.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This property is the public accessor for the <a class=\"xref\" href=\"system.security.cryptography.keyedhashalgorithm#System_Security_Cryptography_KeyedHashAlgorithm_KeyValue\" data-linktype=\"relative-path\">KeyValue</a> field.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Security_Cryptography_KeyedHashAlgorithm_Create_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_KeyedHashAlgorithm_Create\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Create()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Creates an instance of the default implementation of a keyed hash algorithm.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Security.Cryptography.KeyedHashAlgorithm Create ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.keyedhashalgorithm\" data-linktype=\"relative-path\">KeyedHashAlgorithm</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A new <a class=\"xref\" href=\"system.security.cryptography.hmacsha1\" data-linktype=\"relative-path\">HMACSHA1</a> instance, unless the default settings have been changed.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>By default, this overload uses the <a class=\"xref\" href=\"system.security.cryptography.hmacsha1\" data-linktype=\"relative-path\">HMACSHA1</a> implementation of a keyed hash algorithm. If you want to specify a different implementation, use the <a class=\"xref\" href=\"system.security.cryptography.keyedhashalgorithm#System_Security_Cryptography_KeyedHashAlgorithm_Create_System_String_\" data-linktype=\"relative-path\">Create(String)</a> overload, which lets you specify an algorithm name, instead. The cryptography configuration system defines the default implementation of the <a class=\"xref\" href=\"system.security.cryptography.keyedhashalgorithm\" data-linktype=\"relative-path\">KeyedHashAlgorithm</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Security_Cryptography_KeyedHashAlgorithm_Create_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_KeyedHashAlgorithm_Create_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Create(String)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Creates an instance of the specified implementation of a keyed hash algorithm.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Security.Cryptography.KeyedHashAlgorithm Create (string algName);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>algName</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The keyed hash algorithm implementation to use. The following table shows the valid values for the <code>algName</code> parameter and the algorithms they map to.  </p>\n <table><thead><tr><th> Parameter value<br>\n </th><th> Implements<br>\n </th></tr></thead><tbody><tr><td> System.Security.Cryptography.HMAC<br>\n </td><td><a class=\"xref\" href=\"system.security.cryptography.hmacsha1\" data-linktype=\"relative-path\">HMACSHA1</a></td></tr><tr><td> System.Security.Cryptography.KeyedHashAlgorithm<br>\n </td><td><a class=\"xref\" href=\"system.security.cryptography.hmacsha1\" data-linktype=\"relative-path\">HMACSHA1</a></td></tr><tr><td> HMACMD5<br>\n </td><td><a class=\"xref\" href=\"system.security.cryptography.hmacmd5\" data-linktype=\"relative-path\">HMACMD5</a></td></tr><tr><td> System.Security.Cryptography.HMACMD5<br>\n </td><td><a class=\"xref\" href=\"system.security.cryptography.hmacmd5\" data-linktype=\"relative-path\">HMACMD5</a></td></tr><tr><td> HMACRIPEMD160<br>\n </td><td><a class=\"xref\" href=\"system.security.cryptography.hmacripemd160\" data-linktype=\"relative-path\">HMACRIPEMD160</a></td></tr><tr><td> System.Security.Cryptography.HMACRIPEMD160<br>\n </td><td><a class=\"xref\" href=\"system.security.cryptography.hmacripemd160\" data-linktype=\"relative-path\">HMACRIPEMD160</a></td></tr><tr><td> HMACSHA1<br>\n </td><td><a class=\"xref\" href=\"system.security.cryptography.hmacsha1\" data-linktype=\"relative-path\">HMACSHA1</a></td></tr><tr><td> System.Security.Cryptography.HMACSHA1<br>\n </td><td><a class=\"xref\" href=\"system.security.cryptography.hmacsha1\" data-linktype=\"relative-path\">HMACSHA1</a></td></tr><tr><td> HMACSHA256<br>\n </td><td><a class=\"xref\" href=\"system.security.cryptography.hmacsha256\" data-linktype=\"relative-path\">HMACSHA256</a></td></tr><tr><td> System.Security.Cryptography.HMACSHA256<br>\n </td><td><a class=\"xref\" href=\"system.security.cryptography.hmacsha256\" data-linktype=\"relative-path\">HMACSHA256</a></td></tr><tr><td> HMACSHA384<br>\n </td><td><a class=\"xref\" href=\"system.security.cryptography.hmacsha384\" data-linktype=\"relative-path\">HMACSHA384</a></td></tr><tr><td> System.Security.Cryptography.HMACSHA384<br>\n </td><td><a class=\"xref\" href=\"system.security.cryptography.hmacsha384\" data-linktype=\"relative-path\">HMACSHA384</a></td></tr><tr><td> HMACSHA512<br>\n </td><td><a class=\"xref\" href=\"system.security.cryptography.hmacsha512\" data-linktype=\"relative-path\">HMACSHA512</a></td></tr><tr><td> System.Security.Cryptography.HMACSHA512<br>\n </td><td><a class=\"xref\" href=\"system.security.cryptography.hmacsha512\" data-linktype=\"relative-path\">HMACSHA512</a></td></tr><tr><td> MACTripleDES<br>\n </td><td><a class=\"xref\" href=\"system.security.cryptography.mactripledes\" data-linktype=\"relative-path\">MACTripleDES</a></td></tr><tr><td> System.Security.Cryptography.MACTripleDES<br>\n </td><td><a class=\"xref\" href=\"system.security.cryptography.mactripledes\" data-linktype=\"relative-path\">MACTripleDES</a></td></tr></tbody></table>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.keyedhashalgorithm\" data-linktype=\"relative-path\">KeyedHashAlgorithm</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A new instance of the specified keyed hash algorithm.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method supports a number of algorithms, including MD5, SHA-1, SHA-256, and RIPEMD160. For a full list, see the supported values for the <code>algName</code> parameter.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Security_Cryptography_KeyedHashAlgorithm_Dispose_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_KeyedHashAlgorithm_Dispose_System_Boolean_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Dispose(Boolean)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Releases the unmanaged resources used by the <a class=\"xref\" href=\"system.security.cryptography.keyedhashalgorithm\" data-linktype=\"relative-path\">KeyedHashAlgorithm</a> and optionally releases the managed resources.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected override void Dispose (bool disposing);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>disposing</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> to release both managed and unmanaged resources; <code>false</code> to release only unmanaged resources.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method is called by the public <code>Dispose()</code> method and the <code>Finalize</code> method. <code>Dispose()</code> invokes the protected <code>Dispose(Boolean)</code> method with the <code>disposing</code> parameter set to <code>true</code>. <code>Finalize</code> invokes <code>Dispose</code> with <code>disposing</code> set to <code>false</code>.  </p>\n<p> When the <code>disposing</code> parameter is <code>true</code>, this method releases all resources held by any managed objects that this <a class=\"xref\" href=\"system.security.cryptography.keyedhashalgorithm\" data-linktype=\"relative-path\">KeyedHashAlgorithm</a> references. This method invokes the <code>Dispose()</code> method of each referenced object.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Security.Cryptography.KeyedHashAlgorithm.yml\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.KeyedHashAlgorithm\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.KeyedHashAlgorithm..ctor\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.KeyedHashAlgorithm.Create\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.KeyedHashAlgorithm.Dispose\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.KeyedHashAlgorithm.Key\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.KeyedHashAlgorithm.KeyValue\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 05:47 AM\">\r\n<meta name=\"document_id\" content=\"035f2151-b343-99a7-7838-b8dbf43b1aff\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the abstract class from which all implementations of keyed hash algorithms must derive.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.security.cryptography/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Security.Cryptography.KeyedHashAlgorithm\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Security.Cryptography.KeyedHashAlgorithm.yml","open_to_public_contributors":false,"api_name":["System.Security.Cryptography.KeyedHashAlgorithm","System.Security.Cryptography.KeyedHashAlgorithm..ctor","System.Security.Cryptography.KeyedHashAlgorithm.Create","System.Security.Cryptography.KeyedHashAlgorithm.Dispose","System.Security.Cryptography.KeyedHashAlgorithm.Key","System.Security.Cryptography.KeyedHashAlgorithm.KeyValue"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Security.Cryptography.KeyedHashAlgorithm","System::Security::Cryptography::KeyedHashAlgorithm","System.Security.Cryptography.KeyedHashAlgorithm.#ctor","System::Security::Cryptography::KeyedHashAlgorithm::#ctor","System.Security.Cryptography.KeyedHashAlgorithm.Create","System::Security::Cryptography::KeyedHashAlgorithm::Create","System.Security.Cryptography.KeyedHashAlgorithm.Dispose","System::Security::Cryptography::KeyedHashAlgorithm::Dispose","System.Security.Cryptography.KeyedHashAlgorithm.Key","System::Security::Cryptography::KeyedHashAlgorithm::Key","System.Security.Cryptography.KeyedHashAlgorithm.KeyValue","System::Security::Cryptography::KeyedHashAlgorithm::KeyValue"],"dev_langs":["csharp"],"updated_at":"2017-03-31 05:47 AM","document_id":"035f2151-b343-99a7-7838-b8dbf43b1aff","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Security.Cryptography/KeyedHashAlgorithm.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"KeyedHashAlgorithm class | Microsoft Docs","_op_ogTitle":"KeyedHashAlgorithm class","description":"Represents the abstract class from which all implementations of keyed hash algorithms must derive.\n","toc_asset_id":"api/_splitted/System.Security.Cryptography/toc.json","toc_rel":"_splitted/System.Security.Cryptography/toc.json","source_url":"","ms.assetid":"System.Security.Cryptography.KeyedHashAlgorithm","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.keyedhashalgorithm","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.keyedhashalgorithm","fileRelativePath":"api/System.Security.Cryptography.KeyedHashAlgorithm.html"},"themesRelativePathToOutputRoot":"_themes/"}