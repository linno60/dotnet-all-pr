{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">ITypeResolutionService</span>\r\n      Interface\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Provides an interface to retrieve an assembly or type by name.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public interface ITypeResolutionService</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example control provides an interface to call methods of the ITypeResolutionService from design mode.  </p>\n<pre><code class=\"lang-cs\" name=\"ITypeResolutionServiceExample#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.ComponentModel.Design;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Text;\nusing System.Windows.Forms;\nusing System.Windows.Forms.Design;\n\nnamespace ITypeResolutionServiceExample\n{\t\n    // This control provides an example design-time user interface to \n    // the ITypeResolutionService.\n    [DesignerAttribute(typeof(WindowMessageDesigner), typeof(IDesigner))]\n    public class ITypeResolutionServiceControl : System.Windows.Forms.UserControl\n    {        \n        // Reference to a type resolution service interface, or null \n        // if not obtained.\n        private ITypeResolutionService rs;\n        // Textbox for input of assembly and type names.\n        private System.Windows.Forms.TextBox entryBox;\n        // Textbox for output of assembly, type, and status information.\n        private System.Windows.Forms.TextBox infoBox;\n        // Panel to contain the radio buttons used to select the \n        // method to InvokeMethod.\n        private System.Windows.Forms.Panel panel1;\n        private System.Windows.Forms.RadioButton radioButton1;\n        private System.Windows.Forms.RadioButton radioButton2;\n        private System.Windows.Forms.RadioButton radioButton3;\n        private System.Windows.Forms.RadioButton radioButton4;\n        // Label to display textbox entry information.\n        private System.Windows.Forms.Label label1;\n        // Button to InvokeMethod command.\n        private System.Windows.Forms.Button button1;        \n\n        public ITypeResolutionServiceControl()\n        {\n            InitializeComponent();\n            rs = null;\n            // Attaches event handlers for control clicked events.\n            radioButton1.CheckedChanged += new EventHandler(this.GetAssembly);\n            radioButton2.CheckedChanged += new EventHandler(this.GetPathToAssembly);\n            radioButton3.CheckedChanged += new EventHandler(this.GetInstanceOfType);\n            radioButton4.CheckedChanged += new EventHandler(this.ReferenceAssembly);\n            button1.Click += new EventHandler(this.InvokeMethod);\n            entryBox.KeyUp += new KeyEventHandler(this.InvokeOnEnterKeyHandler);\n        }\n\n        // Displays example control name and status information.\n        protected override void OnPaint(System.Windows.Forms.PaintEventArgs e)\n        {\n            e.Graphics.DrawString(&quot;ITypeResolutionService Interface Control&quot;, new Font(FontFamily.GenericMonospace, 9), new SolidBrush(Color.Blue), 5, 5);\n            if(this.DesignMode)\n                e.Graphics.DrawString(&quot;Currently in Design Mode&quot;, new Font(FontFamily.GenericMonospace, 8), new SolidBrush(Color.DarkGreen), 350, 2);\n            else\n                e.Graphics.DrawString(&quot;Requires Design Mode&quot;, new Font(FontFamily.GenericMonospace, 8), new SolidBrush(Color.Red), 350, 2);\n            if( rs != null )\n                e.Graphics.DrawString(&quot;Type Resolution Service Obtained&quot;, new Font(FontFamily.GenericMonospace, 8), new SolidBrush(Color.DarkGreen), 350, 12);\n            else\n                e.Graphics.DrawString(&quot;Type Resolution Service Not Obtained&quot;, new Font(FontFamily.GenericMonospace, 8), new SolidBrush(Color.Red), 350, 12);\n        }\n\n        // InvokeMethods the currently selected method, if any, when \n        // the InvokeMethod button is pressed.\n        private void InvokeMethod(object sender, EventArgs e)\n        {\n            // If the GetAssembly or GetPathofAssembly radio button \n            // is selected.\n            if(this.radioButton1.Checked || this.radioButton2.Checked || this.radioButton4.Checked)\n            {\n                if(this.entryBox.Text.Length == 0)\n                {\n                    // If there is no assembly name specified, display status message.\n                    this.infoBox.Text = &quot;You must enter the name of the assembly to retrieve.&quot;;\n                }\n                else if( rs != null )\n                {\n                    // Create a System.Reflection.AssemblyName \n                    // for the entered text.\n                    AssemblyName name = new AssemblyName();                               \n                    name.Name = this.entryBox.Text.Trim();                    \n\n                    // If the GetAssembly radio button is checked...\n                    if(this.radioButton1.Checked)\n                    {\n                        // Use the ITypeResolutionService to attempt to \n                        // resolve an assembly reference.\n                        Assembly a = rs.GetAssembly( name, false );\n                        // If an assembly matching the specified name was not \n                        // located in the GAC or local project references, \n                        // display a message.\n                        if( a == null )\n                            this.infoBox.Text = &quot;The &quot;+this.entryBox.Text+&quot; assembly could not be located.&quot;;\n                        else\n                        {\n                            // An assembly matching the specified name was located.\n                            // Builds a list of types.\n                            Type[] types = a.GetTypes();\n                            StringBuilder sb = new StringBuilder();\n                            for(int i=0; i&lt;types.Length; i++)                        \n                                sb.Append(types[i].FullName+&quot;\\r\\n&quot;);\n                            string path = rs.GetPathOfAssembly(name);\n                            // Displays assembly information and a list of types contained in the assembly.\n                            this.infoBox.Text = &quot;Assembly located:\\r\\n\\r\\n&quot;+a.FullName+&quot;\\r\\n  at: &quot;+path+&quot;\\r\\n\\r\\nAssembly types:\\r\\n\\r\\n&quot;+sb.ToString();\n                        }\n                    }\n                    else if(this.radioButton2.Checked)\n                    {\n                        string path = rs.GetPathOfAssembly(name);\n                        if( path != null )                        \n                            this.infoBox.Text = &quot;Assembly located at:\\r\\n&quot;+path;\n                        else\n                            this.infoBox.Text = &quot;Assembly was not located.&quot;;\n                    }\n                    else if(this.radioButton4.Checked)\n                    {\n                        Assembly a = null;\n                        try\n                        {\n                            // Add a reference to the assembly to the \n                            // current project.\n                            rs.ReferenceAssembly(name);\n                            // Use the ITypeResolutionService to attempt \n                            // to resolve an assembly reference.                        \n                            a = rs.GetAssembly( name, false );\n                        }\n                        catch\n                        {     \n                            // Catch this exception so that the exception \n                            // does not interrupt control behavior.\n                        }\n                        // If an assembly matching the specified name was not \n                        // located in the GAC or local project references, \n                        // display a message.\n                        if( a == null )\n                            this.infoBox.Text = &quot;The &quot;+this.entryBox.Text+&quot; assembly could not be located.&quot;;\n                        else                        \n                            this.infoBox.Text = &quot;A reference to the &quot;+a.FullName+&quot; assembly has been added to the project&#39;s referenced assemblies.&quot;;                        \n                    }\n                }\n            }\n            else if(this.radioButton3.Checked)\n            {\n                if(this.entryBox.Text.Length == 0)\n                {\n                    // If there is no type name specified, display a \n                    // status message.\n                    this.infoBox.Text = &quot;You must enter the name of the type to retrieve.&quot;;\n                }\n                else if( rs != null )\n                {\n                    Type type = null;\n                    try\n                    {\n                        type = rs.GetType(this.entryBox.Text, false, true);\n                    }\n                    catch\n                    {                \n                        // Consume exceptions raised during GetType call\n                    }\n                    if( type != null )\n                    {\n                        // Display type information.\n                        this.infoBox.Text = &quot;Type: &quot;+type.FullName+&quot; located.\\r\\n  Namespace: &quot;+type.Namespace+&quot;\\r\\n&quot;+type.AssemblyQualifiedName;\n                    }\n                    else\n                        this.infoBox.Text = &quot;Type not located.&quot;;\n                }                \n            }\n        }\n\n        private void GetAssembly(object sender, EventArgs e)\n        {\n            if(this.radioButton1.Checked)            \n                this.label1.Text = &quot;Enter the assembly name:&quot;;            \n        }\n\n        private void GetPathToAssembly(object sender, EventArgs e)\n        {\n            if(this.radioButton2.Checked)            \n                this.label1.Text = &quot;Enter the assembly name:&quot;;            \n        }\n\n        private void GetInstanceOfType(object sender, EventArgs e)\n        {\n            if(this.radioButton3.Checked)\n            this.label1.Text = &quot;Enter the type name:&quot;;            \n        }\n    \n        private void ReferenceAssembly(object sender, EventArgs e)\n        {\n            if(this.radioButton4.Checked)           \n                this.label1.Text = &quot;Enter the assembly name:&quot;;\n        }\n\n        private void InvokeOnEnterKeyHandler(object sender, KeyEventArgs e)\n        {\n            if( e.KeyCode == Keys.Enter )            \n                this.InvokeMethod(sender, new EventArgs());            \n        }\n\n        public override System.ComponentModel.ISite Site\n        {\n            get\n            {\n                return base.Site;\n            }\n            set\n            {\n                base.Site = value;\n            \n                // Attempts to obtain ITypeResolutionService interface.\n                rs = (ITypeResolutionService)this.GetService(typeof(ITypeResolutionService));\n            }\n        }\n\n        #region Component Designer generated code\n        private void InitializeComponent()\n        {\n            this.entryBox = new System.Windows.Forms.TextBox();\n            this.infoBox = new System.Windows.Forms.TextBox();\n            this.panel1 = new System.Windows.Forms.Panel();\n            this.radioButton1 = new System.Windows.Forms.RadioButton();\n            this.radioButton2 = new System.Windows.Forms.RadioButton();\n            this.radioButton3 = new System.Windows.Forms.RadioButton();\n            this.radioButton4 = new System.Windows.Forms.RadioButton();\n            this.label1 = new System.Windows.Forms.Label();\n            this.button1 = new System.Windows.Forms.Button();\n            this.panel1.SuspendLayout();\n            this.SuspendLayout();\n            // entryBox\n            this.entryBox.Location = new System.Drawing.Point(176, 80);\n            this.entryBox.Name = &quot;entryBox&quot;;\n            this.entryBox.Size = new System.Drawing.Size(320, 20);\n            this.entryBox.TabIndex = 0;\n            this.entryBox.Text = &quot;&quot;;\n            // infoBox\n            this.infoBox.Anchor = (((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) \n                | System.Windows.Forms.AnchorStyles.Right);\n            this.infoBox.Location = new System.Drawing.Point(16, 111);\n            this.infoBox.Multiline = true;\n            this.infoBox.Name = &quot;infoBox&quot;;\n            this.infoBox.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;\n            this.infoBox.Size = new System.Drawing.Size(592, 305);\n            this.infoBox.TabIndex = 1;\n            this.infoBox.Text = &quot;&quot;;\n            // panel1\n            this.panel1.Controls.AddRange(new System.Windows.Forms.Control[] {\n                                                                                this.radioButton4,\n                                                                            this.radioButton3,\n                                                                                this.radioButton2,\n                                                                                this.radioButton1});\n            this.panel1.Location = new System.Drawing.Point(16, 32);\n            this.panel1.Name = &quot;panel1&quot;;\n            this.panel1.Size = new System.Drawing.Size(480, 40);\n            this.panel1.TabIndex = 2;\n            // radioButton1\n            this.radioButton1.Location = new System.Drawing.Point(8, 8);\n            this.radioButton1.Name = &quot;radioButton1&quot;;\n            this.radioButton1.Size = new System.Drawing.Size(96, 24);\n            this.radioButton1.TabIndex = 0;\n            this.radioButton1.Text = &quot;GetAssembly&quot;;\n            // radioButton2\n            this.radioButton2.Location = new System.Drawing.Point(112, 8);\n            this.radioButton2.Name = &quot;radioButton2&quot;;\n            this.radioButton2.Size = new System.Drawing.Size(128, 24);\n            this.radioButton2.TabIndex = 1;\n            this.radioButton2.Text = &quot;GetPathToAssembly&quot;;\n            // radioButton3\n            this.radioButton3.Location = new System.Drawing.Point(248, 8);\n            this.radioButton3.Name = &quot;radioButton3&quot;;\n            this.radioButton3.Size = new System.Drawing.Size(80, 24);\n            this.radioButton3.TabIndex = 2;\n            this.radioButton3.Text = &quot;GetType&quot;;\n            // radioButton4\n            this.radioButton4.Location = new System.Drawing.Point(344, 8);\n            this.radioButton4.Name = &quot;radioButton4&quot;;\n            this.radioButton4.Size = new System.Drawing.Size(128, 24);\n            this.radioButton4.TabIndex = 3;\n            this.radioButton4.Text = &quot;ReferenceAssembly&quot;;\n            // label1\n            this.label1.Location = new System.Drawing.Point(18, 83);\n            this.label1.Name = &quot;label1&quot;;\n            this.label1.Size = new System.Drawing.Size(150, 16);\n            this.label1.TabIndex = 3;\n            // button1\n            this.button1.Location = new System.Drawing.Point(519, 41);\n            this.button1.Name = &quot;button1&quot;;\n            this.button1.TabIndex = 4;\n            this.button1.Text = &quot;Invoke&quot;;\n            // ITypeResolutionServiceControl\n            this.BackColor = System.Drawing.Color.White;\n            this.Controls.AddRange(new System.Windows.Forms.Control[] {\n                                                                        this.button1,\n                                                                        this.label1,\n                                                                        this.panel1,\n                                                                        this.infoBox,\n                                                                        this.entryBox});\n            this.Name = &quot;ITypeResolutionServiceControl&quot;;\n            this.Size = new System.Drawing.Size(624, 432);\n            this.panel1.ResumeLayout(false);\n            this.ResumeLayout(false);\n        }\n        #endregion\n    }\n\n    // Since this example provides a control-based user interface \n    // in design mode, this designer passes window messages to the \n    // controls at design time.    \n    public class WindowMessageDesigner : System.Windows.Forms.Design.ControlDesigner\n    {\n        public WindowMessageDesigner()\n        {                       \n        }\n\n        // Window procedure override passes events to the control.\n        [System.Security.Permissions.PermissionSet(System.Security.Permissions.SecurityAction.Demand, Name=&quot;FullTrust&quot;)] \n        protected override void WndProc(ref System.Windows.Forms.Message m)\n        {   \n            if( m.HWnd == this.Control.Handle )            \n                base.WndProc(ref m);            \n            else            \n                this.DefWndProc(ref m);            \n        }\n\n        public override void DoDefaultAction()\n        {        \n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"ITypeResolutionServiceExample#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n#using &lt;System.Design.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::ComponentModel::Design;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Text;\nusing namespace System::Windows::Forms;\nusing namespace System::Windows::Forms::Design;\nusing namespace System::Security::Permissions;\n\nnamespace ITypeResolutionServiceExample\n{\n   // Since this example provides a control-based user interface\n   // in design mode, this designer passes window messages to the\n   // controls at design time.\n   public ref class WindowMessageDesigner: public System::Windows::Forms::Design::ControlDesigner\n   {\n   public:\n      WindowMessageDesigner(){}\n\n   protected:\n\n      // Window procedure override passes events to the control.\n\n      [SecurityPermission(SecurityAction::Demand, Flags=SecurityPermissionFlag::UnmanagedCode)]\n      virtual void WndProc( System::Windows::Forms::Message% m ) override\n      {\n         if ( m.HWnd == this-&gt;Control-&gt;Handle )\n                  ControlDesigner::WndProc( m );\n         else\n                  this-&gt;DefWndProc( m );\n      }\n\n   public:\n      virtual void DoDefaultAction() override {}\n\n   };\n\n   // This control provides an example design-time user interface to\n   // the ITypeResolutionService.\n\n   [DesignerAttribute(WindowMessageDesigner::typeid,IDesigner::typeid)]\n   public ref class ITypeResolutionServiceControl: public System::Windows::Forms::UserControl\n   {\n   private:\n\n      // Reference to a type resolution service interface, or null\n      // if not obtained.\n      ITypeResolutionService^ rs;\n\n      // Textbox for input of assembly and type names.\n      System::Windows::Forms::TextBox^ entryBox;\n\n      // Textbox for output of assembly, type, and status information.\n      System::Windows::Forms::TextBox^ infoBox;\n\n      // Panel to contain the radio buttons used to select the\n      // method to InvokeMethod.\n      System::Windows::Forms::Panel^ panel1;\n      System::Windows::Forms::RadioButton^ radioButton1;\n      System::Windows::Forms::RadioButton^ radioButton2;\n      System::Windows::Forms::RadioButton^ radioButton3;\n      System::Windows::Forms::RadioButton^ radioButton4;\n\n      // Label to display textbox entry information.\n      System::Windows::Forms::Label ^ label1;\n\n      // Button to InvokeMethod command.\n      System::Windows::Forms::Button^ button1;\n\n   public:\n      ITypeResolutionServiceControl()\n      {\n         InitializeComponent();\n         rs = nullptr;\n         \n         // Attaches event handlers for control clicked events.\n         radioButton1-&gt;CheckedChanged += gcnew EventHandler( this, &amp;ITypeResolutionServiceControl::GetAssembly );\n         radioButton2-&gt;CheckedChanged += gcnew EventHandler( this, &amp;ITypeResolutionServiceControl::GetPathToAssembly );\n         radioButton3-&gt;CheckedChanged += gcnew EventHandler( this, &amp;ITypeResolutionServiceControl::GetInstanceOfType );\n         radioButton4-&gt;CheckedChanged += gcnew EventHandler( this, &amp;ITypeResolutionServiceControl::ReferenceAssembly );\n         button1-&gt;Click += gcnew EventHandler( this, &amp;ITypeResolutionServiceControl::InvokeMethod );\n         entryBox-&gt;KeyUp += gcnew KeyEventHandler( this, &amp;ITypeResolutionServiceControl::InvokeOnEnterKeyHandler );\n      }\n\n   protected:\n\n      // Displays example control name and status information.\n      virtual void OnPaint( System::Windows::Forms::PaintEventArgs^ e ) override\n      {\n         e-&gt;Graphics-&gt;DrawString( &quot;ITypeResolutionService Interface Control&quot;, gcnew System::Drawing::Font( FontFamily::GenericMonospace,9 ), gcnew SolidBrush( Color::Blue ), 5, 5 );\n         if ( this-&gt;DesignMode )\n                  e-&gt;Graphics-&gt;DrawString( &quot;Currently in Design Mode&quot;, gcnew System::Drawing::Font( FontFamily::GenericMonospace,8 ), gcnew SolidBrush( Color::DarkGreen ), 350, 2 );\n         else\n                  e-&gt;Graphics-&gt;DrawString( &quot;Requires Design Mode&quot;, gcnew System::Drawing::Font( FontFamily::GenericMonospace,8 ), gcnew SolidBrush( Color::Red ), 350, 2 );\n\n         if ( rs != nullptr )\n                  e-&gt;Graphics-&gt;DrawString( &quot;Type Resolution Service Obtained&quot;, gcnew System::Drawing::Font( FontFamily::GenericMonospace,8 ), gcnew SolidBrush( Color::DarkGreen ), 350, 12 );\n         else\n                  e-&gt;Graphics-&gt;DrawString( &quot;Type Resolution Service Not Obtained&quot;, gcnew System::Drawing::Font( FontFamily::GenericMonospace,8 ), gcnew SolidBrush( Color::Red ), 350, 12 );\n      }\n\n   private:\n\n      // InvokeMethods the currently selected method, if any, when\n      // the InvokeMethod button is pressed.\n      void InvokeMethod( Object^ /*sender*/, EventArgs^ /*e*/ )\n      {\n         // If the GetAssembly or GetPathofAssembly radio button\n         // is selected.\n         if ( this-&gt;radioButton1-&gt;Checked || this-&gt;radioButton2-&gt;Checked || this-&gt;radioButton4-&gt;Checked )\n         {\n            if ( this-&gt;entryBox-&gt;Text-&gt;Length == 0 )\n            {\n               // If there is no assembly name specified, display status message.\n               this-&gt;infoBox-&gt;Text = &quot;You must enter the name of the assembly to retrieve.&quot;;\n            }\n            else\n            if ( rs != nullptr )\n            {\n               // Create a System.Reflection.AssemblyName\n               // for the entered text.\n               AssemblyName^ name = gcnew AssemblyName;\n               name-&gt;Name = this-&gt;entryBox-&gt;Text-&gt;Trim();\n\n               // If the GetAssembly radio button is checked...\n               if ( this-&gt;radioButton1-&gt;Checked )\n               {\n                  // Use the ITypeResolutionService to attempt to\n                  // resolve an assembly reference.\n                  Assembly^ a = rs-&gt;GetAssembly( name, false );\n\n                  // If an assembly matching the specified name was not\n                  // located in the GAC or local project references,\n                  // display a message.\n                  if ( a == nullptr )\n                                    this-&gt;infoBox-&gt;Text = String::Format( &quot;The {0} assembly could not be located.&quot;, this-&gt;entryBox-&gt;Text );\n                  else\n                  {\n                     // An assembly matching the specified name was located.\n                     // Builds a list of types.\n                     array&lt;Type^&gt;^types = a-&gt;GetTypes();\n                     StringBuilder^ sb = gcnew StringBuilder;\n                     for ( int i = 0; i &lt; types-&gt;Length; i++ )\n                        sb-&gt;Append( String::Concat( types[ i ]-&gt;FullName, &quot;\\r\\n&quot; ) );\n                     String^ path = rs-&gt;GetPathOfAssembly( name );\n                     \n                     // Displays assembly information and a list of types contained in the assembly.\n                     this-&gt;infoBox-&gt;Text = String::Format( &quot;Assembly located:\\r\\n\\r\\n{0}\\r\\n  at: {1}\\r\\n\\r\\nAssembly types:\\r\\n\\r\\n{2}&quot;, a-&gt;FullName, path, sb );\n                  }\n               }\n               else\n               if ( this-&gt;radioButton2-&gt;Checked )\n               {\n                  String^ path = rs-&gt;GetPathOfAssembly( name );\n                  if ( path != nullptr )\n                                    this-&gt;infoBox-&gt;Text = String::Format( &quot;Assembly located at:\\r\\n{0}&quot;, path );\n                  else\n                                    this-&gt;infoBox-&gt;Text = &quot;Assembly was not located.&quot;;\n               }\n               else\n               if ( this-&gt;radioButton4-&gt;Checked )\n               {\n                  Assembly^ a = nullptr;\n                  try\n                  {\n                     // Add a reference to the assembly to the\n                     // current project.\n                     rs-&gt;ReferenceAssembly( name );\n                     \n                     // Use the ITypeResolutionService to attempt\n                     // to resolve an assembly reference.\n                     a = rs-&gt;GetAssembly( name, false );\n                  }\n                  catch ( Exception^ ) \n                  {\n                     // Catch this exception so that the exception\n                     // does not interrupt control behavior.\n                  }\n\n                  // If an assembly matching the specified name was not\n                  // located in the GAC or local project references,\n                  // display a message.\n                  if ( a == nullptr )\n                                    this-&gt;infoBox-&gt;Text = String::Format( &quot;The {0} assembly could not be located.&quot;, this-&gt;entryBox-&gt;Text );\n                  else\n                                    this-&gt;infoBox-&gt;Text = String::Format( &quot;A reference to the {0} assembly has been added to the project&#39;s referenced assemblies.&quot;, a-&gt;FullName );\n               }\n            }\n         }\n         else\n         if ( this-&gt;radioButton3-&gt;Checked )\n         {\n            if ( this-&gt;entryBox-&gt;Text-&gt;Length == 0 )\n            {\n               // If there is no type name specified, display a\n               // status message.\n               this-&gt;infoBox-&gt;Text = &quot;You must enter the name of the type to retrieve.&quot;;\n            }\n            else\n            if ( rs != nullptr )\n            {\n               Type^ type = nullptr;\n               try\n               {\n                  type = rs-&gt;GetType( this-&gt;entryBox-&gt;Text, false, true );\n               }\n               catch ( Exception^ ) \n               {\n                  // Consume exceptions raised during GetType call\n               }\n\n               if ( type != nullptr )\n               {\n                  // Display type information.\n                  this-&gt;infoBox-&gt;Text = String::Format( &quot;Type: {0} located.\\r\\n  Namespace: {1}\\r\\n{2}&quot;, type-&gt;FullName, type-&gt;Namespace, type-&gt;AssemblyQualifiedName );\n               }\n               else\n                              this-&gt;infoBox-&gt;Text = &quot;Type not located.&quot;;\n            }\n         }\n      }\n\n      void GetAssembly( Object^ /*sender*/, EventArgs^ /*e*/ )\n      {\n         if ( this-&gt;radioButton1-&gt;Checked )\n                  this-&gt;label1-&gt;Text = &quot;Enter the assembly name:&quot;;\n      }\n\n      void GetPathToAssembly( Object^ /*sender*/, EventArgs^ /*e*/ )\n      {\n         if ( this-&gt;radioButton2-&gt;Checked )\n                  this-&gt;label1-&gt;Text = &quot;Enter the assembly name:&quot;;\n      }\n\n      void GetInstanceOfType( Object^ /*sender*/, EventArgs^ /*e*/ )\n      {\n         if ( this-&gt;radioButton3-&gt;Checked )\n                  this-&gt;label1-&gt;Text = &quot;Enter the type name:&quot;;\n      }\n\n      void ReferenceAssembly( Object^ /*sender*/, EventArgs^ /*e*/ )\n      {\n         if ( this-&gt;radioButton4-&gt;Checked )\n                  this-&gt;label1-&gt;Text = &quot;Enter the assembly name:&quot;;\n      }\n\n      void InvokeOnEnterKeyHandler( Object^ sender, KeyEventArgs^ e )\n      {\n         if ( e-&gt;KeyCode == Keys::Enter )\n                  this-&gt;InvokeMethod( sender, gcnew EventArgs );\n      }\n\n   public:\n\n      property System::ComponentModel::ISite^ Site \n      {\n         virtual System::ComponentModel::ISite^ get() override\n         {\n            return __super::Site;\n         }\n\n         virtual void set( System::ComponentModel::ISite^ value ) override\n         {\n            __super::Site = value;\n            \n            // Attempts to obtain ITypeResolutionService interface.\n            rs = dynamic_cast&lt;ITypeResolutionService^&gt;(this-&gt;GetService( ITypeResolutionService::typeid ));\n         }\n\n      }\n\n   private:\n      void InitializeComponent()\n      {\n         this-&gt;entryBox = gcnew System::Windows::Forms::TextBox;\n         this-&gt;infoBox = gcnew System::Windows::Forms::TextBox;\n         this-&gt;panel1 = gcnew System::Windows::Forms::Panel;\n         this-&gt;radioButton1 = gcnew System::Windows::Forms::RadioButton;\n         this-&gt;radioButton2 = gcnew System::Windows::Forms::RadioButton;\n         this-&gt;radioButton3 = gcnew System::Windows::Forms::RadioButton;\n         this-&gt;radioButton4 = gcnew System::Windows::Forms::RadioButton;\n         this-&gt;label1 = gcnew System::Windows::Forms::Label;\n         this-&gt;button1 = gcnew System::Windows::Forms::Button;\n         this-&gt;panel1-&gt;SuspendLayout();\n         this-&gt;SuspendLayout();\n\n         // entryBox\n         this-&gt;entryBox-&gt;Location = System::Drawing::Point( 176, 80 );\n         this-&gt;entryBox-&gt;Name = &quot;entryBox&quot;;\n         this-&gt;entryBox-&gt;Size = System::Drawing::Size( 320, 20 );\n         this-&gt;entryBox-&gt;TabIndex = 0;\n         this-&gt;entryBox-&gt;Text = &quot;&quot;;\n\n         // infoBox\n         this-&gt;infoBox-&gt;Anchor = static_cast&lt;AnchorStyles&gt;(((System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom) | System::Windows::Forms::AnchorStyles::Left) | System::Windows::Forms::AnchorStyles::Right);\n         this-&gt;infoBox-&gt;Location = System::Drawing::Point( 16, 111 );\n         this-&gt;infoBox-&gt;Multiline = true;\n         this-&gt;infoBox-&gt;Name = &quot;infoBox&quot;;\n         this-&gt;infoBox-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n         this-&gt;infoBox-&gt;Size = System::Drawing::Size( 592, 305 );\n         this-&gt;infoBox-&gt;TabIndex = 1;\n         this-&gt;infoBox-&gt;Text = &quot;&quot;;\n\n         // panel1\n         array&lt;System::Windows::Forms::Control^&gt;^temp0 = {this-&gt;radioButton4,this-&gt;radioButton3,this-&gt;radioButton2,this-&gt;radioButton1};\n         this-&gt;panel1-&gt;Controls-&gt;AddRange( temp0 );\n         this-&gt;panel1-&gt;Location = System::Drawing::Point( 16, 32 );\n         this-&gt;panel1-&gt;Name = &quot;panel1&quot;;\n         this-&gt;panel1-&gt;Size = System::Drawing::Size( 480, 40 );\n         this-&gt;panel1-&gt;TabIndex = 2;\n\n         // radioButton1\n         this-&gt;radioButton1-&gt;Location = System::Drawing::Point( 8, 8 );\n         this-&gt;radioButton1-&gt;Name = &quot;radioButton1&quot;;\n         this-&gt;radioButton1-&gt;Size = System::Drawing::Size( 96, 24 );\n         this-&gt;radioButton1-&gt;TabIndex = 0;\n         this-&gt;radioButton1-&gt;Text = &quot;GetAssembly&quot;;\n\n         // radioButton2\n         this-&gt;radioButton2-&gt;Location = System::Drawing::Point( 112, 8 );\n         this-&gt;radioButton2-&gt;Name = &quot;radioButton2&quot;;\n         this-&gt;radioButton2-&gt;Size = System::Drawing::Size( 128, 24 );\n         this-&gt;radioButton2-&gt;TabIndex = 1;\n         this-&gt;radioButton2-&gt;Text = &quot;GetPathToAssembly&quot;;\n\n         // radioButton3\n         this-&gt;radioButton3-&gt;Location = System::Drawing::Point( 248, 8 );\n         this-&gt;radioButton3-&gt;Name = &quot;radioButton3&quot;;\n         this-&gt;radioButton3-&gt;Size = System::Drawing::Size( 80, 24 );\n         this-&gt;radioButton3-&gt;TabIndex = 2;\n         this-&gt;radioButton3-&gt;Text = &quot;GetType&quot;;\n\n         // radioButton4\n         this-&gt;radioButton4-&gt;Location = System::Drawing::Point( 344, 8 );\n         this-&gt;radioButton4-&gt;Name = &quot;radioButton4&quot;;\n         this-&gt;radioButton4-&gt;Size = System::Drawing::Size( 128, 24 );\n         this-&gt;radioButton4-&gt;TabIndex = 3;\n         this-&gt;radioButton4-&gt;Text = &quot;ReferenceAssembly&quot;;\n\n         // label1\n         this-&gt;label1-&gt;Location = System::Drawing::Point( 18, 83 );\n         this-&gt;label1-&gt;Name = &quot;label1&quot;;\n         this-&gt;label1-&gt;Size = System::Drawing::Size( 150, 16 );\n         this-&gt;label1-&gt;TabIndex = 3;\n\n         // button1\n         this-&gt;button1-&gt;Location = System::Drawing::Point( 519, 41 );\n         this-&gt;button1-&gt;Name = &quot;button1&quot;;\n         this-&gt;button1-&gt;TabIndex = 4;\n         this-&gt;button1-&gt;Text = &quot;Invoke&quot;;\n\n         // ITypeResolutionServiceControl\n         this-&gt;BackColor = System::Drawing::Color::White;\n         array&lt;System::Windows::Forms::Control^&gt;^temp1 = {this-&gt;button1,this-&gt;label1,this-&gt;panel1,this-&gt;infoBox,this-&gt;entryBox};\n         this-&gt;Controls-&gt;AddRange( temp1 );\n         this-&gt;Name = &quot;ITypeResolutionServiceControl&quot;;\n         this-&gt;Size = System::Drawing::Size( 624, 432 );\n         this-&gt;panel1-&gt;ResumeLayout( false );\n         this-&gt;ResumeLayout( false );\n      }\n   };\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"ITypeResolutionServiceExample#1\">Imports System\nImports System.Collections\nImports System.ComponentModel\nImports System.ComponentModel.Design\nImports System.Drawing\nImports System.Reflection\nImports System.Text\nImports System.Windows.Forms\nImports System.Windows.Forms.Design\nImports Microsoft.VisualBasic\n\n&#39; This control provides an example design-time user interface to \n&#39; the ITypeResolutionService.\n&lt;DesignerAttribute(GetType(WindowMessageDesigner), GetType(IDesigner))&gt;  _\nPublic Class ITypeResolutionServiceControl\n   Inherits System.Windows.Forms.UserControl\n   &#39; Reference to a type resolution service interface, or null \n   &#39; if not obtained.\n   Private rs As ITypeResolutionService\n   &#39; Textbox for input of assembly and type names.\n   Private entryBox As System.Windows.Forms.TextBox\n   &#39; Textbox for output of assembly, type, and status information.\n   Private infoBox As System.Windows.Forms.TextBox\n   &#39; Panel to contain the radiobuttons used to select the \n   &#39; method to InvokeMethod.\n   Private panel1 As System.Windows.Forms.Panel\n   Private radioButton1 As System.Windows.Forms.RadioButton\n   Private radioButton2 As System.Windows.Forms.RadioButton\n   Private radioButton3 As System.Windows.Forms.RadioButton\n   Private radioButton4 As System.Windows.Forms.RadioButton\n   &#39; Label to display textbox entry information.\n   Private label1 As System.Windows.Forms.Label\n   &#39; Button to InvokeMethod command.\n   Private button1 As System.Windows.Forms.Button\n\n    Public Sub New()\n        InitializeComponent()\n        rs = Nothing\n        &#39; Attaches event handlers for control clicked events.\n        AddHandler radioButton1.CheckedChanged, AddressOf Me.GetAssembly\n        AddHandler radioButton2.CheckedChanged, AddressOf Me.GetPathToAssembly\n        AddHandler radioButton3.CheckedChanged, AddressOf Me.GetInstanceOfType\n        AddHandler radioButton4.CheckedChanged, AddressOf Me.ReferenceAssembly\n        AddHandler button1.Click, AddressOf Me.InvokeMethod\n        AddHandler entryBox.KeyUp, AddressOf Me.InvokeOnEnterKeyHandler\n    End Sub\n\n    &#39; Displays example control name and status information.\n    Protected Overrides Sub OnPaint(ByVal e As System.Windows.Forms.PaintEventArgs)\n        e.Graphics.DrawString(&quot;ITypeResolutionService Interface Control&quot;, New Font(FontFamily.GenericMonospace, 9), New SolidBrush(Color.Blue), 5, 5)\n        If Me.DesignMode Then\n            e.Graphics.DrawString(&quot;Currently in Design Mode&quot;, New Font(FontFamily.GenericMonospace, 8), New SolidBrush(Color.DarkGreen), 350, 2)\n        Else\n            e.Graphics.DrawString(&quot;Requires Design Mode&quot;, New Font(FontFamily.GenericMonospace, 8), New SolidBrush(Color.Red), 350, 2)\n        End If\n        If (rs IsNot Nothing) Then\n            e.Graphics.DrawString(&quot;Type Resolution Service Obtained&quot;, New Font(FontFamily.GenericMonospace, 8), New SolidBrush(Color.DarkGreen), 350, 12)\n        Else\n            e.Graphics.DrawString(&quot;Type Resolution Service Not Obtained&quot;, New Font(FontFamily.GenericMonospace, 8), New SolidBrush(Color.Red), 350, 12)\n        End If\n    End Sub\n\n    &#39; InvokeMethods the currently selected method, if any, when \n    &#39; the InvokeMethod button is pressed.\n    Private Sub InvokeMethod(ByVal sender As Object, ByVal e As EventArgs)\n        &#39; If the GetAssembly or GetPathofAssembly radio button \n        &#39; is selected.\n        If Me.radioButton1.Checked OrElse Me.radioButton2.Checked OrElse Me.radioButton4.Checked Then\n            If Me.entryBox.Text.Length = 0 Then\n                &#39; If there is no assembly name specified, display status message.\n                Me.infoBox.Text = &quot;You must enter the name of the assembly to retrieve.&quot;\n            ElseIf (rs IsNot Nothing) Then\n                &#39; Create a System.Reflection.AssemblyName \n                &#39; for the entered text.\n                Dim name As New AssemblyName()\n                name.Name = Me.entryBox.Text.Trim()\n\n                &#39; If the GetAssembly radio button is checked...\n                If Me.radioButton1.Checked Then\n                    &#39; Use the ITypeResolutionService to attempt to \n                    &#39; resolve an assembly reference.\n                    Dim a As [Assembly] = rs.GetAssembly(name, False)\n                    &#39; If an assembly matching the specified name was not \n                    &#39; located in the GAC or local project references, \n                    &#39; display a message.\n                    If a Is Nothing Then\n                        Me.infoBox.Text = &quot;The &quot; + Me.entryBox.Text + &quot; assembly could not be located.&quot;\n                    Else\n                        &#39; An assembly matching the specified name was located.\n                        &#39; Builds a list of types.\n                        Dim types As Type() = a.GetTypes()\n                        Dim sb As New StringBuilder()\n                        Dim i As Integer\n                        For i = 0 To types.Length - 1\n                            sb.Append((types(i).FullName + ControlChars.Cr + ControlChars.Lf))\n                        Next i\n                        Dim path As String = rs.GetPathOfAssembly(name)\n                        &#39; Displays assembly information and a list of types contained in the assembly.\n                        Me.infoBox.Text = &quot;Assembly located:&quot; + ControlChars.Cr + ControlChars.Lf + ControlChars.Cr + ControlChars.Lf + a.FullName + ControlChars.Cr + ControlChars.Lf + &quot;  at: &quot; + path + ControlChars.Cr + ControlChars.Lf + ControlChars.Cr + ControlChars.Lf + &quot;Assembly types:&quot; + ControlChars.Cr + ControlChars.Lf + ControlChars.Cr + ControlChars.Lf + sb.ToString()\n                    End If\n                ElseIf Me.radioButton2.Checked Then\n                    Dim path As String = rs.GetPathOfAssembly(name)\n                    If (path IsNot Nothing) Then\n                        Me.infoBox.Text = &quot;Assembly located at:&quot; + ControlChars.Cr + ControlChars.Lf + path\n                    Else\n                        Me.infoBox.Text = &quot;Assembly was not located.&quot;\n                    End If\n                ElseIf Me.radioButton4.Checked Then\n                    Dim a As [Assembly] = Nothing\n                    Try\n                        &#39; Add a reference to the assembly to the \n                        &#39; current project.\n                        rs.ReferenceAssembly(name)\n                        &#39; Use the ITypeResolutionService to attempt \n                        &#39; to resolve an assembly reference.\n                        a = rs.GetAssembly(name, False)\n                    Catch\n                    End Try\n                    &#39; Catch this exception so that the exception \n                    &#39; does not interrupt control behavior.\n                    &#39; If an assembly matching the specified name was not \n                    &#39; located in the GAC or local project references, \n                    &#39; display a message.\n                    If a Is Nothing Then\n                        Me.infoBox.Text = &quot;The &quot; + Me.entryBox.Text + &quot; assembly could not be located.&quot;\n                    Else\n                        Me.infoBox.Text = &quot;A reference to the &quot; + a.FullName + &quot; assembly has been added to the project&#39;s referenced assemblies.&quot;\n                    End If\n                End If\n            End If\n        Else\n            If Me.radioButton3.Checked Then\n                If Me.entryBox.Text.Length = 0 Then\n                    &#39; If there is no type name specified, display a \n                    &#39; status message.\n                    Me.infoBox.Text = &quot;You must enter the name of the type to retrieve.&quot;\n                Else\n                    If (rs IsNot Nothing) Then\n                        Dim type As Type = Nothing\n                        Try\n                            type = rs.GetType(Me.entryBox.Text, False, True)\n                        Catch  &#39; Consume exceptions raised during GetType call\n                        End Try\n                        If (type IsNot Nothing) Then\n                            &#39; Display type information.\n                            Me.infoBox.Text = &quot;Type: &quot; + type.FullName + &quot; located.&quot; + ControlChars.Cr + ControlChars.Lf + &quot;  Namespace: &quot; + type.Namespace + ControlChars.Cr + ControlChars.Lf + type.AssemblyQualifiedName\n                        Else\n                            Me.infoBox.Text = &quot;Type not located.&quot;\n                        End If\n                    End If\n                End If\n            End If\n        End If\n    End Sub\n\n    Private Sub GetAssembly(ByVal sender As Object, ByVal e As EventArgs)\n        If Me.radioButton1.Checked Then\n            Me.label1.Text = &quot;Enter the assembly name:&quot;\n        End If\n    End Sub\n\n    Private Sub GetPathToAssembly(ByVal sender As Object, ByVal e As EventArgs)\n        If Me.radioButton2.Checked Then\n            Me.label1.Text = &quot;Enter the assembly name:&quot;\n        End If\n    End Sub\n\n    Private Sub GetInstanceOfType(ByVal sender As Object, ByVal e As EventArgs)\n        If Me.radioButton3.Checked Then\n            Me.label1.Text = &quot;Enter the type name:&quot;\n        End If\n    End Sub\n\n    Private Sub ReferenceAssembly(ByVal sender As Object, ByVal e As EventArgs)\n        If Me.radioButton4.Checked Then\n            Me.label1.Text = &quot;Enter the assembly name:&quot;\n        End If\n    End Sub\n\n    Private Sub InvokeOnEnterKeyHandler(ByVal sender As Object, ByVal e As KeyEventArgs)\n        If e.KeyCode = Keys.Enter Then\n            Me.InvokeMethod(sender, New EventArgs())\n        End If\n    End Sub\n\n    Public Overrides Property Site() As System.ComponentModel.ISite\n        Get\n            Return MyBase.Site\n        End Get\n        Set(ByVal Value As System.ComponentModel.ISite)\n            MyBase.Site = Value\n\n            &#39; Attempts to obtain ITypeResolutionService interface.\n            rs = CType(Me.GetService(GetType(ITypeResolutionService)), ITypeResolutionService)\n        End Set\n    End Property\n\n    Private Sub InitializeComponent()\n        Me.entryBox = New System.Windows.Forms.TextBox()\n        Me.infoBox = New System.Windows.Forms.TextBox()\n        Me.panel1 = New System.Windows.Forms.Panel()\n        Me.radioButton1 = New System.Windows.Forms.RadioButton()\n        Me.radioButton2 = New System.Windows.Forms.RadioButton()\n        Me.radioButton3 = New System.Windows.Forms.RadioButton()\n        Me.radioButton4 = New System.Windows.Forms.RadioButton()\n        Me.label1 = New System.Windows.Forms.Label()\n        Me.button1 = New System.Windows.Forms.Button()\n        Me.panel1.SuspendLayout()\n        Me.SuspendLayout()\n        &#39; entryBox\n        Me.entryBox.Location = New System.Drawing.Point(176, 80)\n        Me.entryBox.Name = &quot;entryBox&quot;\n        Me.entryBox.Size = New System.Drawing.Size(320, 20)\n        Me.entryBox.TabIndex = 0\n        Me.entryBox.Text = &quot;&quot;\n        &#39; infoBox\n        Me.infoBox.Anchor = System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right\n        Me.infoBox.Location = New System.Drawing.Point(16, 111)\n        Me.infoBox.Multiline = True\n        Me.infoBox.Name = &quot;infoBox&quot;\n        Me.infoBox.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.infoBox.Size = New System.Drawing.Size(592, 305)\n        Me.infoBox.TabIndex = 1\n        Me.infoBox.Text = &quot;&quot;\n        &#39; panel1\n        Me.panel1.Controls.AddRange(New System.Windows.Forms.Control() {Me.radioButton4, Me.radioButton3, Me.radioButton2, Me.radioButton1})\n        Me.panel1.Location = New System.Drawing.Point(16, 32)\n        Me.panel1.Name = &quot;panel1&quot;\n        Me.panel1.Size = New System.Drawing.Size(480, 40)\n        Me.panel1.TabIndex = 2\n        &#39; radioButton1\n        Me.radioButton1.Location = New System.Drawing.Point(8, 8)\n        Me.radioButton1.Name = &quot;radioButton1&quot;\n        Me.radioButton1.Size = New System.Drawing.Size(96, 24)\n        Me.radioButton1.TabIndex = 0\n        Me.radioButton1.Text = &quot;GetAssembly&quot;\n        &#39; radioButton2\n        Me.radioButton2.Location = New System.Drawing.Point(112, 8)\n        Me.radioButton2.Name = &quot;radioButton2&quot;\n        Me.radioButton2.Size = New System.Drawing.Size(128, 24)\n        Me.radioButton2.TabIndex = 1\n        Me.radioButton2.Text = &quot;GetPathToAssembly&quot;\n        &#39; radioButton3\n        Me.radioButton3.Location = New System.Drawing.Point(248, 8)\n        Me.radioButton3.Name = &quot;radioButton3&quot;\n        Me.radioButton3.Size = New System.Drawing.Size(80, 24)\n        Me.radioButton3.TabIndex = 2\n        Me.radioButton3.Text = &quot;GetType&quot;\n        &#39; radioButton4\n        Me.radioButton4.Location = New System.Drawing.Point(344, 8)\n        Me.radioButton4.Name = &quot;radioButton4&quot;\n        Me.radioButton4.Size = New System.Drawing.Size(128, 24)\n        Me.radioButton4.TabIndex = 3\n        Me.radioButton4.Text = &quot;ReferenceAssembly&quot;\n        &#39; label1\n        Me.label1.Location = New System.Drawing.Point(18, 83)\n        Me.label1.Name = &quot;label1&quot;\n        Me.label1.Size = New System.Drawing.Size(150, 16)\n        Me.label1.TabIndex = 3\n        &#39; button1\n        Me.button1.Location = New System.Drawing.Point(519, 41)\n        Me.button1.Name = &quot;button1&quot;\n        Me.button1.TabIndex = 4\n        Me.button1.Text = &quot;Invoke&quot;\n        &#39; ITypeResolutionServiceControl\n        Me.BackColor = System.Drawing.Color.White\n        Me.Controls.AddRange(New System.Windows.Forms.Control() {Me.button1, Me.label1, Me.panel1, Me.infoBox, Me.entryBox})\n        Me.Name = &quot;ITypeResolutionServiceControl&quot;\n        Me.Size = New System.Drawing.Size(624, 432)\n        Me.panel1.ResumeLayout(False)\n        Me.ResumeLayout(False)\n    End Sub\n\nEnd Class\n\n&#39; Since this example provides a control-based user interface \n&#39; in design mode, this designer passes window messages to the \n&#39; controls at design time.   \nPublic Class WindowMessageDesigner\n    Inherits System.Windows.Forms.Design.ControlDesigner\n\n    Public Sub New()\n    End Sub\n\n    &#39; Window procedure override passes events to the control.\n    &lt;System.Security.Permissions.PermissionSetAttribute(System.Security.Permissions.SecurityAction.Demand, Name:=&quot;FullTrust&quot;)&gt; _\n    Protected Overrides Sub WndProc(ByRef m As System.Windows.Forms.Message)\n        If m.HWnd.Equals(Me.Control.Handle) Then\n            MyBase.WndProc(m)\n        Else\n            Me.DefWndProc(m)\n        End If\n    End Sub &#39;WndProc\n\n    Public Overrides Sub DoDefaultAction()\n    End Sub\n\nEnd Class\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>This service is used to load types at design time.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_Design_ITypeResolutionService_GetAssembly_System_Reflection_AssemblyName_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetAssembly(AssemblyName)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the requested assembly.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Reflection.Assembly GetAssembly (System.Reflection.AssemblyName name);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>name</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The name of the assembly to retrieve.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>An instance of the requested assembly, or <code>null</code> if no assembly can be located.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_Design_ITypeResolutionService_GetAssembly_System_Reflection_AssemblyName_System_Boolean_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetAssembly(AssemblyName, Boolean)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the requested assembly.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Reflection.Assembly GetAssembly (System.Reflection.AssemblyName name, bool throwOnError);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>name</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The name of the assembly to retrieve.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>throwOnError</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if this method should throw an exception if the assembly cannot be located; otherwise, <code>false</code>, and this method returns <code>null</code> if the assembly cannot be located.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>An instance of the requested assembly, or <code>null</code> if no assembly can be located.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_Design_ITypeResolutionService_GetPathOfAssembly_System_Reflection_AssemblyName_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetPathOfAssembly(AssemblyName)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the path to the file from which the assembly was loaded.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string GetPathOfAssembly (System.Reflection.AssemblyName name);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>name</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The name of the assembly.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The path to the file from which the assembly was loaded.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_Design_ITypeResolutionService_GetType_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetType(String)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Loads a type with the specified name.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public Type GetType (string name);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>name</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The name of the type. If the type name is not a fully qualified name that indicates an assembly, this service will search its internal set of referenced assemblies.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>An instance of <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> that corresponds to the specified name, or <code>null</code> if no type can be found.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_Design_ITypeResolutionService_GetType_System_String_System_Boolean_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetType(String, Boolean)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Loads a type with the specified name.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public Type GetType (string name, bool throwOnError);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>name</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The name of the type. If the type name is not a fully qualified name that indicates an assembly, this service will search its internal set of referenced assemblies.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>throwOnError</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if this method should throw an exception if the assembly cannot be located; otherwise, <code>false</code>, and this method returns <code>null</code> if the assembly cannot be located.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>An instance of <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> that corresponds to the specified name, or <code>null</code> if no type can be found.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If the type cannot be loaded and the <code>throwOnError</code> parameter is <code>true</code>, this will throw an exception.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_Design_ITypeResolutionService_GetType_System_String_System_Boolean_System_Boolean_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetType(String, Boolean, Boolean)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Loads a type with the specified name.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public Type GetType (string name, bool throwOnError, bool ignoreCase);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>name</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The name of the type. If the type name is not a fully qualified name that indicates an assembly, this service will search its internal set of referenced assemblies.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>throwOnError</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if this method should throw an exception if the assembly cannot be located; otherwise, <code>false</code>, and this method returns <code>null</code> if the assembly cannot be located.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>ignoreCase</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> to ignore case when searching for types; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>An instance of <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> that corresponds to the specified name, or <code>null</code> if no type can be found.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If the type cannot be loaded and the <code>throwOnError</code> parameter is <code>true</code>, this will throw an exception.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_Design_ITypeResolutionService_ReferenceAssembly_System_Reflection_AssemblyName_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ReferenceAssembly(AssemblyName)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Adds a reference to the specified assembly.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void ReferenceAssembly (System.Reflection.AssemblyName name);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>name</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a> that indicates the assembly to reference.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Once a reference to an assembly has been added to this service, this service can load types from names that do not specify an assembly.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.ComponentModel.Design.ITypeResolutionService.yml\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.ITypeResolutionService\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.ITypeResolutionService.GetAssembly\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.ITypeResolutionService.GetPathOfAssembly\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.ITypeResolutionService.GetType\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.ITypeResolutionService.ReferenceAssembly\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-28 03:03 AM\">\r\n<meta name=\"document_id\" content=\"d56466f5-2f91-d0f9-4297-1be2a8fca57f\">\r\n<meta name=\"internalonly\" content=\"false\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides an interface to retrieve an assembly or type by name.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.componentmodel.design/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.ComponentModel.Design.ITypeResolutionService\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.ComponentModel.Design.ITypeResolutionService.yml","open_to_public_contributors":false,"api_name":["System.ComponentModel.Design.ITypeResolutionService","System.ComponentModel.Design.ITypeResolutionService.GetAssembly","System.ComponentModel.Design.ITypeResolutionService.GetPathOfAssembly","System.ComponentModel.Design.ITypeResolutionService.GetType","System.ComponentModel.Design.ITypeResolutionService.ReferenceAssembly"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.ComponentModel.Design.ITypeResolutionService","System::ComponentModel::Design::ITypeResolutionService","System.ComponentModel.Design.ITypeResolutionService.GetAssembly","System::ComponentModel::Design::ITypeResolutionService::GetAssembly","System.ComponentModel.Design.ITypeResolutionService.GetPathOfAssembly","System::ComponentModel::Design::ITypeResolutionService::GetPathOfAssembly","System.ComponentModel.Design.ITypeResolutionService.GetType","System::ComponentModel::Design::ITypeResolutionService::GetType","System.ComponentModel.Design.ITypeResolutionService.ReferenceAssembly","System::ComponentModel::Design::ITypeResolutionService::ReferenceAssembly"],"dev_langs":["csharp"],"updated_at":"2017-03-28 03:03 AM","document_id":"d56466f5-2f91-d0f9-4297-1be2a8fca57f","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Design/ITypeResolutionService.xml","internalonly":false,"layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ITypeResolutionService interface | Microsoft Docs","_op_ogTitle":"ITypeResolutionService interface","description":"Provides an interface to retrieve an assembly or type by name.\n","toc_asset_id":"api/_splitted/System.ComponentModel.Design/toc.json","toc_rel":"_splitted/System.ComponentModel.Design/toc.json","source_url":"","ms.assetid":"System.ComponentModel.Design.ITypeResolutionService","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.design.ityperesolutionservice","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.design.ityperesolutionservice","fileRelativePath":"api/System.ComponentModel.Design.ITypeResolutionService.html"},"themesRelativePathToOutputRoot":"_themes/"}