{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">ClaimsAuthorizationManager</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Defines the base implementation for a claims authorization manager.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public class ClaimsAuthorizationManager : System.IdentityModel.Configuration.ICustomIdentityConfiguration</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><span class=\"lang-csharp\">ClaimsAuthorizationManager</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The code examples that are used in the ClaimsAuthorizationManager topics are taken from the <code>Claims Based Authorization</code> sample. This sample provides a custom claims authorization manager that can authorize subjects based on a policy that is specified in configuration. The custom claims authorization manager consists of three basic components: a class derived from ClaimsAuthorizationManager that implements the manager, the <code>ResourceAction</code> class that pairs a resource and an action, and a policy reader that reads and compiles policy that is specified in the configuration file. This compiled policy can then be used by the claims authorization manager to evaluate a principal in order to authorize access to resources. Not all elements are shown for the sake of brevity. For information about this sample and other samples available for WIF and about where to download them, see <a href=\"../topic/wif%20code%20sample%20index\" data-linktype=\"relative-path\">WIF Code Sample Index</a>.  </p>\n<p> The following code shows the implementation of the custom claims authorization manager. The <a class=\"xref\" href=\"system.security.claims.claimsauthorizationmanager#System_Security_Claims_ClaimsAuthorizationManager_LoadCustomConfiguration_\" data-linktype=\"relative-path\">LoadCustomConfiguration</a> method reads and compiles the policy from configuration by using the policy reader helper class (not shown) and the <a class=\"xref\" href=\"system.security.claims.claimsauthorizationmanager#System_Security_Claims_ClaimsAuthorizationManager_CheckAccess_\" data-linktype=\"relative-path\">CheckAccess</a> method grants or denies access based on this policy.  </p>\n<pre><code class=\"lang-cs\" name=\"WifClaimsBasedAuthorization#2\">using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Linq.Expressions;\nusing System.Security.Claims;\nusing System.Xml;\n\nnamespace ClaimsAuthorizationLibrary\n{\n    /// &lt;summary&gt;\n    /// Simple ClaimsAuthorizationManager implementation that reads policy information from the .config file\n    /// &lt;/summary&gt;\n    public class MyClaimsAuthorizationManager : ClaimsAuthorizationManager\n    {\n        static Dictionary&lt;ResourceAction, Func&lt;ClaimsPrincipal, bool&gt;&gt; _policies = new Dictionary&lt;ResourceAction, Func&lt;ClaimsPrincipal, bool&gt;&gt;();\n        PolicyReader _policyReader = new PolicyReader();\n\n        /// &lt;summary&gt;\n        /// Creates a new instance of the MyClaimsAuthorizationManager\n        /// &lt;/summary&gt;        \n        public MyClaimsAuthorizationManager()\n        {\n        }\n\n        /// &lt;summary&gt;\n        /// Overloads  the base class method to load the custom policies from the config file\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;nodelist&quot;&gt;XmlNodeList containing the policy information read from the config file&lt;/param&gt;\n        public override void LoadCustomConfiguration(XmlNodeList nodelist)\n        {\n            Expression&lt;Func&lt;ClaimsPrincipal, bool&gt;&gt; policyExpression;\n\n            foreach (XmlNode node in nodelist)\n            {\n                //\n                // Initialize the policy cache\n                //\n                XmlDictionaryReader rdr = XmlDictionaryReader.CreateDictionaryReader(new XmlTextReader(new StringReader(node.OuterXml)));\n                rdr.MoveToContent();\n\n                string resource = rdr.GetAttribute(&quot;resource&quot;);\n                string action = rdr.GetAttribute(&quot;action&quot;);\n\n                policyExpression = _policyReader.ReadPolicy(rdr);\n\n                //\n                // Compile the policy expression into a function\n                //\n                Func&lt;ClaimsPrincipal, bool&gt; policy = policyExpression.Compile();\n\n                //\n                // Insert the policy function into the policy cache\n                //\n                _policies[new ResourceAction(resource, action)] = policy;\n            }\n        }\n\n        /// &lt;summary&gt;\n        /// Checks if the principal specified in the authorization context is authorized to perform action specified in the authorization context \n        /// on the specified resoure\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;pec&quot;&gt;Authorization context&lt;/param&gt;\n        /// &lt;returns&gt;true if authorized, false otherwise&lt;/returns&gt;\n        public override bool CheckAccess(AuthorizationContext pec)\n        {\n            //\n            // Evaluate the policy against the claims of the \n            // principal to determine access\n            //\n            bool access = false;\n            try\n            {\n                ResourceAction ra = new ResourceAction(pec.Resource.First&lt;Claim&gt;().Value, pec.Action.First&lt;Claim&gt;().Value);\n\n                access = _policies[ra](pec.Principal);\n            }\n            catch (Exception)\n            {\n                access = false;\n            }\n\n            return access;\n        }\n    }\n}\n</code></pre><p> The following code shows the <code>ResourceAction</code> class used by the custom claims manager.  </p>\n<pre><code class=\"lang-cs\" name=\"WifClaimsBasedAuthorization#1\">\nusing System;\n\nnamespace ClaimsAuthorizationLibrary\n{\n    /// &lt;summary&gt;\n    /// Class to encapsulate resource/action pair\n    /// &lt;/summary&gt;\n    public class ResourceAction\n    {\n        public string Resource;\n        public string Action;\n\n        /// &lt;summary&gt;\n        /// Checks if the current instance is equal to the given object by comparing the resource and action values\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;obj&quot;&gt;object to compare to&lt;/param&gt;\n        /// &lt;returns&gt;True if equal, else false.&lt;/returns&gt;\n        public override bool Equals(object obj)\n        {\n            ResourceAction ra = obj as ResourceAction;\n            if (ra != null)\n            {\n                return ((string.Compare(ra.Resource, Resource, true) == 0) &amp;&amp; (string.Compare(ra.Action, Action, true) == 0));\n            }\n\n            return base.Equals(obj);\n        }\n\n        /// &lt;summary&gt;\n        /// Gets the hash code.\n        /// &lt;/summary&gt;\n        /// &lt;returns&gt;The hash code.&lt;/returns&gt;\n        public override int GetHashCode()\n        {\n            return (Resource + Action).ToLower().GetHashCode();\n        }\n\n        /// &lt;summary&gt;\n        /// Creates an instance of ResourceAction class.\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;resource&quot;&gt;The resource name.&lt;/param&gt;\n        /// &lt;param name=&quot;action&quot;&gt;The action.&lt;/param&gt;\n        /// &lt;exception cref=&quot;ArgumentNullException&quot;&gt;when &lt;paramref name=&quot;resource&quot;/&gt; is null&lt;/exception&gt;\n        public ResourceAction(string resource, string action)\n        {\n            if (string.IsNullOrEmpty(resource))\n            {\n                throw new ArgumentNullException(&quot;resource&quot;);\n            }\n\n            Resource = resource;\n            Action = action;\n        }\n    }\n}\n</code></pre><p> The following XML shows how to configure the claims authorization manager shown above for a web application hosted in IIS 7.5. Only the elements specific to the configuration of the claims authorization manager are shown. Note that a reference to the <a class=\"xref\" href=\"system.identitymodel.services.claimsauthorizationmodule\" data-linktype=\"relative-path\">ClaimsAuthorizationModule</a> class must be added to the pipeline under the <code>&lt;system.Webserver&gt;</code> element. For sites and applications hosted in versions of IIS prior to IIS 7 the modules can be added to the pipeline under the <code>&lt;system.Web&gt;</code> element. This configuration is shown but commented out.  </p>\n<p> The policy used by the claims authorization manager is specified by custom <code>&lt;policy&gt;</code> elements under the <a href=\"../Topic/%3CclaimsAuthorizationManager%3E.md\" data-linktype=\"relative-path\">&amp;lt;claimsAuthorizationManager&amp;gt;</a> element. In the first policy, the principal must possess one of the specified claims in order to perform the specified action on the specified resource. In the second policy, the principal must possess both claims to be able to perform the specified action on the specified resource. In all others, the principal is automatically granted access regardless of the claims it possesses.  </p>\n<pre><code>&lt;configuration&gt;  \n  &lt;configSections&gt;  \n    &lt;!--WIF 4.5 sections --&gt;  \n    &lt;section name=&quot;system.identityModel&quot; type=&quot;System.IdentityModel.Configuration.SystemIdentityModelSection, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089&quot;/&gt;  \n    ...  \n\n  &lt;/configSections&gt;  \n\n  ...  \n\n  &lt;system.web&gt;  \n    &lt;httpModules&gt;  \n      &lt;!--WIF 4.5 modules --&gt;  \n      &lt;!--Not needed here for IIS &gt;= 7 --&gt;  \n      &lt;!--&lt;add name=&quot;ClaimsAuthorizationModule&quot; type=&quot;System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&quot;/&gt;--&gt;  \n    &lt;/httpModules&gt;  \n  &lt;/system.web&gt;  \n\n  ...  \n\n  &lt;system.webServer&gt;  \n    &lt;modules&gt;  \n      &lt;!--WIF 4.5 modules --&gt;  \n      &lt;add name=&quot;ClaimsAuthorizationModule&quot; type=&quot;System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&quot;/&gt;  \n    &lt;/modules&gt;  \n  &lt;/system.webServer&gt;  \n\n  ...  \n\n  &lt;!-- WIF 4.5 s.im section--&gt;  \n  &lt;system.identityModel&gt;  \n    &lt;identityConfiguration&gt;  \n      &lt;claimsAuthorizationManager type=&quot;ClaimsAuthorizationLibrary.MyClaimsAuthorizationManager, ClaimsAuthorizationLibrary&quot;&gt;  \n        &lt;policy resource=&quot;http://localhost:28491/Developers.aspx&quot; action=&quot;GET&quot;&gt;  \n          &lt;or&gt;  \n            &lt;claim claimType=&quot;http://schemas.microsoft.com/ws/2008/06/identity/claims/role&quot; claimValue=&quot;developer&quot; /&gt;  \n            &lt;claim claimType=&quot;http://schemas.xmlsoap.org/claims/Group&quot; claimValue=&quot;Administrator&quot; /&gt;  \n          &lt;/or&gt;  \n        &lt;/policy&gt;  \n        &lt;policy resource=&quot;http://localhost:28491/Administrators.aspx&quot; action=&quot;GET&quot;&gt;  \n          &lt;and&gt;  \n            &lt;claim claimType=&quot;http://schemas.xmlsoap.org/claims/Group&quot; claimValue=&quot;Administrator&quot; /&gt;  \n            &lt;claim claimType=&quot;http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country&quot; claimValue=&quot;USA&quot; /&gt;  \n          &lt;/and&gt;  \n        &lt;/policy&gt;  \n        &lt;policy resource=&quot;http://localhost:28491/Default.aspx&quot; action=&quot;GET&quot;&gt;  \n        &lt;/policy&gt;  \n        &lt;policy resource=&quot;http://localhost:28491/&quot; action=&quot;GET&quot;&gt;  \n        &lt;/policy&gt;  \n        &lt;policy resource=&quot;http://localhost:28491/Claims.aspx&quot; action=&quot;GET&quot;&gt;  \n        &lt;/policy&gt;  \n      &lt;/claimsAuthorizationManager&gt;  \n\n      ...  \n\n    &lt;/identityConfiguration&gt;  \n  &lt;/system.identityModel&gt;  \n  ...  \n\n&lt;/configuration&gt;&lt;configuration&gt;  \n  &lt;configSections&gt;  \n    &lt;!--WIF 4.5 sections --&gt;  \n    &lt;section name=&quot;system.identityModel&quot; type=&quot;System.IdentityModel.Configuration.SystemIdentityModelSection, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089&quot;/&gt;  \n    ...  \n\n  &lt;/configSections&gt;  \n\n  ...  \n\n  &lt;system.web&gt;  \n    &lt;httpModules&gt;  \n      &lt;!--WIF 4.5 modules --&gt;  \n      &lt;!--Not needed here for IIS &gt;= 7 --&gt;  \n      &lt;!--&lt;add name=&quot;ClaimsAuthorizationModule&quot; type=&quot;System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&quot;/&gt;--&gt;  \n    &lt;/httpModules&gt;  \n  &lt;/system.web&gt;  \n\n  ...  \n\n  &lt;system.webServer&gt;  \n    &lt;modules&gt;  \n      &lt;!--WIF 4.5 modules --&gt;  \n      &lt;add name=&quot;ClaimsAuthorizationModule&quot; type=&quot;System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&quot;/&gt;  \n    &lt;/modules&gt;  \n  &lt;/system.webServer&gt;  \n\n  ...  \n\n  &lt;!-- WIF 4.5 s.im section--&gt;  \n  &lt;system.identityModel&gt;  \n    &lt;identityConfiguration&gt;  \n      &lt;claimsAuthorizationManager type=&quot;MyClaimsAuthorizationManager.SimpleClaimsAuthoirzationManager, MyClaimsAuthorizationManager&quot; /&gt;  \n      ...  \n\n  &lt;/system.identityModel&gt;  \n  ...  \n\n&lt;/configuration&gt;  \n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The ClaimsAuthorizationManager class provides the base implementation for a claims authorization manager. A claims authorization manager can be used in the following two scenarios:  </p>\n<ul>\n<li><p>In web-based applications and services, a claims authorization manager  can be added to the processing pipeline to provide an extensibility point from which you can authorize access to a resource according to the value of incoming claims before the application code that actually implements the requested resource is called.  </p>\n</li>\n<li><p>When you use the <a class=\"xref\" href=\"system.identitymodel.services.claimsprincipalpermission\" data-linktype=\"relative-path\">ClaimsPrincipalPermission</a> class or the <a class=\"xref\" href=\"system.identitymodel.services.claimsprincipalpermissionattribute\" data-linktype=\"relative-path\">ClaimsPrincipalPermissionAttribute</a> class to perform either imperative or declarative claims-based access checks in your code, the claims authorization manager that is configured for your application is called by the system to perform the check. Claims-based access checks can be performed in both web-based applications and desktop applications.  </p>\n</li>\n</ul>\n<p> The default implementation provided by the ClaimsAuthorizationManager class authorizes access for each claim presented; however, you can derive from this class and override the <a class=\"xref\" href=\"system.security.claims.claimsauthorizationmanager#System_Security_Claims_ClaimsAuthorizationManager_CheckAccess_\" data-linktype=\"relative-path\">CheckAccess</a> method to provide your own authorization logic.  </p>\n<p> The use of a claims authorization manager is optional. You can configure your application to use a claims authorization manager either programmatically by using the <a class=\"xref\" href=\"system.identitymodel.configuration.identityconfiguration\" data-linktype=\"relative-path\">IdentityConfiguration</a> class or declaratively, by specifying the <a href=\"../Topic/%3CclaimsAuthorizationManager%3E.md\" data-linktype=\"relative-path\">&amp;lt;claimsAuthorizationManager&amp;gt;</a> element, which is a child element of the <a href=\"../Topic/%3CidentityConfiguration%3E.md\" data-linktype=\"relative-path\">&amp;lt;identityConfiguration&amp;gt;</a> element in your application configuration file. If your application is a web site or a web application hosted in Internet Information Services (IIS), you must also add the <a class=\"xref\" href=\"system.identitymodel.services.claimsauthorizationmodule\" data-linktype=\"relative-path\">ClaimsAuthorizationModule</a> in the ASP.NET HTTP Modules collection.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> When you use the <a class=\"xref\" href=\"system.identitymodel.services.claimsprincipalpermission\" data-linktype=\"relative-path\">ClaimsPrincipalPermission</a> class or the <a class=\"xref\" href=\"system.identitymodel.services.claimsprincipalpermissionattribute\" data-linktype=\"relative-path\">ClaimsPrincipalPermissionAttribute</a> class, the claims authorization manager that is used to perform the access check is the one that is specified in the identity configuration under the <a class=\"xref\" href=\"system.identitymodel.services.federatedauthentication#System_IdentityModel_Services_FederatedAuthentication_FederationConfiguration_\" data-linktype=\"relative-path\">FederationConfiguration</a> property. In a configuration file, it is the <code>&lt;identityConfiguration&gt;</code> section that is referenced from the default <code>&lt;federationConfiguration&gt;</code> element. This is true even for Windows Communication Foundation (WCF) services and desktop applications.  </p>\n</div>\n<p> The ClaimsAuthorizationManager base class does not take any additional configuration; however, you can override the <a class=\"xref\" href=\"system.security.claims.claimsauthorizationmanager#System_Security_Claims_ClaimsAuthorizationManager_LoadCustomConfiguration_\" data-linktype=\"relative-path\">LoadCustomConfiguration</a> in derived classes to provide initialization of your claims authorization manager from child elements of the <code>&lt;claimsAuthorizationElement&gt;</code>. The typical scenario is to use these child elements to specify authorization policies which determine which claim types and values are required in order to gain access to which resource. This is not a hard requirement, though you are free to define whatever usage and syntax make sense for your implementation.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Security_Claims_ClaimsAuthorizationManager__ctor_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Claims_ClaimsAuthorizationManager__ctor\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ClaimsAuthorizationManager()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.claims.claimsauthorizationmanager\" data-linktype=\"relative-path\">ClaimsAuthorizationManager</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public ClaimsAuthorizationManager ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Security_Claims_ClaimsAuthorizationManager_CheckAccess_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Claims_ClaimsAuthorizationManager_CheckAccess_System_Security_Claims_AuthorizationContext_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CheckAccess(AuthorizationContext)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>When implemented in a derived class, checks authorization for the subject in the specified context to perform the specified action on the specified resource.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual bool CheckAccess (System.Security.Claims.AuthorizationContext context);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>context</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.claims.authorizationcontext\" data-linktype=\"relative-path\">AuthorizationContext</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The authorization context that contains the subject, resource, and action for which authorization is to be checked.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the subject is authorized to perform the specified action on the specified resource; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The base implementation always returns <code>true</code>, which authorizes access. You can override this method in a derived class to authorize access based on the requirements of your RP application. If this method returns <code>false</code>, Windows Identity Foundation (WIF) returns an unauthorized error to the caller; otherwise, execution is passed to the RP application.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Security_Claims_ClaimsAuthorizationManager_LoadCustomConfiguration_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Claims_ClaimsAuthorizationManager_LoadCustomConfiguration_System_Xml_XmlNodeList_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LoadCustomConfiguration(XmlNodeList)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>When overridden in a derived class, loads custom configuration from XML.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual void LoadCustomConfiguration (System.Xml.XmlNodeList nodelist);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>nodelist</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The custom configuration elements. Each node in the list is of type <a class=\"xref\" href=\"system.xml.xmlelement\" data-linktype=\"relative-path\">XmlElement</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.security.claims.claimsauthenticationmanager#System_Security_Claims_ClaimsAuthenticationManager_LoadCustomConfiguration_\" data-linktype=\"relative-path\">LoadCustomConfiguration</a> method is called by the configuration infrastructure. When this method is called, the <code>nodelist</code> will contain the top-level child elements of the <a href=\"../Topic/%3CclaimsAuthorizationManager%3E.md\" data-linktype=\"relative-path\">&amp;lt;claimsAuthorizationManager&amp;gt;</a> element from the configuration file. Each of these elements may, in turn, contain attributes or child elements depending on the configuration schema you define for your derived class. If no child elements appear under the <code>&lt;claimsAuthorizationManager&gt;</code> element in the configuration file, this method is not called.  </p>\n<p> The default implementation throws a <a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a>. Override this method in your derived class to enable initialization of your claims authorization manager from a configuration file. Typically, the configuration elements are used to express an authorization policy; however, you can define elements and use them in any way that makes sense based on the requirements of your application.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Security.Claims.ClaimsAuthorizationManager.yml\">\r\n<meta name=\"APIName\" content=\"System.Security.Claims.ClaimsAuthorizationManager\">\r\n<meta name=\"APIName\" content=\"System.Security.Claims.ClaimsAuthorizationManager..ctor\">\r\n<meta name=\"APIName\" content=\"System.Security.Claims.ClaimsAuthorizationManager.CheckAccess\">\r\n<meta name=\"APIName\" content=\"System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration\">\r\n<meta name=\"APILocation\" content=\"System.IdentityModel.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 05:47 AM\">\r\n<meta name=\"document_id\" content=\"066aa68e-c495-fcf3-6e35-7f25e1545b5a\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Defines the base implementation for a claims authorization manager.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.security.claims/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Security.Claims.ClaimsAuthorizationManager\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Security.Claims.ClaimsAuthorizationManager.yml","open_to_public_contributors":false,"api_name":["System.Security.Claims.ClaimsAuthorizationManager","System.Security.Claims.ClaimsAuthorizationManager..ctor","System.Security.Claims.ClaimsAuthorizationManager.CheckAccess","System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration"],"api_location":["System.IdentityModel.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Security.Claims.ClaimsAuthorizationManager","System::Security::Claims::ClaimsAuthorizationManager","System.Security.Claims.ClaimsAuthorizationManager.#ctor","System::Security::Claims::ClaimsAuthorizationManager::#ctor","System.Security.Claims.ClaimsAuthorizationManager.CheckAccess","System::Security::Claims::ClaimsAuthorizationManager::CheckAccess","System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration","System::Security::Claims::ClaimsAuthorizationManager::LoadCustomConfiguration"],"dev_langs":["csharp"],"updated_at":"2017-03-31 05:47 AM","document_id":"066aa68e-c495-fcf3-6e35-7f25e1545b5a","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Security.Claims/ClaimsAuthorizationManager.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ClaimsAuthorizationManager class | Microsoft Docs","_op_ogTitle":"ClaimsAuthorizationManager class","description":"Defines the base implementation for a claims authorization manager.\n","toc_asset_id":"api/_splitted/System.Security.Claims/toc.json","toc_rel":"_splitted/System.Security.Claims/toc.json","source_url":"","ms.assetid":"System.Security.Claims.ClaimsAuthorizationManager","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.security.claims.claimsauthorizationmanager","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.security.claims.claimsauthorizationmanager","fileRelativePath":"api/System.Security.Claims.ClaimsAuthorizationManager.html"},"themesRelativePathToOutputRoot":"_themes/"}