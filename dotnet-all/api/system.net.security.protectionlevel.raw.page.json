{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">ProtectionLevel</span>\r\n      Enum\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Indicates the security services requested for an authenticated stream.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\r\n  \t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public enum ProtectionLevel</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a></span></div><span class=\"lang-csharp\">ProtectionLevel</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example demonstrates creating and using a client-side <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"NclNegoSyncClient#0\">using System;\nusing System.Net;\nusing System.Net.Security;\nusing System.Net.Sockets;\nusing System.Security.Principal;\n\nnamespace Examples.NegotiateStreamExample\n{\n    public class SynchronousAuthenticatingTcpClient \n    {\n        public static void Main(String[] args)  \n        {\n            // Establish the remote endpoint for the socket.\n            // For this example, use the local machine.\n            IPHostEntry ipHostInfo = Dns.GetHostEntry(Dns.GetHostName());\n            IPAddress ipAddress = ipHostInfo.AddressList[0];\n            // Client and server use port 11000. \n            IPEndPoint remoteEP = new IPEndPoint(ipAddress,11000);\n            // Create a TCP/IP socket.\n           TcpClient client = new TcpClient();\n            // Connect the socket to the remote endpoint.\n            client.Connect(remoteEP);\n            Console.WriteLine(&quot;Client connected to {0}.&quot;,\n                remoteEP.ToString());\n            // Ensure the client does not close when there is \n            // still data to be sent to the server.\n            client.LingerState = (new LingerOption(true,0));\n            // Request authentication.\n            NetworkStream clientStream = client.GetStream();\n            NegotiateStream authStream = new NegotiateStream(clientStream); \n            // Request authentication for the client only (no mutual authentication).\n            // Authenicate using the client&#39;s default credetials.\n            // Permit the server to impersonate the client to access resources on the server only.\n            // Request that data be transmitted using encryption and data signing.\n            authStream.AuthenticateAsClient(\n                 (NetworkCredential) CredentialCache.DefaultCredentials, \n                 &quot;&quot;,\n                 ProtectionLevel.EncryptAndSign,\n                 TokenImpersonationLevel.Impersonation);\n            DisplayAuthenticationProperties(authStream);\n            DisplayStreamProperties(authStream);\n            if (authStream.CanWrite)\n            {\n                 // Encode the test data into a byte array.\n                byte[] message = System.Text.Encoding.UTF8.GetBytes(&quot;Hello from the client.&quot;);\n                authStream.Write(message, 0, message.Length);\n          authStream.Flush();\n                Console.WriteLine(&quot;Sent {0} bytes.&quot;, message.Length);\n         }\n         // Close the client connection.\n            authStream.Close();\n            Console.WriteLine(&quot;Client closed.&quot;);\n            \n    }\n         static void DisplayStreamProperties(NegotiateStream stream)\n        {\n             Console.WriteLine(&quot;Can read: {0}&quot;, stream.CanRead);\n             Console.WriteLine(&quot;Can write: {0}&quot;, stream.CanWrite);\n             Console.WriteLine(&quot;Can seek: {0}&quot;, stream.CanSeek);\n             try \n             {\n                 // If the underlying stream supports it, display the length.\n                 Console.WriteLine(&quot;Length: {0}&quot;, stream.Length);\n             } catch (NotSupportedException)\n             {\n                     Console.WriteLine(&quot;Cannot get the length of the underlying stream.&quot;);\n             }\n             \n             if (stream.CanTimeout)\n             {\n                 Console.WriteLine(&quot;Read time-out: {0}&quot;, stream.ReadTimeout);\n                 Console.WriteLine(&quot;Write time-out: {0}&quot;, stream.WriteTimeout);\n             }\n        }\n         static void DisplayAuthenticationProperties(NegotiateStream stream)\n        {\n             Console.WriteLine(&quot;IsAuthenticated: {0}&quot;, stream.IsAuthenticated);\n            Console.WriteLine(&quot;IsMutuallyAuthenticated: {0}&quot;, stream.IsMutuallyAuthenticated);\n            Console.WriteLine(&quot;IsEncrypted: {0}&quot;, stream.IsEncrypted);\n            Console.WriteLine(&quot;IsSigned: {0}&quot;, stream.IsSigned);\n            Console.WriteLine(&quot;ImpersonationLevel: {0}&quot;, stream.ImpersonationLevel);\n            Console.WriteLine(&quot;IsServer: {0}&quot;, stream.IsServer);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"NclNegoSyncClient#0\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Net;\nusing namespace System::Net::Security;\nusing namespace System::Net::Sockets;\nusing namespace System::Security::Principal;\n\nstatic void DisplayStreamProperties( NegotiateStream^ stream )\n{\n   Console::WriteLine( L&quot;Can read: {0}&quot;, stream-&gt;CanRead );\n   Console::WriteLine( L&quot;Can write: {0}&quot;, stream-&gt;CanWrite );\n   Console::WriteLine( L&quot;Can seek: {0}&quot;, stream-&gt;CanSeek );\n   try\n   {\n      \n      // If the underlying stream supports it, display the length.\n      Console::WriteLine( L&quot;Length: {0}&quot;, stream-&gt;Length );\n   }\n   catch ( NotSupportedException^ ) \n   {\n      Console::WriteLine( L&quot;Cannot get the length of the underlying stream.&quot; );\n   }\n\n   if ( stream-&gt;CanTimeout )\n   {\n      Console::WriteLine( L&quot;Read time-out: {0}&quot;, stream-&gt;ReadTimeout );\n      Console::WriteLine( L&quot;Write time-out: {0}&quot;, stream-&gt;WriteTimeout );\n   }\n}\n\n\nstatic void DisplayAuthenticationProperties( NegotiateStream^ stream )\n{\n   Console::WriteLine( L&quot;IsAuthenticated: {0}&quot;, stream-&gt;IsAuthenticated );\n   Console::WriteLine( L&quot;IsMutuallyAuthenticated: {0}&quot;, stream-&gt;IsMutuallyAuthenticated );\n   Console::WriteLine( L&quot;IsEncrypted: {0}&quot;, stream-&gt;IsEncrypted );\n   Console::WriteLine( L&quot;IsSigned: {0}&quot;, stream-&gt;IsSigned );\n   Console::WriteLine( L&quot;ImpersonationLevel: {0}&quot;, stream-&gt;ImpersonationLevel );\n   Console::WriteLine( L&quot;IsServer: {0}&quot;, stream-&gt;IsServer );\n}\n\n\nint main()\n{\n   \n   // Establish the remote endpoint for the socket.\n   // For this example, use the local machine.\n   IPHostEntry^ ipHostInfo = Dns::GetHostEntry( Dns::GetHostName() );\n   IPAddress^ ipAddress = ipHostInfo-&gt;AddressList[ 0 ];\n   \n   // Client and server use port 11000. \n   IPEndPoint^ remoteEP = gcnew IPEndPoint( ipAddress,11000 );\n   \n   // Create a TCP/IP socket.\n   TcpClient^ client = gcnew TcpClient;\n   \n   // Connect the socket to the remote endpoint.\n   client-&gt;Connect( remoteEP );\n   Console::WriteLine( L&quot;Client connected to {0}.&quot;, remoteEP );\n   \n   // Ensure the client does not close when there is \n   // still data to be sent to the server.\n   client-&gt;LingerState = (gcnew LingerOption( true,0 ));\n   \n   // Request authentication.\n   NetworkStream^ clientStream = client-&gt;GetStream();\n   NegotiateStream^ authStream = gcnew NegotiateStream( clientStream );\n   \n   // Request authentication for the client only (no mutual authentication).\n   // Authenicate using the client&#39;s default credetials.\n   // Permit the server to impersonate the client to access resources on the server only.\n   // Request that data be transmitted using encryption and data signing.\n   authStream-&gt;AuthenticateAsClient( dynamic_cast&lt;NetworkCredential^&gt;(CredentialCache::DefaultCredentials), \n          L&quot;&quot;, \n          ProtectionLevel::EncryptAndSign, \n          TokenImpersonationLevel::Impersonation );\n   \n   DisplayAuthenticationProperties( authStream );\n   DisplayStreamProperties( authStream );\n   if ( authStream-&gt;CanWrite )\n   {\n      \n      // Encode the test data into a byte array.\n      array&lt;Byte&gt;^message = System::Text::Encoding::UTF8-&gt;GetBytes( L&quot;Hello from the client.&quot; );\n      authStream-&gt;Write( message, 0, message-&gt;Length );\n      authStream-&gt;Flush();\n      Console::WriteLine( L&quot;Sent {0} bytes.&quot;, message-&gt;Length );\n   }\n\n   \n   // Close the client connection.\n   authStream-&gt;Close();\n   Console::WriteLine( L&quot;Client closed.&quot; );\n}\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>This enumeration is used by the <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a> class.</p>\n\r\n  \r\n      \t<h2 class=\"accented\">Fields\r\n      </h2>\r\n      <table class=\"nameValue\">\r\n      \t<tr><td id=\"System_Net_Security_ProtectionLevel_EncryptAndSign\">\r\n      \t\t\t<span class=\"lang-csharp\">EncryptAndSign</span>\r\n      \t</td>\r\n      \t<td><p>Encrypt and sign data to help ensure the confidentiality and integrity of transmitted data.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Net_Security_ProtectionLevel_None\">\r\n      \t\t\t<span class=\"lang-csharp\">None</span>\r\n      \t</td>\r\n      \t<td><p>Authentication only.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Net_Security_ProtectionLevel_Sign\">\r\n      \t\t\t<span class=\"lang-csharp\">Sign</span>\r\n      \t</td>\r\n      \t<td><p>Sign data to help ensure the integrity of transmitted data.</p>\n</td>\r\n      \t</tr>\r\n      </table>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Net.Security.ProtectionLevel.yml\">\r\n<meta name=\"APIName\" content=\"System.Net.Security.ProtectionLevel\">\r\n<meta name=\"APIName\" content=\"System.Net.Security.ProtectionLevel.EncryptAndSign\">\r\n<meta name=\"APIName\" content=\"System.Net.Security.ProtectionLevel.None\">\r\n<meta name=\"APIName\" content=\"System.Net.Security.ProtectionLevel.Sign\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 05:47 AM\">\r\n<meta name=\"document_id\" content=\"5d876954-49f3-0824-a0a7-15922bfe68a2\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Indicates the security services requested for an authenticated stream.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.net.security/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Net.Security.ProtectionLevel\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Net.Security.ProtectionLevel.yml","open_to_public_contributors":false,"api_name":["System.Net.Security.ProtectionLevel","System.Net.Security.ProtectionLevel.EncryptAndSign","System.Net.Security.ProtectionLevel.None","System.Net.Security.ProtectionLevel.Sign"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Net.Security.ProtectionLevel","System::Net::Security::ProtectionLevel","System.Net.Security.ProtectionLevel.EncryptAndSign","System::Net::Security::ProtectionLevel::EncryptAndSign","System.Net.Security.ProtectionLevel.None","System::Net::Security::ProtectionLevel::None","System.Net.Security.ProtectionLevel.Sign","System::Net::Security::ProtectionLevel::Sign"],"dev_langs":["csharp"],"updated_at":"2017-03-31 05:47 AM","document_id":"5d876954-49f3-0824-a0a7-15922bfe68a2","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Net.Security/ProtectionLevel.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ProtectionLevel enum | Microsoft Docs","_op_ogTitle":"ProtectionLevel enum","description":"Indicates the security services requested for an authenticated stream.\n","toc_asset_id":"api/_splitted/System.Net.Security/toc.json","toc_rel":"_splitted/System.Net.Security/toc.json","source_url":"","ms.assetid":"System.Net.Security.ProtectionLevel","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.net.security.protectionlevel","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.net.security.protectionlevel","fileRelativePath":"api/System.Net.Security.ProtectionLevel.html"},"themesRelativePathToOutputRoot":"_themes/"}