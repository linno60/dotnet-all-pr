{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">XmlDsigXPathTransform</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the XPath transform for a digital signature as defined by the W3C.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public class XmlDsigXPathTransform : System.Security.Cryptography.Xml.Transform</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.xml.transform\" data-linktype=\"relative-path\">Transform</a></span></div><span class=\"lang-csharp\">XmlDsigXPathTransform</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.xml.transform#System_Security_Cryptography_Xml_Transform_Algorithm\" data-linktype=\"relative-path\">Algorithm</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.xml.transform#System_Security_Cryptography_Xml_Transform_Context\" data-linktype=\"relative-path\">Context</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.xml.transform#System_Security_Cryptography_Xml_Transform_GetDigestedOutput_System_Security_Cryptography_HashAlgorithm_\" data-linktype=\"relative-path\">GetDigestedOutput(HashAlgorithm)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.xml.transform#System_Security_Cryptography_Xml_Transform_GetXml\" data-linktype=\"relative-path\">GetXml()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.xml.transform#System_Security_Cryptography_Xml_Transform_PropagatedNamespaces\" data-linktype=\"relative-path\">PropagatedNamespaces</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.xml.transform#System_Security_Cryptography_Xml_Transform_Resolver\" data-linktype=\"relative-path\">Resolver</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>This section contains two code examples. The first code example shows how to sign and verify an XML document using the XmlDsigXPathTransform class with an envelope signature.  This example signs an XML document and saves the signature in a new XML document.  The second code example demonstrates how to call members of the XmlDsigXPathTransform class.  </p>\n<p> <strong>Example #1</strong>  </p>\n<pre><code class=\"lang-cpp\" name=\"Cryptography.Xml.XmlDsigXPathTransform#1\">//\n// This example signs an XML file using an\n// envelope signature. It then verifies the \n// signed XML.\n//\n#using &lt;System.Xml.dll&gt;\n#using &lt;System.Security.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Cryptography::X509Certificates;\nusing namespace System::Security::Cryptography::Xml;\nusing namespace System::Text;\nusing namespace System::Xml;\n\n// Create the XML that represents the transform.\nstatic XmlDsigXPathTransform^ CreateXPathTransform( String^ XPathString )\n{\n   \n   // Create a new XMLDocument object.\n   XmlDocument^ doc = gcnew XmlDocument;\n   \n   // Create a new XmlElement.\n   XmlElement^ xPathElem = doc-&gt;CreateElement( L&quot;XPath&quot; );\n   \n   // Set the element text to the value\n   // of the XPath string.\n   xPathElem-&gt;InnerText = XPathString;\n   \n   // Create a new XmlDsigXPathTransform object.\n   XmlDsigXPathTransform^ xForm = gcnew XmlDsigXPathTransform;\n   \n   // Load the XPath XML from the element. \n   xForm-&gt;LoadInnerXml( xPathElem-&gt;SelectNodes( L&quot;.&quot; ) );\n   \n   // Return the XML that represents the transform.\n   return xForm;\n}\n\n\n// Sign an XML file and save the signature in a new file.\nstatic void SignXmlFile( String^ FileName, String^ SignedFileName, RSA^ Key, String^ XPathString )\n{\n   \n   // Create a new XML document.\n   XmlDocument^ doc = gcnew XmlDocument;\n   \n   // Format the document to ignore white spaces.\n   doc-&gt;PreserveWhitespace = false;\n   \n   // Load the passed XML file using it&#39;s name.\n   doc-&gt;Load( gcnew XmlTextReader( FileName ) );\n   \n   // Create a SignedXml object.\n   SignedXml^ signedXml = gcnew SignedXml( doc );\n   \n   // Add the key to the SignedXml document. \n   signedXml-&gt;SigningKey = Key;\n   \n   // Create a reference to be signed.\n   Reference^ reference = gcnew Reference;\n   reference-&gt;Uri = L&quot;&quot;;\n   \n   // Create an XmlDsigXPathTransform object using \n   // the helper method &#39;CreateXPathTransform&#39; defined\n   // later in this sample.\n   XmlDsigXPathTransform^ XPathTransform = CreateXPathTransform( XPathString );\n   \n   // Add the transform to the reference.\n   reference-&gt;AddTransform( XPathTransform );\n   \n   // Add the reference to the SignedXml object.\n   signedXml-&gt;AddReference( reference );\n   \n   // Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n   KeyInfo^ keyInfo = gcnew KeyInfo;\n   keyInfo-&gt;AddClause( gcnew RSAKeyValue( dynamic_cast&lt;RSA^&gt;(Key) ) );\n   signedXml-&gt;KeyInfo = keyInfo;\n   \n   // Compute the signature.\n   signedXml-&gt;ComputeSignature();\n   \n   // Get the XML representation of the signature and save\n   // it to an XmlElement object.\n   XmlElement^ xmlDigitalSignature = signedXml-&gt;GetXml();\n   \n   // Append the element to the XML document.\n   doc-&gt;DocumentElement-&gt;AppendChild( doc-&gt;ImportNode( xmlDigitalSignature, true ) );\n   \n   // Save the signed XML document to a file specified\n   // using the passed string.\n   XmlTextWriter^ xmltw = gcnew XmlTextWriter( SignedFileName,gcnew UTF8Encoding( false ) );\n   doc-&gt;WriteTo( xmltw );\n   xmltw-&gt;Close();\n}\n\n\n// Verify the signature of an XML file and return the result.\nstatic Boolean VerifyXmlFile( String^ Name )\n{\n   \n   // Create a new XML document.\n   XmlDocument^ xmlDocument = gcnew XmlDocument;\n   \n   // Format using white spaces.\n   xmlDocument-&gt;PreserveWhitespace = true;\n   \n   // Load the passed XML file into the document. \n   xmlDocument-&gt;Load( Name );\n   \n   // Create a new SignedXml object and pass it\n   // the XML document class.\n   SignedXml^ signedXml = gcnew SignedXml( xmlDocument );\n   \n   // Find the &quot;Signature&quot; node and create a new\n   // XmlNodeList object.\n   XmlNodeList^ nodeList = xmlDocument-&gt;GetElementsByTagName( L&quot;Signature&quot; );\n   \n   // Load the signature node.\n   signedXml-&gt;LoadXml( dynamic_cast&lt;XmlElement^&gt;(nodeList-&gt;Item( 0 )) );\n   \n   // Check the signature and return the result.\n   return signedXml-&gt;CheckSignature();\n}\n\n\n// Create example data to sign.\nstatic void CreateSomeXml( String^ FileName )\n{\n   \n   // Create a new XmlDocument object.\n   XmlDocument^ document = gcnew XmlDocument;\n   \n   // Create a new XmlNode object.\n   XmlNode^ node = document-&gt;CreateNode( XmlNodeType::Element, L&quot;&quot;, L&quot;MyXML&quot;, L&quot;Don&#39;t_Sign&quot; );\n   \n   // Append the node to the document.\n   document-&gt;AppendChild( node );\n   \n   // Create a new XmlNode object.\n   XmlNode^ subnode = document-&gt;CreateNode( XmlNodeType::Element, L&quot;&quot;, L&quot;TempElement&quot;, L&quot;Sign&quot; );\n   \n   // Add some text to the node.\n   subnode-&gt;InnerText = L&quot;Here is some data to sign.&quot;;\n   \n   // Append the node to the document.\n   document-&gt;DocumentElement-&gt;AppendChild( subnode );\n   \n   // Save the XML document to the file name specified.\n   XmlTextWriter^ xmltw = gcnew XmlTextWriter( FileName,gcnew UTF8Encoding( false ) );\n   document-&gt;WriteTo( xmltw );\n   xmltw-&gt;Close();\n}\n\nint main()\n{\n   \n   // Generate a signing key.\n   RSACryptoServiceProvider^ Key = gcnew RSACryptoServiceProvider;\n   try\n   {\n      \n      // Create an XML file to sign.\n      CreateSomeXml( L&quot;Example.xml&quot; );\n      Console::WriteLine( L&quot;New XML file created.&quot; );\n      \n      // Sign the XML that was just created and save it in a \n      // new file.\n      SignXmlFile( L&quot;Example.xml&quot;, L&quot;SignedExample.xml&quot;, Key, L&quot;ancestor-or-self::TempElement&quot; );\n      Console::WriteLine( L&quot;XML file signed.&quot; );\n      \n      // Verify the signature of the signed XML.\n      Console::WriteLine( L&quot;Verifying signature...&quot; );\n      bool result = VerifyXmlFile( L&quot;SignedExample.xml&quot; );\n      \n      // Display the results of the signature verification to \\\n      // the console.\n      if ( result )\n      {\n         Console::WriteLine( L&quot;The XML signature is valid.&quot; );\n      }\n      else\n      {\n         Console::WriteLine( L&quot;The XML signature is not valid.&quot; );\n      }\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n   finally\n   {\n      Key-&gt;Clear();\n   }\n\n   return 1;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Cryptography.Xml.XmlDsigXPathTransform#1\">&#39;\n&#39; This example signs an XML file using an\n&#39; envelope signature. It then verifies the \n&#39; signed XML.\n&#39;\nImports System\nImports System.Security.Cryptography\nImports System.Security.Cryptography.X509Certificates\nImports System.Security.Cryptography.Xml\nImports System.Text\nImports System.Xml\n\n\n\nModule SignVerifyEnvelope\n\n\n    Sub Main(ByVal args() As String)\n        &#39; Generate a signing key.\n        Dim Key As New RSACryptoServiceProvider()\n\n        Try\n            &#39; Create an XML file to sign.\n            CreateSomeXml(&quot;Example.xml&quot;)\n            Console.WriteLine(&quot;New XML file created.&quot;)\n\n            &#39; Sign the XML that was just created and save it in a \n            &#39; new file.\n            SignXmlFile(&quot;Example.xml&quot;, &quot;SignedExample.xml&quot;, Key, &quot;ancestor-or-self::TempElement&quot;)\n            Console.WriteLine(&quot;XML file signed.&quot;)\n\n            &#39; Verify the signature of the signed XML.\n            Console.WriteLine(&quot;Verifying signature...&quot;)\n            Dim result As Boolean = VerifyXmlFile(&quot;SignedExample.xml&quot;)\n\n            &#39; Display the results of the signature verification to \\\n            &#39; the console.\n            If result Then\n                Console.WriteLine(&quot;The XML signature is valid.&quot;)\n            Else\n                Console.WriteLine(&quot;The XML signature is not valid.&quot;)\n            End If\n        Catch e As CryptographicException\n            Console.WriteLine(e.Message)\n        Finally\n            Key.Clear()\n        End Try\n\n    End Sub\n\n\n    &#39; Sign an XML file and save the signature in a new file.\n    Sub SignXmlFile(ByVal FileName As String, ByVal SignedFileName As String, ByVal Key As RSA, ByVal XPathString As String)\n        &#39; Create a new XML document.\n        Dim doc As New XmlDocument()\n\n        &#39; Format the document to ignore white spaces.\n        doc.PreserveWhitespace = False\n\n        &#39; Load the passed XML file using it&#39;s name.\n        doc.Load(New XmlTextReader(FileName))\n\n        &#39; Create a SignedXml object.\n        Dim signedXml As New SignedXml(doc)\n\n        &#39; Add the key to the SignedXml document. \n        signedXml.SigningKey = Key\n\n        &#39; Create a reference to be signed.\n        Dim reference As New Reference()\n        reference.Uri = &quot;&quot;\n\n        &#39; Create an XmlDsigXPathTransform object using \n        &#39; the helper method &#39;CreateXPathTransform&#39; defined\n        &#39; later in this sample.\n        Dim XPathTransform As XmlDsigXPathTransform = CreateXPathTransform(XPathString)\n\n        &#39; Add the transform to the reference.\n        reference.AddTransform(XPathTransform)\n\n        &#39; Add the reference to the SignedXml object.\n        signedXml.AddReference(reference)\n\n        &#39; Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n        Dim keyInfo As New KeyInfo()\n        keyInfo.AddClause(New RSAKeyValue(CType(Key, RSA)))\n        signedXml.KeyInfo = keyInfo\n\n        &#39; Compute the signature.\n        signedXml.ComputeSignature()\n\n        &#39; Get the XML representation of the signature and save\n        &#39; it to an XmlElement object.\n        Dim xmlDigitalSignature As XmlElement = signedXml.GetXml()\n\n        &#39; Append the element to the XML document.\n        doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, True))\n\n        &#39; Save the signed XML document to a file specified\n        &#39; using the passed string.\n        Dim xmltw As New XmlTextWriter(SignedFileName, New UTF8Encoding(False))\n        doc.WriteTo(xmltw)\n        xmltw.Close()\n\n    End Sub\n\n    &#39; Verify the signature of an XML file and return the result.\n    Function VerifyXmlFile(ByVal Name As String) As [Boolean]\n        &#39; Create a new XML document.\n        Dim xmlDocument As New XmlDocument()\n\n        &#39; Format using white spaces.\n        xmlDocument.PreserveWhitespace = True\n\n        &#39; Load the passed XML file into the document. \n        xmlDocument.Load(Name)\n\n        &#39; Create a new SignedXml object and pass it\n        &#39; the XML document class.\n        Dim signedXml As New SignedXml(xmlDocument)\n\n        &#39; Find the &quot;Signature&quot; node and create a new\n        &#39; XmlNodeList object.\n        Dim nodeList As XmlNodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;)\n\n        &#39; Load the signature node.\n        signedXml.LoadXml(CType(nodeList(0), XmlElement))\n\n        &#39; Check the signature and return the result.\n        Return signedXml.CheckSignature()\n\n    End Function\n\n\n    &#39; Create the XML that represents the transform.\n    Function CreateXPathTransform(ByVal XPathString As String) As XmlDsigXPathTransform\n        &#39; Create a new XMLDocument object.\n        Dim doc As New XmlDocument()\n\n        &#39; Create a new XmlElement.\n        Dim xPathElem As XmlElement = doc.CreateElement(&quot;XPath&quot;)\n\n        &#39; Set the element text to the value\n        &#39; of the XPath string.\n        xPathElem.InnerText = XPathString\n\n        &#39; Create a new XmlDsigXPathTransform object.\n        Dim xForm As New XmlDsigXPathTransform()\n\n        &#39; Load the XPath XML from the element. \n        xForm.LoadInnerXml(xPathElem.SelectNodes(&quot;.&quot;))\n\n        &#39; Return the XML that represents the transform.\n        Return xForm\n\n    End Function\n\n\n    &#39; Create example data to sign.\n    Sub CreateSomeXml(ByVal FileName As String)\n        &#39; Create a new XmlDocument object.\n        Dim document As New XmlDocument()\n\n        &#39; Create a new XmlNode object.\n        Dim node As XmlNode = document.CreateNode(XmlNodeType.Element, &quot;&quot;, &quot;MyXML&quot;, &quot;Don&#39;t_Sign&quot;)\n\n        &#39; Append the node to the document.\n        document.AppendChild(node)\n\n        &#39; Create a new XmlNode object.\n        Dim subnode As XmlNode = document.CreateNode(XmlNodeType.Element, &quot;&quot;, &quot;TempElement&quot;, &quot;Sign&quot;)\n\n        &#39; Add some text to the node.\n        subnode.InnerText = &quot;Here is some data to sign.&quot;\n\n        &#39; Append the node to the document.\n        document.DocumentElement.AppendChild(subnode)\n\n        &#39; Save the XML document to the file name specified.\n        Dim xmltw As New XmlTextWriter(FileName, New UTF8Encoding(False))\n        document.WriteTo(xmltw)\n        xmltw.Close()\n\n    End Sub\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"Cryptography.Xml.XmlDsigXPathTransform#1\">//\n// This example signs an XML file using an\n// envelope signature. It then verifies the \n// signed XML.\n//\nusing System;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.X509Certificates;\nusing System.Security.Cryptography.Xml;\nusing System.Text;\nusing System.Xml;\n\npublic class SignVerifyEnvelope\n{\n\n    public static void Main(String[] args)\n    {\n        // Generate a signing key.\n        RSACryptoServiceProvider Key = new RSACryptoServiceProvider();\n\n        try\n        {\n            // Create an XML file to sign.\n            CreateSomeXml(&quot;Example.xml&quot;);\n            Console.WriteLine(&quot;New XML file created.&quot;);\n\n            // Sign the XML that was just created and save it in a \n            // new file.\n            SignXmlFile(&quot;Example.xml&quot;, &quot;SignedExample.xml&quot;, Key, &quot;ancestor-or-self::TempElement&quot;);\n            Console.WriteLine(&quot;XML file signed.&quot;);\n\n            // Verify the signature of the signed XML.\n            Console.WriteLine(&quot;Verifying signature...&quot;);\n            bool result = VerifyXmlFile(&quot;SignedExample.xml&quot;);\n\n            // Display the results of the signature verification to \\\n            // the console.\n            if (result)\n            {\n                Console.WriteLine(&quot;The XML signature is valid.&quot;);\n            }\n            else\n            {\n                Console.WriteLine(&quot;The XML signature is not valid.&quot;);\n            }\n        }\n        catch (CryptographicException e)\n        {\n            Console.WriteLine(e.Message);\n        }\n        finally\n        {\n            Key.Clear();\n        }\n    }\n\n    // Sign an XML file and save the signature in a new file.\n    public static void SignXmlFile(string FileName, string SignedFileName, RSA Key, string XPathString)\n    {\n        // Create a new XML document.\n        XmlDocument doc = new XmlDocument();\n\n        // Format the document to ignore white spaces.\n        doc.PreserveWhitespace = false;\n\n        // Load the passed XML file using it&#39;s name.\n        doc.Load(new XmlTextReader(FileName));\n\n        // Create a SignedXml object.\n        SignedXml signedXml = new SignedXml(doc);\n\n        // Add the key to the SignedXml document. \n        signedXml.SigningKey = Key;\n\n        // Create a reference to be signed.\n        Reference reference = new Reference();\n        reference.Uri = &quot;&quot;;\n\n        // Create an XmlDsigXPathTransform object using \n        // the helper method &#39;CreateXPathTransform&#39; defined\n        // later in this sample.\n\n        XmlDsigXPathTransform XPathTransform = CreateXPathTransform(XPathString);\n        \n        // Add the transform to the reference.\n        reference.AddTransform(XPathTransform);\n\n        // Add the reference to the SignedXml object.\n        signedXml.AddReference(reference);\n\n        // Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n        KeyInfo keyInfo = new KeyInfo();\n        keyInfo.AddClause(new RSAKeyValue((RSA)Key));\n        signedXml.KeyInfo = keyInfo;\n\n        // Compute the signature.\n        signedXml.ComputeSignature();\n\n        // Get the XML representation of the signature and save\n        // it to an XmlElement object.\n        XmlElement xmlDigitalSignature = signedXml.GetXml();\n\n        // Append the element to the XML document.\n        doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, true));\n\n        // Save the signed XML document to a file specified\n        // using the passed string.\n        XmlTextWriter xmltw = new XmlTextWriter(SignedFileName, new UTF8Encoding(false));\n        doc.WriteTo(xmltw);\n        xmltw.Close();\n    }\n    // Verify the signature of an XML file and return the result.\n    public static Boolean VerifyXmlFile(String Name)\n    {\n        // Create a new XML document.\n        XmlDocument xmlDocument = new XmlDocument();\n\n        // Format using white spaces.\n        xmlDocument.PreserveWhitespace = true;\n\n        // Load the passed XML file into the document. \n        xmlDocument.Load(Name);\n\n        // Create a new SignedXml object and pass it\n        // the XML document class.\n        SignedXml signedXml = new SignedXml(xmlDocument);\n\n        // Find the &quot;Signature&quot; node and create a new\n        // XmlNodeList object.\n        XmlNodeList nodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;);\n\n        // Load the signature node.\n        signedXml.LoadXml((XmlElement)nodeList[0]);\n\n        // Check the signature and return the result.\n        return signedXml.CheckSignature();\n\n    }\n\n    // Create the XML that represents the transform.\n    private static XmlDsigXPathTransform CreateXPathTransform(string XPathString)\n    {\n        // Create a new XMLDocument object.\n        XmlDocument doc = new XmlDocument();\n\n        // Create a new XmlElement.\n        XmlElement xPathElem = doc.CreateElement(&quot;XPath&quot;);\n\n        // Set the element text to the value\n        // of the XPath string.\n        xPathElem.InnerText = XPathString;\n\n        // Create a new XmlDsigXPathTransform object.\n        XmlDsigXPathTransform xForm = new XmlDsigXPathTransform();\n\n        // Load the XPath XML from the element. \n        xForm.LoadInnerXml(xPathElem.SelectNodes(&quot;.&quot;));\n\n        // Return the XML that represents the transform.\n        return xForm;\n    }\n\n    // Create example data to sign.\n    public static void CreateSomeXml(string FileName)\n    {\n        // Create a new XmlDocument object.\n        XmlDocument document = new XmlDocument();\n\n        // Create a new XmlNode object.\n        XmlNode node = document.CreateNode(XmlNodeType.Element, &quot;&quot;, &quot;MyXML&quot;, &quot;Don&#39;t_Sign&quot;);\n\n        // Append the node to the document.\n        document.AppendChild(node);\n\n        // Create a new XmlNode object.\n        XmlNode subnode = document.CreateNode(XmlNodeType.Element, &quot;&quot;, &quot;TempElement&quot;, &quot;Sign&quot;);\n\n        // Add some text to the node.\n        subnode.InnerText = &quot;Here is some data to sign.&quot;;\n\n        // Append the node to the document.\n        document.DocumentElement.AppendChild(subnode);\n\n        // Save the XML document to the file name specified.\n        XmlTextWriter xmltw = new XmlTextWriter(FileName, new UTF8Encoding(false));\n        document.WriteTo(xmltw);\n        xmltw.Close();\n    }\n}\n</code></pre><p> <strong>Example #2</strong>  </p>\n<pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.Xml.XmlDsigXPathTransform#2\">Imports System\nImports System.IO\nImports System.Xml\nImports System.Security.Cryptography\nImports System.Security.Cryptography.Xml\n\n\n\nClass Class1\n\n    &lt;STAThread()&gt; _\n    Shared Sub Main(ByVal args() As String)\n        &#39; Encrypt a sample XML string.\n        Dim productsXml As XmlDocument = LoadProducts()\n        ShowTransformProperties(productsXml)\n\n        &#39; Encrypt an XPath Xml string.\n        Dim transformXml As XmlDocument = LoadTransformByXml()\n        ShowTransformProperties(transformXml)\n\n        &#39; Use XmlDsigXPathTransform to resolve a Uri.\n        Dim baseUri As New Uri(&quot;http://www.contoso.com&quot;)\n        Dim relativeUri As String = &quot;xml&quot;\n        Dim absoluteUri As Uri = ResolveUris(baseUri, relativeUri)\n\n        Console.WriteLine(&quot;This sample completed successfully; &quot; + &quot;press Enter to exit.&quot;)\n        Console.ReadLine()\n\n    End Sub &#39;Main\n\n\n    &#39; Encrypt the text in the specified XmlDocument.\n    Private Shared Sub ShowTransformProperties(ByVal xmlDoc As XmlDocument)\n        &#39; Create a new XMLDocument object.\n        Dim doc As New XmlDocument()\n\n        &#39; Create a new XmlElement.\n        Dim xPathElem As XmlElement = doc.CreateElement(&quot;XPath&quot;)\n\n        &#39; Set the element text to the value\n        &#39; of the XPath string.\n        xPathElem.InnerText = &quot;ancestor-or-self::PRODUCTS&quot;\n\n        &#39; Create a new XmlDsigXPathTransform object.\n        Dim xmlTransform As New XmlDsigXPathTransform()\n\n        &#39; Load the XPath XML from the element. \n        xmlTransform.LoadInnerXml(xPathElem.SelectNodes(&quot;.&quot;))\n        &#39; Ensure the transform is using the proper algorithm.\n        xmlTransform.Algorithm = SignedXml.XmlDsigXPathTransformUrl\n        &#39; Retrieve the XML representation of the current transform.\n        Dim xmlInTransform As XmlElement = xmlTransform.GetXml()\n        Console.WriteLine(vbLf + &quot;Xml representation of the current transform: &quot;)\n        Console.WriteLine(xmlInTransform.OuterXml)\n\n        &#39; Retrieve the valid input types for the current transform.\n        Dim validInTypes As Type() = xmlTransform.InputTypes\n        &#39; Verify the xmlTransform can accept the XMLDocument as an\n        &#39; input type.\n        Dim i As Integer\n        For i = 0 To validInTypes.Length\n            If validInTypes(i).Equals(xmlDoc.GetType()) Then\n                &#39; Load the document into the transfrom.\n                xmlTransform.LoadInput(xmlDoc)\n                Try\n                    &#39; This transform is created for demonstration purposes.\n                    Dim secondTransform As New XmlDsigXPathTransform()\n\n                    Dim classDescription As String = secondTransform.ToString()\n                    xmlTransform.LoadInnerXml(xPathElem.SelectNodes(&quot;.&quot;))\n                Catch\n                    Console.WriteLine(&quot;Caught exception while trying to &quot; + &quot;load the specified Xml document. The document &quot; + &quot;requires an XPath element to be valid.&quot;)\n                End Try\n                Exit For\n            End If\n        Next i\n\n        Dim validOutTypes As Type() = xmlTransform.OutputTypes\n        For i = validOutTypes.Length - 1 To 0 Step -1\n            If validOutTypes(i).Equals(GetType(System.Xml.XmlDocument)) Then\n                Try\n                    Dim xmlDocumentType As Type = GetType(System.Xml.XmlDocument)\n                    Dim xmlDocumentOutput As XmlDocument = CType(xmlTransform.GetOutput(xmlDocumentType), XmlDocument)\n                    &#39; Display to the console the Xml before and after\n                    &#39; encryption.\n                    Console.WriteLine(&quot;Result of the GetOutput method call&quot; + &quot; from the current transform: &quot; + xmlDocumentOutput.OuterXml)\n                Catch ex As Exception\n                    Console.WriteLine(&quot;Unexpected exception caught: &quot; + ex.ToString())\n                End Try\n\n                Exit For\n            ElseIf validOutTypes(i).Equals(GetType(System.Xml.XmlNodeList)) Then\n                Try\n                    Dim xmlNodeListType As Type = GetType(System.Xml.XmlNodeList)\n                    Dim xmlNodes As XmlNodeList = CType(xmlTransform.GetOutput(xmlNodeListType), XmlNodeList)\n\n                    &#39; Display to the console the Xml before and after\n                    &#39; encryption.\n                    Console.WriteLine(&quot;Encoding the following message: &quot; + xmlDoc.InnerText)\n\n                    Console.WriteLine(&quot;Nodes of the XmlNodeList retrieved &quot; + &quot;from GetOutput:&quot;)\n                    Dim j As Integer\n                    For j = 0 To xmlNodes.Count\n                        Console.WriteLine(&quot;Node &quot; + j + &quot; has the following name: &quot; + xmlNodes.Item(j).Name + &quot; and the following InnerXml: &quot; + xmlNodes.Item(j).InnerXml)\n                    Next j\n                Catch ex As Exception\n                    Console.WriteLine(&quot;Unexpected exception caught: &quot; + ex.ToString())\n                End Try\n\n                Exit For\n            Else\n                Dim outputObject As Object = xmlTransform.GetOutput()\n            End If \n        Next i\n\n    End Sub &#39;ShowTransformProperties\n\n\n    &#39; Create an XML document for the dsig namespace.\n    Private Shared Function LoadTransformByXml() As XmlDocument\n        Dim xmlDoc As New XmlDocument()\n\n        Dim transformXml As String = &quot;&lt;Signature&gt;&lt;Reference URI=&#39;&#39;&gt;&lt;Transforms&gt;&quot;\n        transformXml += &quot;&lt;Transform&gt;&lt;XPath &quot;\n        transformXml += &quot;xmlns:dsig=&#39;http://www.w3.org/2000/09/xmldsig#&#39;&gt;&quot;\n        transformXml += &quot;not(ancestor-or-self::dsig:Signature)&quot;\n        transformXml += &quot;&lt;/XPath&gt;&lt;/Transform&gt;&quot;\n        transformXml += &quot;&lt;/Transforms&gt;&lt;/Reference&gt;&lt;/Signature&gt;&quot;\n\n        xmlDoc.LoadXml(transformXml)\n        Return xmlDoc\n\n    End Function &#39;LoadTransformByXml\n\n\n    &#39; Create an XML document describing various products.\n    Private Shared Function LoadProducts() As XmlDocument\n        Dim xmlDoc As New XmlDocument()\n\n        Dim contosoProducts As String = &quot;&lt;PRODUCTS&gt;&quot;\n        contosoProducts += &quot;&lt;PRODUCT&gt;&lt;ID&gt;123&lt;/ID&gt;&quot;\n        contosoProducts += &quot;&lt;DESCRIPTION&gt;Router&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&quot;\n        contosoProducts += &quot;&lt;PRODUCT&gt;&lt;ID&gt;456&lt;/ID&gt;&quot;\n        contosoProducts += &quot;&lt;DESCRIPTION&gt;Keyboard&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&quot;\n        contosoProducts += &quot;&lt;PRODUCT&gt;&lt;ID&gt;789&lt;/ID&gt;&quot;\n        contosoProducts += &quot;&lt;DESCRIPTION&gt;Monitor&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&quot;\n        contosoProducts += &quot;&lt;/PRODUCTS&gt;&quot;\n\n        xmlDoc.LoadXml(contosoProducts)\n        Return xmlDoc\n\n    End Function &#39;LoadProducts\n\n\n    &#39; Resolve the specified base and relative Uri&#39;s .\n    Private Shared Function ResolveUris(ByVal baseUri As Uri, ByVal relativeUri As String) As Uri\n        Dim xmlResolver As New XmlUrlResolver()\n        xmlResolver.Credentials = System.Net.CredentialCache.DefaultCredentials\n\n        Dim xmlTransform As New XmlDsigXPathTransform()\n        xmlTransform.Resolver = xmlResolver\n        Dim absoluteUri As Uri = xmlResolver.ResolveUri(baseUri, relativeUri)\n\n        If Not (absoluteUri Is Nothing) Then\n            Console.WriteLine(vbLf + &quot;Resolved the base Uri and relative Uri to the following:&quot;)\n            Console.WriteLine(absoluteUri.ToString())\n        Else\n            Console.WriteLine(&quot;Unable to resolve the base Uri and relative Uri&quot;)\n        End If\n        Return absoluteUri\n\n    End Function\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.Xml.XmlDsigXPathTransform#2\">using System;\nusing System.IO;\nusing System.Xml;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.Xml;\n\nclass Class1\n{\n    [STAThread]\n    static void Main(string[] args)\n    {\n        // Encrypt a sample XML string.\n        XmlDocument productsXml = LoadProducts();\n        ShowTransformProperties(productsXml);\n\n        // Encrypt an XPath Xml string.\n        XmlDocument transformXml = LoadTransformByXml();\n        ShowTransformProperties(transformXml);\n\n        // Use XmlDsigXPathTransform to resolve a Uri.\n        Uri baseUri = new Uri(&quot;http://www.contoso.com&quot;);\n        string relativeUri = &quot;xml&quot;;\n        Uri absoluteUri = ResolveUris(baseUri, relativeUri);\n\n        Console.WriteLine(&quot;This sample completed successfully; &quot; +\n            &quot;press Enter to exit.&quot;);\n        Console.ReadLine();\n    }\n\n    // Encrypt the text in the specified XmlDocument.\n    private static void ShowTransformProperties(XmlDocument xmlDoc)\n    {\n\n        // Create a new XMLDocument object.\n        XmlDocument doc = new XmlDocument();\n\n        // Create a new XmlElement.\n        XmlElement xPathElem = doc.CreateElement(&quot;XPath&quot;);\n\n        // Set the element text to the value\n        // of the XPath string.\n        xPathElem.InnerText = &quot;ancestor-or-self::PRODUCTS&quot;;\n\n        // Create a new XmlDsigXPathTransform object.\n        XmlDsigXPathTransform xmlTransform = new XmlDsigXPathTransform();\n\n        // Load the XPath XML from the element. \n        xmlTransform.LoadInnerXml(xPathElem.SelectNodes(&quot;.&quot;));\n\n        // Ensure the transform is using the proper algorithm.\n        xmlTransform.Algorithm =\n            SignedXml.XmlDsigXPathTransformUrl;\n\n        // Retrieve the XML representation of the current transform.\n        XmlElement xmlInTransform = xmlTransform.GetXml();\n\n        Console.WriteLine(&quot;\\nXml representation of the current transform: &quot;);\n        Console.WriteLine(xmlInTransform.OuterXml);\n\n        // Retrieve the valid input types for the current transform.\n        Type[] validInTypes = xmlTransform.InputTypes;\n\n        // Verify the xmlTransform can accept the XMLDocument as an\n        // input type.\n        for (int i = 0; i &lt; validInTypes.Length; i++)\n        {\n            if (validInTypes[i] == xmlDoc.GetType())\n            {\n                // Load the document into the transfrom.\n                xmlTransform.LoadInput(xmlDoc);\n\n                try\n                {\n                    // This transform is created for demonstration purposes.\n                    XmlDsigXPathTransform secondTransform =\n                        new XmlDsigXPathTransform();\n\n                    string classDescription = secondTransform.ToString();\n\n                    xmlTransform.LoadInnerXml(xPathElem.SelectNodes(&quot;.&quot;)); ;\n                }\n                catch (CryptographicException)\n                {\n                    Console.WriteLine(&quot;Caught exception while trying to &quot; +\n                        &quot;load the specified Xml document. The document &quot; +\n                        &quot;requires an XPath element to be valid.&quot;);\n                }\n                break;\n            }\n        }\n\n        Type[] validOutTypes = xmlTransform.OutputTypes;\n\n        for (int i = validOutTypes.Length - 1; i &gt;= 0; i--)\n        {\n            if (validOutTypes[i] == typeof(System.Xml.XmlDocument))\n            {\n                try\n                {\n                    Type xmlDocumentType = typeof(System.Xml.XmlDocument);\n                    XmlDocument xmlDocumentOutput = (XmlDocument)\n                        xmlTransform.GetOutput(xmlDocumentType);\n\n                    // Display to the console the Xml before and after\n                    // encryption.\n                    Console.WriteLine(&quot;Result of the GetOutput method call&quot; +\n                        &quot; from the current transform: &quot; +\n                        xmlDocumentOutput.OuterXml);\n                }\n                catch (Exception ex)\n                {\n                    Console.WriteLine(&quot;Unexpected exception caught: &quot; +\n                        ex.ToString());\n                }\n\n                break;\n            }\n            else if (validOutTypes[i] == typeof(System.Xml.XmlNodeList))\n            {\n                try\n                {\n                    Type xmlNodeListType = typeof(System.Xml.XmlNodeList);\n                    XmlNodeList xmlNodes = (XmlNodeList)\n                        xmlTransform.GetOutput(xmlNodeListType);\n\n                    // Display to the console the Xml before and after\n                    // encryption.\n                    Console.WriteLine(&quot;Encoding the following message: &quot; +\n                        xmlDoc.InnerText);\n\n                    Console.WriteLine(&quot;Nodes of the XmlNodeList retrieved &quot; +\n                        &quot;from GetOutput:&quot;);\n                    for (int j = 0; j &lt; xmlNodes.Count; j++)\n                    {\n                        Console.WriteLine(&quot;Node &quot; + j +\n                            &quot; has the following name: &quot; +\n                            xmlNodes.Item(j).Name +\n                            &quot; and the following InnerXml: &quot; +\n                            xmlNodes.Item(j).InnerXml);\n                    }\n                }\n                catch (Exception ex)\n                {\n                    Console.WriteLine(&quot;Unexpected exception caught: &quot; +\n                        ex.ToString());\n                }\n\n                break;\n            }\n            else\n            {\n                object outputObject = xmlTransform.GetOutput();\n            }\n        }\n    }\n\n    // Create an XML document for the dsig namespace.\n    private static XmlDocument LoadTransformByXml()\n    {\n        XmlDocument xmlDoc = new XmlDocument();\n\n        string transformXml = &quot;&lt;Signature&gt;&lt;Reference URI=&#39;&#39;&gt;&lt;Transforms&gt;&quot;;\n        transformXml += &quot;&lt;Transform&gt;&lt;XPath &quot;;\n        transformXml += &quot;xmlns:dsig=&#39;http://www.w3.org/2000/09/xmldsig#&#39;&gt;&quot;;\n        transformXml += &quot;not(ancestor-or-self::dsig:Signature)&quot;;\n        transformXml += &quot;&lt;/XPath&gt;&lt;/Transform&gt;&quot;;\n        transformXml += &quot;&lt;/Transforms&gt;&lt;/Reference&gt;&lt;/Signature&gt;&quot;;\n\n        xmlDoc.LoadXml(transformXml);\n        return xmlDoc;\n    }\n\n    // Create an XML document describing various products.\n    private static XmlDocument LoadProducts()\n    {\n        XmlDocument xmlDoc = new XmlDocument();\n\n        string contosoProducts = &quot;&lt;PRODUCTS&gt;&quot;;\n        contosoProducts += &quot;&lt;PRODUCT&gt;&lt;ID&gt;123&lt;/ID&gt;&quot;;\n        contosoProducts += &quot;&lt;DESCRIPTION&gt;Router&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&quot;;\n        contosoProducts += &quot;&lt;PRODUCT&gt;&lt;ID&gt;456&lt;/ID&gt;&quot;;\n        contosoProducts += &quot;&lt;DESCRIPTION&gt;Keyboard&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&quot;;\n        contosoProducts += &quot;&lt;PRODUCT&gt;&lt;ID&gt;789&lt;/ID&gt;&quot;;\n        contosoProducts += &quot;&lt;DESCRIPTION&gt;Monitor&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&quot;;\n        contosoProducts += &quot;&lt;/PRODUCTS&gt;&quot;;\n\n        xmlDoc.LoadXml(contosoProducts);\n        return xmlDoc;\n    }\n\n    // Resolve the specified base and relative Uri&#39;s .\n    private static Uri ResolveUris(Uri baseUri, string relativeUri)\n    {\n        XmlUrlResolver xmlResolver = new XmlUrlResolver();\n        xmlResolver.Credentials =\n            System.Net.CredentialCache.DefaultCredentials;\n\n        XmlDsigXPathTransform xmlTransform =\n            new XmlDsigXPathTransform();\n        xmlTransform.Resolver = xmlResolver;\n\n        Uri absoluteUri = xmlResolver.ResolveUri(baseUri, relativeUri);\n\n        if (absoluteUri != null)\n        {\n            Console.WriteLine(\n                &quot;\\nResolved the base Uri and relative Uri to the following:&quot;);\n            Console.WriteLine(absoluteUri.ToString());\n        }\n        else\n        {\n            Console.WriteLine(\n                &quot;Unable to resolve the base Uri and relative Uri&quot;);\n        }\n        return absoluteUri;\n    }\n}\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The XmlDsigXPathTransform class allows you to address an XML document using the XPath language.  This class uses an XPath expression to select the XML nodes you want to sign or encrypt while removing all others from either cryptographic operation.  </p>\n<p> Use the XmlDsigXPathTransform class to sign or encrypt specific parts of an XML document using an XPath expression.  For information on initializing the XmlDsigXPathTransform class to the value of an XPath transform string, see the <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxpathtransform#System_Security_Cryptography_Xml_XmlDsigXPathTransform_LoadInnerXml_\" data-linktype=\"relative-path\">LoadInnerXml</a> method.  </p>\n<p> The Uniform Resource Identifier (URI) that describes the XmlDsigXPathTransform class is defined by the <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml#System_Security_Cryptography_Xml_SignedXml_XmlDsigXPathTransformUrl\" data-linktype=\"relative-path\">XmlDsigXPathTransformUrl</a> field.  </p>\n<p> For more information about the XPath transform, see Section 6.6.3 of the XMLDSIG specification, which is available from the W3C at www.w3.org/TR/xmldsig-core/.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_Xml_XmlDsigXPathTransform__ctor\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">XmlDsigXPathTransform()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxpathtransform\" data-linktype=\"relative-path\">XmlDsigXPathTransform</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public XmlDsigXPathTransform ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_Xml_XmlDsigXPathTransform_InputTypes\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">InputTypes</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets an array of types that are valid inputs to the <span class=\"xref\">stem.Security.Cryptography.Xml.XmlDsigXPathTransform.LoadInput*</span> method of the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxpathtransform\" data-linktype=\"relative-path\">XmlDsigXPathTransform</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override Type[] InputTypes { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An array of valid input types for the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxpathtransform\" data-linktype=\"relative-path\">XmlDsigXPathTransform</a> object; you can pass only objects of one of these types to the <span class=\"xref\">stem.Security.Cryptography.Xml.XmlDsigXPathTransform.LoadInput*</span> method of the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxpathtransform\" data-linktype=\"relative-path\">XmlDsigXPathTransform</a> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The valid input types to <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxpathtransform\" data-linktype=\"relative-path\">XmlDsigXPathTransform</a> are <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>, <a class=\"xref\" href=\"system.xml.xmldocument\" data-linktype=\"relative-path\">XmlDocument</a>, and <a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_Xml_XmlDsigXPathTransform_OutputTypes\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OutputTypes</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets an array of types that are possible outputs from the <span class=\"xref\">stem.Security.Cryptography.Xml.XmlDsigXPathTransform.GetOutput*</span> methods of the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxpathtransform\" data-linktype=\"relative-path\">XmlDsigXPathTransform</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override Type[] OutputTypes { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An array of valid output types for the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxpathtransform\" data-linktype=\"relative-path\">XmlDsigXPathTransform</a> object; the <span class=\"xref\">stem.Security.Cryptography.Xml.XmlDsigXPathTransform.GetOutput*</span> methods of the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxpathtransform\" data-linktype=\"relative-path\">XmlDsigXPathTransform</a> object return only objects of one of these types.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a> is the only valid output type for <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxpathtransform\" data-linktype=\"relative-path\">XmlDsigXPathTransform</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_Xml_XmlDsigXPathTransform_GetInnerXml\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetInnerXml()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns an XML representation of the parameters of a <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxpathtransform\" data-linktype=\"relative-path\">XmlDsigXPathTransform</a> object that are suitable to be included as subelements of an XMLDSIG <code>&lt;Transform&gt;</code> element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected override System.Xml.XmlNodeList GetInnerXml ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A list of the XML nodes that represent the transform-specific content needed to describe the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxpathtransform\" data-linktype=\"relative-path\">XmlDsigXPathTransform</a> object in an XMLDSIG <code>&lt;Transform&gt;</code> element.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_Xml_XmlDsigXPathTransform_GetOutput\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetOutput()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns the output of the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxpathtransform\" data-linktype=\"relative-path\">XmlDsigXPathTransform</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override object GetOutput ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The output of the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxpathtransform\" data-linktype=\"relative-path\">XmlDsigXPathTransform</a> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The type of the returned object must be <a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a>.  </p>\n<p> Use the GetOutput method to retrieve a <a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a> object that contains an XML representation of an XPath transform.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_Xml_XmlDsigXPathTransform_GetOutput_System_Type_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetOutput(Type)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns the output of the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxpathtransform\" data-linktype=\"relative-path\">XmlDsigXPathTransform</a> object of type <a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override object GetOutput (Type type);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>type</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The type of the output to return. <a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a> is the only valid type for this parameter.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The output of the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxpathtransform\" data-linktype=\"relative-path\">XmlDsigXPathTransform</a> object of type <a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <code>type</code> parameter is not an <a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a> object.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The type of the returned object must be <a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a>.  </p>\n<p> Use the GetOutput method to retrieve a <a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a> object that contains an XML representation of an XPath transform.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_Xml_XmlDsigXPathTransform_LoadInnerXml_System_Xml_XmlNodeList_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LoadInnerXml(XmlNodeList)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Parses the specified <a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a> object as transform-specific content of a <code>&lt;Transform&gt;</code> element and configures the internal state of the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxpathtransform\" data-linktype=\"relative-path\">XmlDsigXPathTransform</a> object to match the <code>&lt;Transform&gt;</code> element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override void LoadInnerXml (System.Xml.XmlNodeList nodeList);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>nodeList</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a> object to load into the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxpathtransform\" data-linktype=\"relative-path\">XmlDsigXPathTransform</a> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <code>nodeList</code> parameter is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>nodeList</code> parameter does not contain an <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxpathtransform\" data-linktype=\"relative-path\">XmlDsigXPathTransform</a> element.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Use the LoadInnerXml method to initialize the <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxpathtransform\" data-linktype=\"relative-path\">XmlDsigXPathTransform</a> class with an XPath transform.  </p>\n<p> To initialize the <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxpathtransform\" data-linktype=\"relative-path\">XmlDsigXPathTransform</a> class with an XPath transform, complete the following steps.  </p>\n<ol>\n<li><p>Create a new <a class=\"xref\" href=\"system.xml.xmlelement\" data-linktype=\"relative-path\">XmlElement</a> class and set the <a class=\"xref\" href=\"system.xml.xmlelement#System_Xml_XmlElement_InnerText_\" data-linktype=\"relative-path\">InnerText</a> property to the value of an XPath transform string.  </p>\n</li>\n<li><p>Call the <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_SelectNodes_\" data-linktype=\"relative-path\">SelectNodes</a> method to create an <a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a> object that represents the transform.  </p>\n</li>\n<li><p>Create a new instance of the <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxpathtransform\" data-linktype=\"relative-path\">XmlDsigXPathTransform</a> class and pass the previously created <a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a> object to the LoadInnerXml method.</p>\n</li>\n</ol>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_Xml_XmlDsigXPathTransform_LoadInput_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LoadInput(Object)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Loads the specified input into the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxpathtransform\" data-linktype=\"relative-path\">XmlDsigXPathTransform</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override void LoadInput (object obj);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>obj</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The input to load into the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxpathtransform\" data-linktype=\"relative-path\">XmlDsigXPathTransform</a> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Use the LoadInput method to initialize an <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxpathtransform\" data-linktype=\"relative-path\">XmlDsigXPathTransform</a> object to the value of an XPath transform using an <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>, <a class=\"xref\" href=\"system.xml.xmldocument\" data-linktype=\"relative-path\">XmlDocument</a>, or <a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a> object.  For information about initializing an <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxpathtransform\" data-linktype=\"relative-path\">XmlDsigXPathTransform</a> object using an XPath transform string, see the <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxpathtransform#System_Security_Cryptography_Xml_XmlDsigXPathTransform_LoadInnerXml_\" data-linktype=\"relative-path\">LoadInnerXml</a> method.  </p>\n<p> The type of the input object must be one of the types in the <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxpathtransform#System_Security_Cryptography_Xml_XmlDsigXPathTransform_InputTypes_\" data-linktype=\"relative-path\">InputTypes</a> property.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Security.Cryptography.Xml.XmlDsigXPathTransform.yml\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.XmlDsigXPathTransform\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.XmlDsigXPathTransform..ctor\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.XmlDsigXPathTransform.GetInnerXml\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.XmlDsigXPathTransform.GetOutput\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.XmlDsigXPathTransform.InputTypes\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.XmlDsigXPathTransform.LoadInnerXml\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.XmlDsigXPathTransform.LoadInput\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.XmlDsigXPathTransform.OutputTypes\">\r\n<meta name=\"APILocation\" content=\"System.Security.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-28 03:03 AM\">\r\n<meta name=\"document_id\" content=\"efa415e4-49b1-6dc1-50d4-141aa56ddb26\">\r\n<meta name=\"internalonly\" content=\"false\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the XPath transform for a digital signature as defined by the W3C.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.security.cryptography.xml/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Security.Cryptography.Xml.XmlDsigXPathTransform\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Security.Cryptography.Xml.XmlDsigXPathTransform.yml","open_to_public_contributors":false,"api_name":["System.Security.Cryptography.Xml.XmlDsigXPathTransform","System.Security.Cryptography.Xml.XmlDsigXPathTransform..ctor","System.Security.Cryptography.Xml.XmlDsigXPathTransform.GetInnerXml","System.Security.Cryptography.Xml.XmlDsigXPathTransform.GetOutput","System.Security.Cryptography.Xml.XmlDsigXPathTransform.InputTypes","System.Security.Cryptography.Xml.XmlDsigXPathTransform.LoadInnerXml","System.Security.Cryptography.Xml.XmlDsigXPathTransform.LoadInput","System.Security.Cryptography.Xml.XmlDsigXPathTransform.OutputTypes"],"api_location":["System.Security.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Security.Cryptography.Xml.XmlDsigXPathTransform","System::Security::Cryptography::Xml::XmlDsigXPathTransform","System.Security.Cryptography.Xml.XmlDsigXPathTransform.#ctor","System::Security::Cryptography::Xml::XmlDsigXPathTransform::#ctor","System.Security.Cryptography.Xml.XmlDsigXPathTransform.GetInnerXml","System::Security::Cryptography::Xml::XmlDsigXPathTransform::GetInnerXml","System.Security.Cryptography.Xml.XmlDsigXPathTransform.GetOutput","System::Security::Cryptography::Xml::XmlDsigXPathTransform::GetOutput","System.Security.Cryptography.Xml.XmlDsigXPathTransform.InputTypes","System::Security::Cryptography::Xml::XmlDsigXPathTransform::InputTypes","System.Security.Cryptography.Xml.XmlDsigXPathTransform.LoadInnerXml","System::Security::Cryptography::Xml::XmlDsigXPathTransform::LoadInnerXml","System.Security.Cryptography.Xml.XmlDsigXPathTransform.LoadInput","System::Security::Cryptography::Xml::XmlDsigXPathTransform::LoadInput","System.Security.Cryptography.Xml.XmlDsigXPathTransform.OutputTypes","System::Security::Cryptography::Xml::XmlDsigXPathTransform::OutputTypes"],"dev_langs":["csharp"],"updated_at":"2017-03-28 03:03 AM","document_id":"efa415e4-49b1-6dc1-50d4-141aa56ddb26","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.Xml/XmlDsigXPathTransform.xml","internalonly":false,"layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"XmlDsigXPathTransform class | Microsoft Docs","_op_ogTitle":"XmlDsigXPathTransform class","description":"Represents the XPath transform for a digital signature as defined by the W3C.\n","toc_asset_id":"api/_splitted/System.Security.Cryptography.Xml/toc.json","toc_rel":"_splitted/System.Security.Cryptography.Xml/toc.json","source_url":"","ms.assetid":"System.Security.Cryptography.Xml.XmlDsigXPathTransform","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.xml.xmldsigxpathtransform","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.xml.xmldsigxpathtransform","fileRelativePath":"api/System.Security.Cryptography.Xml.XmlDsigXPathTransform.html"},"themesRelativePathToOutputRoot":"_themes/"}