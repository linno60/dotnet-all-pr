{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">CheckForUpdateCompletedEventArgs</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents detailed update information obtained through a call to <span class=\"xref\">stem.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync*</span>.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public class CheckForUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs\" data-linktype=\"relative-path\">AsyncCompletedEventArgs</a></span></div><span class=\"lang-csharp\">CheckForUpdateCompletedEventArgs</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs#System_ComponentModel_AsyncCompletedEventArgs_Cancelled\" data-linktype=\"relative-path\">Cancelled</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs#System_ComponentModel_AsyncCompletedEventArgs_Error\" data-linktype=\"relative-path\">Error</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs#System_ComponentModel_AsyncCompletedEventArgs_RaiseExceptionIfNecessary\" data-linktype=\"relative-path\">RaiseExceptionIfNecessary()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs#System_ComponentModel_AsyncCompletedEventArgs_UserState\" data-linktype=\"relative-path\">UserState</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs#System_EventArgs_Empty\" data-linktype=\"relative-path\">Empty</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example uses <a class=\"xref\" href=\"system.deployment.application.checkforupdatecompletedeventargs#System_Deployment_Application_CheckForUpdateCompletedEventArgs_UpdateAvailable_\" data-linktype=\"relative-path\">UpdateAvailable</a> to determine if there is a new application update, and <a class=\"xref\" href=\"system.deployment.application.checkforupdatecompletedeventargs#System_Deployment_Application_CheckForUpdateCompletedEventArgs_IsUpdateRequired_\" data-linktype=\"relative-path\">IsUpdateRequired</a> to determine whether to ask the user to install the update.  </p>\n<pre><code class=\"lang-cs\" name=\"ClickOnceAPI#1\">long sizeOfUpdate = 0;\n\nprivate void UpdateApplication()\n{\n    if (ApplicationDeployment.IsNetworkDeployed)\n    {\n        ApplicationDeployment ad = ApplicationDeployment.CurrentDeployment;\n        ad.CheckForUpdateCompleted += new CheckForUpdateCompletedEventHandler(ad_CheckForUpdateCompleted);\n        ad.CheckForUpdateProgressChanged += new DeploymentProgressChangedEventHandler(ad_CheckForUpdateProgressChanged);\n\n        ad.CheckForUpdateAsync();\n    }\n}\n\nvoid  ad_CheckForUpdateProgressChanged(object sender, DeploymentProgressChangedEventArgs e)\n{\n    downloadStatus.Text = String.Format(&quot;Downloading: {0}. {1:D}K of {2:D}K downloaded.&quot;, GetProgressString(e.State), e.BytesCompleted/1024, e.BytesTotal/1024);   \n}\n\nstring GetProgressString(DeploymentProgressState state)\n{\n    if (state == DeploymentProgressState.DownloadingApplicationFiles)\n    {\n        return &quot;application files&quot;;\n    } \n    else if (state == DeploymentProgressState.DownloadingApplicationInformation) \n    {\n        return &quot;application manifest&quot;;\n    } \n    else \n    {\n        return &quot;deployment manifest&quot;;\n    }\n}\n\nvoid ad_CheckForUpdateCompleted(object sender, CheckForUpdateCompletedEventArgs e)\n{\n    if (e.Error != null)\n    {\n        MessageBox.Show(&quot;ERROR: Could not retrieve new version of the application. Reason: \\n&quot; + e.Error.Message + &quot;\\nPlease report this error to the system administrator.&quot;);\n        return;\n    }\n    else if (e.Cancelled == true)\n    {\n        MessageBox.Show(&quot;The update was cancelled.&quot;);\n    }\n\n    // Ask the user if they would like to update the application now.\n    if (e.UpdateAvailable)\n    {\n        sizeOfUpdate = e.UpdateSizeBytes;\n\n        if (!e.IsUpdateRequired)\n        {\n            DialogResult dr = MessageBox.Show(&quot;An update is available. Would you like to update the application now?\\n\\nEstimated Download Time: &quot;, &quot;Update Available&quot;, MessageBoxButtons.OKCancel);\n            if (DialogResult.OK == dr)\n            {\n                BeginUpdate();\n            }\n        }\n        else\n        {\n            MessageBox.Show(&quot;A mandatory update is available for your application. We will install the update now, after which we will save all of your in-progress data and restart your application.&quot;);\n            BeginUpdate();\n        }\n    }\n}\n\nprivate void BeginUpdate()\n{\n    ApplicationDeployment ad = ApplicationDeployment.CurrentDeployment;\n    ad.UpdateCompleted += new AsyncCompletedEventHandler(ad_UpdateCompleted);\n\n    // Indicate progress in the application&#39;s status bar.\n    ad.UpdateProgressChanged += new DeploymentProgressChangedEventHandler(ad_UpdateProgressChanged);\n    ad.UpdateAsync();\n}\n\nvoid ad_UpdateProgressChanged(object sender, DeploymentProgressChangedEventArgs e)\n{\n    String progressText = String.Format(&quot;{0:D}K out of {1:D}K downloaded - {2:D}% complete&quot;, e.BytesCompleted / 1024, e.BytesTotal / 1024, e.ProgressPercentage);\n    downloadStatus.Text = progressText;\n}\n\nvoid ad_UpdateCompleted(object sender, AsyncCompletedEventArgs e)\n{\n    if (e.Cancelled)\n    {\n        MessageBox.Show(&quot;The update of the application&#39;s latest version was cancelled.&quot;);\n        return;\n    }\n    else if (e.Error != null)\n    {\n        MessageBox.Show(&quot;ERROR: Could not install the latest version of the application. Reason: \\n&quot; + e.Error.Message + &quot;\\nPlease report this error to the system administrator.&quot;);\n        return;\n    }\n\n    DialogResult dr = MessageBox.Show(&quot;The application has been updated. Restart? (If you do not restart now, the new version will not take effect until after you quit and launch the application again.)&quot;, &quot;Restart Application&quot;, MessageBoxButtons.OKCancel);\n    if (DialogResult.OK == dr)\n    {\n        Application.Restart();\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"ClickOnceAPI#1\">private:\n    long sizeOfUpdate;\n\n\nprivate:\n    void Form1_Load(Object^ sender, System::EventArgs^ e)\n    {\n        DoUpdate();\n    }\n\npublic:\n    void DoUpdate()\n    {\n        if (ApplicationDeployment::IsNetworkDeployed)\n        {\n            ApplicationDeployment^ currentAppDeployment =\n                ApplicationDeployment::CurrentDeployment;\n            currentAppDeployment-&gt;CheckForUpdateCompleted +=\n                gcnew CheckForUpdateCompletedEventHandler(\n                this, &amp;Form1::currentDeploy_CheckForUpdateCompleted);\n            currentAppDeployment-&gt;CheckForUpdateAsync();\n        }\n    }\n\n    // If update is available, fetch it.\n    void currentDeploy_CheckForUpdateCompleted(Object^ sender,\n        CheckForUpdateCompletedEventArgs^ e)\n    {\n        if (nullptr != e-&gt;Error)\n        {\n            // Log error.\n            return;\n        }\n\n        if (e-&gt;UpdateAvailable)\n        {\n            sizeOfUpdate = (long) e-&gt;UpdateSizeBytes;\n            if (!e-&gt;IsUpdateRequired)\n            {\n                System::Windows::Forms::DialogResult \n                    updateDialogueResult = MessageBox::Show(\n                    &quot;An update is available.Would you like to update the&quot; +\n                    &quot; application now?&quot;, &quot;Update Available&quot;,\n                    MessageBoxButtons::OKCancel);\n                if (System::Windows::Forms::DialogResult::OK == \n                    updateDialogueResult)\n                {\n                    BeginUpdate();\n                }\n            }\n            else\n            {\n                BeginUpdate();\n            }\n        }\n    }\n\n    void BeginUpdate()\n    {\n        ApplicationDeployment^ ad = ApplicationDeployment::CurrentDeployment;\n        ad-&gt;UpdateCompleted +=\n            gcnew AsyncCompletedEventHandler(\n            this, &amp;Form1::CurrentDeployment_UpdateCompleted);\n\n        // Indicate progress in the application&#39;s status bar.\n        ad-&gt;UpdateProgressChanged +=\n            gcnew DeploymentProgressChangedEventHandler(this, \n            &amp;Form1::ad_ProgressChanged);\n\n        ad-&gt;UpdateAsync();\n    }\n\n    void CurrentDeployment_UpdateCompleted(Object^ sender,\n        AsyncCompletedEventArgs^ e)\n    {\n        if (!e-&gt;Cancelled)\n        {\n            if (nullptr != e-&gt;Error)\n            {\n                System::Windows::Forms::DialogResult \n                    restartDialogueResult = MessageBox::Show(\n                    &quot;The application has been updated. Restart?&quot;,\n                    &quot;Restart Application&quot;,\n                    MessageBoxButtons::OKCancel);\n                if (System::Windows::Forms::DialogResult::OK == \n                    restartDialogueResult)\n                {\n                    Application::Restart();\n                }\n            }\n            else\n            {\n                // Replace with your own error reporting or logging.\n                MessageBox::Show(\n                    &quot;The application encountered an error in downloading&quot; +\n                    &quot; the latest update. Error: {0}&quot;,\n                    e-&gt;Error-&gt;Message);\n            }\n        }\n        else\n        {\n            // Replace with your own error reporting or logging.\n            MessageBox::Show(&quot;The update of the application&#39;s latest&quot; +\n                &quot; version was cancelled.&quot;);\n        }\n    }\n\n    void ad_ProgressChanged(Object^ sender,\n        DeploymentProgressChangedEventArgs^ e)\n    {\n        String^ progressText =\n            String::Format(\n            &quot;{0:D}K out of {1:D}K downloaded - {2:D}% complete&quot;,\n            e-&gt;BytesCompleted / 1024, e-&gt;BytesTotal / 1024,\n            e-&gt;ProgressPercentage);\n        statusStrip1-&gt;Text = progressText;\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"ClickOnceAPI#1\">Private sizeOfUpdate As Long = 0\n\nDim WithEvents ADUpdateAsync As ApplicationDeployment\n\nPrivate Sub UpdateApplication()\n    If (ApplicationDeployment.IsNetworkDeployed) Then\n        ADUpdateAsync = ApplicationDeployment.CurrentDeployment\n\n        ADUpdateAsync.CheckForUpdateAsync()\n    End If\nEnd Sub\n\nPrivate Sub ADUpdateAsync_CheckForUpdateProgressChanged(ByVal sender As Object, ByVal e As DeploymentProgressChangedEventArgs) Handles ADUpdateAsync.CheckForUpdateProgressChanged\n    DownloadStatus.Text = [String].Format(&quot;{0:D}K of {1:D}K downloaded.&quot;, e.BytesCompleted / 1024, e.BytesTotal / 1024)\nEnd Sub\n\n\nPrivate Sub ADUpdateAsync_CheckForUpdateCompleted(ByVal sender As Object, ByVal e As CheckForUpdateCompletedEventArgs) Handles ADUpdateAsync.CheckForUpdateCompleted\n    If (e.Error IsNot Nothing) Then\n        MessageBox.Show((&quot;ERROR: Could not retrieve new version of the application. Reason: &quot; + ControlChars.Lf + e.Error.Message + ControlChars.Lf + &quot;Please report this error to the system administrator.&quot;))\n        Return\n    Else\n        If (e.Cancelled = True) Then\n            MessageBox.Show(&quot;The update was cancelled.&quot;)\n        End If\n    End If\n\n    &#39; Ask the user if they would like to update the application now.\n    If (e.UpdateAvailable) Then\n        sizeOfUpdate = e.UpdateSizeBytes\n\n        If (Not e.IsUpdateRequired) Then\n            Dim dr As DialogResult = MessageBox.Show(&quot;An update is available. Would you like to update the application now?&quot;, &quot;Update Available&quot;, MessageBoxButtons.OKCancel)\n            If (System.Windows.Forms.DialogResult.OK = dr) Then\n                BeginUpdate()\n            End If\n        Else\n            MessageBox.Show(&quot;A mandatory update is available for your application. We will install the update now, after which we will save all of your in-progress data and restart your application.&quot;)\n            BeginUpdate()\n        End If\n    End If\nEnd Sub\n\nPrivate Sub BeginUpdate()\n    ADUpdateAsync = ApplicationDeployment.CurrentDeployment\n    ADUpdateAsync.UpdateAsync()\nEnd Sub\n\n\nPrivate Sub ADUpdateAsync_UpdateProgressChanged(ByVal sender As Object, ByVal e As DeploymentProgressChangedEventArgs) Handles ADUpdateAsync.UpdateProgressChanged\n    Dim progressText As String = String.Format(&quot;{0:D}K out of {1:D}K downloaded - {2:D}% complete&quot;, e.BytesCompleted / 1024, e.BytesTotal / 1024, e.ProgressPercentage)\n    DownloadStatus.Text = progressText\nEnd Sub\n\n\nPrivate Sub ADUpdateAsync_UpdateCompleted(ByVal sender As Object, ByVal e As AsyncCompletedEventArgs) Handles ADUpdateAsync.UpdateCompleted\n    If (e.Cancelled) Then\n        MessageBox.Show(&quot;The update of the application&#39;s latest version was cancelled.&quot;)\n        Exit Sub\n    Else\n        If (e.Error IsNot Nothing) Then\n            MessageBox.Show(&quot;ERROR: Could not install the latest version of the application. Reason: &quot; + ControlChars.Lf + e.Error.Message + ControlChars.Lf + &quot;Please report this error to the system administrator.&quot;)\n            Exit Sub\n        End If\n    End If\n\n    Dim dr As DialogResult = MessageBox.Show(&quot;The application has been updated. Restart? (If you do not restart now, the new version will not take effect until after you quit and launch the application again.)&quot;, &quot;Restart Application&quot;, MessageBoxButtons.OKCancel)\n    If (dr = System.Windows.Forms.DialogResult.OK) Then\n        Application.Restart()\n    End If\nEnd Sub\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>With CheckForUpdateCompletedEventArgs, you can decide whether to upgrade your ClickOnce application based on information about the newest version. <a class=\"xref\" href=\"system.deployment.application.checkforupdatecompletedeventargs#System_Deployment_Application_CheckForUpdateCompletedEventArgs_UpdateAvailable_\" data-linktype=\"relative-path\">UpdateAvailable</a> will return a Boolean value indicating whether there is a new update at all. The <a class=\"xref\" href=\"system.deployment.application.checkforupdatecompletedeventargs#System_Deployment_Application_CheckForUpdateCompletedEventArgs_AvailableVersion_\" data-linktype=\"relative-path\">AvailableVersion</a> property provides the version number of the new version, while <a class=\"xref\" href=\"system.deployment.application.checkforupdatecompletedeventargs#System_Deployment_Application_CheckForUpdateCompletedEventArgs_MinimumRequiredVersion_\" data-linktype=\"relative-path\">MinimumRequiredVersion</a> provides the earliest version that the user should have installed on the computer. <a class=\"xref\" href=\"system.deployment.application.checkforupdatecompletedeventargs#System_Deployment_Application_CheckForUpdateCompletedEventArgs_IsUpdateRequired_\" data-linktype=\"relative-path\">IsUpdateRequired</a> expresses whether the latest available update is required of the user. Finally, <a class=\"xref\" href=\"system.deployment.application.checkforupdatecompletedeventargs#System_Deployment_Application_CheckForUpdateCompletedEventArgs_UpdateSizeBytes_\" data-linktype=\"relative-path\">UpdateSizeBytes</a> expresses the total size of the update.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Deployment_Application_CheckForUpdateCompletedEventArgs_AvailableVersion_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Deployment_Application_CheckForUpdateCompletedEventArgs_AvailableVersion\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">AvailableVersion</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the version number of the latest uninstalled version.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public Version AvailableVersion { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> expressing the major, minor, build and revision numbers of the latest version.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>You can use AvailableVersion to decide whether to install the update based on the severity of the update. For example, if only the <a class=\"xref\" href=\"system.version#System_Version_Build_\" data-linktype=\"relative-path\">Build</a> or <a class=\"xref\" href=\"system.version#System_Version_Revision_\" data-linktype=\"relative-path\">Revision</a> version properties have changed, your application may not need to update until either the <a class=\"xref\" href=\"system.version#System_Version_Minor_\" data-linktype=\"relative-path\">Minor</a> or <a class=\"xref\" href=\"system.version#System_Version_Major_\" data-linktype=\"relative-path\">Major</a> properties change.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Deployment_Application_CheckForUpdateCompletedEventArgs_IsUpdateRequired_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Deployment_Application_CheckForUpdateCompletedEventArgs_IsUpdateRequired\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsUpdateRequired</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value indicating whether the update must be installed.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsUpdateRequired { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the update is required; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>When you deploy an update to your ClickOnce application, you can mark it as a required update, signaling to your application that it should upgrade immediately. You want mark the update if the latest version contains a critical update, or if it is incompatible with file formats or back-end data sources used by the former version.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Deployment_Application_CheckForUpdateCompletedEventArgs_MinimumRequiredVersion_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Deployment_Application_CheckForUpdateCompletedEventArgs_MinimumRequiredVersion\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">MinimumRequiredVersion</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the minimum version that the user must have installed on the computer.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public Version MinimumRequiredVersion { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object expressing the earliest version that all users must install.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Applications can miss required updates when a user takes on a special assignment or is away from the computer for weeks or months. Use  </p>\n<p> MinimumRequiredVersion to determine if the user has not upgraded the application in a while, and has missed one or more required updates.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Deployment_Application_CheckForUpdateCompletedEventArgs_UpdateAvailable_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Deployment_Application_CheckForUpdateCompletedEventArgs_UpdateAvailable\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">UpdateAvailable</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets whether an uninstalled update is available.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool UpdateAvailable { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if new version of the application is available; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Deployment_Application_CheckForUpdateCompletedEventArgs_UpdateSizeBytes_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Deployment_Application_CheckForUpdateCompletedEventArgs_UpdateSizeBytes\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">UpdateSizeBytes</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the size of the available update.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public long UpdateSizeBytes { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> describing the size, in bytes, of the available update. If no update is available, returns 0.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"uhfHeaderId\" content=\"MSDocsHeader-DotNet\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Deployment.Application.CheckForUpdateCompletedEventArgs.yml\">\r\n<meta name=\"APIName\" content=\"System.Deployment.Application.CheckForUpdateCompletedEventArgs\">\r\n<meta name=\"APIName\" content=\"System.Deployment.Application.CheckForUpdateCompletedEventArgs.AvailableVersion\">\r\n<meta name=\"APIName\" content=\"System.Deployment.Application.CheckForUpdateCompletedEventArgs.IsUpdateRequired\">\r\n<meta name=\"APIName\" content=\"System.Deployment.Application.CheckForUpdateCompletedEventArgs.MinimumRequiredVersion\">\r\n<meta name=\"APIName\" content=\"System.Deployment.Application.CheckForUpdateCompletedEventArgs.UpdateAvailable\">\r\n<meta name=\"APIName\" content=\"System.Deployment.Application.CheckForUpdateCompletedEventArgs.UpdateSizeBytes\">\r\n<meta name=\"APILocation\" content=\"System.Deployment.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-04-01 05:59 PM\">\r\n<meta name=\"document_id\" content=\"55c431d5-65ad-e427-3383-1387b9c7dc66\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents detailed update information obtained through a call to .\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.deployment.application/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Deployment.Application.CheckForUpdateCompletedEventArgs\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","uhfHeaderId":"MSDocsHeader-DotNet","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Deployment.Application.CheckForUpdateCompletedEventArgs.yml","open_to_public_contributors":false,"api_name":["System.Deployment.Application.CheckForUpdateCompletedEventArgs","System.Deployment.Application.CheckForUpdateCompletedEventArgs.AvailableVersion","System.Deployment.Application.CheckForUpdateCompletedEventArgs.IsUpdateRequired","System.Deployment.Application.CheckForUpdateCompletedEventArgs.MinimumRequiredVersion","System.Deployment.Application.CheckForUpdateCompletedEventArgs.UpdateAvailable","System.Deployment.Application.CheckForUpdateCompletedEventArgs.UpdateSizeBytes"],"api_location":["System.Deployment.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Deployment.Application.CheckForUpdateCompletedEventArgs","System::Deployment::Application::CheckForUpdateCompletedEventArgs","System.Deployment.Application.CheckForUpdateCompletedEventArgs.AvailableVersion","System::Deployment::Application::CheckForUpdateCompletedEventArgs::AvailableVersion","System.Deployment.Application.CheckForUpdateCompletedEventArgs.IsUpdateRequired","System::Deployment::Application::CheckForUpdateCompletedEventArgs::IsUpdateRequired","System.Deployment.Application.CheckForUpdateCompletedEventArgs.MinimumRequiredVersion","System::Deployment::Application::CheckForUpdateCompletedEventArgs::MinimumRequiredVersion","System.Deployment.Application.CheckForUpdateCompletedEventArgs.UpdateAvailable","System::Deployment::Application::CheckForUpdateCompletedEventArgs::UpdateAvailable","System.Deployment.Application.CheckForUpdateCompletedEventArgs.UpdateSizeBytes","System::Deployment::Application::CheckForUpdateCompletedEventArgs::UpdateSizeBytes"],"dev_langs":["csharp"],"updated_at":"2017-04-01 05:59 PM","document_id":"55c431d5-65ad-e427-3383-1387b9c7dc66","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Deployment.Application/CheckForUpdateCompletedEventArgs.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"CheckForUpdateCompletedEventArgs class | Microsoft Docs","_op_ogTitle":"CheckForUpdateCompletedEventArgs class","description":"Represents detailed update information obtained through a call to .\n","toc_asset_id":"api/_splitted/System.Deployment.Application/toc.json","toc_rel":"_splitted/System.Deployment.Application/toc.json","source_url":"","ms.assetid":"System.Deployment.Application.CheckForUpdateCompletedEventArgs","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.deployment.application.checkforupdatecompletedeventargs","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.deployment.application.checkforupdatecompletedeventargs","fileRelativePath":"api/System.Deployment.Application.CheckForUpdateCompletedEventArgs.html"},"themesRelativePathToOutputRoot":"_themes/"}