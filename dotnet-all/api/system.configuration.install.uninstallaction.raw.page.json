{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">UninstallAction</span>\r\n      Enum\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Specifies what an installer should do during an uninstallation.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\r\n  \t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public enum UninstallAction</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a></span></div><span class=\"lang-csharp\">UninstallAction</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following sample creates a custom uninstaller that inherits the <a class=\"xref\" href=\"system.configuration.install.installer\" data-linktype=\"relative-path\">Installer</a> class. In the overridden <a class=\"xref\" href=\"system.configuration.install.installer#System_Configuration_Install_Installer_Uninstall_\" data-linktype=\"relative-path\">Uninstall</a> function, the UninstallAction enumeration is set based on user input. If the input is &quot;n&quot;, the custom uninstaller will not take any action on the resource in the event log entered by the user. Otherwise, it will remove the resource from the event log.  </p>\n<pre><code class=\"lang-cpp\" name=\"UninstallAction_NoAction_Remove_3#1\">#using &lt;System.dll&gt;\n#using &lt;System.Configuration.Install.dll&gt;\n\nusing namespace System;\nusing namespace System::Diagnostics;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Configuration::Install;\n\n[RunInstaller(true)]\nref class MyUninstallActionClass: public Installer\n{\nprivate:\n   EventLogInstaller^ myInstaller;\n\npublic:\n   MyUninstallActionClass()\n   {\n      myInstaller = gcnew EventLogInstaller;\n   }\n\n\n   // Override the &#39;Install&#39; method.\n   virtual void Install( IDictionary^ savedState ) override\n   {\n      Console::Write( &quot;Enter a new log to create (eg: MyLog): &quot; );\n      myInstaller-&gt;Log = Console::ReadLine();\n      Console::Write( &quot;Enter a source for log (eg: MySource): &quot; );\n      myInstaller-&gt;Source = Console::ReadLine();\n      Installers-&gt;Add( myInstaller );\n      Installer::Install( savedState );\n   }\n\n\n   // Override the &#39;Commit&#39; method.\n   virtual void Commit( IDictionary^ savedState ) override\n   {\n      Installer::Commit( savedState );\n   }\n\n\n   // Override the &#39;Rollback&#39; method.\n   virtual void Rollback( IDictionary^ savedState ) override\n   {\n      Installer::Rollback( savedState );\n   }\n\n\n   virtual void Uninstall( IDictionary^ savedState ) override\n   {\n      Console::Write( &quot;Enter a source from log to uninstall(eg: MySource): &quot; );\n      myInstaller-&gt;Source = Console::ReadLine();\n      Console::Write( &quot;Do you want to uninstall, press &#39;y&#39; for &#39;YES&#39; and &#39;n&#39; for &#39;NO&#39;:&quot; );\n      String^ myUninstall = Console::ReadLine();\n      if ( myUninstall-&gt;Equals( &quot;n&quot; ) )\n      {\n         \n         // No action to be taken on the resource in the event log.\n         myInstaller-&gt;UninstallAction = UninstallAction::NoAction;\n      }\n      else\n      {\n         \n         // Remove the resource from the event log.\n         myInstaller-&gt;UninstallAction = UninstallAction::Remove;\n      }\n\n      Installers-&gt;Add( myInstaller );\n      Installer::Uninstall( savedState );\n   }\n\n};\n\nint main()\n{\n   Console::WriteLine( &quot;Syntax for install: installutil.exe UninstallAction_NoAction_Remove_3.exe &quot; );\n   Console::WriteLine( &quot;Syntax for uninstall: installutil.exe /u UninstallAction_NoAction_Remove_3.exe &quot; );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"UninstallAction_NoAction_Remove_3#1\">using System;\nusing System.Diagnostics;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Configuration.Install;\n\n[RunInstaller(true)]\npublic class MyUninstallActionClass : Installer \n{\n   EventLogInstaller myInstaller = new EventLogInstaller();\n   \n   // Override the &#39;Install&#39; method.\n   public override void Install(IDictionary savedState)\n   {\n      Console.Write(&quot;Enter a new log to create (eg: MyLog ): &quot;);\n      myInstaller.Log = Console.ReadLine();\n      Console.Write(&quot;Enter a source for log (eg: MySource ): &quot;);\n      myInstaller.Source = Console.ReadLine();\n      Installers.Add( myInstaller );\n      base.Install(savedState);\n   }\n\n   // Override the &#39;Commit&#39; method.\n   public override void Commit(IDictionary savedState)\n   {\n      base.Commit(savedState);\n   }\n\n   // Override the &#39;Rollback&#39; method.\n   public override void Rollback(IDictionary savedState)\n   {\n      base.Rollback(savedState);\n   }\n   public override void Uninstall(IDictionary savedState)\n   {\n      Console.Write(&quot;Enter a source from log to uninstall(eg: MySource ): &quot;);\n      myInstaller.Source = Console.ReadLine();\n\n      Console.Write(&quot;Do you want to uninstall, press &#39;y&#39; for &#39;YES&#39; and &#39;n&#39; for &#39;NO&#39;:&quot;);\n      string myUninstall = Console.ReadLine();\n     \n      if( myUninstall == &quot;n&quot; )\n      {\n         // No action to be taken on the resource in the event log.\n         myInstaller.UninstallAction = System.Configuration.Install.UninstallAction.NoAction;\n      }\n      else\n      {\n         // Remove the resource from the event log.\n         myInstaller.UninstallAction = System.Configuration.Install.UninstallAction.Remove;\n      }\n      Installers.Add( myInstaller );\n      base.Uninstall(savedState);\n   }\n   public static void Main()\n   {\n      Console.WriteLine(&quot;Syntax for install: installutil.exe UninstallAction_NoAction_Remove_3.exe &quot;);\n      Console.WriteLine(&quot;Syntax for uninstall: installutil.exe /u &quot;\n         +&quot;UninstallAction_NoAction_Remove_3.exe &quot;);\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UninstallAction_NoAction_Remove_3#1\">Imports System\nImports System.Diagnostics\nImports System.Collections\nImports System.ComponentModel\nImports System.Configuration.Install\n\n&lt;RunInstaller(True)&gt;  _\nPublic Class MyUninstallActionClass\n   Inherits Installer\n   Private myInstaller As New EventLogInstaller()\n\n   &#39; Override the &#39;Install&#39; method.\n   Public Overrides Sub Install(savedState As IDictionary)\n      Console.Write(&quot;Enter a new log to create (eg: MyLog ): &quot;)\n      myInstaller.Log = Console.ReadLine()\n      Console.Write(&quot;Enter a source for log (eg: MySource ): &quot;)\n      myInstaller.Source = Console.ReadLine()\n      Installers.Add(myInstaller)\n      MyBase.Install(savedState)\n   End Sub &#39;Install\n\n   &#39; Override the &#39;Commit&#39; method.\n   Public Overrides Sub Commit(savedState As IDictionary)\n      MyBase.Commit(savedState)\n   End Sub &#39;Commit\n\n   &#39; Override the &#39;Rollback&#39; method.\n   Public Overrides Sub Rollback(savedState As IDictionary)\n      MyBase.Rollback(savedState)\n   End Sub &#39;Rollback\n\n   Public Overrides Sub Uninstall(savedState As IDictionary)\n\n      Console.Write(&quot;Enter a source from log to uninstall(eg: MySource ): &quot;)\n      myInstaller.Source = Console.ReadLine()\n\n      Console.Write(&quot;Do you want to uninstall, press &#39;y&#39; for &#39;YES&#39; and &#39;n&#39; for &#39;NO&#39;:&quot;)\n      Dim myUninstall As String = Console.ReadLine()\n\n      If myUninstall = &quot;n&quot; Then\n         &#39; No action to be taken on the resource in the event log.\n         myInstaller.UninstallAction = System.Configuration.Install.UninstallAction.NoAction\n      Else\n         &#39; Remove the resource from the event log.\n         myInstaller.UninstallAction = System.Configuration.Install.UninstallAction.Remove\n      End If\n      Installers.Add(myInstaller)\n      MyBase.Uninstall(savedState)\n   End Sub &#39;Uninstall\n\n   Public Shared Sub Main()\n      Console.WriteLine(&quot;Syntax for install: installutil.exe &quot;+ _\n                        &quot;UninstallAction_NoAction_Remove_3.exe &quot;)\n      Console.WriteLine(&quot;Syntax for uninstall: installutil.exe /u &quot; + _\n                        &quot;UninstallAction_NoAction_Remove_3.exe &quot;)\n   End Sub &#39;Main\n\nEnd Class &#39;MyUninstallActionClass\n</code></pre>\r\n  \r\n  \r\n      \t<h2 class=\"accented\">Fields\r\n      </h2>\r\n      <table class=\"nameValue\">\r\n      \t<tr><td id=\"System_Configuration_Install_UninstallAction_NoAction\">\r\n      \t\t\t<span class=\"lang-csharp\">NoAction</span>\r\n      \t</td>\r\n      \t<td><p>Leaves the resource created by the installer as is.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Configuration_Install_UninstallAction_Remove\">\r\n      \t\t\t<span class=\"lang-csharp\">Remove</span>\r\n      \t</td>\r\n      \t<td><p>Removes the resource the installer created.</p>\n</td>\r\n      \t</tr>\r\n      </table>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Configuration.Install.UninstallAction.yml\">\r\n<meta name=\"APIName\" content=\"System.Configuration.Install.UninstallAction\">\r\n<meta name=\"APIName\" content=\"System.Configuration.Install.UninstallAction.NoAction\">\r\n<meta name=\"APIName\" content=\"System.Configuration.Install.UninstallAction.Remove\">\r\n<meta name=\"APILocation\" content=\"System.Configuration.Install.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 02:21 PM\">\r\n<meta name=\"document_id\" content=\"2db48d76-db66-8e8e-0c0d-8d9ff3c52556\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Specifies what an installer should do during an uninstallation.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.configuration.install/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Configuration.Install.UninstallAction\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Configuration.Install.UninstallAction.yml","open_to_public_contributors":false,"api_name":["System.Configuration.Install.UninstallAction","System.Configuration.Install.UninstallAction.NoAction","System.Configuration.Install.UninstallAction.Remove"],"api_location":["System.Configuration.Install.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Configuration.Install.UninstallAction","System::Configuration::Install::UninstallAction","System.Configuration.Install.UninstallAction.NoAction","System::Configuration::Install::UninstallAction::NoAction","System.Configuration.Install.UninstallAction.Remove","System::Configuration::Install::UninstallAction::Remove"],"dev_langs":["csharp"],"updated_at":"2017-03-31 02:21 PM","document_id":"2db48d76-db66-8e8e-0c0d-8d9ff3c52556","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Configuration.Install/UninstallAction.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"UninstallAction enum | Microsoft Docs","_op_ogTitle":"UninstallAction enum","description":"Specifies what an installer should do during an uninstallation.\n","toc_asset_id":"api/_splitted/System.Configuration.Install/toc.json","toc_rel":"_splitted/System.Configuration.Install/toc.json","source_url":"","ms.assetid":"System.Configuration.Install.UninstallAction","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.configuration.install.uninstallaction","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.configuration.install.uninstallaction","fileRelativePath":"api/System.Configuration.Install.UninstallAction.html"},"themesRelativePathToOutputRoot":"_themes/"}