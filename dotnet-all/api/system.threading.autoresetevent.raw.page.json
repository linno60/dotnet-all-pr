{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">AutoResetEvent</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Notifies a waiting thread that an event has occurred. This class cannot be inherited.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[ECMA2Yaml.Models.ECMAAttribute]\npublic sealed class AutoResetEvent : System.Threading.EventWaitHandle</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.waithandle\" data-linktype=\"relative-path\">WaitHandle</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.eventwaithandle\" data-linktype=\"relative-path\">EventWaitHandle</a></span></div><span class=\"lang-csharp\">AutoResetEvent</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Attributes</dt><dd>\r\n  \t\t<div class=\"cdlHolder\">\r\n  \t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_CreateObjRef_System_Type_\" data-linktype=\"relative-path\">CreateObjRef(Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_GetLifetimeService\" data-linktype=\"relative-path\">GetLifetimeService()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_InitializeLifetimeService\" data-linktype=\"relative-path\">InitializeLifetimeService()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_MemberwiseClone_System_Boolean_\" data-linktype=\"relative-path\">MemberwiseClone(Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.eventwaithandle#System_Threading_EventWaitHandle_GetAccessControl\" data-linktype=\"relative-path\">GetAccessControl()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.eventwaithandle#System_Threading_EventWaitHandle_OpenExisting_System_String_\" data-linktype=\"relative-path\">OpenExisting(String)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.eventwaithandle#System_Threading_EventWaitHandle_OpenExisting_System_String_System_Security_AccessControl_EventWaitHandleRights_\" data-linktype=\"relative-path\">OpenExisting(String, EventWaitHandleRights)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.eventwaithandle#System_Threading_EventWaitHandle_Reset\" data-linktype=\"relative-path\">Reset()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.eventwaithandle#System_Threading_EventWaitHandle_Set\" data-linktype=\"relative-path\">Set()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.eventwaithandle#System_Threading_EventWaitHandle_SetAccessControl_System_Security_AccessControl_EventWaitHandleSecurity_\" data-linktype=\"relative-path\">SetAccessControl(EventWaitHandleSecurity)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.eventwaithandle#System_Threading_EventWaitHandle_TryOpenExisting_System_String_System_Security_AccessControl_EventWaitHandleRights_System_Threading_EventWaitHandle__\" data-linktype=\"relative-path\">TryOpenExisting(String, EventWaitHandleRights, EventWaitHandle)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.eventwaithandle#System_Threading_EventWaitHandle_TryOpenExisting_System_String_System_Threading_EventWaitHandle__\" data-linktype=\"relative-path\">TryOpenExisting(String, EventWaitHandle)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_Close\" data-linktype=\"relative-path\">Close()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_Dispose\" data-linktype=\"relative-path\">Dispose()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_Dispose_System_Boolean_\" data-linktype=\"relative-path\">Dispose(Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_Handle\" data-linktype=\"relative-path\">Handle</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_InvalidHandle\" data-linktype=\"relative-path\">InvalidHandle</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_SafeWaitHandle\" data-linktype=\"relative-path\">SafeWaitHandle</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_SignalAndWait_System_Threading_WaitHandle_System_Threading_WaitHandle_\" data-linktype=\"relative-path\">SignalAndWait(WaitHandle, WaitHandle)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_SignalAndWait_System_Threading_WaitHandle_System_Threading_WaitHandle_System_Int32_System_Boolean_\" data-linktype=\"relative-path\">SignalAndWait(WaitHandle, WaitHandle, Int32, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_SignalAndWait_System_Threading_WaitHandle_System_Threading_WaitHandle_System_TimeSpan_System_Boolean_\" data-linktype=\"relative-path\">SignalAndWait(WaitHandle, WaitHandle, TimeSpan, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_WaitAll_System_Threading_WaitHandle___\" data-linktype=\"relative-path\">WaitAll(WaitHandle[])</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_WaitAll_System_Threading_WaitHandle___System_Int32_\" data-linktype=\"relative-path\">WaitAll(WaitHandle[], Int32)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_WaitAll_System_Threading_WaitHandle___System_Int32_System_Boolean_\" data-linktype=\"relative-path\">WaitAll(WaitHandle[], Int32, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_WaitAll_System_Threading_WaitHandle___System_TimeSpan_\" data-linktype=\"relative-path\">WaitAll(WaitHandle[], TimeSpan)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_WaitAll_System_Threading_WaitHandle___System_TimeSpan_System_Boolean_\" data-linktype=\"relative-path\">WaitAll(WaitHandle[], TimeSpan, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_WaitAny_System_Threading_WaitHandle___\" data-linktype=\"relative-path\">WaitAny(WaitHandle[])</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_WaitAny_System_Threading_WaitHandle___System_Int32_\" data-linktype=\"relative-path\">WaitAny(WaitHandle[], Int32)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_WaitAny_System_Threading_WaitHandle___System_Int32_System_Boolean_\" data-linktype=\"relative-path\">WaitAny(WaitHandle[], Int32, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_WaitAny_System_Threading_WaitHandle___System_TimeSpan_\" data-linktype=\"relative-path\">WaitAny(WaitHandle[], TimeSpan)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_WaitAny_System_Threading_WaitHandle___System_TimeSpan_System_Boolean_\" data-linktype=\"relative-path\">WaitAny(WaitHandle[], TimeSpan, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_WaitOne\" data-linktype=\"relative-path\">WaitOne()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_WaitOne_System_Int32_\" data-linktype=\"relative-path\">WaitOne(Int32)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_WaitOne_System_Int32_System_Boolean_\" data-linktype=\"relative-path\">WaitOne(Int32, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_WaitOne_System_TimeSpan_\" data-linktype=\"relative-path\">WaitOne(TimeSpan)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_WaitOne_System_TimeSpan_System_Boolean_\" data-linktype=\"relative-path\">WaitOne(TimeSpan, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_WaitTimeout\" data-linktype=\"relative-path\">WaitTimeout</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example shows how to use AutoResetEvent to release one thread at a time, by calling the <a class=\"xref\" href=\"system.threading.eventwaithandle#System_Threading_EventWaitHandle_Set_\" data-linktype=\"relative-path\">Set</a> method (on the base class) each time the user presses the <strong>Enter</strong> key. The example starts three threads, which wait on an AutoResetEvent that was created in the signaled state. The first thread is released immediately, because the AutoResetEvent is already in the signaled state. This resets the AutoResetEvent to the non-signaled state, so that subsequent threads block. The blocked threads are not released until the user releases them one at a time by pressing the <strong>Enter</strong> key.  </p>\n<p> After the threads are released from the first AutoResetEvent, they wait on another AutoResetEvent that was created in the non-signaled state. All three threads block, so the <a class=\"xref\" href=\"system.threading.eventwaithandle#System_Threading_EventWaitHandle_Set_\" data-linktype=\"relative-path\">Set</a> method must be called three times to release them all.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Threading.AutoResetEvent#3\">using namespace System;\nusing namespace System::Threading;\n\nref class Example\n{\nprivate:\n    static AutoResetEvent^ event_1 = gcnew AutoResetEvent(true);\n    static AutoResetEvent^ event_2 = gcnew AutoResetEvent(false);\n\n    static void ThreadProc()\n    {\n        String^ name = Thread::CurrentThread-&gt;Name;\n\n        Console::WriteLine(&quot;{0} waits on AutoResetEvent #1.&quot;, name);\n        event_1-&gt;WaitOne();\n        Console::WriteLine(&quot;{0} is released from AutoResetEvent #1.&quot;, name);\n\n        Console::WriteLine(&quot;{0} waits on AutoResetEvent #2.&quot;, name);\n        event_2-&gt;WaitOne();\n        Console::WriteLine(&quot;{0} is released from AutoResetEvent #2.&quot;, name);\n\n        Console::WriteLine(&quot;{0} ends.&quot;, name);\n    }\n\npublic:\n    static void Demo()\n    {\n        Console::WriteLine(&quot;Press Enter to create three threads and start them.\\r\\n&quot; +\n                           &quot;The threads wait on AutoResetEvent #1, which was created\\r\\n&quot; +\n                           &quot;in the signaled state, so the first thread is released.\\r\\n&quot; +\n                           &quot;This puts AutoResetEvent #1 into the unsignaled state.&quot;);\n        Console::ReadLine();\n            \n        for (int i = 1; i &lt; 4; i++)\n        {\n            Thread^ t = gcnew Thread(gcnew ThreadStart(&amp;ThreadProc));\n            t-&gt;Name = &quot;Thread_&quot; + i;\n            t-&gt;Start();\n        }\n        Thread::Sleep(250);\n\n        for (int i = 0; i &lt; 2; i++)\n        {\n            Console::WriteLine(&quot;Press Enter to release another thread.&quot;);\n            Console::ReadLine();\n            event_1-&gt;Set();\n            Thread::Sleep(250);\n        }\n\n        Console::WriteLine(&quot;\\r\\nAll threads are now waiting on AutoResetEvent #2.&quot;);\n        for (int i = 0; i &lt; 3; i++)\n        {\n            Console::WriteLine(&quot;Press Enter to release a thread.&quot;);\n            Console::ReadLine();\n            event_2-&gt;Set();\n            Thread::Sleep(250);\n        }\n\n        // Visual Studio: Uncomment the following line.\n        //Console::Readline();\n    }\n};\n\nvoid main()\n{\n    Example::Demo();\n}\n\n/* This example produces output similar to the following:\n\nPress Enter to create three threads and start them.\nThe threads wait on AutoResetEvent #1, which was created\nin the signaled state, so the first thread is released.\nThis puts AutoResetEvent #1 into the unsignaled state.\n\nThread_1 waits on AutoResetEvent #1.\nThread_1 is released from AutoResetEvent #1.\nThread_1 waits on AutoResetEvent #2.\nThread_3 waits on AutoResetEvent #1.\nThread_2 waits on AutoResetEvent #1.\nPress Enter to release another thread.\n\nThread_3 is released from AutoResetEvent #1.\nThread_3 waits on AutoResetEvent #2.\nPress Enter to release another thread.\n\nThread_2 is released from AutoResetEvent #1.\nThread_2 waits on AutoResetEvent #2.\n\nAll threads are now waiting on AutoResetEvent #2.\nPress Enter to release a thread.\n\nThread_2 is released from AutoResetEvent #2.\nThread_2 ends.\nPress Enter to release a thread.\n\nThread_1 is released from AutoResetEvent #2.\nThread_1 ends.\nPress Enter to release a thread.\n\nThread_3 is released from AutoResetEvent #2.\nThread_3 ends.\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.AutoResetEvent#3\">using System;\nusing System.Threading;\n\n// Visual Studio: Replace the default class in a Console project with \n//                the following class.\nclass Example\n{\n    private static AutoResetEvent event_1 = new AutoResetEvent(true);\n    private static AutoResetEvent event_2 = new AutoResetEvent(false);\n\n    static void Main()\n    {\n        Console.WriteLine(&quot;Press Enter to create three threads and start them.\\r\\n&quot; +\n                          &quot;The threads wait on AutoResetEvent #1, which was created\\r\\n&quot; +\n                          &quot;in the signaled state, so the first thread is released.\\r\\n&quot; +\n                          &quot;This puts AutoResetEvent #1 into the unsignaled state.&quot;);\n        Console.ReadLine();\n            \n        for (int i = 1; i &lt; 4; i++)\n        {\n            Thread t = new Thread(ThreadProc);\n            t.Name = &quot;Thread_&quot; + i;\n            t.Start();\n        }\n        Thread.Sleep(250);\n\n        for (int i = 0; i &lt; 2; i++)\n        {\n            Console.WriteLine(&quot;Press Enter to release another thread.&quot;);\n            Console.ReadLine();\n            event_1.Set();\n            Thread.Sleep(250);\n        }\n\n        Console.WriteLine(&quot;\\r\\nAll threads are now waiting on AutoResetEvent #2.&quot;);\n        for (int i = 0; i &lt; 3; i++)\n        {\n            Console.WriteLine(&quot;Press Enter to release a thread.&quot;);\n            Console.ReadLine();\n            event_2.Set();\n            Thread.Sleep(250);\n        }\n\n        // Visual Studio: Uncomment the following line.\n        //Console.Readline();\n    }\n\n    static void ThreadProc()\n    {\n        string name = Thread.CurrentThread.Name;\n\n        Console.WriteLine(&quot;{0} waits on AutoResetEvent #1.&quot;, name);\n        event_1.WaitOne();\n        Console.WriteLine(&quot;{0} is released from AutoResetEvent #1.&quot;, name);\n\n        Console.WriteLine(&quot;{0} waits on AutoResetEvent #2.&quot;, name);\n        event_2.WaitOne();\n        Console.WriteLine(&quot;{0} is released from AutoResetEvent #2.&quot;, name);\n\n        Console.WriteLine(&quot;{0} ends.&quot;, name);\n    }\n}\n\n/* This example produces output similar to the following:\n\nPress Enter to create three threads and start them.\nThe threads wait on AutoResetEvent #1, which was created\nin the signaled state, so the first thread is released.\nThis puts AutoResetEvent #1 into the unsignaled state.\n\nThread_1 waits on AutoResetEvent #1.\nThread_1 is released from AutoResetEvent #1.\nThread_1 waits on AutoResetEvent #2.\nThread_3 waits on AutoResetEvent #1.\nThread_2 waits on AutoResetEvent #1.\nPress Enter to release another thread.\n\nThread_3 is released from AutoResetEvent #1.\nThread_3 waits on AutoResetEvent #2.\nPress Enter to release another thread.\n\nThread_2 is released from AutoResetEvent #1.\nThread_2 waits on AutoResetEvent #2.\n\nAll threads are now waiting on AutoResetEvent #2.\nPress Enter to release a thread.\n\nThread_2 is released from AutoResetEvent #2.\nThread_2 ends.\nPress Enter to release a thread.\n\nThread_1 is released from AutoResetEvent #2.\nThread_1 ends.\nPress Enter to release a thread.\n\nThread_3 is released from AutoResetEvent #2.\nThread_3 ends.\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.AutoResetEvent#3\">Imports System.Threading\n\n&#39; Visual Studio: Replace the default class in a Console project with \n&#39;                the following class.\nClass Example\n\n    Private Shared event_1 As New AutoResetEvent(True)\n    Private Shared event_2 As New AutoResetEvent(False)\n\n    &lt;MTAThread()&gt; _\n    Shared Sub Main()\n    \n        Console.WriteLine(&quot;Press Enter to create three threads and start them.&quot; &amp; vbCrLf &amp; _\n                          &quot;The threads wait on AutoResetEvent #1, which was created&quot; &amp; vbCrLf &amp; _\n                          &quot;in the signaled state, so the first thread is released.&quot; &amp; vbCrLf &amp; _\n                          &quot;This puts AutoResetEvent #1 into the unsignaled state.&quot;)\n        Console.ReadLine()\n            \n        For i As Integer = 1 To 3\n            Dim t As New Thread(AddressOf ThreadProc)\n            t.Name = &quot;Thread_&quot; &amp; i\n            t.Start()\n        Next\n        Thread.Sleep(250)\n\n        For i As Integer = 1 To 2\n            Console.WriteLine(&quot;Press Enter to release another thread.&quot;)\n            Console.ReadLine()\n\n            event_1.Set()\n            Thread.Sleep(250)\n        Next\n\n        Console.WriteLine(vbCrLf &amp; &quot;All threads are now waiting on AutoResetEvent #2.&quot;)\n        For i As Integer = 1 To 3\n            Console.WriteLine(&quot;Press Enter to release a thread.&quot;)\n            Console.ReadLine()\n\n            event_2.Set()\n            Thread.Sleep(250)\n        Next\n\n        &#39; Visual Studio: Uncomment the following line.\n        &#39;Console.Readline()\n    End Sub\n\n    Shared Sub ThreadProc()\n    \n        Dim name As String = Thread.CurrentThread.Name\n\n        Console.WriteLine(&quot;{0} waits on AutoResetEvent #1.&quot;, name)\n        event_1.WaitOne()\n        Console.WriteLine(&quot;{0} is released from AutoResetEvent #1.&quot;, name)\n\n        Console.WriteLine(&quot;{0} waits on AutoResetEvent #2.&quot;, name)\n        event_2.WaitOne()\n        Console.WriteLine(&quot;{0} is released from AutoResetEvent #2.&quot;, name)\n\n        Console.WriteLine(&quot;{0} ends.&quot;, name)\n    End Sub\nEnd Class\n\n&#39; This example produces output similar to the following:\n&#39;\n&#39;Press Enter to create three threads and start them.\n&#39;The threads wait on AutoResetEvent #1, which was created\n&#39;in the signaled state, so the first thread is released.\n&#39;This puts AutoResetEvent #1 into the unsignaled state.\n&#39;\n&#39;Thread_1 waits on AutoResetEvent #1.\n&#39;Thread_1 is released from AutoResetEvent #1.\n&#39;Thread_1 waits on AutoResetEvent #2.\n&#39;Thread_3 waits on AutoResetEvent #1.\n&#39;Thread_2 waits on AutoResetEvent #1.\n&#39;Press Enter to release another thread.\n&#39;\n&#39;Thread_3 is released from AutoResetEvent #1.\n&#39;Thread_3 waits on AutoResetEvent #2.\n&#39;Press Enter to release another thread.\n&#39;\n&#39;Thread_2 is released from AutoResetEvent #1.\n&#39;Thread_2 waits on AutoResetEvent #2.\n&#39;\n&#39;All threads are now waiting on AutoResetEvent #2.\n&#39;Press Enter to release a thread.\n&#39;\n&#39;Thread_2 is released from AutoResetEvent #2.\n&#39;Thread_2 ends.\n&#39;Press Enter to release a thread.\n&#39;\n&#39;Thread_1 is released from AutoResetEvent #2.\n&#39;Thread_1 ends.\n&#39;Press Enter to release a thread.\n&#39;\n&#39;Thread_3 is released from AutoResetEvent #2.\n&#39;Thread_3 ends.\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p><code>AutoResetEvent</code> allows threads to communicate with each other by signaling. Typically, you use this class when threads need exclusive access to a resource.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> This type implements the <a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <a class=\"xref\" href=\"system.idisposable#System_IDisposable_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method in a <code>try</code>/<code>catch</code> block. To dispose of it indirectly, use a language construct such as <code>using</code> (in C#) or <code>Using</code> (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> interface topic.  </p>\n</div>\n<p> A thread waits for a signal by calling <a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_WaitOne_\" data-linktype=\"relative-path\">WaitOne</a> on the <code>AutoResetEvent</code>. If the <code>AutoResetEvent</code> is in the non-signaled state, the thread blocks, waiting for the thread that currently controls the resource to signal that the resource is available by calling <a class=\"xref\" href=\"system.threading.eventwaithandle#System_Threading_EventWaitHandle_Set_\" data-linktype=\"relative-path\">Set</a>.  </p>\n<p> Calling <code>Set</code> signals <code>AutoResetEvent</code> to release a waiting thread. <code>AutoResetEvent</code> remains signaled until a single waiting thread is released, and then automatically returns to the non-signaled state. If no threads are waiting, the state remains signaled indefinitely.  </p>\n<p> If a thread calls <a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_WaitOne_\" data-linktype=\"relative-path\">WaitOne</a> while the AutoResetEvent is in the signaled state, the thread does not block. The AutoResetEvent releases the thread immediately and returns to the non-signaled state.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> There is no guarantee that every call to the <a class=\"xref\" href=\"system.threading.eventwaithandle#System_Threading_EventWaitHandle_Set_\" data-linktype=\"relative-path\">Set</a> method will release a thread. If two calls are too close together, so that the second call occurs before a thread has been released, only one thread is released. It is as if the second call did not happen. Also, if <a class=\"xref\" href=\"system.threading.eventwaithandle#System_Threading_EventWaitHandle_Set_\" data-linktype=\"relative-path\">Set</a> is called when there are no threads waiting and the AutoResetEvent is already signaled, the call has no effect.  </p>\n</div>\n<p> You can control the initial state of an <code>AutoResetEvent</code> by passing a Boolean value to the constructor: <code>true</code> if the initial state is signaled and <code>false</code> otherwise.  </p>\n<p> <code>AutoResetEvent</code> can also be used with the <code>static</code><a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_WaitAll_\" data-linktype=\"relative-path\">WaitAll</a> and <a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_WaitAny_\" data-linktype=\"relative-path\">WaitAny</a> methods.  </p>\n<p> For more information about thread synchronization mechanisms, see <a href=\"../topic/autoresetevent\" data-linktype=\"relative-path\">AutoResetEvent</a> in the conceptual documentation.  </p>\n<p> Beginning with the .NET Framework version 2.0, AutoResetEvent derives from the new <a class=\"xref\" href=\"system.threading.eventwaithandle\" data-linktype=\"relative-path\">EventWaitHandle</a> class. An AutoResetEvent is functionally equivalent to an <a class=\"xref\" href=\"system.threading.eventwaithandle\" data-linktype=\"relative-path\">EventWaitHandle</a> created with <a class=\"xref\" href=\"system.threading.eventresetmode\" data-linktype=\"relative-path\">System.Threading.EventResetMode</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Unlike the AutoResetEvent class, the <a class=\"xref\" href=\"system.threading.eventwaithandle\" data-linktype=\"relative-path\">EventWaitHandle</a> class provides access to named system synchronization events.</p>\n</div>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Threading_AutoResetEvent__ctor_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_AutoResetEvent__ctor_System_Boolean_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">AutoResetEvent(Boolean)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.threading.autoresetevent\" data-linktype=\"relative-path\">AutoResetEvent</a> class with a Boolean value indicating whether to set the initial state to signaled.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public AutoResetEvent (bool initialState);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>initialState</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> to set the initial state to signaled; <code>false</code> to set the initial state to non-signaled.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \t<h2 class=\"accented\">Thread Safety</h2>\r\n  \tThis class is thread safe.\r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc1.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Threading.AutoResetEvent.yml\">\r\n<meta name=\"APIName\" content=\"System.Threading.AutoResetEvent\">\r\n<meta name=\"APIName\" content=\"System.Threading.AutoResetEvent..ctor\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 02:21 PM\">\r\n<meta name=\"document_id\" content=\"2adff440-f46c-56ed-8002-6a63b5821cd7\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Notifies a waiting thread that an event has occurred. This class cannot be inherited.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.threading/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Threading.AutoResetEvent\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Threading.AutoResetEvent.yml","open_to_public_contributors":false,"api_name":["System.Threading.AutoResetEvent","System.Threading.AutoResetEvent..ctor"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Threading.AutoResetEvent","System::Threading::AutoResetEvent","System.Threading.AutoResetEvent.#ctor","System::Threading::AutoResetEvent::#ctor"],"dev_langs":["csharp"],"updated_at":"2017-03-31 02:21 PM","document_id":"2adff440-f46c-56ed-8002-6a63b5821cd7","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Threading/AutoResetEvent.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"AutoResetEvent class | Microsoft Docs","_op_ogTitle":"AutoResetEvent class","description":"Notifies a waiting thread that an event has occurred. This class cannot be inherited.\n","toc_asset_id":"api/_splitted/System.Threading/toc.json","toc_rel":"_splitted/System.Threading/toc.json","source_url":"","ms.assetid":"System.Threading.AutoResetEvent","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.threading.autoresetevent","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.threading.autoresetevent","fileRelativePath":"api/System.Threading.AutoResetEvent.html"},"themesRelativePathToOutputRoot":"_themes/"}