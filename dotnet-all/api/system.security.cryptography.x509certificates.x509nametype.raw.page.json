{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">X509NameType</span>\r\n      Enum\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Specifies the type of name the X509 certificate contains.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\r\n  \t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public enum X509NameType</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a></span></div><span class=\"lang-csharp\">X509NameType</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.  </p>\n<pre><code class=\"lang-vb\" name=\"CertSelect#1\">Imports System\nImports System.Security.Cryptography\nImports System.Security.Permissions\nImports System.IO\nImports System.Security.Cryptography.X509Certificates\n\nClass CertSelect\n\n    Shared Sub Main()\n\n        Dim store As New X509Store(&quot;MY&quot;, StoreLocation.CurrentUser)\n        store.Open(OpenFlags.ReadOnly Or OpenFlags.OpenExistingOnly)\n\n        Dim collection As X509Certificate2Collection = CType(store.Certificates, X509Certificate2Collection)\n        Dim fcollection As X509Certificate2Collection = CType(collection.Find(X509FindType.FindByTimeValid, DateTime.Now, False), X509Certificate2Collection)\n        Dim scollection As X509Certificate2Collection = X509Certificate2UI.SelectFromCollection(fcollection, &quot;Test Certificate Select&quot;, &quot;Select a certificate from the following list to get information on that certificate&quot;, X509SelectionFlag.MultiSelection)\n        Console.WriteLine(&quot;Number of certificates: {0}{1}&quot;, scollection.Count, Environment.NewLine)\n         \n        For Each x509 As X509Certificate2 In scollection\n            Try\n                Dim rawdata As Byte() = x509.RawData\n                Console.WriteLine(&quot;Content Type: {0}{1}&quot;, X509Certificate2.GetCertContentType(rawdata), Environment.NewLine)\n                Console.WriteLine(&quot;Friendly Name: {0}{1}&quot;, x509.FriendlyName, Environment.NewLine)\n                Console.WriteLine(&quot;Certificate Verified?: {0}{1}&quot;, x509.Verify(), Environment.NewLine)\n                Console.WriteLine(&quot;Simple Name: {0}{1}&quot;, x509.GetNameInfo(X509NameType.SimpleName, True), Environment.NewLine)\n                Console.WriteLine(&quot;Signature Algorithm: {0}{1}&quot;, x509.SignatureAlgorithm.FriendlyName, Environment.NewLine)\n                Console.WriteLine(&quot;Private Key: {0}{1}&quot;, x509.PrivateKey.ToXmlString(False), Environment.NewLine)\n                Console.WriteLine(&quot;Public Key: {0}{1}&quot;, x509.PublicKey.Key.ToXmlString(False), Environment.NewLine)\n                Console.WriteLine(&quot;Certificate Archived?: {0}{1}&quot;, x509.Archived, Environment.NewLine)\n                Console.WriteLine(&quot;Length of Raw Data: {0}{1}&quot;, x509.RawData.Length, Environment.NewLine)\n                X509Certificate2UI.DisplayCertificate(x509)\n                x509.Reset()         \n             Catch cExcept As CryptographicException\n                 Console.WriteLine(&quot;Information could not be written out for this certificate.&quot;)\n             End Try\n        Next x509\n\n        store.Close()\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"CertSelect#1\">using System;\nusing System.Security.Cryptography;\nusing System.Security.Permissions;\nusing System.IO;\nusing System.Security.Cryptography.X509Certificates;\n\nclass CertSelect\n{\n    static void Main()\n    {\n        X509Store store = new X509Store(&quot;MY&quot;,StoreLocation.CurrentUser);\n        store.Open(OpenFlags.ReadOnly | OpenFlags.OpenExistingOnly);\n\n        X509Certificate2Collection collection = (X509Certificate2Collection)store.Certificates;\n        X509Certificate2Collection fcollection = (X509Certificate2Collection)collection.Find(X509FindType.FindByTimeValid,DateTime.Now,false);\n        X509Certificate2Collection scollection = X509Certificate2UI.SelectFromCollection(fcollection, &quot;Test Certificate Select&quot;,&quot;Select a certificate from the following list to get information on that certificate&quot;,X509SelectionFlag.MultiSelection);\n        Console.WriteLine(&quot;Number of certificates: {0}{1}&quot;,scollection.Count,Environment.NewLine);\n\n        foreach (X509Certificate2 x509 in scollection)\n        {\n            try\n            {\n                byte[] rawdata = x509.RawData;\n                Console.WriteLine(&quot;Content Type: {0}{1}&quot;,X509Certificate2.GetCertContentType(rawdata),Environment.NewLine);\n                Console.WriteLine(&quot;Friendly Name: {0}{1}&quot;,x509.FriendlyName,Environment.NewLine);\n                Console.WriteLine(&quot;Certificate Verified?: {0}{1}&quot;,x509.Verify(),Environment.NewLine);\n                Console.WriteLine(&quot;Simple Name: {0}{1}&quot;,x509.GetNameInfo(X509NameType.SimpleName,true),Environment.NewLine);\n                Console.WriteLine(&quot;Signature Algorithm: {0}{1}&quot;,x509.SignatureAlgorithm.FriendlyName,Environment.NewLine);\n                Console.WriteLine(&quot;Private Key: {0}{1}&quot;,x509.PrivateKey.ToXmlString(false),Environment.NewLine);\n                Console.WriteLine(&quot;Public Key: {0}{1}&quot;,x509.PublicKey.Key.ToXmlString(false),Environment.NewLine);\n                Console.WriteLine(&quot;Certificate Archived?: {0}{1}&quot;,x509.Archived,Environment.NewLine);\n                Console.WriteLine(&quot;Length of Raw Data: {0}{1}&quot;,x509.RawData.Length,Environment.NewLine);\n                X509Certificate2UI.DisplayCertificate(x509);\n                x509.Reset();\n            }\n            catch (CryptographicException)\n            {\n                Console.WriteLine(&quot;Information could not be written out for this certificate.&quot;);\n            }\n        }\n        store.Close();\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"CertSelect#1\">#using &lt;System.dll&gt;\n#using &lt;System.Security.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Permissions;\nusing namespace System::IO;\nusing namespace System::Security::Cryptography::X509Certificates;\nint main()\n{\n   try\n   {\n      X509Store ^ store = gcnew X509Store( &quot;MY&quot;,StoreLocation::CurrentUser );\n      store-&gt;Open( static_cast&lt;OpenFlags&gt;(OpenFlags::ReadOnly | OpenFlags::OpenExistingOnly) );\n      X509Certificate2Collection ^ collection = dynamic_cast&lt;X509Certificate2Collection^&gt;(store-&gt;Certificates);\n      X509Certificate2Collection ^ fcollection = dynamic_cast&lt;X509Certificate2Collection^&gt;(collection-&gt;Find( X509FindType::FindByTimeValid, DateTime::Now, false ));\n      X509Certificate2Collection ^ scollection = X509Certificate2UI::SelectFromCollection(fcollection, &quot;Test Certificate Select&quot;,&quot;Select a certificate from the following list to get information on that certificate&quot;,X509SelectionFlag::MultiSelection);\n      Console::WriteLine( &quot;Number of certificates: {0}{1}&quot;, scollection-&gt;Count, Environment::NewLine );\n      System::Collections::IEnumerator^ myEnum = scollection-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         X509Certificate2 ^ x509 = safe_cast&lt;X509Certificate2 ^&gt;(myEnum-&gt;Current);\n         array&lt;Byte&gt;^rawdata = x509-&gt;RawData;\n         Console::WriteLine( &quot;Content Type: {0}{1}&quot;, X509Certificate2::GetCertContentType( rawdata ), Environment::NewLine );\n         Console::WriteLine( &quot;Friendly Name: {0}{1}&quot;, x509-&gt;FriendlyName, Environment::NewLine );\n         Console::WriteLine( &quot;Certificate Verified?: {0}{1}&quot;, x509-&gt;Verify(), Environment::NewLine );\n         Console::WriteLine( &quot;Simple Name: {0}{1}&quot;, x509-&gt;GetNameInfo( X509NameType::SimpleName, true ), Environment::NewLine );\n         Console::WriteLine( &quot;Signature Algorithm: {0}{1}&quot;, x509-&gt;SignatureAlgorithm-&gt;FriendlyName, Environment::NewLine );\n         Console::WriteLine( &quot;Private Key: {0}{1}&quot;, x509-&gt;PrivateKey-&gt;ToXmlString( false ), Environment::NewLine );\n         Console::WriteLine( &quot;Public Key: {0}{1}&quot;, x509-&gt;PublicKey-&gt;Key-&gt;ToXmlString( false ), Environment::NewLine );\n         Console::WriteLine( &quot;Certificate Archived?: {0}{1}&quot;, x509-&gt;Archived, Environment::NewLine );\n         Console::WriteLine( &quot;Length of Raw Data: {0}{1}&quot;, x509-&gt;RawData-&gt;Length, Environment::NewLine );\n         x509-&gt;Reset();\n      }\n      store-&gt;Close();\n   }\n   catch ( CryptographicException^ ) \n   {\n      Console::WriteLine( &quot;Information could not be written out for this certificate.&quot; );\n   }\n\n}\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The name type can be a simple name, an email address, a User Principal Name (UPN), a Domain Name System (DNS) name or a URL. An X509 certificate can have one or more of these names. You can obtain the name of a certificate using the method <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2#System_Security_Cryptography_X509Certificates_X509Certificate2_GetNameInfo_\" data-linktype=\"relative-path\">GetNameInfo</a>.</p>\n\r\n  \r\n      \t<h2 class=\"accented\">Fields\r\n      </h2>\r\n      <table class=\"nameValue\">\r\n      \t<tr><td id=\"System_Security_Cryptography_X509Certificates_X509NameType_DnsFromAlternativeName\">\r\n      \t\t\t<span class=\"lang-csharp\">DnsFromAlternativeName</span>\r\n      \t</td>\r\n      \t<td><p>The DNS name associated with the alternative name of either the subject or the issuer of an X.509 certificate.  This value is equivalent to the DnsName value.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Security_Cryptography_X509Certificates_X509NameType_DnsName\">\r\n      \t\t\t<span class=\"lang-csharp\">DnsName</span>\r\n      \t</td>\r\n      \t<td><p>The DNS name associated with the alternative name of either the subject or issuer of an X509 certificate.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Security_Cryptography_X509Certificates_X509NameType_EmailName\">\r\n      \t\t\t<span class=\"lang-csharp\">EmailName</span>\r\n      \t</td>\r\n      \t<td><p>The email address of the subject or issuer associated of an X509 certificate.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Security_Cryptography_X509Certificates_X509NameType_SimpleName\">\r\n      \t\t\t<span class=\"lang-csharp\">SimpleName</span>\r\n      \t</td>\r\n      \t<td><p>The simple name of a subject or issuer of an X509 certificate.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Security_Cryptography_X509Certificates_X509NameType_UpnName\">\r\n      \t\t\t<span class=\"lang-csharp\">UpnName</span>\r\n      \t</td>\r\n      \t<td><p>The UPN name of the subject or issuer of an X509 certificate.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Security_Cryptography_X509Certificates_X509NameType_UrlName\">\r\n      \t\t\t<span class=\"lang-csharp\">UrlName</span>\r\n      \t</td>\r\n      \t<td><p>The URL address associated with the alternative name of either the subject or issuer of an X509 certificate.</p>\n</td>\r\n      \t</tr>\r\n      </table>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Security.Cryptography.X509Certificates.X509NameType.yml\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509NameType\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509NameType.DnsFromAlternativeName\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509NameType.DnsName\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509NameType.EmailName\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509NameType.SimpleName\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509NameType.UpnName\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509NameType.UrlName\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-29 05:54 AM\">\r\n<meta name=\"document_id\" content=\"0a3f16aa-71f4-8c78-efb9-75dc46f0c6c5\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Specifies the type of name the X509 certificate contains.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.security.cryptography.x509certificates/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Security.Cryptography.X509Certificates.X509NameType\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Security.Cryptography.X509Certificates.X509NameType.yml","open_to_public_contributors":false,"api_name":["System.Security.Cryptography.X509Certificates.X509NameType","System.Security.Cryptography.X509Certificates.X509NameType.DnsFromAlternativeName","System.Security.Cryptography.X509Certificates.X509NameType.DnsName","System.Security.Cryptography.X509Certificates.X509NameType.EmailName","System.Security.Cryptography.X509Certificates.X509NameType.SimpleName","System.Security.Cryptography.X509Certificates.X509NameType.UpnName","System.Security.Cryptography.X509Certificates.X509NameType.UrlName"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Security.Cryptography.X509Certificates.X509NameType","System::Security::Cryptography::X509Certificates::X509NameType","System.Security.Cryptography.X509Certificates.X509NameType.DnsFromAlternativeName","System::Security::Cryptography::X509Certificates::X509NameType::DnsFromAlternativeName","System.Security.Cryptography.X509Certificates.X509NameType.DnsName","System::Security::Cryptography::X509Certificates::X509NameType::DnsName","System.Security.Cryptography.X509Certificates.X509NameType.EmailName","System::Security::Cryptography::X509Certificates::X509NameType::EmailName","System.Security.Cryptography.X509Certificates.X509NameType.SimpleName","System::Security::Cryptography::X509Certificates::X509NameType::SimpleName","System.Security.Cryptography.X509Certificates.X509NameType.UpnName","System::Security::Cryptography::X509Certificates::X509NameType::UpnName","System.Security.Cryptography.X509Certificates.X509NameType.UrlName","System::Security::Cryptography::X509Certificates::X509NameType::UrlName"],"dev_langs":["csharp"],"updated_at":"2017-03-29 05:54 AM","document_id":"0a3f16aa-71f4-8c78-efb9-75dc46f0c6c5","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Security.Cryptography.X509Certificates/X509NameType.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"X509NameType enum | Microsoft Docs","_op_ogTitle":"X509NameType enum","description":"Specifies the type of name the X509 certificate contains.\n","toc_asset_id":"api/_splitted/System.Security.Cryptography.X509Certificates/toc.json","toc_rel":"_splitted/System.Security.Cryptography.X509Certificates/toc.json","source_url":"","ms.assetid":"System.Security.Cryptography.X509Certificates.X509NameType","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.x509certificates.x509nametype","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.x509certificates.x509nametype","fileRelativePath":"api/System.Security.Cryptography.X509Certificates.X509NameType.html"},"themesRelativePathToOutputRoot":"_themes/"}