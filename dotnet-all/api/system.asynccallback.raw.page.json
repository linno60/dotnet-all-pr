{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">AsyncCallback</span>\r\n      Delegate\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>References a method to be called when a corresponding asynchronous operation completes.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic delegate void AsyncCallback(IAsyncResult ar);</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></span></div><span class=\"lang-csharp\">AsyncCallback</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Attributes</dt><dd>\r\n  \t\t<div class=\"cdlHolder\">\r\n  \t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example demonstrates using asynchronous methods in the <a class=\"xref\" href=\"system.net.dns\" data-linktype=\"relative-path\">Dns</a> class to retrieve Domain Name System (DNS) information for user-specified computers. This example creates an AsyncCallback delegate that references the <code>ProcessDnsInformation</code> method. This method is called once for each asynchronous request for DNS information.  </p>\n<pre><code class=\"lang-cs\" name=\"AsyncDesignPattern#4\">/*\nThe following example demonstrates using asynchronous methods to\nget Domain Name System information for the specified host computers.\nThis example uses a delegate to obtain the results of each asynchronous \noperation.\n*/\n\nusing System;\nusing System.Net;\nusing System.Net.Sockets;\nusing System.Threading;\nusing System.Collections.Specialized;\nusing System.Collections;\n\nnamespace Examples.AdvancedProgramming.AsynchronousOperations\n{\n    public class UseDelegateForAsyncCallback\n    {\n        static int requestCounter;\n        static ArrayList hostData = new ArrayList();\n        static StringCollection hostNames = new StringCollection();\n        static void UpdateUserInterface()\n        {\n            // Print a message to indicate that the application\n            // is still working on the remaining requests.\n            Console.WriteLine(&quot;{0} requests remaining.&quot;, requestCounter);\n        }\n        public static void Main()\n        {\n            // Create the delegate that will process the results of the \n            // asynchronous request.\n            AsyncCallback callBack = new AsyncCallback(ProcessDnsInformation);\n            string host;\n            do\n            {\n                Console.Write(&quot; Enter the name of a host computer or &lt;enter&gt; to finish: &quot;);\n                host = Console.ReadLine();\n                if (host.Length &gt; 0)\n                {\n                    // Increment the request counter in a thread safe manner.\n                    Interlocked.Increment(ref requestCounter);\n                    // Start the asynchronous request for DNS information.\n                    Dns.BeginGetHostEntry(host, callBack, host);\n                 }\n            } while (host.Length &gt; 0);\n            // The user has entered all of the host names for lookup.\n            // Now wait until the threads complete.\n            while (requestCounter &gt; 0)\n            {\n                UpdateUserInterface();\n            }\n            // Display the results.\n            for (int i = 0; i&lt; hostNames.Count; i++)\n            {\n                object data = hostData [i];\n                string message = data as string;\n                // A SocketException was thrown.\n                if (message != null)\n                {\n                    Console.WriteLine(&quot;Request for {0} returned message: {1}&quot;, \n                        hostNames[i], message);\n                    continue;\n                }\n                // Get the results.\n                IPHostEntry h = (IPHostEntry) data;\n                string[] aliases = h.Aliases;\n                IPAddress[] addresses = h.AddressList;\n                if (aliases.Length &gt; 0)\n                {\n                    Console.WriteLine(&quot;Aliases for {0}&quot;, hostNames[i]);\n                    for (int j = 0; j &lt; aliases.Length; j++)\n                    {\n                        Console.WriteLine(&quot;{0}&quot;, aliases[j]);\n                    }\n                }\n                if (addresses.Length &gt; 0)\n                {\n                    Console.WriteLine(&quot;Addresses for {0}&quot;, hostNames[i]);\n                    for (int k = 0; k &lt; addresses.Length; k++)\n                    {\n                        Console.WriteLine(&quot;{0}&quot;,addresses[k].ToString());\n                    }\n                }\n            }\n       }\n\n        // The following method is called when each asynchronous operation completes.\n        static void ProcessDnsInformation(IAsyncResult result)\n        {\n            string hostName = (string) result.AsyncState;\n            hostNames.Add(hostName);\n            try \n            {\n                // Get the results.\n                IPHostEntry host = Dns.EndGetHostEntry(result);\n                hostData.Add(host);\n            }\n            // Store the exception message.\n            catch (SocketException e)\n            {\n                hostData.Add(e.Message);\n            }\n            finally \n            {\n                // Decrement the request counter in a thread-safe manner.\n                Interlocked.Decrement(ref requestCounter);\n            }\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"AsyncDesignPattern#4\">\n&#39;The following example demonstrates using asynchronous methods to\n&#39;get Domain Name System information for the specified host computers.\n&#39;This example uses a delegate to obtain the results of each asynchronous \n&#39;operation.\n\nImports System\nImports System.Net\nImports System.Net.Sockets\nImports System.Threading\nImports System.Collections.Specialized\nImports System.Collections\n\nNamespace Examples.AdvancedProgramming.AsynchronousOperations\n\n    Public Class UseDelegateForAsyncCallback\n    \n        Dim Shared requestCounter as Integer\n        Dim Shared hostData as ArrayList = new ArrayList()\n        Dim Shared hostNames as StringCollection = new StringCollection()\n        Shared Sub UpdateUserInterface()\n        \n            &#39; Print a message to indicate that the application\n            &#39; is still working on the remaining requests.\n            Console.WriteLine(&quot;{0} requests remaining.&quot;, requestCounter)\n        End Sub\n        Public Shared Sub Main()\n            &#39; Create the delegate that will process the results of the \n            &#39; asynchronous request.\n            Dim callBack as AsyncCallback\n            Dim host as string\n            Dim i, j, k as Integer\n            callback = AddressOf ProcessDnsInformation\n            Do\n                Console.Write(&quot; Enter the name of a host computer or &lt;enter&gt; to finish: &quot;)\n                host = Console.ReadLine()\n                If host.Length &gt; 0\n                    &#39; Increment the request counter in a thread safe manner.\n                    Interlocked.Increment(requestCounter)\n                    &#39; Start the asynchronous request for DNS information.\n                    Dns.BeginGetHostEntry(host, callBack, host)\n                End If\n            Loop While (host.Length &gt; 0)\n            \n            &#39; The user has entered all of the host names for lookup.\n            &#39; Now wait until the threads complete.\n            Do While requestCounter &gt; 0\n            \n                UpdateUserInterface()\n            Loop\n            \n            &#39; Display the results.\n            For i = 0 To hostNames.Count -1\n                Dim dataObject as Object = hostData (i)\n                Dim message as String \n                \n                &#39; Was a SocketException was thrown?\n                If TypeOf dataObject is String\n                    message = CType(dataObject, String)\n                    Console.WriteLine(&quot;Request for {0} returned message: {1}&quot;, _ \n                        hostNames(i), message)\n                Else\n                    &#39; Get the results.\n                    Dim h as IPHostEntry = CType(dataObject, IPHostEntry) \n                    Dim aliases() as String = h.Aliases\n                    Dim addresses() as IPAddress = h.AddressList\n                    If aliases.Length &gt; 0\n                        Console.WriteLine(&quot;Aliases for 0}&quot;, hostNames(i))\n                        For j = 0 To aliases.Length -1\n                            Console.WriteLine(&quot;{0}&quot;, aliases(j))\n                        Next j\n                    End If\n                    If addresses.Length &gt; 0\n                        Console.WriteLine(&quot;Addresses for {0}&quot;, hostNames(i))\n                        For k = 0 To addresses.Length -1\n                            Console.WriteLine(&quot;{0}&quot;,addresses(k).ToString())\n                        Next k\n                    End If\n                End If\n            Next i\n       End Sub\n\n        &#39; The following method is called when each asynchronous operation completes.\n        Shared Sub ProcessDnsInformation(result as IAsyncResult)\n        \n            Dim hostName as String = CType(result.AsyncState, String)\n            hostNames.Add(hostName)\n            Try \n                &#39; Get the results.\n                Dim host as IPHostEntry = Dns.EndGetHostEntry(result)\n                hostData.Add(host)\n            &#39; Store the exception message.\n            Catch e as SocketException\n                hostData.Add(e.Message)\n            Finally \n                &#39; Decrement the request counter in a thread-safe manner.\n                Interlocked.Decrement(requestCounter)\n            End Try\n        End Sub\n    End Class\nEnd Namespace\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>Use an AsyncCallback delegate to process the results of an asynchronous operation in a separate thread. The AsyncCallback delegate represents a callback method that is called when the asynchronous operation completes. The callback method takes an <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> parameter, which is subsequently used to obtain the results of the asynchronous operation.  </p>\n<p> For more information about asynchronous programming, see <a href=\"../topic/using%20an%20asynccallback%20delegate%20to%20end%20an%20asynchronous%20operation\" data-linktype=\"relative-path\">Using an AsyncCallback Delegate to End an Asynchronous Operation</a> and <a href=\"../topic/using%20an%20asynccallback%20delegate%20and%20state%20object\" data-linktype=\"relative-path\">Using an AsyncCallback Delegate and State Object</a> in <a href=\"../topic/event-based%20asynchronous%20pattern%20(eap)\" data-linktype=\"relative-path\">Event-based Asynchronous Pattern (EAP)</a>.</p>\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"uhfHeaderId\" content=\"MSDocsHeader-DotNet\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.AsyncCallback.yml\">\r\n<meta name=\"APIName\" content=\"System.AsyncCallback\">\r\n<meta name=\"APIName\" content=\"System.AsyncCallback..ctor\">\r\n<meta name=\"APIName\" content=\"System.AsyncCallback.Invoke\">\r\n<meta name=\"APIName\" content=\"System.AsyncCallback.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.AsyncCallback.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-04-01 05:59 PM\">\r\n<meta name=\"document_id\" content=\"d4bbd49b-c992-4b57-bbc5-39d0dfec87d1\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"References a method to be called when a corresponding asynchronous operation completes.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.AsyncCallback\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","uhfHeaderId":"MSDocsHeader-DotNet","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.AsyncCallback.yml","open_to_public_contributors":false,"api_name":["System.AsyncCallback","System.AsyncCallback..ctor","System.AsyncCallback.Invoke","System.AsyncCallback.BeginInvoke","System.AsyncCallback.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.AsyncCallback","System::AsyncCallback"],"dev_langs":["csharp"],"updated_at":"2017-04-01 05:59 PM","document_id":"d4bbd49b-c992-4b57-bbc5-39d0dfec87d1","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System/AsyncCallback.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"AsyncCallback delegate | Microsoft Docs","_op_ogTitle":"AsyncCallback delegate","description":"References a method to be called when a corresponding asynchronous operation completes.\n","toc_asset_id":"api/_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.AsyncCallback","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.asynccallback","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.asynccallback","fileRelativePath":"api/System.AsyncCallback.html"},"themesRelativePathToOutputRoot":"_themes/"}