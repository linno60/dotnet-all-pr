{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">DataGridCommandEventHandler</span>\r\n      Delegate\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the method that handles the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_CancelCommand\" data-linktype=\"relative-path\">CancelCommand</a>, <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_DeleteCommand\" data-linktype=\"relative-path\">DeleteCommand</a>, <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_EditCommand\" data-linktype=\"relative-path\">EditCommand</a>, <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_ItemCommand\" data-linktype=\"relative-path\">ItemCommand</a>, and <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_UpdateCommand\" data-linktype=\"relative-path\">UpdateCommand</a> events of a <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public delegate void DataGridCommandEventHandler(object source, DataGridCommandEventArgs e);</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></span></div><span class=\"lang-csharp\">DataGridCommandEventHandler</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example demonstrates how to specify and code event handlers for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_EditCommand\" data-linktype=\"relative-path\">EditCommand</a>, <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_CancelCommand\" data-linktype=\"relative-path\">CancelCommand</a>, and <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_UpdateCommand\" data-linktype=\"relative-path\">UpdateCommand</a> events to edit items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<pre><code class=\"lang-cs\" name=\"DataGridEdit#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      // The Cart and CartView objects temporarily store the data source\n      // for the DataGrid control while the page is being processed.\n      DataTable Cart = new DataTable();\n      DataView CartView;   \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n \n         // With a database, use an select query to retrieve the data. Because \n         // the data source in this example is an in-memory DataTable, retrieve\n         // the data from session state if it exists; otherwise, create the data\n         // source.\n         GetSource();\n\n         // The DataGrid control maintains state between posts to the server;\n         // it only needs to be bound to a data source the first time the page\n         // is loaded or when the data source is updated.\n         if (!IsPostBack)\n         {\n\n            BindGrid();\n\n         }\n                   \n      }\n \n      void ItemsGrid_Edit(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to the index of the item clicked \n         // in the DataGrid control to enable editing for that item. Be sure\n         // to rebind the DateGrid to the data source to refresh the control.\n         ItemsGrid.EditItemIndex = e.Item.ItemIndex;\n         BindGrid();\n\n      }\n \n      void ItemsGrid_Cancel(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DateGrid to the data source to refresh\n         // the control.\n         ItemsGrid.EditItemIndex = -1;\n         BindGrid();\n\n      }\n \n      void ItemsGrid_Update(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Retrieve the text boxes that contain the values to update.\n         // For bound columns, the edited value is stored in a TextBox.\n         // The TextBox is the 0th control in a cell&#39;s Controls collection.\n         // Each cell in the Cells collection of a DataGrid item represents\n         // a column in the DataGrid control.\n         TextBox qtyText = (TextBox)e.Item.Cells[3].Controls[0];\n         TextBox priceText = (TextBox)e.Item.Cells[4].Controls[0];\n \n         // Retrieve the updated values.\n         String item = e.Item.Cells[2].Text;\n         String qty = qtyText.Text;\n         String price = priceText.Text;\n        \n         DataRow dr;\n \n         // With a database, use an update command to update the data. \n         // Because the data source in this example is an in-memory \n         // DataTable, delete the old row and replace it with a new one.\n \n         // Remove the old entry and clear the row filter.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0)\n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n \n         // ***************************************************************\n         // Insert data validation code here. Be sure to validate the\n         // values entered by the user before converting to the appropriate\n         // data types and updating the data source.\n         // ***************************************************************\n\n         // Add the new entry.\n         dr = Cart.NewRow();\n         dr[0] = Convert.ToInt32(qty);\n         dr[1] = item;\n\n         // If necessary, remove the &#39;$&#39; character from the price before \n         // converting it to a Double.\n         if(price[0] == &#39;$&#39;)\n         {\n            dr[2] = Convert.ToDouble(price.Substring(1));\n         }\n         else\n         {\n            dr[2] = Convert.ToDouble(price);\n         }\n\n         Cart.Rows.Add(dr);\n \n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DateGrid to the data source to refresh\n         // the control.\n         ItemsGrid.EditItemIndex = -1;\n         BindGrid();\n\n      }\n \n      void BindGrid() \n      {\n\n         // Set the data source and bind to the Data Grid control.\n         ItemsGrid.DataSource = CartView;\n         ItemsGrid.DataBind();\n\n      }\n\n      void GetSource()\n      {\n\n         // For this example, the data source is a DataTable that is stored\n         // in session state. If the data source does not exist, create it;\n         //  otherwise, load the data.\n         if (Session[&quot;ShoppingCart&quot;] == null) \n         {     \n\n            // Create the sample data.\n            DataRow dr;  \n \n            // Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(Int32)));\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(String)));\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(Double)));\n\n            // Store the table in session state to persist its values \n            // between posts to the server.\n            Session[&quot;ShoppingCart&quot;] = Cart;\n             \n            // Populate the DataTable with sample data.\n            for (int i = 1; i &lt;= 9; i++) \n            {\n               dr = Cart.NewRow();\n               if (i % 2 != 0)\n               {\n                  dr[0] = 2;\n               }\n               else\n               {\n                  dr[0] = 1;\n               }\n               dr[1] = &quot;Item &quot; + i.ToString();\n               dr[2] = (1.23 * (i + 1));\n               Cart.Rows.Add(dr);\n            }\n\n         } \n\n         else\n         {\n\n            // Retrieve the sample data from session state.\n            Cart = (DataTable)Session[&quot;ShoppingCart&quot;];\n\n         }         \n \n         // Create a DataView and specify the field to sort by.\n         CartView = new DataView(Cart);\n         CartView.Sort=&quot;Item&quot;;\n\n         return;\n\n      }\n\n      void ItemsGrid_Command(Object sender, DataGridCommandEventArgs e)\n      {\n\n         switch(((LinkButton)e.CommandSource).CommandName)\n         {\n\n            case &quot;Delete&quot;:\n               DeleteItem(e);\n               break;\n\n            // Add other cases here, if there are multiple ButtonColumns in \n            // the DataGrid control.\n\n            default:\n               // Do nothing.\n               break;\n\n         }\n\n      }\n\n      void DeleteItem(DataGridCommandEventArgs e)\n      {\n\n         // e.Item is the table row where the command is raised. For bound\n         // columns, the value is stored in the Text property of a TableCell.\n         TableCell itemCell = e.Item.Cells[2];\n         string item = itemCell.Text;\n\n         // Remove the selected item from the data source.         \n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0) \n         {     \n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // Rebind the data source to refresh the DataGrid control.\n         BindGrid();\n\n      }\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Editing Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Editing Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           OnEditCommand=&quot;ItemsGrid_Edit&quot;\n           OnCancelCommand=&quot;ItemsGrid_Cancel&quot;\n           OnUpdateCommand=&quot;ItemsGrid_Update&quot;\n           OnItemCommand=&quot;ItemsGrid_Command&quot;\n           AutoGenerateColumns=&quot;false&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:EditCommandColumn\n                 EditText=&quot;Edit&quot;\n                 CancelText=&quot;Cancel&quot;\n                 UpdateText=&quot;Update&quot; \n                 HeaderText=&quot;Edit item&quot;&gt;\n\n               &lt;ItemStyle Wrap=&quot;False&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n               &lt;HeaderStyle Wrap=&quot;False&quot;&gt;\n               &lt;/HeaderStyle&gt;\n\n            &lt;/asp:EditCommandColumn&gt;\n\n            &lt;asp:ButtonColumn \n                 HeaderText=&quot;Delete item&quot; \n                 ButtonType=&quot;LinkButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot;/&gt;  \n \n            &lt;asp:BoundColumn HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;True&quot; \n                 DataField=&quot;Item&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Price&quot;\n                 DataField=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;/&gt;\n \n         &lt;/Columns&gt;\n \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataGridEdit#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      &#39; The Cart and CartView objects temporarily store the data source\n      &#39; for the DataGrid control while the page is being processed.\n      Dim Cart As DataTable = New DataTable()\n      Dim CartView As DataView    \n \n      Sub Page_Load(sender As Object, e As EventArgs) \n \n         &#39; With a database, use an select query to retrieve the data. Because \n         &#39; the data source in this example is an in-memory DataTable, retrieve\n         &#39; the data from session state if it exists; otherwise create the data\n         &#39; source.\n         GetSource()\n\n         &#39; The DataGrid control maintains state between posts to the server;\n         &#39; it only needs to be bound to a data source the first time the page\n         &#39; is loaded or when the data source is updated.\n         If Not IsPostBack Then\n\n            BindGrid()\n\n         End If\n                   \n      End Sub\n \n      Sub ItemsGrid_Edit(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to the index of the item clicked \n         &#39; in the DataGrid control to enable editing for that item. Be sure\n         &#39; to rebind the DateGrid to the data source to refresh the control.\n         ItemsGrid.EditItemIndex = e.Item.ItemIndex\n         BindGrid()\n\n      End Sub\n \n      Sub ItemsGrid_Cancel(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode.\n         &#39; Be sure to rebind the DateGrid to the data source to refresh\n         &#39; the control.\n         ItemsGrid.EditItemIndex = -1\n         BindGrid()\n\n      End Sub\n \n      Sub ItemsGrid_Update(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Retrieve the text boxes that contain the values to update.\n         &#39; For bound columns, the edited value is stored in a TextBox.\n         &#39; The TextBox is the 0th control in a cell&#39;s Controls collection.\n         &#39; Each cell in the Cells collection of a DataGrid item represents\n         &#39; a column in the DataGrid control.\n         Dim qtyText As TextBox = CType(e.Item.Cells(3).Controls(0), TextBox)\n         Dim priceText As TextBox = CType(e.Item.Cells(4).Controls(0), TextBox)\n \n         &#39; Retrieve the updated values.\n         Dim item As String = e.Item.Cells(2).Text\n         Dim qty As String = qtyText.Text\n         Dim price As String = priceText.Text\n        \n         Dim dr As DataRow\n \n         &#39; With a database, use an update command to update the data. \n         &#39; Because the data source in this example is an in-memory \n         &#39; DataTable, delete the old row and replace it with a new one.\n \n         &#39; Remove the old entry and clear the row filter.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then\n       \n            CartView.Delete(0)\n         \n         End If \n         CartView.RowFilter = &quot;&quot;\n \n         &#39; ***************************************************************\n         &#39; Insert data validation code here. Be sure to validate the\n         &#39; values entered by the user before converting to the appropriate\n         &#39; data types and updating the data source.\n         &#39; ***************************************************************\n\n         &#39; Add the new entry.\n         dr = Cart.NewRow()\n         dr(0) = Convert.ToInt32(qty)\n         dr(1) = item\n\n         &#39; If necessary, remove the &#39;$&#39; character from the price before \n         &#39; converting it to a Double.\n         If price.Chars(0) = &quot;$&quot; Then\n         \n            dr(2) = Convert.ToDouble(price.Substring(1))\n         \n         Else\n         \n            dr(2) = Convert.ToDouble(price)\n         \n         End If\n\n         Cart.Rows.Add(dr)\n \n         &#39; Set the EditItemIndex property to -1 to exit editing mode.\n         &#39; Be sure to rebind the DateGrid to the data source to refresh\n         &#39; the control.\n         ItemsGrid.EditItemIndex = -1\n         BindGrid()\n\n      End Sub\n \n      Sub BindGrid() \n\n         &#39; Set the data source and bind to the Data Grid control.\n         ItemsGrid.DataSource = CartView\n         ItemsGrid.DataBind()\n\n      End Sub\n\n      Sub GetSource()\n\n         &#39; For this example, the data source is a DataTable that is stored\n         &#39; in session state. If the data source does not exist, create it;\n         &#39; otherwise, load the data.\n         If Session(&quot;ShoppingCart&quot;) Is Nothing Then \n\n            &#39; Create the sample data.\n            Dim dr As DataRow  \n \n            &#39; Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, GetType(Int32)))\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, GetType(String)))\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, GetType(Double)))\n\n            &#39; Store the table in session state to persist its values\n            &#39; between posts to the server.\n            Session(&quot;ShoppingCart&quot;) = Cart\n             \n            &#39; Populate the DataTable with sample data.\n            Dim i As Integer\n\n            For i = 1 To 9 \n            \n               dr = Cart.NewRow()\n               If (i Mod 2) &lt;&gt; 0 Then\n\n                  dr(0) = 2\n               \n               Else\n               \n                  dr(0) = 1\n               \n               End If\n\n               dr(1) = &quot;Item &quot; &amp; i.ToString()\n               dr(2) = (1.23 * (i + 1))\n               Cart.Rows.Add(dr)\n            \n            Next i\n\n         Else\n\n            &#39; Retrieve the sample data from session state.\n            Cart = CType(Session(&quot;ShoppingCart&quot;), DataTable)\n\n         End If         \n \n         &#39; Create a DataView and specify the field to sort by.\n         CartView = New DataView(Cart)\n         CartView.Sort=&quot;Item&quot;\n\n         Return\n\n      End Sub\n\n      Sub ItemsGrid_Command(sender As Object, e As DataGridCommandEventArgs)\n\n         Select (CType(e.CommandSource, LinkButton)).CommandName\n\n            Case &quot;Delete&quot;\n               DeleteItem(e)\n\n            &#39; Add other cases here, if there are multiple ButtonColumns in \n            &#39; the DataGrid control.\n\n            Case Else\n               &#39; Do nothing.\n\n         End Select\n\n      End Sub\n\n      Sub DeleteItem(e As DataGridCommandEventArgs)\n\n         &#39; e.Item is the table row where the command is raised. For bound \n         &#39; columns, the value is stored in the Text property of a TableCell.\n         Dim itemCell As TableCell = e.Item.Cells(2)\n         Dim item As String = itemCell.Text\n\n         &#39; Remove the selected item from the data source.         \n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item + &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n              \n            CartView.Delete(0)\n\n         End If\n         \n         CartView.RowFilter = &quot;&quot;\n\n         &#39; Rebind the data source to refresh the DataGrid control.\n         BindGrid()\n\n      End Sub\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Editing Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Editing Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           OnEditCommand=&quot;ItemsGrid_Edit&quot;\n           OnCancelCommand=&quot;ItemsGrid_Cancel&quot;\n           OnUpdateCommand=&quot;ItemsGrid_Update&quot;\n           OnItemCommand=&quot;ItemsGrid_Command&quot;\n           AutoGenerateColumns=&quot;false&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:EditCommandColumn\n                 EditText=&quot;Edit&quot;\n                 CancelText=&quot;Cancel&quot;\n                 UpdateText=&quot;Update&quot; \n                 HeaderText=&quot;Edit item&quot;&gt;\n\n               &lt;ItemStyle Wrap=&quot;False&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n               &lt;HeaderStyle Wrap=&quot;False&quot;&gt;\n               &lt;/HeaderStyle&gt;\n\n            &lt;/asp:EditCommandColumn&gt;\n\n            &lt;asp:ButtonColumn \n                 HeaderText=&quot;Delete item&quot; \n                 ButtonType=&quot;LinkButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot;/&gt;  \n \n            &lt;asp:BoundColumn HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;True&quot; \n                 DataField=&quot;Item&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Price&quot;\n                 DataField=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;/&gt;\n \n         &lt;/Columns&gt;\n \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataGridEdit2#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      // The Cart and CartView objects temporarily store the data source\n      // for the DataGrid control while the page is being processed.\n      DataTable Cart = new DataTable();\n      DataView CartView;   \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n \n         // With a database, use an select query to retrieve the data. \n         // Because the data source in this example is an in-memory\n         // DataTable, retrieve the data from session state if it exists;\n         // otherwise, create the data source.\n         GetSource();\n\n         // The DataGrid control maintains state between posts to the server;\n         // it only needs to be bound to a data source the first time the\n         // page is loaded or when the data source is updated.\n         if (!IsPostBack)\n         {\n\n            BindGrid();\n\n         }\n\n         // Manually register the event-handling methods.\n         ItemsGrid.EditCommand += \n             new DataGridCommandEventHandler(this.ItemsGrid_Edit);\n         ItemsGrid.CancelCommand +=  \n             new DataGridCommandEventHandler(this.ItemsGrid_Cancel);\n         ItemsGrid.UpdateCommand += \n             new DataGridCommandEventHandler(this.ItemsGrid_Update);\n         ItemsGrid.ItemCommand += \n             new DataGridCommandEventHandler(this.ItemsGrid_Command);\n                   \n      }\n \n      void ItemsGrid_Edit(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to the index of the item clicked\n         // in the DataGrid control to enable editing for that item. Be sure\n         // to rebind the DateGrid to the data source to refresh the control.\n         ItemsGrid.EditItemIndex = e.Item.ItemIndex;\n         BindGrid();\n\n      }\n \n      void ItemsGrid_Cancel(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DateGrid to the data source to refresh\n         // the control.\n         ItemsGrid.EditItemIndex = -1;\n         BindGrid();\n\n      }\n \n      void ItemsGrid_Update(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Retrieve the text boxes that contain the values to update.\n         // For bound columns, the edited value is stored in a TextBox.\n         // The TextBox is the 0th control in a cell&#39;s Controls collection.\n         // Each cell in the Cells collection of a DataGrid item represents\n         // a column in the DataGrid control.\n         TextBox qtyText = (TextBox)e.Item.Cells[3].Controls[0];\n         TextBox priceText = (TextBox)e.Item.Cells[4].Controls[0];\n \n         // Retrieve the updated values.\n         String item = e.Item.Cells[2].Text;\n         String qty = qtyText.Text;\n         String price = priceText.Text;\n        \n         DataRow dr;\n \n         // With a database, use an update command to update the data.\n         // Because the data source in this example is an in-memory  \n         // DataTable, delete the old row and replace it with a new one.\n \n         // Remove the old entry and clear the row filter.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0)\n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n \n         // ***************************************************************\n         // Insert data validation code here. Make sure to validate the\n         // values entered by the user before converting to the appropriate\n         // data types and updating the data source.\n         // ***************************************************************\n\n         // Add the new entry.\n         dr = Cart.NewRow();\n         dr[0] = Convert.ToInt32(qty);\n         dr[1] = item;\n\n         // If necessary, remove the &#39;$&#39; character, from the price before\n         // converting it to a Double.\n         if(price[0] == &#39;$&#39;)\n         {\n            dr[2] = Convert.ToDouble(price.Substring(1));\n         }\n         else\n         {\n            dr[2] = Convert.ToDouble(price);\n         }\n\n         Cart.Rows.Add(dr);\n \n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DateGrid to the data source to refresh\n         // the control.\n         ItemsGrid.EditItemIndex = -1;\n         BindGrid();\n\n      }\n \n      void BindGrid() \n      {\n\n         // Set the data source and bind to the Data Grid control.\n         ItemsGrid.DataSource = CartView;\n         ItemsGrid.DataBind();\n\n      }\n\n      void GetSource()\n      {\n\n         // For this example, the data source is a DataTable that is\n         // stored in session state. If the data source does not exist, \n         // create it; otherwise, load the data.\n         if (Session[&quot;ShoppingCart&quot;] == null) \n         {     \n\n            // Create the sample data.\n            DataRow dr;  \n \n            // Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(Int32)));\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(String)));\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(Double)));\n\n            // Store the table in session state to persist its values \n            // between posts to the server.\n            Session[&quot;ShoppingCart&quot;] = Cart;\n             \n            // Populate the DataTable with sample data.\n            for (int i = 1; i &lt;= 9; i++) \n            {\n               dr = Cart.NewRow();\n               if (i % 2 != 0)\n               {\n                  dr[0] = 2;\n               }\n               else\n               {\n                  dr[0] = 1;\n               }\n               dr[1] = &quot;Item &quot; + i.ToString();\n               dr[2] = (1.23 * (i + 1));\n               Cart.Rows.Add(dr);\n            }\n\n         } \n\n         else\n         {\n\n            // Retrieve the sample data from session state.\n            Cart = (DataTable)Session[&quot;ShoppingCart&quot;];\n\n         }         \n \n         // Create a DataView and specify the field to sort by.\n         CartView = new DataView(Cart);\n         CartView.Sort=&quot;Item&quot;;\n\n         return;\n\n      }\n\n      void ItemsGrid_Command(Object sender, DataGridCommandEventArgs e)\n      {\n\n         switch(((LinkButton)e.CommandSource).CommandName)\n         {\n\n            case &quot;Delete&quot;:\n               DeleteItem(e);\n               break;\n\n            // Add other cases here, if there are multiple ButtonColumns in \n            // the DataGrid control.\n\n            default:\n               // Do nothing.\n               break;\n\n         }\n\n      }\n\n      void DeleteItem(DataGridCommandEventArgs e)\n      {\n\n         // e.Item is the table row where the command is raised. For bound\n         // columns, the value is stored in the Text property of a TableCell.\n         TableCell itemCell = e.Item.Cells[2];\n         string item = itemCell.Text;\n\n         // Remove the selected item from the data source.         \n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0) \n         {     \n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // Rebind the data source to refresh the DataGrid control.\n         BindGrid();\n\n      }\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Editing Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Editing Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           OnEditCommand=&quot;ItemsGrid_Edit&quot;\n           OnCancelCommand=&quot;ItemsGrid_Cancel&quot;\n           OnUpdateCommand=&quot;ItemsGrid_Update&quot;\n           OnItemCommand=&quot;ItemsGrid_Command&quot;\n           AutoGenerateColumns=&quot;false&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:EditCommandColumn\n                 EditText=&quot;Edit&quot;\n                 CancelText=&quot;Cancel&quot;\n                 UpdateText=&quot;Update&quot; \n                 HeaderText=&quot;Edit item&quot;&gt;\n\n               &lt;ItemStyle Wrap=&quot;False&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n               &lt;HeaderStyle Wrap=&quot;False&quot;&gt;\n               &lt;/HeaderStyle&gt;\n\n            &lt;/asp:EditCommandColumn&gt;\n\n            &lt;asp:ButtonColumn \n                 HeaderText=&quot;Delete item&quot; \n                 ButtonType=&quot;LinkButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot;/&gt;  \n \n            &lt;asp:BoundColumn HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;True&quot; \n                 DataField=&quot;Item&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Price&quot;\n                 DataField=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;/&gt;\n \n         &lt;/Columns&gt;\n \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataGridEdit2#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      &#39; The Cart and CartView objects temporarily store the data source\n      &#39; for the DataGrid control while the page is being processed.\n      Dim Cart As DataTable = New DataTable()\n      Dim CartView As DataView    \n \n      Sub Page_Load(sender As Object, e As EventArgs) \n \n         &#39; With a database, use an select query to retrieve the data. \n         &#39; Because the data source in this example is an in-memory\n         &#39; DataTable, retrieve the data from session state if it exists;\n         &#39; otherwise, create the data source.\n         GetSource()\n\n         &#39; The DataGrid control maintains state between posts to the server;\n         &#39; it only needs to be bound to a data source the first time the\n         &#39; page is loaded or when the data source is updated.\n         If Not IsPostBack Then\n\n            BindGrid()\n\n         End If\n\n         &#39; Manually register the event-handling methods.\n         AddHandler ItemsGrid.EditCommand, AddressOf ItemsGrid_Edit\n         AddHandler ItemsGrid.CancelCommand, AddressOf ItemsGrid_Cancel\n         AddHandler ItemsGrid.UpdateCommand, AddressOf ItemsGrid_Update\n         AddHandler ItemsGrid.ItemCommand, AddressOf ItemsGrid_Command\n                   \n      End Sub\n \n      Sub ItemsGrid_Edit(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to the index of the item clicked\n         &#39; in the DataGrid control to enable editing for that item. Be sure\n         &#39; to rebind the DateGrid to the data source to refresh the control.\n         ItemsGrid.EditItemIndex = e.Item.ItemIndex\n         BindGrid()\n\n      End Sub\n \n      Sub ItemsGrid_Cancel(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. \n         &#39; Be sure to rebind the DateGrid to the data source to refresh\n         &#39; the control.\n         ItemsGrid.EditItemIndex = -1\n         BindGrid()\n\n      End Sub\n \n      Sub ItemsGrid_Update(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Retrieve the text boxes that contain the values to update.\n         &#39; For bound columns, the edited value is stored in a TextBox.\n         &#39; The TextBox is the 0th control in a cell&#39;s Controls collection.\n         &#39; Each cell in the Cells collection of a DataGrid item represents\n         &#39; a column in the DataGrid control.\n         Dim qtyText As TextBox = CType(e.Item.Cells(3).Controls(0), TextBox)\n         Dim priceText As TextBox = CType(e.Item.Cells(4).Controls(0), TextBox)\n \n         &#39; Retrieve the updated values.\n         Dim item As String = e.Item.Cells(2).Text\n         Dim qty As String = qtyText.Text\n         Dim price As String = priceText.Text\n        \n         Dim dr As DataRow\n \n         &#39; With a database, use an update command to update the data. \n         &#39; Because the data source in this example is an in-memory \n         &#39; DataTable, delete the old row and replace it with a new one.\n \n         &#39; Remove the old entry and clear the row filter.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then\n       \n            CartView.Delete(0)\n         \n         End If \n         CartView.RowFilter = &quot;&quot;\n \n         &#39; ***************************************************************\n         &#39; Insert data validation code here. Make sure to validate the\n         &#39; values entered by the user before converting to the appropriate\n         &#39; data types and updating the data source.\n         &#39; ***************************************************************\n\n         &#39; Add the new entry.\n         dr = Cart.NewRow()\n         dr(0) = Convert.ToInt32(qty)\n         dr(1) = item\n\n         &#39; If necessary, remove the &#39;$&#39; character, from the price before \n         &#39; converting it to a Double.\n         If price.Chars(0) = &quot;$&quot; Then\n         \n            dr(2) = Convert.ToDouble(price.Substring(1))\n         \n         Else\n         \n            dr(2) = Convert.ToDouble(price)\n         \n         End If\n\n         Cart.Rows.Add(dr)\n \n         &#39; Set the EditItemIndex property to -1 to exit editing mode. \n         &#39; Be sure to rebind the DateGrid to the data source to refresh\n         &#39; the control.\n         ItemsGrid.EditItemIndex = -1\n         BindGrid()\n\n      End Sub\n \n      Sub BindGrid() \n\n         &#39; Set the data source and bind to the Data Grid control.\n         ItemsGrid.DataSource = CartView\n         ItemsGrid.DataBind()\n\n      End Sub\n\n      Sub GetSource()\n\n         &#39; For this example, the data source is a DataTable that is\n         &#39; stored in session state. If the data source does not exist, \n         &#39; create it; otherwise, load the data.\n         If Session(&quot;ShoppingCart&quot;) Is Nothing Then \n\n            &#39; Create the sample data.\n            Dim dr As DataRow  \n \n            &#39; Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, GetType(Int32)))\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, GetType(String)))\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, GetType(Double)))\n\n            &#39; Store the table in session state to persist its values \n            &#39; between posts to the server.\n            Session(&quot;ShoppingCart&quot;) = Cart\n             \n            &#39; Populate the DataTable with sample data.\n            Dim i As Integer\n\n            For i = 1 To 9 \n            \n               dr = Cart.NewRow()\n               If (i Mod 2) &lt;&gt; 0 Then\n\n                  dr(0) = 2\n               \n               Else\n               \n                  dr(0) = 1\n               \n               End If\n\n               dr(1) = &quot;Item &quot; &amp; i.ToString()\n               dr(2) = (1.23 * (i + 1))\n               Cart.Rows.Add(dr)\n            \n            Next i\n\n         Else\n\n            &#39; Retrieve the sample data from session state.\n            Cart = CType(Session(&quot;ShoppingCart&quot;), DataTable)\n\n         End If         \n \n         &#39; Create a DataView and specify the field to sort by.\n         CartView = New DataView(Cart)\n         CartView.Sort=&quot;Item&quot;\n\n         Return\n\n      End Sub\n\n      Sub ItemsGrid_Command(sender As Object, e As DataGridCommandEventArgs)\n\n         Select (CType(e.CommandSource, LinkButton)).CommandName\n\n            Case &quot;Delete&quot;\n               DeleteItem(e)\n\n            &#39; Add other cases here, if there are multiple ButtonColumns in \n            &#39; the DataGrid control.\n\n            Case Else\n               &#39; Do nothing.\n\n         End Select\n\n      End Sub\n\n      Sub DeleteItem(e As DataGridCommandEventArgs)\n\n         &#39; e.Item is the table row where the command is raised. For bound\n         &#39; columns, the value is stored in the Text property of a TableCell.\n         Dim itemCell As TableCell = e.Item.Cells(2)\n         Dim item As String = itemCell.Text\n\n         &#39; Remove the selected item from the data source.         \n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item + &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n              \n            CartView.Delete(0)\n\n         End If\n         \n         CartView.RowFilter = &quot;&quot;\n\n         &#39; Rebind the data source to refresh the DataGrid control.\n         BindGrid()\n\n      End Sub\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Editing Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Editing Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           AutoGenerateColumns=&quot;false&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:EditCommandColumn\n                 EditText=&quot;Edit&quot;\n                 CancelText=&quot;Cancel&quot;\n                 UpdateText=&quot;Update&quot; \n                 HeaderText=&quot;Edit item&quot;&gt;\n\n               &lt;ItemStyle Wrap=&quot;False&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n               &lt;HeaderStyle Wrap=&quot;False&quot;&gt;\n               &lt;/HeaderStyle&gt;\n\n            &lt;/asp:EditCommandColumn&gt;\n\n            &lt;asp:ButtonColumn \n                 HeaderText=&quot;Delete item&quot; \n                 ButtonType=&quot;LinkButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot;/&gt;  \n \n            &lt;asp:BoundColumn HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;True&quot; \n                 DataField=&quot;Item&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Price&quot;\n                 DataField=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;/&gt;\n \n         &lt;/Columns&gt;\n \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>When you create a DataGridCommandEventHandler delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event handler delegates, see <a href=\"http://msdn.microsoft.com/en-us/d98fd58b-fa4f-4598-8378-addf4355a115\" data-linktype=\"external\">NIB: Events and Delegates</a>.</p>\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.UI.WebControls.DataGridCommandEventHandler.yml\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGridCommandEventHandler\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGridCommandEventHandler..ctor\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGridCommandEventHandler.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGridCommandEventHandler.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGridCommandEventHandler.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-29 05:54 AM\">\r\n<meta name=\"document_id\" content=\"134ca812-8bf7-4f3c-6394-ce670ea6f5f6\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the method that handles the , , , , and  events of a  control.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.web.ui.webcontrols/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Web.UI.WebControls.DataGridCommandEventHandler\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.UI.WebControls.DataGridCommandEventHandler.yml","open_to_public_contributors":false,"api_name":["System.Web.UI.WebControls.DataGridCommandEventHandler","System.Web.UI.WebControls.DataGridCommandEventHandler..ctor","System.Web.UI.WebControls.DataGridCommandEventHandler.Invoke","System.Web.UI.WebControls.DataGridCommandEventHandler.BeginInvoke","System.Web.UI.WebControls.DataGridCommandEventHandler.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Web.UI.WebControls.DataGridCommandEventHandler","System::Web::UI::WebControls::DataGridCommandEventHandler"],"dev_langs":["csharp"],"updated_at":"2017-03-29 05:54 AM","document_id":"134ca812-8bf7-4f3c-6394-ce670ea6f5f6","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Web.UI.WebControls/DataGridCommandEventHandler.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"DataGridCommandEventHandler delegate | Microsoft Docs","_op_ogTitle":"DataGridCommandEventHandler delegate","description":"Represents the method that handles the , , , , and  events of a  control.\n","toc_asset_id":"api/_splitted/System.Web.UI.WebControls/toc.json","toc_rel":"_splitted/System.Web.UI.WebControls/toc.json","source_url":"","ms.assetid":"System.Web.UI.WebControls.DataGridCommandEventHandler","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.webcontrols.datagridcommandeventhandler","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.webcontrols.datagridcommandeventhandler","fileRelativePath":"api/System.Web.UI.WebControls.DataGridCommandEventHandler.html"},"themesRelativePathToOutputRoot":"_themes/"}