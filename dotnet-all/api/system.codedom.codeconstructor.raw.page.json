{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">CodeConstructor</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents a declaration for an instance constructor of a type.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)]\n[System.Runtime.InteropServices.ComVisible(true)]\npublic class CodeConstructor : System.CodeDom.CodeMemberMethod</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.codeobject\" data-linktype=\"relative-path\">CodeObject</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.codetypemember\" data-linktype=\"relative-path\">CodeTypeMember</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.codemembermethod\" data-linktype=\"relative-path\">CodeMemberMethod</a></span></div><span class=\"lang-csharp\">CodeConstructor</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Attributes</dt><dd>\r\n  \t\t<div class=\"cdlHolder\">\r\n  \t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.classinterfaceattribute\" title=\"System.Runtime.InteropServices.ClassInterfaceAttribute\" data-linktype=\"relative-path\">ClassInterfaceAttribute</a></span>\r\n  \t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.codemembermethod#System_CodeDom_CodeMemberMethod_ImplementationTypes\" data-linktype=\"relative-path\">ImplementationTypes</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.codemembermethod#System_CodeDom_CodeMemberMethod_Parameters\" data-linktype=\"relative-path\">Parameters</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.codemembermethod#System_CodeDom_CodeMemberMethod_PopulateImplementationTypes\" data-linktype=\"relative-path\">PopulateImplementationTypes</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.codemembermethod#System_CodeDom_CodeMemberMethod_PopulateParameters\" data-linktype=\"relative-path\">PopulateParameters</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.codemembermethod#System_CodeDom_CodeMemberMethod_PopulateStatements\" data-linktype=\"relative-path\">PopulateStatements</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.codemembermethod#System_CodeDom_CodeMemberMethod_PrivateImplementationType\" data-linktype=\"relative-path\">PrivateImplementationType</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.codemembermethod#System_CodeDom_CodeMemberMethod_ReturnType\" data-linktype=\"relative-path\">ReturnType</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.codemembermethod#System_CodeDom_CodeMemberMethod_ReturnTypeCustomAttributes\" data-linktype=\"relative-path\">ReturnTypeCustomAttributes</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.codemembermethod#System_CodeDom_CodeMemberMethod_Statements\" data-linktype=\"relative-path\">Statements</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.codemembermethod#System_CodeDom_CodeMemberMethod_TypeParameters\" data-linktype=\"relative-path\">TypeParameters</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.codeobject#System_CodeDom_CodeObject_UserData\" data-linktype=\"relative-path\">UserData</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.codetypemember#System_CodeDom_CodeTypeMember_Attributes\" data-linktype=\"relative-path\">Attributes</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.codetypemember#System_CodeDom_CodeTypeMember_Comments\" data-linktype=\"relative-path\">Comments</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.codetypemember#System_CodeDom_CodeTypeMember_CustomAttributes\" data-linktype=\"relative-path\">CustomAttributes</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.codetypemember#System_CodeDom_CodeTypeMember_EndDirectives\" data-linktype=\"relative-path\">EndDirectives</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.codetypemember#System_CodeDom_CodeTypeMember_LinePragma\" data-linktype=\"relative-path\">LinePragma</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.codetypemember#System_CodeDom_CodeTypeMember_Name\" data-linktype=\"relative-path\">Name</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.codetypemember#System_CodeDom_CodeTypeMember_StartDirectives\" data-linktype=\"relative-path\">StartDirectives</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>This example demonstrates using a CodeConstructor to declare several types of constructors.  </p>\n<pre><code class=\"lang-cs\" name=\"CodeConstructorExample#2\">// This example declares two types, one of which inherits from another,\n// and creates a set of different styles of constructors using CodeConstructor.\n\n// Creates a new CodeCompileUnit to contain the program graph.\nCodeCompileUnit CompileUnit = new CodeCompileUnit();\n// Declares a new namespace object and names it.\nCodeNamespace Samples = new CodeNamespace(&quot;Samples&quot;);\n// Adds the namespace object to the compile unit.\nCompileUnit.Namespaces.Add( Samples );\n// Adds a new namespace import for the System namespace.\nSamples.Imports.Add( new CodeNamespaceImport(&quot;System&quot;) );            \n\n// Declares a new type and names it.\nCodeTypeDeclaration BaseType = new CodeTypeDeclaration(&quot;BaseType&quot;);                                                \n// Adds the new type to the namespace object&#39;s type collection.\nSamples.Types.Add(BaseType);\n\n// Declares a default constructor that takes no arguments.\nCodeConstructor defaultConstructor = new CodeConstructor();\ndefaultConstructor.Attributes = MemberAttributes.Public;\n// Adds the constructor to the Members collection of the BaseType.\nBaseType.Members.Add(defaultConstructor);\n\n// Declares a constructor that takes a string argument.\nCodeConstructor stringConstructor = new CodeConstructor();\nstringConstructor.Attributes = MemberAttributes.Public;\n// Declares a parameter of type string named &quot;TestStringParameter&quot;.\nstringConstructor.Parameters.Add( new CodeParameterDeclarationExpression(&quot;System.String&quot;, &quot;TestStringParameter&quot;) );\n// Adds the constructor to the Members collection of the BaseType.\nBaseType.Members.Add(stringConstructor);\n            \n// Declares a type that derives from BaseType and names it.\nCodeTypeDeclaration DerivedType = new CodeTypeDeclaration(&quot;DerivedType&quot;);\n// The DerivedType class inherits from the BaseType class.\nDerivedType.BaseTypes.Add( new CodeTypeReference(&quot;BaseType&quot;) );\n// Adds the new type to the namespace object&#39;s type collection.\nSamples.Types.Add(DerivedType);        \n        \n// Declare a constructor that takes a string argument and calls the base class constructor with it.\nCodeConstructor baseStringConstructor = new CodeConstructor();\nbaseStringConstructor.Attributes = MemberAttributes.Public;\n// Declares a parameter of type string named &quot;TestStringParameter&quot;.    \nbaseStringConstructor.Parameters.Add( new CodeParameterDeclarationExpression(&quot;System.String&quot;, &quot;TestStringParameter&quot;) );\n// Calls a base class constructor with the TestStringParameter parameter.\nbaseStringConstructor.BaseConstructorArgs.Add( new CodeVariableReferenceExpression(&quot;TestStringParameter&quot;) );\n// Adds the constructor to the Members collection of the DerivedType.\nDerivedType.Members.Add(baseStringConstructor);\n\n// Declares a constructor overload that calls another constructor for the type with a predefined argument.\nCodeConstructor overloadConstructor = new CodeConstructor();\noverloadConstructor.Attributes = MemberAttributes.Public;\n// Sets the argument to pass to a base constructor method.\noverloadConstructor.ChainedConstructorArgs.Add( new CodePrimitiveExpression(&quot;Test&quot;) );\n// Adds the constructor to the Members collection of the DerivedType.\nDerivedType.Members.Add(overloadConstructor);        \n\n// Declares a constructor overload that calls the default constructor for the type.\nCodeConstructor overloadConstructor2 = new CodeConstructor();\noverloadConstructor2.Attributes = MemberAttributes.Public;\noverloadConstructor2.Parameters.Add( new CodeParameterDeclarationExpression(&quot;System.Int32&quot;, &quot;TestIntParameter&quot;) );\n// Sets the argument to pass to a base constructor method.\noverloadConstructor2.ChainedConstructorArgs.Add( new CodeSnippetExpression(&quot;&quot;) );\n// Adds the constructor to the Members collection of the DerivedType.\nDerivedType.Members.Add(overloadConstructor2);            \n\n// A C# code generator produces the following source code for the preceeding example code:\n\n// public class BaseType {\n//     \n//     public BaseType() {\n//     }\n//        \n//     public BaseType(string TestStringParameter) {\n//     }\n// }\n//    \n// public class DerivedType : BaseType {\n//        \n//     public DerivedType(string TestStringParameter) : \n//             base(TestStringParameter) {\n//     }\n//        \n//     public DerivedType() : \n//             this(&quot;Test&quot;) {\n//     }\n//\n//     public DerivedType(int TestIntParameter) : \n//                this() {\n//     }\n// }\n</code></pre><pre><code class=\"lang-cpp\" name=\"CodeConstructorExample#2\">// This example declares two types, one of which inherits from another,\n// and creates a set of different styles of constructors using CodeConstructor.\n// Creates a new CodeCompileUnit to contain the program graph.\nCodeCompileUnit^ CompileUnit = gcnew CodeCompileUnit;\n\n// Declares a new namespace object and names it.\nCodeNamespace^ Samples = gcnew CodeNamespace( &quot;Samples&quot; );\n\n// Adds the namespace object to the compile unit.\nCompileUnit-&gt;Namespaces-&gt;Add( Samples );\n\n// Adds a new namespace import for the System namespace.\nSamples-&gt;Imports-&gt;Add( gcnew CodeNamespaceImport( &quot;System&quot; ) );\n\n// Declares a new type and names it.\nCodeTypeDeclaration^ BaseType = gcnew CodeTypeDeclaration( &quot;BaseType&quot; );\n\n// Adds the new type to the namespace object&#39;s type collection.\nSamples-&gt;Types-&gt;Add( BaseType );\n\n// Declares a default constructor that takes no arguments.\nCodeConstructor^ defaultConstructor = gcnew CodeConstructor;\ndefaultConstructor-&gt;Attributes = MemberAttributes::Public;\n\n// Adds the constructor to the Members collection of the BaseType.\nBaseType-&gt;Members-&gt;Add( defaultConstructor );\n\n// Declares a constructor that takes a string argument.\nCodeConstructor^ stringConstructor = gcnew CodeConstructor;\nstringConstructor-&gt;Attributes = MemberAttributes::Public;\n\n// Declares a parameter of type string named &quot;TestStringParameter&quot;.\nstringConstructor-&gt;Parameters-&gt;Add( gcnew CodeParameterDeclarationExpression( &quot;System.String&quot;,&quot;TestStringParameter&quot; ) );\n\n// Adds the constructor to the Members collection of the BaseType.\nBaseType-&gt;Members-&gt;Add( stringConstructor );\n\n// Declares a type that derives from BaseType and names it.\nCodeTypeDeclaration^ DerivedType = gcnew CodeTypeDeclaration( &quot;DerivedType&quot; );\n\n// The DerivedType class inherits from the BaseType class.\nDerivedType-&gt;BaseTypes-&gt;Add( gcnew CodeTypeReference( &quot;BaseType&quot; ) );\n\n// Adds the new type to the namespace object&#39;s type collection.\nSamples-&gt;Types-&gt;Add( DerivedType );\n\n// Declare a constructor that takes a string argument and calls the base class constructor with it.\nCodeConstructor^ baseStringConstructor = gcnew CodeConstructor;\nbaseStringConstructor-&gt;Attributes = MemberAttributes::Public;\n\n// Declares a parameter of type string named &quot;TestStringParameter&quot;.    \nbaseStringConstructor-&gt;Parameters-&gt;Add( gcnew CodeParameterDeclarationExpression( &quot;System.String&quot;,&quot;TestStringParameter&quot; ) );\n\n// Calls a base class constructor with the TestStringParameter parameter.\nbaseStringConstructor-&gt;BaseConstructorArgs-&gt;Add( gcnew CodeVariableReferenceExpression( &quot;TestStringParameter&quot; ) );\n\n// Adds the constructor to the Members collection of the DerivedType.\nDerivedType-&gt;Members-&gt;Add( baseStringConstructor );\n\n// Declares a constructor overload that calls another constructor for the type with a predefined argument.\nCodeConstructor^ overloadConstructor = gcnew CodeConstructor;\noverloadConstructor-&gt;Attributes = MemberAttributes::Public;\n\n// Sets the argument to pass to a base constructor method.\noverloadConstructor-&gt;ChainedConstructorArgs-&gt;Add( gcnew CodePrimitiveExpression( &quot;Test&quot; ) );\n\n// Adds the constructor to the Members collection of the DerivedType.\nDerivedType-&gt;Members-&gt;Add( overloadConstructor );\n\n// Declares a constructor overload that calls the default constructor for the type.\nCodeConstructor^ overloadConstructor2 = gcnew CodeConstructor;\noverloadConstructor2-&gt;Attributes = MemberAttributes::Public;\noverloadConstructor2-&gt;Parameters-&gt;Add( gcnew CodeParameterDeclarationExpression( &quot;System.Int32&quot;,&quot;TestIntParameter&quot; ) );\n\n// Sets the argument to pass to a base constructor method.\noverloadConstructor2-&gt;ChainedConstructorArgs-&gt;Add( gcnew CodeSnippetExpression( &quot;&quot; ) );\n\n// Adds the constructor to the Members collection of the DerivedType.\nDerivedType-&gt;Members-&gt;Add( overloadConstructor2 );\n\n// A C# code generator produces the following source code for the preceeding example code:\n// public class BaseType {\n//     \n//     public BaseType() {\n//     }\n//        \n//     public BaseType(string TestStringParameter) {\n//     }\n// }\n//    \n// public class DerivedType : BaseType {\n//        \n//     public DerivedType(string TestStringParameter) : \n//             base(TestStringParameter) {\n//     }\n//        \n//     public DerivedType() : \n//             this(&quot;Test&quot;) {\n//     }\n//\n//     public DerivedType(int TestIntParameter) : \n//                this() {\n//     }\n// }\n</code></pre><pre><code class=\"lang-vb\" name=\"CodeConstructorExample#2\"> &#39; This example declares two types, one of which inherits from another,\n &#39; and creates a set of different styles of constructors using CodeConstructor.\n\n &#39; Creates a new CodeCompileUnit to contain the program graph.\n Dim CompileUnit As New CodeCompileUnit()\n &#39; Declares a new namespace object and names it.\n Dim Samples As New CodeNamespace(&quot;Samples&quot;)\n &#39; Adds the namespace object to the compile unit.\n CompileUnit.Namespaces.Add(Samples)\n &#39; Adds a new namespace import for the System namespace.\n Samples.Imports.Add(New CodeNamespaceImport(&quot;System&quot;))\n \n &#39; Declares a new type and names it.\n Dim BaseType As New CodeTypeDeclaration(&quot;BaseType&quot;)\n &#39; Adds the new type to the namespace object&#39;s type collection.\n Samples.Types.Add(BaseType)\n \n &#39; Declares a default constructor that takes no arguments.\n Dim defaultConstructor As New CodeConstructor()\n defaultConstructor.Attributes = MemberAttributes.Public\n &#39; Adds the constructor to the Members collection of the BaseType.\n BaseType.Members.Add(defaultConstructor)\n \n &#39; Declares a constructor that takes a string argument.\n Dim stringConstructor As New CodeConstructor()\n stringConstructor.Attributes = MemberAttributes.Public\n &#39; Declares a parameter of type string named &quot;TestStringParameter&quot;.\n stringConstructor.Parameters.Add(New CodeParameterDeclarationExpression(&quot;System.String&quot;, &quot;TestStringParameter&quot;))\n &#39; Adds the constructor to the Members collection of the BaseType.\n BaseType.Members.Add(stringConstructor)\n \n &#39; Declares a type that derives from BaseType and names it.\n Dim DerivedType As New CodeTypeDeclaration(&quot;DerivedType&quot;)\n &#39; The DerivedType class inherits from the BaseType class.\n DerivedType.BaseTypes.Add(New CodeTypeReference(&quot;BaseType&quot;))\n &#39; Adds the new type to the namespace object&#39;s type collection.\n Samples.Types.Add(DerivedType)\n \n &#39; Declare a constructor that takes a string argument and calls the base class constructor with it.\n Dim baseStringConstructor As New CodeConstructor()\n baseStringConstructor.Attributes = MemberAttributes.Public\n &#39; Declares a parameter of type string named &quot;TestStringParameter&quot;.\t\n baseStringConstructor.Parameters.Add(New CodeParameterDeclarationExpression(&quot;System.String&quot;, &quot;TestStringParameter&quot;))\n &#39; Calls a base class constructor with the TestStringParameter parameter.\n baseStringConstructor.BaseConstructorArgs.Add(New CodeVariableReferenceExpression(&quot;TestStringParameter&quot;))\n &#39; Adds the constructor to the Members collection of the DerivedType.\n DerivedType.Members.Add(baseStringConstructor)\n \n &#39; Declares a constructor overload that calls another constructor for the type with a predefined argument.\n Dim overloadConstructor As New CodeConstructor()\n overloadConstructor.Attributes = MemberAttributes.Public\n &#39; Sets the argument to pass to a base constructor method.\n overloadConstructor.ChainedConstructorArgs.Add(New CodePrimitiveExpression(&quot;Test&quot;))\n &#39; Adds the constructor to the Members collection of the DerivedType.\n DerivedType.Members.Add(overloadConstructor)\n\n &#39; Declares a constructor overload that calls another constructor for the type.\n Dim overloadConstructor2 As New CodeConstructor()\n overloadConstructor2.Attributes = MemberAttributes.Public\n overloadConstructor2.Parameters.Add( New CodeParameterDeclarationExpression(&quot;System.Int32&quot;, &quot;TestIntParameter&quot;) )\n &#39; Sets the argument to pass to a base constructor method.\n overloadConstructor2.ChainedConstructorArgs.Add(New CodeSnippetExpression(&quot;&quot;))\n &#39; Adds the constructor to the Members collection of the DerivedType.\n DerivedType.Members.Add(overloadConstructor2)\n\n&#39; A Visual Basic code generator produces the following source code for the preceeding example code:\n\n&#39; Public Class BaseType\n&#39;     \n&#39;     Public Sub New()\n&#39;         MyBase.New\n&#39;     End Sub\n&#39;        \n&#39;     Public Sub New(ByVal TestStringParameter As String)\n&#39;         MyBase.New\n&#39;     End Sub\n&#39; End Class\n&#39;    \n&#39; Public Class DerivedType\n&#39;     Inherits BaseType\n&#39;        \n&#39;     Public Sub New(ByVal TestStringParameter As String)\n&#39;         MyBase.New(TestStringParameter)\n&#39;     End Sub\n&#39;     \n&#39;     Public Sub New()\n&#39;         Me.New(&quot;Test&quot;)\n&#39;     End Sub\n&#39;\n&#39;     Public Sub New(ByVal TestIntParameter As Integer)\n&#39;         Me.New()\n&#39;     End Sub\n&#39; End Class\n\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>CodeConstructor can be used to represent a declaration of an instance constructor for a type. Use <a class=\"xref\" href=\"system.codedom.codetypeconstructor\" data-linktype=\"relative-path\">CodeTypeConstructor</a> to declare a static constructor for a type.  </p>\n<p> If the constructor calls a base class constructor, set the constructor arguments for the base class constructor in the <a class=\"xref\" href=\"system.codedom.codeconstructor#System_CodeDom_CodeConstructor_BaseConstructorArgs_\" data-linktype=\"relative-path\">BaseConstructorArgs</a> property. If the constructor overloads another constuctor for the type, set the constructor arguments to pass to the overloaded type constructor in the <a class=\"xref\" href=\"system.codedom.codeconstructor#System_CodeDom_CodeConstructor_ChainedConstructorArgs_\" data-linktype=\"relative-path\">ChainedConstructorArgs</a> property.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_CodeDom_CodeConstructor__ctor_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_CodeDom_CodeConstructor__ctor\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CodeConstructor()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.codedom.codeconstructor\" data-linktype=\"relative-path\">CodeConstructor</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public CodeConstructor ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.classinterfaceattribute\" title=\"System.Runtime.InteropServices.ClassInterfaceAttribute\" data-linktype=\"relative-path\">ClassInterfaceAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_CodeDom_CodeConstructor_BaseConstructorArgs_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_CodeDom_CodeConstructor_BaseConstructorArgs\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">BaseConstructorArgs</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the collection of base constructor arguments.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.CodeDom.CodeExpressionCollection BaseConstructorArgs { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.codeexpressioncollection\" data-linktype=\"relative-path\">CodeExpressionCollection</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.codedom.codeexpressioncollection\" data-linktype=\"relative-path\">CodeExpressionCollection</a> that contains the base constructor arguments.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.classinterfaceattribute\" title=\"System.Runtime.InteropServices.ClassInterfaceAttribute\" data-linktype=\"relative-path\">ClassInterfaceAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>When the <a class=\"xref\" href=\"system.codedom.codeconstructor\" data-linktype=\"relative-path\">CodeConstructor</a> overloads a base class constructor, this collection contains any arguments to pass to a base class constructor. To call a base class constructor with no arguments, set a <a class=\"xref\" href=\"system.codedom.codesnippetexpression\" data-linktype=\"relative-path\">CodeSnippetExpression</a> containing an empty string (&quot;&quot;) to this collection.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_CodeDom_CodeConstructor_ChainedConstructorArgs_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_CodeDom_CodeConstructor_ChainedConstructorArgs\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ChainedConstructorArgs</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the collection of chained constructor arguments.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.CodeDom.CodeExpressionCollection ChainedConstructorArgs { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.codeexpressioncollection\" data-linktype=\"relative-path\">CodeExpressionCollection</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.codedom.codeexpressioncollection\" data-linktype=\"relative-path\">CodeExpressionCollection</a> that contains the chained constructor arguments.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.classinterfaceattribute\" title=\"System.Runtime.InteropServices.ClassInterfaceAttribute\" data-linktype=\"relative-path\">ClassInterfaceAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>When the <a class=\"xref\" href=\"system.codedom.codeconstructor\" data-linktype=\"relative-path\">CodeConstructor</a> overloads another constructor of the same type, this collection contains any arguments to pass to the overloaded type constructor. To call a constructor for the current type with no arguments, set a <a class=\"xref\" href=\"system.codedom.codesnippetexpression\" data-linktype=\"relative-path\">CodeSnippetExpression</a> containing an empty string (&quot;&quot;) to this collection.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"uhfHeaderId\" content=\"MSDocsHeader-DotNet\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.CodeDom.CodeConstructor.yml\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.CodeConstructor\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.CodeConstructor..ctor\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.CodeConstructor.BaseConstructorArgs\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.CodeConstructor.ChainedConstructorArgs\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-04-01 05:59 PM\">\r\n<meta name=\"document_id\" content=\"eab1c992-97d5-349a-0f08-b4920d5fabea\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a declaration for an instance constructor of a type.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.codedom/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.CodeDom.CodeConstructor\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","uhfHeaderId":"MSDocsHeader-DotNet","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.CodeDom.CodeConstructor.yml","open_to_public_contributors":false,"api_name":["System.CodeDom.CodeConstructor","System.CodeDom.CodeConstructor..ctor","System.CodeDom.CodeConstructor.BaseConstructorArgs","System.CodeDom.CodeConstructor.ChainedConstructorArgs"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.CodeDom.CodeConstructor","System::CodeDom::CodeConstructor","System.CodeDom.CodeConstructor.#ctor","System::CodeDom::CodeConstructor::#ctor","System.CodeDom.CodeConstructor.BaseConstructorArgs","System::CodeDom::CodeConstructor::BaseConstructorArgs","System.CodeDom.CodeConstructor.ChainedConstructorArgs","System::CodeDom::CodeConstructor::ChainedConstructorArgs"],"dev_langs":["csharp"],"updated_at":"2017-04-01 05:59 PM","document_id":"eab1c992-97d5-349a-0f08-b4920d5fabea","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.CodeDom/CodeConstructor.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"CodeConstructor class | Microsoft Docs","_op_ogTitle":"CodeConstructor class","description":"Represents a declaration for an instance constructor of a type.\n","toc_asset_id":"api/_splitted/System.CodeDom/toc.json","toc_rel":"_splitted/System.CodeDom/toc.json","source_url":"","ms.assetid":"System.CodeDom.CodeConstructor","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.codedom.codeconstructor","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.codedom.codeconstructor","fileRelativePath":"api/System.CodeDom.CodeConstructor.html"},"themesRelativePathToOutputRoot":"_themes/"}