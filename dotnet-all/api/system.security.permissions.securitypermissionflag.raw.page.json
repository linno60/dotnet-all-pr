{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">SecurityPermissionFlag</span>\r\n      Enum\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Specifies access flags for the security permission object.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\r\n  \t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Flags]\n[System.Runtime.InteropServices.ComVisible(true)]\npublic enum SecurityPermissionFlag</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">System.Enum</a></span></div><span class=\"lang-csharp\">SecurityPermissionFlag</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example shows the use of the SecurityPermissionFlag enumeration to deny and demand security permissions.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Security.Permissions.SecurityPermissionAttribute#1\">// This sample demonstrates the use of the SecurityPermissionAttribute.\n\nusing System;\nusing System.Security.Permissions;\nusing System.Security;\n\n\nclass MyClass\n{\n    public static void PermissionDemo()\n    {\n        try\n        {\n            DenySecurityPermissions();\n            DenyAllSecurityPermissions();\n            DoNotDenySecurityPermissions();\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(e.Message.ToString());\n        }\n\n\n\n    }\n\n    // This method demonstrates the use of the SecurityPermissionAttribute to deny individual security permissions.\n    // Set the Assertion property.\n    [SecurityPermissionAttribute(SecurityAction.Deny, Assertion = true)]\n        // Set the ControlAppDomain property.\n    [SecurityPermissionAttribute(SecurityAction.Deny, ControlAppDomain = true)]\n        // Set the ControlDomainPolicy property.\n    [SecurityPermissionAttribute(SecurityAction.Deny, ControlDomainPolicy = true)]\n        // Set the ControlEvidence property.\n    [SecurityPermissionAttribute(SecurityAction.Deny, ControlEvidence = true)]\n        // Set the ControlPolicy property.\n    [SecurityPermissionAttribute(SecurityAction.Deny, ControlPolicy = true)]\n        // Set the ControlPrincipal property.\n    [SecurityPermissionAttribute(SecurityAction.Deny, ControlPrincipal = true)]\n        // Set the ControlThread property.\n    [SecurityPermissionAttribute(SecurityAction.Deny, ControlThread = true)]\n        // Set the Execution property.\n    [SecurityPermissionAttribute(SecurityAction.Deny, Execution = true)]\n        // Set the Flags property.\n    [SecurityPermissionAttribute(SecurityAction.Deny, Flags = SecurityPermissionFlag.NoFlags)]\n        // Set the Infrastructure property.\n    [SecurityPermissionAttribute(SecurityAction.Deny, Infrastructure = true)]\n        // Set the RemotingConfiguration property.\n    [SecurityPermissionAttribute(SecurityAction.Deny, RemotingConfiguration = true)]\n        // Set the SerializationFormatter property.\n    [SecurityPermissionAttribute(SecurityAction.Deny, SerializationFormatter = true)]\n        // Set the SkipVerification property.\n    [SecurityPermissionAttribute(SecurityAction.Deny, SkipVerification = true)]\n        // Set the UnmanagedCode property.\n    [SecurityPermissionAttribute(SecurityAction.Deny, UnmanagedCode = true)]\n\n    public static void DenySecurityPermissions()\n    {\n        Console.WriteLine(&quot;Executing DenySecurityPermissions.&quot;);\n        Console.WriteLine(&quot;Denied all permissions individually.&quot;);\n        TestSecurityPermissions();\n    }\n\n    // This method demonstrates the use of SecurityPermissionFlag.AllFlags to deny all security permissions.\n    [SecurityPermissionAttribute(SecurityAction.Deny, Flags = SecurityPermissionFlag.AllFlags)]\n    public static void DenyAllSecurityPermissions()\n    {\n        Console.WriteLine(&quot;\\nExecuting DenyAllSecurityPermissions.&quot;);\n        Console.WriteLine(&quot;Denied all permissions using SecurityPermissionFlag.AllFlags.&quot;);\n        TestSecurityPermissions();\n    }\n\n    // This method demonstrates the effect of not denying security permissions.\n    public static void DoNotDenySecurityPermissions()\n    {\n        Console.WriteLine(&quot;\\nExecuting DoNotDenySecurityPermissions.&quot;);\n        Console.WriteLine(&quot;No permissions have been denied.&quot;);\n        DemandSecurityPermissions();\n    }\n\n    public static void TestSecurityPermissions()\n    {\n        Console.WriteLine(&quot;\\nExecuting TestSecurityPermissions.\\n&quot;);\n        try\n        {\n            SecurityPermission sp =\n                new SecurityPermission(SecurityPermissionFlag.Assertion);\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.Assertion&quot;);\n            // This demand should cause an exception.\n            sp.Demand();\n            // The TestFailed method is called if an exception is not thrown.\n            TestFailed();\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.Assertion failed: &quot; + e.Message);\n        }\n        try\n        {\n            SecurityPermission sp =\n                new SecurityPermission(SecurityPermissionFlag.ControlAppDomain);\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.ControlAppDomain&quot;);\n            sp.Demand();\n            TestFailed();\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.ControlAppDomain failed: &quot; + e.Message);\n        }\n        try\n        {\n            SecurityPermission sp =\n                new SecurityPermission(SecurityPermissionFlag.ControlDomainPolicy);\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.ControlDomainPolicy&quot;);\n            sp.Demand();\n            TestFailed();\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.ControlDomainPolicy failed: &quot; + e.Message);\n        }\n        try\n        {\n            SecurityPermission sp =\n                new SecurityPermission(SecurityPermissionFlag.ControlEvidence);\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.ControlEvidence&quot;);\n            sp.Demand();\n            TestFailed();\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.ControlEvidence failed: &quot; + e.Message);\n        }\n        try\n        {\n            SecurityPermission sp =\n                new SecurityPermission(SecurityPermissionFlag.ControlPolicy);\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.ControlPolicy&quot;);\n            sp.Demand();\n            TestFailed();\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.ControlPolicy failed: &quot; + e.Message);\n        }\n        try\n        {\n            SecurityPermission sp =\n                new SecurityPermission(SecurityPermissionFlag.ControlPrincipal);\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.ControlPrincipal&quot;);\n            sp.Demand();\n            TestFailed();\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.ControlPrincipal failed: &quot; + e.Message);\n        }\n        try\n        {\n            SecurityPermission sp =\n                new SecurityPermission(SecurityPermissionFlag.ControlThread);\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.ControlThread&quot;);\n            sp.Demand();\n            TestFailed();\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.ControlThread failed: &quot; + e.Message);\n        }\n        try\n        {\n            SecurityPermission sp =\n                new SecurityPermission(SecurityPermissionFlag.Execution);\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.Execution&quot;);\n            sp.Demand();\n            TestFailed();\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.Execution failed: &quot; + e.Message);\n        }\n        try\n        {\n            SecurityPermission sp =\n                new SecurityPermission(SecurityPermissionFlag.Infrastructure);\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.Infrastructure&quot;);\n            sp.Demand();\n            TestFailed();\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.Infrastructure failed: &quot; + e.Message);\n        }\n        try\n        {\n            SecurityPermission sp =\n                new SecurityPermission(SecurityPermissionFlag.RemotingConfiguration);\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.RemotingConfiguration&quot;);\n            sp.Demand();\n            TestFailed();\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.RemotingConfiguration failed: &quot; + e.Message);\n        }\n        try\n        {\n            SecurityPermission sp =\n                new SecurityPermission(SecurityPermissionFlag.SerializationFormatter);\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.SerializationFormatter&quot;);\n            sp.Demand();\n            TestFailed();\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.SerializationFormatter failed: &quot; + e.Message);\n        }\n        try\n        {\n            SecurityPermission sp =\n                new SecurityPermission(SecurityPermissionFlag.SkipVerification);\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.SkipVerification&quot;);\n            sp.Demand();\n            TestFailed();\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.SkipVerification failed: &quot; + e.Message);\n        }\n        try\n        {\n            SecurityPermission sp =\n                new SecurityPermission(SecurityPermissionFlag.UnmanagedCode);\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.UnmanagedCode&quot;);\n            // This demand should cause an exception.\n            sp.Demand();\n            // The TestFailed method is called if an exception is not thrown.\n            TestFailed();\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.UnmanagedCode failed: &quot; + e.Message);\n        }\n\n    }\n\n    public static void TestFailed()\n    {\n        Console.WriteLine(&quot;In TestFailed method.&quot;);\n        Console.WriteLine(&quot;Throwing an exception.&quot;);\n        throw new Exception();\n    }\n\t\n    public static void DemandSecurityPermissions()\n    {\n        Console.WriteLine(&quot;\\nExecuting DemandSecurityPermissions.\\n&quot;);\n        try\n        {\n            SecurityPermission sp =\n                new SecurityPermission(SecurityPermissionFlag.Assertion);\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.Assertion&quot;);\n            sp.Demand();\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.Assertion succeeded.&quot;);\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.Assertion failed: &quot; + e.Message);\n        }\n        try\n        {\n            SecurityPermission sp =\n                new SecurityPermission(SecurityPermissionFlag.ControlAppDomain);\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.ControlAppDomain&quot;);\n            sp.Demand();\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.ControlAppDomain succeeded.&quot;);\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.ControlAppDomain failed: &quot; + e.Message);\n        }\n        try\n        {\n            SecurityPermission sp =\n                new SecurityPermission(SecurityPermissionFlag.ControlDomainPolicy);\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.ControlDomainPolicy&quot;);\n            sp.Demand();\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.ControlDomainPolicy succeeded.&quot;);\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.ControlDomainPolicy failed: &quot; + e.Message);\n        }\n        try\n        {\n            SecurityPermission sp =\n                new SecurityPermission(SecurityPermissionFlag.ControlEvidence);\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.ControlEvidence&quot;);\n            sp.Demand();\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.ControlEvidence succeeded.&quot;);\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.ControlEvidence failed: &quot; + e.Message);\n        }\n        try\n        {\n            SecurityPermission sp =\n                new SecurityPermission(SecurityPermissionFlag.ControlPolicy);\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.ControlPolicy&quot;);\n            sp.Demand();\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.ControlPolicy succeeded.&quot;);\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.ControlPolicy failed: &quot; + e.Message);\n        }\n        try\n        {\n            SecurityPermission sp =\n                new SecurityPermission(SecurityPermissionFlag.ControlPrincipal);\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.ControlPrincipal&quot;);\n            sp.Demand();\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.ControlPrincipal succeeded.&quot;);\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.ControlPrincipal failed: &quot; + e.Message);\n        }\n        try\n        {\n            SecurityPermission sp =\n                new SecurityPermission(SecurityPermissionFlag.ControlThread);\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.ControlThread&quot;);\n            sp.Demand();\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.ControlThread succeeded.&quot;);\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.ControlThread failed: &quot; + e.Message);\n        }\n        try\n        {\n            SecurityPermission sp =\n                new SecurityPermission(SecurityPermissionFlag.Execution);\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.Execution&quot;);\n            sp.Demand();\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.Execution succeeded.&quot;);\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.Execution failed: &quot; + e.Message);\n        }\n        try\n        {\n            SecurityPermission sp =\n                new SecurityPermission(SecurityPermissionFlag.Infrastructure);\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.Infrastructure&quot;);\n            sp.Demand();\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.Infrastructure succeeded.&quot;);\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.Infrastructure failed: &quot; + e.Message);\n        }\n        try\n        {\n            SecurityPermission sp =\n                new SecurityPermission(SecurityPermissionFlag.RemotingConfiguration);\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.RemotingConfiguration&quot;);\n            sp.Demand();\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.RemotingConfiguration succeeded.&quot;);\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.RemotingConfiguration failed: &quot; + e.Message);\n        }\n        try\n        {\n            SecurityPermission sp =\n                new SecurityPermission(SecurityPermissionFlag.SerializationFormatter);\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.SerializationFormatter&quot;);\n            sp.Demand();\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.SerializationFormatter succeeded.&quot;);\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.SerializationFormatter failed: &quot; + e.Message);\n        }\n        try\n        {\n            SecurityPermission sp =\n                new SecurityPermission(SecurityPermissionFlag.SkipVerification);\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.SkipVerification&quot;);\n            sp.Demand();\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.SkipVerification succeeded.&quot;);\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.SkipVerification failed: &quot; + e.Message);\n        }\n        try\n        {\n            SecurityPermission sp =\n                new SecurityPermission(SecurityPermissionFlag.UnmanagedCode);\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.UnmanagedCode&quot;);\n            sp.Demand();\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.UnmanagedCode succeeded.&quot;);\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.UnmanagedCode failed: &quot; + e.Message);\n        }\n\n    }\n\n    static void Main(string[] args)\n    {\n        PermissionDemo();\n    }\n\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Security.Permissions.SecurityPermissionAttribute#1\">// This sample demonstrates the use of the SecurityPermissionAttribute.\nusing namespace System;\nusing namespace System::Security::Permissions;\nusing namespace System::Security;\nclass MyClass\n{\npublic:\n   static void PermissionDemo()\n   {\n      try\n      {\n         DenySecurityPermissions();\n         DenyAllSecurityPermissions();\n         DoNotDenySecurityPermissions();\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( e-&gt;Message );\n      }\n\n   }\n\n\n   // This method demonstrates the use of the SecurityPermissionAttribute to deny individual security permissions.\n   // Set the Assertion property.\n   [SecurityPermissionAttribute(SecurityAction::Deny,Assertion=true)]\n   // Set the ControlAppDomain property.\n   [SecurityPermissionAttribute(SecurityAction::Deny,ControlAppDomain=true)]\n   // Set the ControlDomainPolicy property.\n   [SecurityPermissionAttribute(SecurityAction::Deny,ControlDomainPolicy=true)]\n   [SecurityPermissionAttribute(SecurityAction::Deny,ControlEvidence=true)]\n   // Set the ControlEvidence property.\n   [SecurityPermissionAttribute(SecurityAction::Deny,ControlPolicy=true)]\n   // Set the ControlPolicy property.\n   [SecurityPermissionAttribute(SecurityAction::Deny,ControlPrincipal=true)]\n   // Set the ControlPrincipal property.\n   // Set the ControlThread property.\n   [SecurityPermissionAttribute(SecurityAction::Deny,ControlThread=true)]\n   // Set the Execution property.\n   [SecurityPermissionAttribute(SecurityAction::Deny,Execution=true)]\n   // Set the Flags property.\n   [SecurityPermissionAttribute(SecurityAction::Deny,Flags=SecurityPermissionFlag::NoFlags)]\n   // Set the Infrastructure property.\n   [SecurityPermissionAttribute(SecurityAction::Deny,Infrastructure=true)]\n   // Set the RemotingConfiguration property.\n   [SecurityPermissionAttribute(SecurityAction::Deny,RemotingConfiguration=true)]\n   // Set the SerializationFormatter property.\n   [SecurityPermissionAttribute(SecurityAction::Deny,SerializationFormatter=true)]\n   // Set the SkipVerification property.\n   [SecurityPermissionAttribute(SecurityAction::Deny,SkipVerification=true)]\n   // Set the UnmanagedCode property.\n   [SecurityPermissionAttribute(SecurityAction::Deny,UnmanagedCode=true)]\n\n   static void DenySecurityPermissions()\n   {\n      Console::WriteLine( &quot;Executing DenySecurityPermissions.&quot; );\n      Console::WriteLine( &quot;Denied all permissions individually.&quot; );\n      TestSecurityPermissions();\n   }\n\n\n   // This method demonstrates the use of SecurityPermissionFlag::AllFlags to deny all security permissions.\n\n   [SecurityPermissionAttribute(SecurityAction::Deny,Flags=SecurityPermissionFlag::AllFlags)]\n   static void DenyAllSecurityPermissions()\n   {\n      Console::WriteLine( &quot;\\nExecuting DenyAllSecurityPermissions.&quot; );\n      Console::WriteLine( &quot;Denied all permissions using SecurityPermissionFlag::AllFlags.&quot; );\n      TestSecurityPermissions();\n   }\n\n\n   // This method demonstrates the effect of not denying security permissions.\n   static void DoNotDenySecurityPermissions()\n   {\n      Console::WriteLine( &quot;\\nExecuting DoNotDenySecurityPermissions.&quot; );\n      Console::WriteLine( &quot;No permissions have been denied.&quot; );\n      DemandSecurityPermissions();\n   }\n\n   static void TestSecurityPermissions()\n   {\n      Console::WriteLine( &quot;\\nExecuting TestSecurityPermissions.\\n&quot; );\n      try\n      {\n         SecurityPermission^ sp = gcnew SecurityPermission( SecurityPermissionFlag::Assertion );\n         Console::WriteLine( &quot;Demanding SecurityPermissionFlag::Assertion&quot; );\n         \n         // This demand should cause an exception.\n         sp-&gt;Demand();\n         \n         // The TestFailed method is called if an exception is not thrown.\n         TestFailed();\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::Assertion failed: {0}&quot;, e-&gt;Message );\n      }\n\n      try\n      {\n         SecurityPermission^ sp = gcnew SecurityPermission( SecurityPermissionFlag::ControlAppDomain );\n         Console::WriteLine( &quot;Demanding SecurityPermissionFlag::ControlAppDomain&quot; );\n         sp-&gt;Demand();\n         TestFailed();\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::ControlAppDomain failed: {0}&quot;, e-&gt;Message );\n      }\n\n      try\n      {\n         SecurityPermission^ sp = gcnew SecurityPermission( SecurityPermissionFlag::ControlDomainPolicy );\n         Console::WriteLine( &quot;Demanding SecurityPermissionFlag::ControlDomainPolicy&quot; );\n         sp-&gt;Demand();\n         TestFailed();\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::ControlDomainPolicy failed: {0}&quot;, e-&gt;Message );\n      }\n\n      try\n      {\n         SecurityPermission^ sp = gcnew SecurityPermission( SecurityPermissionFlag::ControlEvidence );\n         Console::WriteLine( &quot;Demanding SecurityPermissionFlag::ControlEvidence&quot; );\n         sp-&gt;Demand();\n         TestFailed();\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::ControlEvidence failed: {0}&quot;, e-&gt;Message );\n      }\n\n      try\n      {\n         SecurityPermission^ sp = gcnew SecurityPermission( SecurityPermissionFlag::ControlPolicy );\n         Console::WriteLine( &quot;Demanding SecurityPermissionFlag::ControlPolicy&quot; );\n         sp-&gt;Demand();\n         TestFailed();\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::ControlPolicy failed: {0}&quot;, e-&gt;Message );\n      }\n\n      try\n      {\n         SecurityPermission^ sp = gcnew SecurityPermission( SecurityPermissionFlag::ControlPrincipal );\n         Console::WriteLine( &quot;Demanding SecurityPermissionFlag::ControlPrincipal&quot; );\n         sp-&gt;Demand();\n         TestFailed();\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::ControlPrincipal failed: {0}&quot;, e-&gt;Message );\n      }\n\n      try\n      {\n         SecurityPermission^ sp = gcnew SecurityPermission( SecurityPermissionFlag::ControlThread );\n         Console::WriteLine( &quot;Demanding SecurityPermissionFlag::ControlThread&quot; );\n         sp-&gt;Demand();\n         TestFailed();\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::ControlThread failed: {0}&quot;, e-&gt;Message );\n      }\n\n      try\n      {\n         SecurityPermission^ sp = gcnew SecurityPermission( SecurityPermissionFlag::Execution );\n         Console::WriteLine( &quot;Demanding SecurityPermissionFlag::Execution&quot; );\n         sp-&gt;Demand();\n         TestFailed();\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::Execution failed: {0}&quot;, e-&gt;Message );\n      }\n\n      try\n      {\n         SecurityPermission^ sp = gcnew SecurityPermission( SecurityPermissionFlag::Infrastructure );\n         Console::WriteLine( &quot;Demanding SecurityPermissionFlag::Infrastructure&quot; );\n         sp-&gt;Demand();\n         TestFailed();\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::Infrastructure failed: {0}&quot;, e-&gt;Message );\n      }\n\n      try\n      {\n         SecurityPermission^ sp = gcnew SecurityPermission( SecurityPermissionFlag::RemotingConfiguration );\n         Console::WriteLine( &quot;Demanding SecurityPermissionFlag::RemotingConfiguration&quot; );\n         sp-&gt;Demand();\n         TestFailed();\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::RemotingConfiguration failed: {0}&quot;, e-&gt;Message );\n      }\n\n      try\n      {\n         SecurityPermission^ sp = gcnew SecurityPermission( SecurityPermissionFlag::SerializationFormatter );\n         Console::WriteLine( &quot;Demanding SecurityPermissionFlag::SerializationFormatter&quot; );\n         sp-&gt;Demand();\n         TestFailed();\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::SerializationFormatter failed: {0}&quot;, e-&gt;Message );\n      }\n\n      try\n      {\n         SecurityPermission^ sp = gcnew SecurityPermission( SecurityPermissionFlag::SkipVerification );\n         Console::WriteLine( &quot;Demanding SecurityPermissionFlag::SkipVerification&quot; );\n         sp-&gt;Demand();\n         TestFailed();\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::SkipVerification failed: {0}&quot;, e-&gt;Message );\n      }\n\n      try\n      {\n         SecurityPermission^ sp = gcnew SecurityPermission( SecurityPermissionFlag::UnmanagedCode );\n         Console::WriteLine( &quot;Demanding SecurityPermissionFlag::UnmanagedCode&quot; );\n         \n         // This demand should cause an exception.\n         sp-&gt;Demand();\n         \n         // The TestFailed method is called if an exception is not thrown.\n         TestFailed();\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::UnmanagedCode failed: {0}&quot;, e-&gt;Message );\n      }\n\n   }\n\n   static void TestFailed()\n   {\n      Console::WriteLine( &quot;In TestFailed method.&quot; );\n      Console::WriteLine( &quot;Throwing an exception.&quot; );\n      throw gcnew Exception;\n   }\n   \n   static void DemandSecurityPermissions()\n   {\n      Console::WriteLine( &quot;\\nExecuting DemandSecurityPermissions.\\n&quot; );\n      try\n      {\n         SecurityPermission^ sp = gcnew SecurityPermission( SecurityPermissionFlag::Assertion );\n         Console::WriteLine( &quot;Demanding SecurityPermissionFlag::Assertion&quot; );\n         sp-&gt;Demand();\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::Assertion succeeded.&quot; );\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::Assertion failed: {0}&quot;, e-&gt;Message );\n      }\n\n      try\n      {\n         SecurityPermission^ sp = gcnew SecurityPermission( SecurityPermissionFlag::ControlAppDomain );\n         Console::WriteLine( &quot;Demanding SecurityPermissionFlag::ControlAppDomain&quot; );\n         sp-&gt;Demand();\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::ControlAppDomain succeeded.&quot; );\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::ControlAppDomain failed: {0}&quot;, e-&gt;Message );\n      }\n\n      try\n      {\n         SecurityPermission^ sp = gcnew SecurityPermission( SecurityPermissionFlag::ControlDomainPolicy );\n         Console::WriteLine( &quot;Demanding SecurityPermissionFlag::ControlDomainPolicy&quot; );\n         sp-&gt;Demand();\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::ControlDomainPolicy succeeded.&quot; );\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::ControlDomainPolicy failed: {0}&quot;, e-&gt;Message );\n      }\n\n      try\n      {\n         SecurityPermission^ sp = gcnew SecurityPermission( SecurityPermissionFlag::ControlEvidence );\n         Console::WriteLine( &quot;Demanding SecurityPermissionFlag::ControlEvidence&quot; );\n         sp-&gt;Demand();\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::ControlEvidence succeeded.&quot; );\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::ControlEvidence failed: {0}&quot;, e-&gt;Message );\n      }\n\n      try\n      {\n         SecurityPermission^ sp = gcnew SecurityPermission( SecurityPermissionFlag::ControlPolicy );\n         Console::WriteLine( &quot;Demanding SecurityPermissionFlag::ControlPolicy&quot; );\n         sp-&gt;Demand();\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::ControlPolicy succeeded.&quot; );\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::ControlPolicy failed: {0}&quot;, e-&gt;Message );\n      }\n\n      try\n      {\n         SecurityPermission^ sp = gcnew SecurityPermission( SecurityPermissionFlag::ControlPrincipal );\n         Console::WriteLine( &quot;Demanding SecurityPermissionFlag::ControlPrincipal&quot; );\n         sp-&gt;Demand();\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::ControlPrincipal succeeded.&quot; );\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::ControlPrincipal failed: {0}&quot;, e-&gt;Message );\n      }\n\n      try\n      {\n         SecurityPermission^ sp = gcnew SecurityPermission( SecurityPermissionFlag::ControlThread );\n         Console::WriteLine( &quot;Demanding SecurityPermissionFlag::ControlThread&quot; );\n         sp-&gt;Demand();\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::ControlThread succeeded.&quot; );\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::ControlThread failed: {0}&quot;, e-&gt;Message );\n      }\n\n      try\n      {\n         SecurityPermission^ sp = gcnew SecurityPermission( SecurityPermissionFlag::Execution );\n         Console::WriteLine( &quot;Demanding SecurityPermissionFlag::Execution&quot; );\n         sp-&gt;Demand();\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::Execution succeeded.&quot; );\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::Execution failed: {0}&quot;, e-&gt;Message );\n      }\n\n      try\n      {\n         SecurityPermission^ sp = gcnew SecurityPermission( SecurityPermissionFlag::Infrastructure );\n         Console::WriteLine( &quot;Demanding SecurityPermissionFlag::Infrastructure&quot; );\n         sp-&gt;Demand();\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::Infrastructure succeeded.&quot; );\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::Infrastructure failed: {0}&quot;, e-&gt;Message );\n      }\n\n      try\n      {\n         SecurityPermission^ sp = gcnew SecurityPermission( SecurityPermissionFlag::RemotingConfiguration );\n         Console::WriteLine( &quot;Demanding SecurityPermissionFlag::RemotingConfiguration&quot; );\n         sp-&gt;Demand();\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::RemotingConfiguration succeeded.&quot; );\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::RemotingConfiguration failed: {0}&quot;, e-&gt;Message );\n      }\n\n      try\n      {\n         SecurityPermission^ sp = gcnew SecurityPermission( SecurityPermissionFlag::SerializationFormatter );\n         Console::WriteLine( &quot;Demanding SecurityPermissionFlag::SerializationFormatter&quot; );\n         sp-&gt;Demand();\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::SerializationFormatter succeeded.&quot; );\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::SerializationFormatter failed: {0}&quot;, e-&gt;Message );\n      }\n\n      try\n      {\n         SecurityPermission^ sp = gcnew SecurityPermission( SecurityPermissionFlag::SkipVerification );\n         Console::WriteLine( &quot;Demanding SecurityPermissionFlag::SkipVerification&quot; );\n         sp-&gt;Demand();\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::SkipVerification succeeded.&quot; );\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::SkipVerification failed: {0}&quot;, e-&gt;Message );\n      }\n\n      try\n      {\n         SecurityPermission^ sp = gcnew SecurityPermission( SecurityPermissionFlag::UnmanagedCode );\n         Console::WriteLine( &quot;Demanding SecurityPermissionFlag::UnmanagedCode&quot; );\n         sp-&gt;Demand();\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::UnmanagedCode succeeded.&quot; );\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::UnmanagedCode failed: {0}&quot;, e-&gt;Message );\n      }\n\n   }\n\n};\n\nint main()\n{\n   MyClass::PermissionDemo();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Permissions.SecurityPermissionAttribute#1\">&#39; This sample demonstrates the use of the SecurityPermissionAttribute.\nImports System\nImports System.Security.Permissions\nImports System.Security\nImports Microsoft.VisualBasic\n\n\n\nClass [MyClass]\n\n    Public Shared Sub PermissionDemo()\n        Try\n            DenySecurityPermissions()\n            DenyAllSecurityPermissions()\n            DoNotDenySecurityPermissions()\n        Catch e As Exception\n            Console.WriteLine(e.Message.ToString())\n        End Try\n    End Sub &#39;PermissionDemo\n\n\n\n\n    &#39; This method demonstrates the use of the SecurityPermissionAttribute to deny individual security permissions.\n    &#39; Set the Assertion,UnmanagedCode, ControlAppDomain, ControlDomainPolicy, ontrolEvidence, \n    &#39; ControlPolicy, ControlPrincipal, ControlThread, Execution, Flags, Infrastructure, \n    &#39; RemotingConfiguration, SerializationFormatter, and SkipVerification properties.\n    &lt;SecurityPermissionAttribute(SecurityAction.Deny, Assertion:=True), _\n    SecurityPermissionAttribute(SecurityAction.Deny, ControlAppDomain:=True), _\n    SecurityPermissionAttribute(SecurityAction.Deny, ControlDomainPolicy:=True), _\n    SecurityPermissionAttribute(SecurityAction.Deny, ControlEvidence:=True), _\n    SecurityPermissionAttribute(SecurityAction.Deny, ControlPolicy:=True), _\n    SecurityPermissionAttribute(SecurityAction.Deny, ControlPrincipal:=True), _\n    SecurityPermissionAttribute(SecurityAction.Deny, ControlThread:=True), _\n    SecurityPermissionAttribute(SecurityAction.Deny, Execution:=True), _\n    SecurityPermissionAttribute(SecurityAction.Deny, Flags:=SecurityPermissionFlag.NoFlags), _\n    SecurityPermissionAttribute(SecurityAction.Deny, Infrastructure:=True), _\n    SecurityPermissionAttribute(SecurityAction.Deny, RemotingConfiguration:=True), _\n    SecurityPermissionAttribute(SecurityAction.Deny, SerializationFormatter:=True), _\n    SecurityPermissionAttribute(SecurityAction.Deny, SkipVerification:=True), _\n    SecurityPermissionAttribute(SecurityAction.Deny, UnmanagedCode:=True)&gt; _\n    Public Shared Sub DenySecurityPermissions()\n        Console.WriteLine(&quot;Executing DenySecurityPermissions.&quot;)\n        Console.WriteLine(&quot;Denied all permissions individually.&quot;)\n        TestSecurityPermissions()\n    End Sub &#39;DenySecurityPermissions\n\n\n    &#39; This method demonstrates the use of SecurityPermissionFlag.AllFlags to deny all security permissions.\n    &lt;SecurityPermissionAttribute(SecurityAction.Deny, Flags:=SecurityPermissionFlag.AllFlags)&gt; _\n    Public Shared Sub DenyAllSecurityPermissions()\n        Console.WriteLine(ControlChars.Lf &amp; &quot;Executing DenyAllSecurityPermissions.&quot;)\n        Console.WriteLine(&quot;Denied all permissions using SecurityPermissionFlag.AllFlags.&quot;)\n        TestSecurityPermissions()\n    End Sub &#39;DenyAllSecurityPermissions\n\n\n    &#39; This method demonstrates the effect of not denying security permissions.\n    Public Shared Sub DoNotDenySecurityPermissions()\n        Console.WriteLine(ControlChars.Lf &amp; &quot;Executing DoNotDenySecurityPermissions.&quot;)\n        Console.WriteLine(&quot;No permissions have been denied.&quot;)\n        DemandSecurityPermissions()\n    End Sub &#39;DoNotDenySecurityPermissions\n\n\n    Public Shared Sub TestSecurityPermissions()\n        Console.WriteLine(ControlChars.Lf &amp; &quot;Executing TestSecurityPermissions.&quot; &amp; ControlChars.Lf)\n        Try\n            Dim sp As New SecurityPermission(SecurityPermissionFlag.Assertion)\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.Assertion&quot;)\n            &#39; This demand should cause an exception.\n            sp.Demand()\n            &#39; The TestFailed method is called if an exception is not thrown.\n            TestFailed()\n        Catch e As Exception\n            Console.WriteLine((&quot;Demand for SecurityPermissionFlag.Assertion failed: &quot; &amp; e.Message))\n        End Try\n        Try\n            Dim sp As New SecurityPermission(SecurityPermissionFlag.ControlAppDomain)\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.ControlAppDomain&quot;)\n            sp.Demand()\n            TestFailed()\n        Catch e As Exception\n            Console.WriteLine((&quot;Demand for SecurityPermissionFlag.ControlAppDomain failed: &quot; &amp; e.Message))\n        End Try\n        Try\n            Dim sp As New SecurityPermission(SecurityPermissionFlag.ControlDomainPolicy)\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.ControlDomainPolicy&quot;)\n            sp.Demand()\n            TestFailed()\n        Catch e As Exception\n            Console.WriteLine((&quot;Demand for SecurityPermissionFlag.ControlDomainPolicy failed: &quot; &amp; e.Message))\n        End Try\n        Try\n            Dim sp As New SecurityPermission(SecurityPermissionFlag.ControlEvidence)\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.ControlEvidence&quot;)\n            sp.Demand()\n            TestFailed()\n        Catch e As Exception\n            Console.WriteLine((&quot;Demand for SecurityPermissionFlag.ControlEvidence failed: &quot; &amp; e.Message))\n        End Try\n        Try\n            Dim sp As New SecurityPermission(SecurityPermissionFlag.ControlPolicy)\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.ControlPolicy&quot;)\n            sp.Demand()\n            TestFailed()\n        Catch e As Exception\n            Console.WriteLine((&quot;Demand for SecurityPermissionFlag.ControlPolicy failed: &quot; &amp; e.Message))\n        End Try\n        Try\n            Dim sp As New SecurityPermission(SecurityPermissionFlag.ControlPrincipal)\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.ControlPrincipal&quot;)\n            sp.Demand()\n            TestFailed()\n        Catch e As Exception\n            Console.WriteLine((&quot;Demand for SecurityPermissionFlag.ControlPrincipal failed: &quot; &amp; e.Message))\n        End Try\n        Try\n            Dim sp As New SecurityPermission(SecurityPermissionFlag.ControlThread)\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.ControlThread&quot;)\n            sp.Demand()\n            TestFailed()\n        Catch e As Exception\n            Console.WriteLine((&quot;Demand for SecurityPermissionFlag.ControlThread failed: &quot; &amp; e.Message))\n        End Try\n        Try\n            Dim sp As New SecurityPermission(SecurityPermissionFlag.Execution)\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.Execution&quot;)\n            sp.Demand()\n            TestFailed()\n        Catch e As Exception\n            Console.WriteLine((&quot;Demand for SecurityPermissionFlag.Execution failed: &quot; &amp; e.Message))\n        End Try\n        Try\n            Dim sp As New SecurityPermission(SecurityPermissionFlag.Infrastructure)\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.Infrastructure&quot;)\n            sp.Demand()\n            TestFailed()\n        Catch e As Exception\n            Console.WriteLine((&quot;Demand for SecurityPermissionFlag.Infrastructure failed: &quot; &amp; e.Message))\n        End Try\n        Try\n            Dim sp As New SecurityPermission(SecurityPermissionFlag.RemotingConfiguration)\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.RemotingConfiguration&quot;)\n            sp.Demand()\n            TestFailed()\n        Catch e As Exception\n            Console.WriteLine((&quot;Demand for SecurityPermissionFlag.RemotingConfiguration failed: &quot; &amp; e.Message))\n        End Try\n        Try\n            Dim sp As New SecurityPermission(SecurityPermissionFlag.SerializationFormatter)\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.SerializationFormatter&quot;)\n            sp.Demand()\n            TestFailed()\n        Catch e As Exception\n            Console.WriteLine((&quot;Demand for SecurityPermissionFlag.SerializationFormatter failed: &quot; &amp; e.Message))\n        End Try\n        Try\n            Dim sp As New SecurityPermission(SecurityPermissionFlag.SkipVerification)\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.SkipVerification&quot;)\n            sp.Demand()\n            TestFailed()\n        Catch e As Exception\n            Console.WriteLine((&quot;Demand for SecurityPermissionFlag.SkipVerification failed: &quot; &amp; e.Message))\n        End Try\n        Try\n            Dim sp As New SecurityPermission(SecurityPermissionFlag.UnmanagedCode)\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.UnmanagedCode&quot;)\n            &#39; This demand should cause an exception.\n            sp.Demand()\n            &#39; The TestFailed method is called if an exception is not thrown.\n            TestFailed()\n        Catch e As Exception\n            Console.WriteLine((&quot;Demand for SecurityPermissionFlag.UnmanagedCode failed: &quot; &amp; e.Message))\n        End Try\n    End Sub &#39;TestSecurityPermissions\n\n\n    Public Shared Sub TestFailed()\n        Console.WriteLine(&quot;In TestFailed method.&quot;)\n        Console.WriteLine(&quot;Throwing an exception.&quot;)\n        Throw New Exception()\n    End Sub &#39;TestFailed\n\n    Public Shared Sub DemandSecurityPermissions()\n        Console.WriteLine(ControlChars.Lf &amp; &quot;Executing DemandSecurityPermissions.&quot; &amp; ControlChars.Lf)\n        Try\n            Dim sp As New SecurityPermission(SecurityPermissionFlag.Assertion)\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.Assertion&quot;)\n            sp.Demand()\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.Assertion succeeded.&quot;)\n        Catch e As Exception\n            Console.WriteLine((&quot;Demand for SecurityPermissionFlag.Assertion failed: &quot; &amp; e.Message))\n        End Try\n        Try\n            Dim sp As New SecurityPermission(SecurityPermissionFlag.ControlAppDomain)\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.ControlAppDomain&quot;)\n            sp.Demand()\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.ControlAppDomain succeeded.&quot;)\n        Catch e As Exception\n            Console.WriteLine((&quot;Demand for SecurityPermissionFlag.ControlAppDomain failed: &quot; &amp; e.Message))\n        End Try\n        Try\n            Dim sp As New SecurityPermission(SecurityPermissionFlag.ControlDomainPolicy)\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.ControlDomainPolicy&quot;)\n            sp.Demand()\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.ControlDomainPolicy succeeded.&quot;)\n        Catch e As Exception\n            Console.WriteLine((&quot;Demand for SecurityPermissionFlag.ControlDomainPolicy failed: &quot; &amp; e.Message))\n        End Try\n        Try\n            Dim sp As New SecurityPermission(SecurityPermissionFlag.ControlEvidence)\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.ControlEvidence&quot;)\n            sp.Demand()\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.ControlEvidence succeeded.&quot;)\n        Catch e As Exception\n            Console.WriteLine((&quot;Demand for SecurityPermissionFlag.ControlEvidence failed: &quot; &amp; e.Message))\n        End Try\n        Try\n            Dim sp As New SecurityPermission(SecurityPermissionFlag.ControlPolicy)\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.ControlPolicy&quot;)\n            sp.Demand()\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.ControlPolicy succeeded.&quot;)\n        Catch e As Exception\n            Console.WriteLine((&quot;Demand for SecurityPermissionFlag.ControlPolicy failed: &quot; &amp; e.Message))\n        End Try\n        Try\n            Dim sp As New SecurityPermission(SecurityPermissionFlag.ControlPrincipal)\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.ControlPrincipal&quot;)\n            sp.Demand()\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.ControlPrincipal succeeded.&quot;)\n        Catch e As Exception\n            Console.WriteLine((&quot;Demand for SecurityPermissionFlag.ControlPrincipal failed: &quot; &amp; e.Message))\n        End Try\n        Try\n            Dim sp As New SecurityPermission(SecurityPermissionFlag.ControlThread)\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.ControlThread&quot;)\n            sp.Demand()\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.ControlThread succeeded.&quot;)\n        Catch e As Exception\n            Console.WriteLine((&quot;Demand for SecurityPermissionFlag.ControlThread failed: &quot; &amp; e.Message))\n        End Try\n        Try\n            Dim sp As New SecurityPermission(SecurityPermissionFlag.Execution)\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.Execution&quot;)\n            sp.Demand()\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.Execution succeeded.&quot;)\n        Catch e As Exception\n            Console.WriteLine((&quot;Demand for SecurityPermissionFlag.Execution failed: &quot; &amp; e.Message))\n        End Try\n        Try\n            Dim sp As New SecurityPermission(SecurityPermissionFlag.Infrastructure)\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.Infrastructure&quot;)\n            sp.Demand()\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.Infrastructure succeeded.&quot;)\n        Catch e As Exception\n            Console.WriteLine((&quot;Demand for SecurityPermissionFlag.Infrastructure failed: &quot; &amp; e.Message))\n        End Try\n        Try\n            Dim sp As New SecurityPermission(SecurityPermissionFlag.RemotingConfiguration)\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.RemotingConfiguration&quot;)\n            sp.Demand()\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.RemotingConfiguration succeeded.&quot;)\n        Catch e As Exception\n            Console.WriteLine((&quot;Demand for SecurityPermissionFlag.RemotingConfiguration failed: &quot; &amp; e.Message))\n        End Try\n        Try\n            Dim sp As New SecurityPermission(SecurityPermissionFlag.SerializationFormatter)\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.SerializationFormatter&quot;)\n            sp.Demand()\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.SerializationFormatter succeeded.&quot;)\n        Catch e As Exception\n            Console.WriteLine((&quot;Demand for SecurityPermissionFlag.SerializationFormatter failed: &quot; &amp; e.Message))\n        End Try\n        Try\n            Dim sp As New SecurityPermission(SecurityPermissionFlag.SkipVerification)\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.SkipVerification&quot;)\n            sp.Demand()\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.SkipVerification succeeded.&quot;)\n        Catch e As Exception\n            Console.WriteLine((&quot;Demand for SecurityPermissionFlag.SkipVerification failed: &quot; &amp; e.Message))\n        End Try\n        Try\n            Dim sp As New SecurityPermission(SecurityPermissionFlag.UnmanagedCode)\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.UnmanagedCode&quot;)\n            sp.Demand()\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.UnmanagedCode succeeded.&quot;)\n        Catch e As Exception\n            Console.WriteLine((&quot;Demand for SecurityPermissionFlag.UnmanagedCode failed: &quot; &amp; e.Message))\n        End Try\n    End Sub &#39;DemandSecurityPermissions\n\n    Overloads Shared Sub Main(ByVal args() As String)\n        PermissionDemo()\n    End Sub &#39;Main\nEnd Class &#39;[MyClass] \n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>This enumeration has a <a class=\"xref\" href=\"system.flagsattribute\" data-linktype=\"relative-path\">FlagsAttribute</a> attribute that allows a bitwise combination of its member values.  </p>\n<p> This enumeration is used by <a class=\"xref\" href=\"system.security.permissions.securitypermission\" data-linktype=\"relative-path\">SecurityPermission</a>.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Many of these flags are powerful and should only be granted to highly trusted code.</p>\n</div>\n\r\n  \r\n      \t<h2 class=\"accented\">Fields\r\n      </h2>\r\n      <table class=\"nameValue\">\r\n      \t<tr><td id=\"System_Security_Permissions_SecurityPermissionFlag_AllFlags\">\r\n      \t\t\t<span class=\"lang-csharp\">AllFlags</span>\r\n      \t</td>\r\n      \t<td><p>The unrestricted state of the permission.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Security_Permissions_SecurityPermissionFlag_Assertion\">\r\n      \t\t\t<span class=\"lang-csharp\">Assertion</span>\r\n      \t</td>\r\n      \t<td><p>Ability to assert that all this code&#39;s callers have the requisite permission for the operation.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Security_Permissions_SecurityPermissionFlag_BindingRedirects\">\r\n      \t\t\t<span class=\"lang-csharp\">BindingRedirects</span>\r\n      \t</td>\r\n      \t<td><p>Permission to perform explicit binding redirection in the application configuration file. This includes redirection of .NET Framework assemblies that have been unified as well as other assemblies found outside the .NET Framework.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Security_Permissions_SecurityPermissionFlag_ControlAppDomain\">\r\n      \t\t\t<span class=\"lang-csharp\">ControlAppDomain</span>\r\n      \t</td>\r\n      \t<td><p>Ability to create and manipulate an <a class=\"xref\" href=\"system.appdomain\" data-linktype=\"relative-path\">AppDomain</a>.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Security_Permissions_SecurityPermissionFlag_ControlDomainPolicy\">\r\n      \t\t\t<span class=\"lang-csharp\">ControlDomainPolicy</span>\r\n      \t</td>\r\n      \t<td><p>Ability to specify domain policy.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Security_Permissions_SecurityPermissionFlag_ControlEvidence\">\r\n      \t\t\t<span class=\"lang-csharp\">ControlEvidence</span>\r\n      \t</td>\r\n      \t<td><p>Ability to provide evidence, including the ability to alter the evidence provided by the common language runtime.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Security_Permissions_SecurityPermissionFlag_ControlPolicy\">\r\n      \t\t\t<span class=\"lang-csharp\">ControlPolicy</span>\r\n      \t</td>\r\n      \t<td><p>Ability to view and modify policy.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Security_Permissions_SecurityPermissionFlag_ControlPrincipal\">\r\n      \t\t\t<span class=\"lang-csharp\">ControlPrincipal</span>\r\n      \t</td>\r\n      \t<td><p>Ability to manipulate the principal object.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Security_Permissions_SecurityPermissionFlag_ControlThread\">\r\n      \t\t\t<span class=\"lang-csharp\">ControlThread</span>\r\n      \t</td>\r\n      \t<td><p>Ability to use certain advanced operations on threads.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Security_Permissions_SecurityPermissionFlag_Execution\">\r\n      \t\t\t<span class=\"lang-csharp\">Execution</span>\r\n      \t</td>\r\n      \t<td><p>Permission for the code to run. Without this permission, managed code will not be executed.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Security_Permissions_SecurityPermissionFlag_Infrastructure\">\r\n      \t\t\t<span class=\"lang-csharp\">Infrastructure</span>\r\n      \t</td>\r\n      \t<td><p>Permission to plug code into the common language runtime infrastructure, such as adding Remoting Context Sinks, Envoy Sinks and Dynamic Sinks.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Security_Permissions_SecurityPermissionFlag_NoFlags\">\r\n      \t\t\t<span class=\"lang-csharp\">NoFlags</span>\r\n      \t</td>\r\n      \t<td><p>No security access.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Security_Permissions_SecurityPermissionFlag_RemotingConfiguration\">\r\n      \t\t\t<span class=\"lang-csharp\">RemotingConfiguration</span>\r\n      \t</td>\r\n      \t<td><p>Permission to configure Remoting types and channels.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Security_Permissions_SecurityPermissionFlag_SerializationFormatter\">\r\n      \t\t\t<span class=\"lang-csharp\">SerializationFormatter</span>\r\n      \t</td>\r\n      \t<td><p>Ability to provide serialization services. Used by serialization formatters.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Security_Permissions_SecurityPermissionFlag_SkipVerification\">\r\n      \t\t\t<span class=\"lang-csharp\">SkipVerification</span>\r\n      \t</td>\r\n      \t<td><p>Ability to skip verification of code in this assembly. Code that is unverifiable can be run if this permission is granted.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Security_Permissions_SecurityPermissionFlag_UnmanagedCode\">\r\n      \t\t\t<span class=\"lang-csharp\">UnmanagedCode</span>\r\n      \t</td>\r\n      \t<td><p>Ability to call unmanaged code.</p>\n</td>\r\n      \t</tr>\r\n      </table>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Security.Permissions.SecurityPermissionFlag.yml\">\r\n<meta name=\"APIName\" content=\"System.Security.Permissions.SecurityPermissionFlag\">\r\n<meta name=\"APIName\" content=\"System.Security.Permissions.SecurityPermissionFlag.AllFlags\">\r\n<meta name=\"APIName\" content=\"System.Security.Permissions.SecurityPermissionFlag.Assertion\">\r\n<meta name=\"APIName\" content=\"System.Security.Permissions.SecurityPermissionFlag.BindingRedirects\">\r\n<meta name=\"APIName\" content=\"System.Security.Permissions.SecurityPermissionFlag.ControlAppDomain\">\r\n<meta name=\"APIName\" content=\"System.Security.Permissions.SecurityPermissionFlag.ControlDomainPolicy\">\r\n<meta name=\"APIName\" content=\"System.Security.Permissions.SecurityPermissionFlag.ControlEvidence\">\r\n<meta name=\"APIName\" content=\"System.Security.Permissions.SecurityPermissionFlag.ControlPolicy\">\r\n<meta name=\"APIName\" content=\"System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal\">\r\n<meta name=\"APIName\" content=\"System.Security.Permissions.SecurityPermissionFlag.ControlThread\">\r\n<meta name=\"APIName\" content=\"System.Security.Permissions.SecurityPermissionFlag.Execution\">\r\n<meta name=\"APIName\" content=\"System.Security.Permissions.SecurityPermissionFlag.Infrastructure\">\r\n<meta name=\"APIName\" content=\"System.Security.Permissions.SecurityPermissionFlag.NoFlags\">\r\n<meta name=\"APIName\" content=\"System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration\">\r\n<meta name=\"APIName\" content=\"System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter\">\r\n<meta name=\"APIName\" content=\"System.Security.Permissions.SecurityPermissionFlag.SkipVerification\">\r\n<meta name=\"APIName\" content=\"System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-24 01:41 AM\">\r\n<meta name=\"document_id\" content=\"d4d97c87-22b0-4cee-0875-ab86b256e066\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Specifies access flags for the security permission object.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.security.permissions/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Security.Permissions.SecurityPermissionFlag\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Security.Permissions.SecurityPermissionFlag.yml","open_to_public_contributors":false,"api_name":["System.Security.Permissions.SecurityPermissionFlag","System.Security.Permissions.SecurityPermissionFlag.AllFlags","System.Security.Permissions.SecurityPermissionFlag.Assertion","System.Security.Permissions.SecurityPermissionFlag.BindingRedirects","System.Security.Permissions.SecurityPermissionFlag.ControlAppDomain","System.Security.Permissions.SecurityPermissionFlag.ControlDomainPolicy","System.Security.Permissions.SecurityPermissionFlag.ControlEvidence","System.Security.Permissions.SecurityPermissionFlag.ControlPolicy","System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal","System.Security.Permissions.SecurityPermissionFlag.ControlThread","System.Security.Permissions.SecurityPermissionFlag.Execution","System.Security.Permissions.SecurityPermissionFlag.Infrastructure","System.Security.Permissions.SecurityPermissionFlag.NoFlags","System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration","System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter","System.Security.Permissions.SecurityPermissionFlag.SkipVerification","System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Security.Permissions.SecurityPermissionFlag","System::Security::Permissions::SecurityPermissionFlag","System.Security.Permissions.SecurityPermissionFlag.AllFlags","System::Security::Permissions::SecurityPermissionFlag::AllFlags","System.Security.Permissions.SecurityPermissionFlag.Assertion","System::Security::Permissions::SecurityPermissionFlag::Assertion","System.Security.Permissions.SecurityPermissionFlag.BindingRedirects","System::Security::Permissions::SecurityPermissionFlag::BindingRedirects","System.Security.Permissions.SecurityPermissionFlag.ControlAppDomain","System::Security::Permissions::SecurityPermissionFlag::ControlAppDomain","System.Security.Permissions.SecurityPermissionFlag.ControlDomainPolicy","System::Security::Permissions::SecurityPermissionFlag::ControlDomainPolicy","System.Security.Permissions.SecurityPermissionFlag.ControlEvidence","System::Security::Permissions::SecurityPermissionFlag::ControlEvidence","System.Security.Permissions.SecurityPermissionFlag.ControlPolicy","System::Security::Permissions::SecurityPermissionFlag::ControlPolicy","System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal","System::Security::Permissions::SecurityPermissionFlag::ControlPrincipal","System.Security.Permissions.SecurityPermissionFlag.ControlThread","System::Security::Permissions::SecurityPermissionFlag::ControlThread","System.Security.Permissions.SecurityPermissionFlag.Execution","System::Security::Permissions::SecurityPermissionFlag::Execution","System.Security.Permissions.SecurityPermissionFlag.Infrastructure","System::Security::Permissions::SecurityPermissionFlag::Infrastructure","System.Security.Permissions.SecurityPermissionFlag.NoFlags","System::Security::Permissions::SecurityPermissionFlag::NoFlags","System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration","System::Security::Permissions::SecurityPermissionFlag::RemotingConfiguration","System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter","System::Security::Permissions::SecurityPermissionFlag::SerializationFormatter","System.Security.Permissions.SecurityPermissionFlag.SkipVerification","System::Security::Permissions::SecurityPermissionFlag::SkipVerification","System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode","System::Security::Permissions::SecurityPermissionFlag::UnmanagedCode"],"dev_langs":["csharp"],"updated_at":"2017-03-24 01:41 AM","document_id":"d4d97c87-22b0-4cee-0875-ab86b256e066","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/SecurityPermissionFlag.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"SecurityPermissionFlag enum | Microsoft Docs","_op_ogTitle":"SecurityPermissionFlag enum","description":"Specifies access flags for the security permission object.\n","toc_asset_id":"api/_splitted/System.Security.Permissions/toc.json","toc_rel":"_splitted/System.Security.Permissions/toc.json","source_url":"","ms.assetid":"System.Security.Permissions.SecurityPermissionFlag","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.security.permissions.securitypermissionflag","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.security.permissions.securitypermissionflag","fileRelativePath":"api/System.Security.Permissions.SecurityPermissionFlag.html"},"themesRelativePathToOutputRoot":"_themes/"}