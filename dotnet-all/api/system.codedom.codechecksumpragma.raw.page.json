{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">CodeChecksumPragma</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents a code checksum pragma code entity.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)]\n[System.Runtime.InteropServices.ComVisible(true)]\npublic class CodeChecksumPragma : System.CodeDom.CodeDirective</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.codeobject\" data-linktype=\"relative-path\">CodeObject</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.codedirective\" data-linktype=\"relative-path\">CodeDirective</a></span></div><span class=\"lang-csharp\">CodeChecksumPragma</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.codeobject#System_CodeDom_CodeObject_UserData\" data-linktype=\"relative-path\">UserData</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example shows the use of the CodeChecksumPragma class.  </p>\n<pre><code class=\"lang-vb\" name=\"System.CodeDom.CodeDirectives#1\">Imports System.CodeDom\nImports System.CodeDom.Compiler\nImports System.Collections\nImports System.Collections.Specialized\nImports System.IO\nImports System.Reflection\nImports System.Text.RegularExpressions\nImports System.Globalization\n\n\nClass CodeDirectiveDemo\n\n    Shared Sub Main()\n        Try\n            DemonstrateCodeDirectives(&quot;vb&quot;, &quot;ChecksumPragma.vb&quot;, &quot;ChecksumPragmaVB.exe&quot;)\n        Catch e As Exception\n            Console.WriteLine((&quot;Unexpected exception:&quot; + e.ToString()))\n        End Try\n\n    End Sub &#39;Main\n\n\n    &#39; Create and compile code containing code directives.\n    Shared Sub DemonstrateCodeDirectives(ByVal providerName As String, ByVal sourceFileName As String, ByVal assemblyName As String)\n\n        Dim provider As CodeDomProvider = CodeDomProvider.CreateProvider(providerName)\n        \n        Console.WriteLine(&quot;Building the CodeDOM graph...&quot;)\n        Dim cu As New CodeCompileUnit()\n        CreateGraph(cu)\n\n        Dim sw As New StringWriter()\n\n        Console.WriteLine(&quot;Generating code...&quot;)\n        provider.GenerateCodeFromCompileUnit(cu, sw, Nothing)\n        Dim output As String = sw.ToString()\n        output = Regex.Replace(output, &quot;Runtime version:[^&quot; + vbCr + vbLf + &quot;]*&quot;, &quot;Runtime version omitted for this demo&quot;)\n\n        Console.WriteLine(&quot;Dumping source code...&quot;)\n        Console.WriteLine(output)\n\n        Console.WriteLine(&quot;Writing source code to file...&quot;)\n        Dim s As Stream = File.Open(sourceFileName, FileMode.Create)\n        Dim t As New StreamWriter(s)\n        t.Write(output)\n        t.Close()\n        s.Close()\n\n        Dim opt As New CompilerParameters(New String() {&quot;System.dll&quot;, &quot;System.Xml.dll&quot;, &quot;System.Windows.Forms.dll&quot;, &quot;System.Data.dll&quot;, &quot;System.Drawing.dll&quot;})\n        opt.GenerateExecutable = False\n        opt.TreatWarningsAsErrors = True\n        opt.IncludeDebugInformation = True\n        opt.GenerateInMemory = True\n\n        Dim results As CompilerResults\n\n        Console.WriteLine((&quot;Compiling with &quot; + providerName))\n        results = provider.CompileAssemblyFromFile(opt, sourceFileName)\n\n        OutputResults(results)\n        If results.NativeCompilerReturnValue &lt;&gt; 0 Then\n            Console.WriteLine(&quot;&quot;)\n            Console.WriteLine(&quot;Compilation failed.&quot;)\n        Else\n            Console.WriteLine(&quot;&quot;)\n            Console.WriteLine(&quot;Demo completed successfully.&quot;)\n        End If\n        File.Delete(sourceFileName)\n\n    End Sub &#39;DemonstrateCodeDirectives\n\n    Private Shared HashMD5 As New Guid(&amp;H406EA660, &amp;H64CF, &amp;H4C82, &amp;HB6, &amp;HF0, &amp;H42, &amp;HD4, &amp;H81, &amp;H72, &amp;HA7, &amp;H99)\n    Private Shared HashSHA1 As New Guid(&amp;HFF1816EC, &amp;H65FF, &amp;H4D10, &amp;H87, &amp;HF7, &amp;H6F, &amp;H49, &amp;H63, &amp;H83, &amp;H34, &amp;H60)\n\n    &#39; Create a CodeDOM graph.\n    Shared Sub CreateGraph(ByVal cu As CodeCompileUnit)  &#39;ICodeGenerator generator, \n        cu.StartDirectives.Add(New CodeRegionDirective(CodeRegionMode.Start, &quot;Compile Unit Region&quot;))\n        cu.EndDirectives.Add(New CodeRegionDirective(CodeRegionMode.End, String.Empty))\n        Dim pragma1 As New CodeChecksumPragma()\n        pragma1.FileName = &quot;c:\\temp\\test\\OuterLinePragma.txt&quot;\n        pragma1.ChecksumAlgorithmId = HashMD5\n        pragma1.ChecksumData = New Byte() {&amp;HAA, &amp;HAA}\n        cu.StartDirectives.Add(pragma1)\n        Dim pragma2 As New CodeChecksumPragma(&quot;test.txt&quot;, HashSHA1, New Byte() {&amp;HBB, &amp;HBB, &amp;HBB})\n        cu.StartDirectives.Add(pragma2)\n\n        Dim ns As New CodeNamespace(&quot;Namespace1&quot;)\n        ns.Imports.Add(New CodeNamespaceImport(&quot;System&quot;))\n        ns.Imports.Add(New CodeNamespaceImport(&quot;System.IO&quot;))\n        cu.Namespaces.Add(ns)\n        ns.Comments.Add(New CodeCommentStatement(&quot;Namespace Comment&quot;))\n        Dim cd As New CodeTypeDeclaration(&quot;Class1&quot;)\n        ns.Types.Add(cd)\n\n        cd.Comments.Add(New CodeCommentStatement(&quot;Outer Type Comment&quot;))\n        cd.LinePragma = New CodeLinePragma(&quot;c:\\temp\\test\\OuterLinePragma.txt&quot;, 300)\n\n        Dim method1 As New CodeMemberMethod()\n        method1.Name = &quot;Method1&quot;\n        method1.Attributes = method1.Attributes And Not MemberAttributes.AccessMask Or MemberAttributes.Public\n\n\n        Dim method2 As New CodeMemberMethod()\n        method2.Name = &quot;Method2&quot;\n        method2.Attributes = method2.Attributes And Not MemberAttributes.AccessMask Or MemberAttributes.Public\n        method2.Comments.Add(New CodeCommentStatement(&quot;Method2 Comment&quot;))\n\n        cd.Members.Add(method1)\n        cd.Members.Add(method2)\n\n        cd.StartDirectives.Add(New CodeRegionDirective(CodeRegionMode.Start, &quot;Outer Type Region&quot;))\n\n        cd.EndDirectives.Add(New CodeRegionDirective(CodeRegionMode.End, String.Empty))\n\n        Dim field1 As New CodeMemberField(GetType(String), &quot;field1&quot;)\n        cd.Members.Add(field1)\n        field1.Comments.Add(New CodeCommentStatement(&quot;Field1 Comment&quot;))\n\n        Dim codeRegionDirective1 As New CodeRegionDirective(CodeRegionMode.Start, &quot;Field Region&quot;)\n        field1.StartDirectives.Add(codeRegionDirective1)\n        Dim codeRegionDirective2 As New CodeRegionDirective(CodeRegionMode.End, &quot;&quot;)\n        codeRegionDirective2.RegionMode = CodeRegionMode.End\n        codeRegionDirective2.RegionText = String.Empty\n        field1.EndDirectives.Add(codeRegionDirective2)\n        Dim snippet1 As New CodeSnippetStatement()\n        snippet1.Value = &quot;            Console.WriteLine(field1)&quot;\n\n        Dim regionStart As New CodeRegionDirective(CodeRegionMode.End, &quot;&quot;)\n        regionStart.RegionText = &quot;Snippet Region&quot;\n        regionStart.RegionMode = CodeRegionMode.Start\n        snippet1.StartDirectives.Add(regionStart)\n        snippet1.EndDirectives.Add(New CodeRegionDirective(CodeRegionMode.End, String.Empty))\n\n        &#39; CodeStatement example\n        Dim constructor1 As New CodeConstructor()\n        constructor1.Attributes = constructor1.Attributes And Not MemberAttributes.AccessMask _\n            Or MemberAttributes.Public\n        Dim codeAssignStatement1 As New CodeAssignStatement( _\n             New CodeFieldReferenceExpression( _\n             New CodeThisReferenceExpression(), &quot;field1&quot;), _\n             New CodePrimitiveExpression(&quot;value1&quot;))\n        codeAssignStatement1.StartDirectives.Add(New CodeRegionDirective(CodeRegionMode.Start, &quot;Statements Region&quot;))\n        cd.Members.Add(constructor1)\n        codeAssignStatement1.EndDirectives.Add(New CodeRegionDirective(CodeRegionMode.End, String.Empty))\n        method2.Statements.Add(codeAssignStatement1)\n        method2.Statements.Add(snippet1)\n\n    End Sub &#39;CreateGraph\n\n    Shared Sub OutputResults(ByVal results As CompilerResults)\n        Console.WriteLine((&quot;NativeCompilerReturnValue=&quot; + results.NativeCompilerReturnValue.ToString()))\n        Dim s As String\n        For Each s In results.Output\n            Console.WriteLine(s)\n        Next s\n\n    End Sub &#39;OutputResults\nEnd Class &#39;CodeDirectiveDemo \n</code></pre><pre><code class=\"lang-cs\" name=\"System.CodeDom.CodeDirectives#1\">using System.CodeDom;\nusing System.CodeDom.Compiler;\nusing System.Collections;\nusing System.Collections.Specialized;\nusing System.IO;\nusing System.Reflection;\nusing System.Text.RegularExpressions;\nusing System.Globalization;\nnamespace System.CodeDom\n{\n    class CodeDirectiveDemo\n    {\n        static void Main()\n        {\n            try\n            {\n                DemonstrateCodeDirectives(&quot;cs&quot;, &quot;ChecksumPragma.cs&quot;, &quot;ChecksumPragmaCS.exe&quot;);\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(&quot;Unexpected Exception:&quot; + e.ToString());\n            }\n        }\n\n        // Create and compile code containing code directives.\n        static void DemonstrateCodeDirectives(string providerName, string sourceFileName, string assemblyName)\n        {\n\n            CodeDomProvider provider = CodeDomProvider.CreateProvider(providerName);\n\n            Console.WriteLine(&quot;Building the CodeDOM graph...&quot;);\n\n            CodeCompileUnit cu = new CodeCompileUnit();\n\n            CreateGraph(cu);\n\n            StringWriter sw = new StringWriter();\n\n            Console.WriteLine(&quot;Generating code...&quot;);\n            provider.GenerateCodeFromCompileUnit(cu, sw, null);\n\n            string output = sw.ToString();\n            output = Regex.Replace(output, &quot;Runtime Version:[^\\r\\n]*&quot;,\n                &quot;Runtime Version omitted for demo&quot;);\n\n            Console.WriteLine(&quot;Dumping source code...&quot;);\n            Console.WriteLine(output);\n\n            Console.WriteLine(&quot;Writing source code to file...&quot;);\n            Stream s = File.Open(sourceFileName, FileMode.Create);\n            StreamWriter t = new StreamWriter(s);\n            t.Write(output);\n            t.Close();\n            s.Close();\n\n            CompilerParameters opt = new CompilerParameters(new string[]{\n                                      &quot;System.dll&quot;, \n                                      &quot;System.Xml.dll&quot;,\n                                      &quot;System.Windows.Forms.dll&quot;,\n                                      &quot;System.Data.dll&quot;,\n                                      &quot;System.Drawing.dll&quot;});\n            opt.GenerateExecutable = false;\n            opt.TreatWarningsAsErrors = true;\n            opt.IncludeDebugInformation = true;\n            opt.GenerateInMemory = true;\n\n            CompilerResults results;\n\n            Console.WriteLine(&quot;Compiling with &quot; + providerName);\n            results = provider.CompileAssemblyFromFile(opt, sourceFileName);\n\n            OutputResults(results);\n            if (results.NativeCompilerReturnValue != 0)\n            {\n                Console.WriteLine(&quot;&quot;);\n                Console.WriteLine(&quot;Compilation failed.&quot;);\n            }\n            else\n            {\n                Console.WriteLine(&quot;&quot;);\n                Console.WriteLine(&quot;Demo complete.&quot;);\n            }\n            File.Delete(sourceFileName);\n        }\n\n        private static Guid HashMD5 = new Guid(0x406ea660, 0x64cf, 0x4c82, 0xb6, 0xf0, 0x42, 0xd4, 0x81, 0x72, 0xa7, 0x99);\n        private static Guid HashSHA1 = new Guid(0xff1816ec, 0xaa5e, 0x4d10, 0x87, 0xf7, 0x6f, 0x49, 0x63, 0x83, 0x34, 0x60);\n\n        // Create a CodeDOM graph.\n        static void CreateGraph( CodeCompileUnit cu)\n        {\n            cu.StartDirectives.Add(new CodeRegionDirective(CodeRegionMode.Start,\n                &quot;Compile Unit Region&quot;));\n            cu.EndDirectives.Add(new CodeRegionDirective(CodeRegionMode.End,\n                string.Empty));\n            CodeChecksumPragma pragma1 = new CodeChecksumPragma();\n            pragma1.FileName = &quot;c:\\\\temp\\\\test\\\\OuterLinePragma.txt&quot;;\n            pragma1.ChecksumAlgorithmId = HashMD5;\n            pragma1.ChecksumData = new byte[] { 0xAA, 0xAA };\n            cu.StartDirectives.Add(pragma1);\n            CodeChecksumPragma pragma2 = new CodeChecksumPragma(&quot;test.txt&quot;, HashSHA1, new byte[] { 0xBB, 0xBB, 0xBB });\n            cu.StartDirectives.Add(pragma2);\n\n            CodeNamespace ns = new CodeNamespace(&quot;Namespace1&quot;);\n            ns.Imports.Add(new CodeNamespaceImport(&quot;System&quot;));\n            ns.Imports.Add(new CodeNamespaceImport(&quot;System.IO&quot;));\n            cu.Namespaces.Add(ns);\n            ns.Comments.Add(new CodeCommentStatement(&quot;Namespace Comment&quot;));\n            CodeTypeDeclaration cd = new CodeTypeDeclaration(&quot;Class1&quot;);\n            ns.Types.Add(cd);\n\n            cd.Comments.Add(new CodeCommentStatement(&quot;Outer Type Comment&quot;));\n            cd.LinePragma = new CodeLinePragma(&quot;c:\\\\temp\\\\test\\\\OuterLinePragma.txt&quot;, 300);\n\n            CodeMemberMethod method1 = new CodeMemberMethod();\n            method1.Name = &quot;Method1&quot;;\n            method1.Attributes = (method1.Attributes &amp; ~MemberAttributes.AccessMask) | MemberAttributes.Public;\n\n\n            CodeMemberMethod method2 = new CodeMemberMethod();\n            method2.Name = &quot;Method2&quot;;\n            method2.Attributes = (method2.Attributes &amp; ~MemberAttributes.AccessMask) | MemberAttributes.Public;\n            method2.Comments.Add(new CodeCommentStatement(&quot;Method 2 Comment&quot;));\n\n            cd.Members.Add(method1);\n            cd.Members.Add(method2);\n\n            cd.StartDirectives.Add(new CodeRegionDirective(CodeRegionMode.Start,\n                &quot;Outer Type Region&quot;));\n\n            cd.EndDirectives.Add(new CodeRegionDirective(CodeRegionMode.End,\n                string.Empty));\n\n            CodeMemberField field1 = new CodeMemberField(typeof(String), &quot;field1&quot;);\n            cd.Members.Add(field1);\n            field1.Comments.Add(new CodeCommentStatement(&quot;Field 1 Comment&quot;));\n\n            CodeRegionDirective codeRegionDirective1 = new CodeRegionDirective(CodeRegionMode.Start,\n                &quot;Field Region&quot;);\n            field1.StartDirectives.Add(codeRegionDirective1);\n            CodeRegionDirective codeRegionDirective2 = new CodeRegionDirective(CodeRegionMode.End,\n                &quot;&quot;);\n            codeRegionDirective2.RegionMode = CodeRegionMode.End;\n            codeRegionDirective2.RegionText = string.Empty;\n            field1.EndDirectives.Add(codeRegionDirective2);\n\n            CodeSnippetStatement snippet1 = new CodeSnippetStatement();\n            snippet1.Value = &quot;            Console.WriteLine(field1);&quot;;\n\n            CodeRegionDirective regionStart = new CodeRegionDirective(CodeRegionMode.End, &quot;&quot;);\n            regionStart.RegionText = &quot;Snippet Region&quot;;\n            regionStart.RegionMode = CodeRegionMode.Start;\n            snippet1.StartDirectives.Add(regionStart);\n            snippet1.EndDirectives.Add(new CodeRegionDirective(CodeRegionMode.End, string.Empty));\n\n            // CodeStatement example\n            CodeConstructor constructor1 = new CodeConstructor();\n            constructor1.Attributes = (constructor1.Attributes &amp; ~MemberAttributes.AccessMask) | MemberAttributes.Public;\n            CodeStatement codeAssignStatement1 = new CodeAssignStatement(\n                                        new CodeFieldReferenceExpression(\n                                            new CodeThisReferenceExpression(),\n                                            &quot;field1&quot;),\n                                        new CodePrimitiveExpression(&quot;value1&quot;));\n            codeAssignStatement1.StartDirectives.Add(new CodeRegionDirective(CodeRegionMode.Start, &quot;Statements Region&quot;));\n            cd.Members.Add(constructor1);\n            codeAssignStatement1.EndDirectives.Add(new CodeRegionDirective(CodeRegionMode.End, string.Empty));\n            method2.Statements.Add(codeAssignStatement1);\n            method2.Statements.Add(snippet1);\n\n        }\n\n        static void OutputResults(CompilerResults results)\n        {\n            Console.WriteLine(&quot;NativeCompilerReturnValue=&quot; +\n                results.NativeCompilerReturnValue.ToString());\n            foreach (string s in results.Output)\n            {\n                Console.WriteLine(s);\n            }\n        }\n\n    }\n}\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The CodeChecksumPragma class inherits from <a class=\"xref\" href=\"system.codedom.codedirective\" data-linktype=\"relative-path\">CodeDirective</a> and can be contained in a <a class=\"xref\" href=\"system.codedom.codedirectivecollection\" data-linktype=\"relative-path\">CodeDirectiveCollection</a>. CodeChecksumPragma provides the unique identification of source files, including files that have been generated.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_CodeDom_CodeChecksumPragma__ctor\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CodeChecksumPragma()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.codedom.codechecksumpragma\" data-linktype=\"relative-path\">CodeChecksumPragma</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public CodeChecksumPragma ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_CodeDom_CodeChecksumPragma__ctor_System_String_System_Guid_System_Byte___\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CodeChecksumPragma(String, Guid, Byte[])</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.codedom.codechecksumpragma\" data-linktype=\"relative-path\">CodeChecksumPragma</a> class using a file name, a GUID representing the checksum algorithm, and a byte stream representing the checksum data.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public CodeChecksumPragma (string fileName, Guid checksumAlgorithmId, byte[] checksumData);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>fileName</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The path to the checksum file.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>checksumAlgorithmId</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a> that identifies the checksum algorithm to use.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>checksumData</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A byte array that contains the checksum data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>For more information on the <code>checksumAlgorithmId</code> parameter, see the <a class=\"xref\" href=\"system.codedom.codechecksumpragma#System_CodeDom_CodeChecksumPragma_ChecksumAlgorithmId_\" data-linktype=\"relative-path\">ChecksumAlgorithmId</a> property.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_CodeDom_CodeChecksumPragma_ChecksumAlgorithmId\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ChecksumAlgorithmId</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets a GUID that identifies the checksum algorithm to use.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public Guid ChecksumAlgorithmId { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a> that identifies the checksum algorithm to use.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Algorithms are provided for the MD5 and SHA1 hashes. The GUID value to use for the MD5 hash is {0x406ea660, 0x64cf, 0x4c82, 0xb6, 0xf0, 0x42, 0xd4, 0x81, 0x72, 0xa7, 0x99}. The GUID to use for the SHA1 hash is {0xff1816ec, 0xaa5e, 0x4d10, 0x87, 0xf7, 0x6f, 0x49, 0x63, 0x83, 0x34, 0x60}.  </p>\n<p> The calculation of the checksum is language-specific. That is, the language vendor can use any of the hashing algorithms known to the debugger to calculate the checksum. The use of a GUID for this property provides hash algorithm extensibility.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_CodeDom_CodeChecksumPragma_ChecksumData\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ChecksumData</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets the value of the data for the checksum calculation.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public byte[] ChecksumData { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A byte array that contains the data for the checksum calculation.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The ChecksumData property contains data from the target file specified by the <a class=\"xref\" href=\"system.codedom.codechecksumpragma#System_CodeDom_CodeChecksumPragma_FileName_\" data-linktype=\"relative-path\">FileName</a> property.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_CodeDom_CodeChecksumPragma_FileName\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FileName</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets the path to the checksum file.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string FileName { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The path to the checksum file.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>An example of a FileName property value is &quot;C:\\Temp\\Test\\OuterLinePragma.txt&quot;.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.CodeDom.CodeChecksumPragma.yml\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.CodeChecksumPragma\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.CodeChecksumPragma..ctor\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.CodeChecksumPragma.ChecksumAlgorithmId\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.CodeChecksumPragma.ChecksumData\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.CodeChecksumPragma.FileName\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-29 05:54 AM\">\r\n<meta name=\"document_id\" content=\"03d5584c-e42e-9cc8-644a-45e3b09e6037\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a code checksum pragma code entity.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.codedom/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.CodeDom.CodeChecksumPragma\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.CodeDom.CodeChecksumPragma.yml","open_to_public_contributors":false,"api_name":["System.CodeDom.CodeChecksumPragma","System.CodeDom.CodeChecksumPragma..ctor","System.CodeDom.CodeChecksumPragma.ChecksumAlgorithmId","System.CodeDom.CodeChecksumPragma.ChecksumData","System.CodeDom.CodeChecksumPragma.FileName"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.CodeDom.CodeChecksumPragma","System::CodeDom::CodeChecksumPragma","System.CodeDom.CodeChecksumPragma.#ctor","System::CodeDom::CodeChecksumPragma::#ctor","System.CodeDom.CodeChecksumPragma.ChecksumAlgorithmId","System::CodeDom::CodeChecksumPragma::ChecksumAlgorithmId","System.CodeDom.CodeChecksumPragma.ChecksumData","System::CodeDom::CodeChecksumPragma::ChecksumData","System.CodeDom.CodeChecksumPragma.FileName","System::CodeDom::CodeChecksumPragma::FileName"],"dev_langs":["csharp"],"updated_at":"2017-03-29 05:54 AM","document_id":"03d5584c-e42e-9cc8-644a-45e3b09e6037","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.CodeDom/CodeChecksumPragma.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"CodeChecksumPragma class | Microsoft Docs","_op_ogTitle":"CodeChecksumPragma class","description":"Represents a code checksum pragma code entity.\n","toc_asset_id":"api/_splitted/System.CodeDom/toc.json","toc_rel":"_splitted/System.CodeDom/toc.json","source_url":"","ms.assetid":"System.CodeDom.CodeChecksumPragma","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.codedom.codechecksumpragma","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.codedom.codechecksumpragma","fileRelativePath":"api/System.CodeDom.CodeChecksumPragma.html"},"themesRelativePathToOutputRoot":"_themes/"}