{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">WebEventProvider</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Provides the base class for non buffered event providers.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public abstract class WebEventProvider : System.Configuration.Provider.ProviderBase</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.provider.providerbase\" data-linktype=\"relative-path\">ProviderBase</a></span></div><span class=\"lang-csharp\">WebEventProvider</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Derived</dt><dd>\r\n  \t\t<div class=\"cdlHolder\">\r\n        \t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.management.bufferedwebeventprovider\" data-linktype=\"relative-path\">BufferedWebEventProvider</a></span></div>\r\n        \t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.management.eventlogwebeventprovider\" data-linktype=\"relative-path\">EventLogWebEventProvider</a></span></div>\r\n        \t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.management.iistracewebeventprovider\" data-linktype=\"relative-path\">IisTraceWebEventProvider</a></span></div>\r\n        \t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.management.tracewebeventprovider\" data-linktype=\"relative-path\">TraceWebEventProvider</a></span></div>\r\n        \t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.management.wmiwebeventprovider\" data-linktype=\"relative-path\">WmiWebEventProvider</a></span></div>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.provider.providerbase#System_Configuration_Provider_ProviderBase_Description\" data-linktype=\"relative-path\">Description</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.provider.providerbase#System_Configuration_Provider_ProviderBase_Initialize_System_String_System_Collections_Specialized_NameValueCollection_\" data-linktype=\"relative-path\">Initialize(String, NameValueCollection)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.provider.providerbase#System_Configuration_Provider_ProviderBase_Name\" data-linktype=\"relative-path\">Name</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example shows how to derive from the WebEventProvider class to create a custom provider that writes the configured events to a local file for which appropriate access rights must be granted. This custom provider example is simple and its main intent is to give you as developer full control of its basic mechanisms. In a real-world scenario, you could use this provider and especially the example buffered provider available at <a class=\"xref\" href=\"system.web.management.bufferedwebeventprovider\" data-linktype=\"relative-path\">BufferedWebEventProvider</a>, as a preliminary probe into the behavior of an application. This can help you during the design stage to gain an understanding of the information available; then later you can direct this information to a more complex provider.  </p>\n<p> The following configuration file excerpt shows a <code>healthMonitoring</code> section configuration that enables ASP.NET to use the custom provider defined above to process all health-monitoring events.  </p>\n<pre><code>&lt;healthMonitoring   \n  heartBeatInterval=&quot;0&quot;   \n  enabled=&quot;true&quot;&gt;  \n\n    &lt;providers&gt;  \n\n      &lt;add name=&quot;SampleWebEventProvider&quot;   \n        type=&quot;SamplesAspNet.SampleEventProvider,webeventprovider, Version=1.0.1773.33989, Culture=neutral, PublicKeyToken=cf85aa6c978d9dea, processorArchitecture=MSIL&quot; /&gt;  \n\n    &lt;/providers&gt;  \n\n    &lt;rules&gt;  \n\n      &lt;rule   \n        name=&quot;Custom Event Provider&quot;  \n        eventName=&quot;All Events&quot;  \n        provider=&quot;SampleWebEventProvider&quot;  \n        profile=&quot;Default&quot; /&gt;  \n    &lt;/rules&gt;  \n\n&lt;/healthMonitoring&gt;  \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Web.Management.WebEventProvider#1\">Imports System\nImports System.Text\nImports System.IO\nImports System.Web.Management\nImports System.Collections.Generic\nImports System.Collections.Specialized\nImports System.Web\n\n\n\n&#39; Implements a custom event provider.\n\nPublic Class SampleEventProvider\n    Inherits System.Web.Management.WebEventProvider\n    \n    &#39; The local path of the file where\n    &#39; to store event information.\n    Private logFilePath As String\n    \n    &#39; The current number of buffered messages \n    Private msgCounter As Integer\n    \n    &#39; The max number of messages to buffere.\n    Private maxMsgNumber As Integer\n    \n    &#39; The message buffer.\n    &#39;  private System.Collections.Generic.Queue\n    Private msgBuffer _\n    As System.Collections.Generic.Queue( _\n    Of System.Web.Management.WebBaseEvent) = _\n    New System.Collections.Generic.Queue( _\n    Of System.Web.Management.WebBaseEvent)\n\n\n    &#39; Initializes the provider.\n    Public Sub New() \n        \n        &#39; Initialize the local path of the file \n        &#39; that holds event information.\n        logFilePath = &quot;C:/test/log.doc&quot;\n        \n        &#39; Clear the message buffer.\n        msgBuffer.Clear()\n        \n        &#39; Initialize the max number of messages\n        &#39; to buffer.\n        maxMsgNumber = 10\n    \n    End Sub &#39;New\n     \n    &#39; More custom initialization goes here.\n    \n    &#39; Flush the input buffer if required.\n    Public Overrides Sub Flush() \n        &#39; Create a string builder to \n        &#39; hold the event information.\n        Dim reData As New StringBuilder()\n        \n        &#39; Store custom information.\n        reData.Append( _\n        &quot;SampleEventProvider processing.&quot; + _\n        Environment.NewLine)\n\n        reData.Append( _\n        &quot;Flush done at: {0}&quot; + _\n        DateTime.Now.TimeOfDay.ToString() + _\n        Environment.NewLine)\n        \n        Dim e As WebBaseEvent\n        For Each e In  msgBuffer\n            &#39; Store event data.\n            reData.Append(e.ToString())\n        Next e\n        \n        &#39; Store the information in the specified file.\n        StoreToFile(reData, logFilePath, FileMode.Append)\n        \n        &#39; Reset the message counter.\n        msgCounter = 0\n        \n        &#39; Clear the buffer.\n        msgBuffer.Clear()\n    \n    End Sub &#39;Flush\n     \n    &#39; Shutdown the provider.\n    Public Overrides Sub Shutdown() \n        Flush()\n    \n    End Sub &#39;Shutdown\n    \n    &#39; Process the event that has been raised.\n    Public Overrides Sub ProcessEvent( _\n    ByVal raisedEvent As WebBaseEvent)\n\n        If msgCounter &lt; maxMsgNumber Then\n            &#39; Buffer the event information.\n            msgBuffer.Enqueue(raisedEvent)\n            &#39; Increment the message counter.\n            msgCounter += 1\n        Else\n            &#39; Flush the buffer.\n            Flush()\n        End If\n\n    End Sub &#39;ProcessEvent\n    \n    \n    &#39; Store event information in a local file.\n    Private Sub StoreToFile( _\n    ByVal [text] As StringBuilder, _\n    ByVal filePath As String, _\n    ByVal mode As FileMode)\n        Dim writeBlock As Integer\n        Dim startIndex As Integer\n\n        Try\n\n            writeBlock = 256\n            startIndex = 0\n\n            &#39; Open or create the local file \n            &#39; to store the event information.\n            Dim fs As New FileStream( _\n            filePath, mode, FileAccess.Write)\n\n            &#39; Lock the file for writing.\n            fs.Lock(startIndex, writeBlock)\n\n            &#39; Create a stream writer\n            Dim writer As New StreamWriter(fs)\n\n            &#39; Set the file pointer to the current \n            &#39; position to keep adding data to it. \n            &#39; If you want to rewrite the file use \n            &#39; the(following) statement instead.\n            &#39; writer.BaseStream.Seek (0, SeekOrigin.Begin);\n            writer.BaseStream.Seek(0, SeekOrigin.Current)\n\n            &#39;If the file already exists it must \n            &#39;not be write protected, otherwise  \n            &#39;the following write operation fails silently.\n            writer.Write([text].ToString())\n\n            &#39; Update the underlying file\n            writer.Flush()\n\n            &#39; Unlock the file for other processes.\n            fs.Unlock(startIndex, writeBlock)\n\n            &#39; Close the stream writer and the underlying file     \n            writer.Close()\n\n            fs.Close()\n        Catch e As Exception\n            Throw New Exception( _\n            &quot;SampleEventProvider.StoreToFile: &quot; + _\n            e.ToString())\n        End Try\n\n    End Sub &#39;StoreToFile\nEnd Class &#39;SampleEventProvider\n\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Web.Management.WebEventProvider#1\">\nusing System;\nusing System.Text;\nusing System.IO;\nusing System.Web.Management;\nusing System.Collections.Generic;\nusing System.Collections.Specialized;\nusing System.Web;\n\n\nnamespace SamplesAspNet\n{\n  // Implements a custom event provider.\n    public class SampleEventProvider : \n        System.Web.Management.WebEventProvider\n    {\n\n        // The local path of the file where\n        // to store event information.\n        private string logFilePath;\n    \n        // The current number of buffered messages \n        private int msgCounter;\n\n        // The max number of messages to buffere.\n        private int maxMsgNumber;\n\n        // The message buffer.\n        private System.Collections.Generic.Queue\n            &lt;WebBaseEvent&gt; msgBuffer = \n            new Queue&lt;WebBaseEvent&gt;();\n\n        // Initializes the provider.\n        public SampleEventProvider(): base()\n        {\n\n            // Initialize the local path of the file \n            // that holds event information.\n            logFilePath = &quot;C:/test/log.doc&quot;;\n\n            // Clear the message buffer.\n            msgBuffer.Clear();\n\n            // Initialize the max number of messages\n            // to buffer.\n            maxMsgNumber = 10;\n\n            // More custom initialization goes here.\n\n        }\n\n\n        // Flush the input buffer if required.\n        public override void Flush()\n        {\n            // Create a string builder to \n            // hold the event information.\n            StringBuilder reData = new StringBuilder();\n\n            // Store custom information.\n            reData.Append(&quot;SampleEventProvider processing.&quot; +\n                Environment.NewLine);\n            reData.Append(&quot;Flush done at: {0}&quot; +\n                DateTime.Now.TimeOfDay.ToString() +\n                Environment.NewLine);\n            \n            foreach (WebBaseEvent e in msgBuffer)\n            {\n                // Store event data.\n                reData.Append(e.ToString());\n            }\n\n            // Store the information in the specified file.\n            StoreToFile(reData, logFilePath, FileMode.Append);\n\n            // Reset the message counter.\n            msgCounter = 0;\n            \n            // Clear the buffer.\n            msgBuffer.Clear();\n\n        }\n\n\n        // Shutdown the provider.\n        public override void Shutdown()\n        {\n            Flush();\n        }\n\n\n        // Process the event that has been raised.\n        public override void ProcessEvent(WebBaseEvent raisedEvent)\n        { \n            if (msgCounter &lt; maxMsgNumber)\n            {\n                // Buffer the event information.\n                msgBuffer.Enqueue(raisedEvent);\n                // Increment the message counter.\n                msgCounter += 1;\n            }\n            else\n            {\n                // Flush the buffer.\n                Flush();\n            }\n        }\n\n\n\n        // Store event information in a local file.\n        private void StoreToFile(StringBuilder text, \n            string filePath, FileMode mode)\n        {\n            int writeBlock;\n            int startIndex;\n\n            try\n            {\n\n                writeBlock = 256;\n                startIndex = 0;\n\n                // Open or create the local file \n                // to store the event information.\n                FileStream fs = new FileStream(filePath, \n                    mode, FileAccess.Write);\n\n                // Lock the file for writing.\n                fs.Lock(startIndex, writeBlock);\n\n                // Create a stream writer\n                StreamWriter writer = new StreamWriter(fs);\n\n                // Set the file pointer to the current \n                // position to keep adding data to it. \n                // If you want to rewrite the file use \n                // the following statement instead.\n                // writer.BaseStream.Seek (0, SeekOrigin.Begin);\n                writer.BaseStream.Seek(0, SeekOrigin.Current);\n\n                //If the file already exists it must not \n                // be write protected otherwise  \n                // the following write operation fails silently.\n                writer.Write(text.ToString());\n\n                // Update the underlying file\n                writer.Flush();\n\n                // Unlock the file for other processes.\n                fs.Unlock(startIndex, writeBlock);\n\n                // Close the stream writer and the underlying file     \n                writer.Close();\n\n                fs.Close();\n            }\n            catch (Exception e)\n            {\n                throw new Exception(\n                    &quot;SampleEventProvider.StoreToFile: &quot; \n                    + e.ToString());\n            }\n        }\n\n    }\n\n}\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>ASP.NET health monitoring allows production and operations staff to manage deployed Web applications. The <a class=\"xref\" href=\"system.web.management\" data-linktype=\"relative-path\">System.Web.Management</a> namespace contains the health event types responsible for packaging application health-status data and the provider types responsible for processing this data. It also contains supporting types that help during the management of health events.  </p>\n<p> If you want to customize the health-event processing, you can derive from the WebEventProvider class to create your own custom provider.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In most cases you will be able to use the ASP.NET health-monitoring types as implemented, and you will control the health-monitoring system by specifying values in the <code>healthMonitoring</code> configuration section. You can also derive from the health-monitoring types to create your own custom events and providers. For an example of deriving from the WebEventProvider class, see the example provided in this topic.</p>\n</div>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Web_Management_WebEventProvider__ctor_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_Management_WebEventProvider__ctor\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">WebEventProvider()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.web.management.webeventprovider\" data-linktype=\"relative-path\">WebEventProvider</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected WebEventProvider ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The WebEventProvider constructor is not intended to be used directly from your code. It is called by ASP.NET. You can call the WebEventProvider constructor when deriving from the <a class=\"xref\" href=\"system.web.management.webeventprovider\" data-linktype=\"relative-path\">WebEventProvider</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Web_Management_WebEventProvider_Flush_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_Management_WebEventProvider_Flush\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Flush()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Moves the events from the provider&#39;s buffer into the event log.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public abstract void Flush ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>When this method is called, all the events in the buffer are immediately moved from the buffer to the event log, regardless of how much time has elapsed since last write or how many events are in the buffer. The time of the last write is reset to the time of the flushing action.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Web_Management_WebEventProvider_ProcessEvent_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_Management_WebEventProvider_ProcessEvent_System_Web_Management_WebBaseEvent_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ProcessEvent(WebBaseEvent)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Processes the event passed to the provider.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public abstract void ProcessEvent (System.Web.Management.WebBaseEvent raisedEvent);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>raisedEvent</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.management.webbaseevent\" data-linktype=\"relative-path\">WebBaseEvent</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.web.management.webbaseevent\" data-linktype=\"relative-path\">WebBaseEvent</a> object to process.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This is the method that ASP.NET health monitoring calls to start processing the event.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Web_Management_WebEventProvider_Shutdown_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_Management_WebEventProvider_Shutdown\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Shutdown()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Performs tasks associated with shutting down the provider.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public abstract void Shutdown ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>ASP.NET calls the <a class=\"xref\" href=\"system.web.management.eventlogwebeventprovider#System_Web_Management_EventLogWebEventProvider_Shutdown_\" data-linktype=\"relative-path\">Shutdown</a> method when the application domain hosting the Web application terminates. The method is called to perform tasks that will allow the application to end gracefully, such as closing resources.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.Management.WebEventProvider.yml\">\r\n<meta name=\"APIName\" content=\"System.Web.Management.WebEventProvider\">\r\n<meta name=\"APIName\" content=\"System.Web.Management.WebEventProvider..ctor\">\r\n<meta name=\"APIName\" content=\"System.Web.Management.WebEventProvider.Flush\">\r\n<meta name=\"APIName\" content=\"System.Web.Management.WebEventProvider.ProcessEvent\">\r\n<meta name=\"APIName\" content=\"System.Web.Management.WebEventProvider.Shutdown\">\r\n<meta name=\"APILocation\" content=\"System.Web.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 02:21 PM\">\r\n<meta name=\"document_id\" content=\"790a152b-df85-3537-d91a-703a76f7d7c9\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides the base class for non buffered event providers.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.web.management/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Web.Management.WebEventProvider\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.Management.WebEventProvider.yml","open_to_public_contributors":false,"api_name":["System.Web.Management.WebEventProvider","System.Web.Management.WebEventProvider..ctor","System.Web.Management.WebEventProvider.Flush","System.Web.Management.WebEventProvider.ProcessEvent","System.Web.Management.WebEventProvider.Shutdown"],"api_location":["System.Web.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Web.Management.WebEventProvider","System::Web::Management::WebEventProvider","System.Web.Management.WebEventProvider.#ctor","System::Web::Management::WebEventProvider::#ctor","System.Web.Management.WebEventProvider.Flush","System::Web::Management::WebEventProvider::Flush","System.Web.Management.WebEventProvider.ProcessEvent","System::Web::Management::WebEventProvider::ProcessEvent","System.Web.Management.WebEventProvider.Shutdown","System::Web::Management::WebEventProvider::Shutdown"],"dev_langs":["csharp"],"updated_at":"2017-03-31 02:21 PM","document_id":"790a152b-df85-3537-d91a-703a76f7d7c9","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Web.Management/WebEventProvider.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"WebEventProvider class | Microsoft Docs","_op_ogTitle":"WebEventProvider class","description":"Provides the base class for non buffered event providers.\n","toc_asset_id":"api/_splitted/System.Web.Management/toc.json","toc_rel":"_splitted/System.Web.Management/toc.json","source_url":"","ms.assetid":"System.Web.Management.WebEventProvider","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.web.management.webeventprovider","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.web.management.webeventprovider","fileRelativePath":"api/System.Web.Management.WebEventProvider.html"},"themesRelativePathToOutputRoot":"_themes/"}