{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">AuthenticationManager</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Manages the authentication modules called during the client authentication process.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public class AuthenticationManager</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span></div><span class=\"lang-csharp\">AuthenticationManager</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<pre><code class=\"lang-cs\" name=\"System.Net.Authentication#1\">\n// The following example shows how to create a custom Basic authentication module,\n// how to register it using the AuthenticationManager class and how to authorize  \n// users to access a Web site.\n// Note: To run this program you must create a test Web site that performs\n// Basic authentication. Also you must add to your server machine a user whose\n// credentials are the same as the ones you use in this program.\n// Attention: Basic authentication sends the user&#39;s credentials over HTTP. \n// Passwords and user names are encoded using Base64 encoding. Although the \n// user information is encoded, it is considered insecure becasue it could be deciphered \n// relatively easily. \n// If you must use Basic authentication you are strongly advised to use strong \n// security mechanisms, such as SSL, when transferring sensitive information.\n\n\nusing System;\nusing System.Net;\nusing System.IO;\nusing System.Text;\nusing System.Collections;\n\n\nnamespace Mssc.Services.Authentication\n{\n  // The ClientAuthentication class performs the following main tasks:\n  // 1) Obtains the user&#39;s credentials.\n  // 2) Unregisters the standard Basic authentication.\n  // 3) Registers the custom Basic authentication.\n  // 4) Reads the selected page and displays it on the console.\n  class TestAuthentication \n  {\n\n    private static string username, password, domain, uri;\n\n    // This method invoked when the user does not enter the required input parameters.\n    private static void showusage() \n    {\n      Console.WriteLine(&quot;Attempts to authenticate to a URL&quot;);\n      Console.WriteLine(&quot;\\r\\nUse one of the following:&quot;);\n      Console.WriteLine(&quot;\\tcustomBasicAuthentication URL username password domain&quot;);\n      Console.WriteLine(&quot;\\tcustomBasicAuthentication URL username password&quot;);\n    }\n\n    // Display registered authentication modules.\n    private static void displayRegisteredModules() \n    {\n      // The AuthenticationManager calls all authentication modules sequentially \n      // until one of them responds with an authorization instance.  Show\n      // the current registered modules.\n      IEnumerator registeredModules = AuthenticationManager.RegisteredModules; \n      Console.WriteLine(&quot;\\r\\nThe following authentication modules are now registered with the system:&quot;);\n      while(registeredModules.MoveNext())\n      {\n        Console.WriteLine(&quot;\\r \\n Module : {0}&quot;,registeredModules.Current); \n        IAuthenticationModule currentAuthenticationModule = (IAuthenticationModule)registeredModules.Current;\n        Console.WriteLine(&quot;\\t  CanPreAuthenticate : {0}&quot;,currentAuthenticationModule.CanPreAuthenticate); \n      }      \n    }\n\n    // The getPage method accesses the selected page and displays its content \n    // on the console.\n    private static void getPage(String url) \n    {\n      try \n      {\n        // Create the Web request object.\n        HttpWebRequest req = (HttpWebRequest) WebRequest.Create(url);\n        \n        // Define the request access method.\n        req.Method = &quot;GET&quot;;\n        \n        // Define the request credentials according to the user&#39;s input.\n        if (domain == String.Empty)\n          req.Credentials = new NetworkCredential(username, password);\n        else\n          // If the user does not specify the Internet resource domain, this usually\n          // is by default the name of the sever hosting the resource.\n          req.Credentials = new NetworkCredential(username, password, domain);\n\n        // Issue the request.\n        HttpWebResponse result = (HttpWebResponse) req.GetResponse();\n\n        Console.WriteLine(&quot;\\nAuthentication Succeeded:&quot;);\n\n        // Store the response.\n        Stream sData = result.GetResponseStream();\n\n        // Display the response.\n        displayPageContent(sData);\n      }\n      catch (WebException e)\n      {\n        // Display any errors. In particular, display any protocol-related error. \n        if (e.Status == WebExceptionStatus.ProtocolError)\n        {                \n          HttpWebResponse hresp = (HttpWebResponse) e.Response;\n          Console.WriteLine(&quot;\\nAuthentication Failed, &quot; + hresp.StatusCode);\n          Console.WriteLine(&quot;Status Code: &quot; + (int) hresp.StatusCode);\n          Console.WriteLine(&quot;Status Description: &quot; + hresp.StatusDescription);                \n          return;\n        }\n        Console.WriteLine(&quot;Caught Exception: &quot; + e.Message);\n        Console.WriteLine(&quot;Stack: &quot; + e.StackTrace);\n      }\n    }\n\n    // The displayPageContent method display the content of the\n    // selected page.\n    private static void displayPageContent(Stream ReceiveStream) \n    {\n      // Create an ASCII encoding object.\n      Encoding ASCII = Encoding.ASCII;\n    \n      // Define the byte array to temporarily hold the current read bytes. \n      Byte[] read = new Byte[512];\n\n      Console.WriteLine(&quot;\\r\\nPage Content...\\r\\n&quot;);\n\n      // Read the page content and display it on the console.\n      // Read the first 512 bytes.\n      int bytes = ReceiveStream.Read(read, 0, 512);\n      while (bytes &gt; 0) \n      {\n        Console.Write(ASCII.GetString(read, 0, bytes));\n        bytes = ReceiveStream.Read(read, 0, 512);\n      }\n      Console.WriteLine(&quot;&quot;);\n    }\n\n    // This is the program entry point. It allows the user to enter \n    // her credentials and the Internet resource (Web page) to access.\n    // It also unregisters the standard and registers the customized Basic \n    // authentication.\n    public static void Main(string[] args) \n    {\n    \n      if (args.Length &lt; 3)\n        showusage();\n      else \n      {    \n         \n        // Read the user&#39;s credentials.\n        uri = args[0];\n        username = args[1];\n        password = args[2];\n\n        if (args.Length == 3)\n          domain = string.Empty;\n        else\n          // If the domain exists, store it. Usually the domain name\n          // is by default the name of the server hosting the Internet\n          // resource.\n          domain = args[3];\n\n      \n        // Instantiate the custom Basic authentication module.\n        CustomBasic customBasicModule = new CustomBasic();\n           \n        // Unregister the standard Basic authentication module.\n        AuthenticationManager.Unregister(&quot;Basic&quot;);\n\n        // Register the custom Basic authentication module.\n        AuthenticationManager.Register(customBasicModule);\n \n        // Display registered authorization modules.\n        displayRegisteredModules();\n        \n        // Read the specified page and display it on the console.\n        getPage(uri);\n      }\n      return;\n    }\n  }\n \n  // The CustomBasic class creates a custom Basic authentication by implementing the\n  // IAuthenticationModule interface. It performs the following\n  // tasks:\n  // 1) Defines and initializes the required properties.\n  // 2) Implements the Authenticate method.\n  \n  public class CustomBasic : IAuthenticationModule\n  {\n\n    private string m_authenticationType ;\n    private bool m_canPreAuthenticate ;\n\n    // The CustomBasic constructor initializes the properties of the customized \n    // authentication.\n    public CustomBasic()\n    {\n      m_authenticationType = &quot;Basic&quot;;\n      m_canPreAuthenticate = false;\n    }\n\n    // Define the authentication type. This type is then used to identify this\n    // custom authentication module. The default is set to Basic.\n    public string AuthenticationType\n    {\n      get\n      {\n        return m_authenticationType;\n      }\n    }\n\n    // Define the pre-authentication capabilities for the module. The default is set\n    // to false.\n    public bool CanPreAuthenticate\n    {\n      get\n      {\n        return m_canPreAuthenticate;\n      }\n    }\n\n    // The checkChallenge method checks whether the challenge sent by the HttpWebRequest \n    // contains the correct type (Basic) and the correct domain name. \n    // Note: The challenge is in the form BASIC REALM=&quot;DOMAINNAME&quot;; \n    // the Internet Web site must reside on a server whose\n    // domain name is equal to DOMAINNAME.\n    public bool checkChallenge(string Challenge, string domain) \n    {\n      bool challengePasses = false;\n\n      String tempChallenge = Challenge.ToUpper();\n\n      // Verify that this is a Basic authorization request and that the requested domain\n      // is correct.\n      // Note: When the domain is an empty string, the following code only checks \n      // whether the authorization type is Basic.\n\n      if (tempChallenge.IndexOf(&quot;BASIC&quot;) != -1)\n        if (domain != String.Empty)\n          if (tempChallenge.IndexOf(domain.ToUpper()) != -1)\n            challengePasses = true;\n          else\n            // The domain is not allowed and the authorization type is Basic.\n            challengePasses = false;\n        else\n          // The domain is a blank string and the authorization type is Basic.\n          challengePasses = true;\n\n      return challengePasses;\n    }\n\n    // The PreAuthenticate method specifies whether the authentication implemented \n    // by this class allows pre-authentication. \n    // Even if you do not use it, this method must be implemented to obey to the rules \n    // of interface implementation.\n    // In this case it always returns null. \n    public Authorization PreAuthenticate(WebRequest request, ICredentials credentials) \n    {                \n      return null;\n    }\n\n    // Authenticate is the core method for this custom authentication.\n    // When an Internet resource requests authentication, the WebRequest.GetResponse \n    // method calls the AuthenticationManager.Authenticate method. This method, in \n    // turn, calls the Authenticate method on each of the registered authentication\n    // modules, in the order in which they were registered. When the authentication is \n    // complete an Authorization object is returned to the WebRequest.\n    public Authorization Authenticate(String challenge, WebRequest request, ICredentials credentials) \n    {\n      Encoding ASCII = Encoding.ASCII;        \n\n      // Get the username and password from the credentials\n      NetworkCredential MyCreds = credentials.GetCredential(request.RequestUri, &quot;Basic&quot;);        \n\n      if (PreAuthenticate(request, credentials) == null)\n        Console.WriteLine(&quot;\\n Pre-authentication is not allowed.&quot;);\n      else\n        Console.WriteLine(&quot;\\n Pre-authentication is allowed.&quot;);\n\n      // Verify that the challenge satisfies the authorization requirements.\n      bool challengeOk = checkChallenge(challenge, MyCreds.Domain);\n\n      if (!challengeOk)\n        return null;\n\n      // Create the encrypted string according to the Basic authentication format as\n      // follows:\n      // a)Concatenate the username and password separated by colon;\n      // b)Apply ASCII encoding to obtain a stream of bytes;\n      // c)Apply Base64 encoding to this array of bytes to obtain the encoded \n      // authorization.\n      string BasicEncrypt = MyCreds.UserName + &quot;:&quot; + MyCreds.Password;\n\n      string BasicToken = &quot;Basic &quot; + Convert.ToBase64String(ASCII.GetBytes(BasicEncrypt));\n\n      // Create an Authorization object using the encoded authorization above.\n      Authorization resourceAuthorization = new Authorization(BasicToken);\n\n      // Get the Message property, which contains the authorization string that the \n      // client returns to the server when accessing protected resources.\n      Console.WriteLine(&quot;\\n Authorization Message:{0}&quot;,resourceAuthorization.Message);\n\n      // Get the Complete property, which is set to true when the authentication process \n      // between the client and the server is finished.\n      Console.WriteLine(&quot;\\n Authorization Complete:{0}&quot;,resourceAuthorization.Complete);\n\n      Console.WriteLine(&quot;\\n Authorization ConnectionGroupId:{0}&quot;,resourceAuthorization.ConnectionGroupId);\n\n\n      return resourceAuthorization;\n    }\n  }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Net.Authentication#1\">// This program shows how to create a custom Basic authentication module,\n// how to register it via the AuthenticationManager class and how to authorize\n// users to access a Web site.\n// Note: In order to run this program you must create a test Web site that performs\n// Basic authentication. Also you must add to your server machine a user whose\n// credentials are the same you use in this program.\n// Attention: Basic authenticastion sends the user&#39;s credentials over HTTP.\n// Passwords and user names are encoded using Base64 encoding. Although the\n// user information is encoded, it is considered insecure due to the fact that it\n// could be deciphered relatively easily.\n// If you must use basic authentication you are strongly adviced to use strong\n// security mechanisms, such as SSL, when transfering sensitive information on\n// the wire.\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Net;\nusing namespace System::IO;\nusing namespace System::Text;\nusing namespace System::Collections;\n\n// The ClientAuthentication class performs the following main tasks:\n// 1) It obtains the user&#39;s credentials.\n// 2) Unregisters the standard Basic authentication.\n// 3) Registers the customized Basic authentication.\n// 4) Reads the selected page and displays it on the console.\nref class TestAuthentication\n{\npublic:\n   static String^ username;\n   static String^ password;\n   static String^ domain;\n   static String^ uri;\n\n   // Show how to use this program.\n   static void showusage()\n   {\n      Console::WriteLine( &quot;Attempts to authenticate to a URL&quot; );\n      Console::WriteLine( &quot;\\r\\nUse one of the following:&quot; );\n      Console::WriteLine( &quot;\\tcustomBasicAuthentication URL username password domain&quot; );\n      Console::WriteLine( &quot;\\tcustomBasicAuthentication URL username password&quot; );\n      Console::WriteLine( &quot;\\r\\nExample:&quot; );\n      Console::WriteLine( &quot;\\tcustomBasicAuthentication http://ndpue/ncl/ basicuser basic.101 ndpue&quot; );\n   }\n\n\n   // Display registered authentication modules.\n   static void displayRegisteredModules()\n   {\n      \n      // The AuthenticationManager calls all authentication modules sequentially\n      // until one of them responds with an authorization instance.  Show\n      // the current registered modules, for testing purposes.\n      IEnumerator^ registeredModules = AuthenticationManager::RegisteredModules;\n      Console::WriteLine( &quot;\\r\\nThe following authentication modules are now registered with the system&quot; );\n      while ( registeredModules-&gt;MoveNext() )\n      {\n         Console::WriteLine( &quot;\\r \\n Module : {0}&quot;, registeredModules-&gt;Current );\n         IAuthenticationModule^ currentAuthenticationModule = dynamic_cast&lt;IAuthenticationModule^&gt;(registeredModules-&gt;Current);\n         Console::WriteLine( &quot;\\t  CanPreAuthenticate : {0}&quot;, currentAuthenticationModule-&gt;CanPreAuthenticate );\n      }\n   }\n\n\n   // The getPage method accesses the selected page an displays its content\n   // on the console.\n   static void getPage( String^ url )\n   {\n      try\n      {\n         \n         // Create the Web request object.\n         HttpWebRequest^ req = dynamic_cast&lt;HttpWebRequest^&gt;(WebRequest::Create( url ));\n         \n         // Define the request access method.\n         req-&gt;Method = &quot;GET&quot;;\n         \n         // Define the request credentials according to the user&#39;s input.\n         if ( String::Compare( domain, String::Empty ) == 0 )\n                  req-&gt;Credentials = gcnew NetworkCredential( username,password ); // If the user&#39;s specifies the Internet resource domain, this usually\n         else\n                  req-&gt;Credentials = gcnew NetworkCredential( username,password,domain );\n         \n         // is by default the name of the sever hosting the resource.\n         // Issue the request.\n         // req-&gt;GetResponse();\n         HttpWebResponse^ result = dynamic_cast&lt;HttpWebResponse^&gt;(req-&gt;GetResponse());\n         Console::WriteLine( &quot;\\nAuthentication Succeeded:&quot; );\n         \n         // Store the response.\n         Stream^ sData = result-&gt;GetResponseStream();\n         \n         // Display the response.\n         displayPageContent( sData );\n      }\n      catch ( WebException^ e ) \n      {\n         \n         // Display the error, if any. In particular display protocol\n         // related error.\n         if ( e-&gt;Status == WebExceptionStatus::ProtocolError )\n         {\n            HttpWebResponse^ hresp = dynamic_cast&lt;HttpWebResponse^&gt;(e-&gt;Response);\n            Console::WriteLine( &quot;\\nAuthentication Failed, {0}&quot;, hresp-&gt;StatusCode );\n            Console::WriteLine( &quot;Status Code: {0}&quot;, (int)hresp-&gt;StatusCode );\n            Console::WriteLine( &quot;Status Description: {0}&quot;, hresp-&gt;StatusDescription );\n            return;\n         }\n         Console::WriteLine( &quot;Caught Exception: {0}&quot;, e-&gt;Message );\n         Console::WriteLine( &quot;Stack: {0}&quot;, e-&gt;StackTrace );\n      }\n\n   }\n\n\n   // The displayPageContent method display the content of the\n   // selected page.\n   static void displayPageContent( Stream^ ReceiveStream )\n   {\n      \n      // Create an ASCII encoding object.\n      Encoding^ ASCII = Encoding::ASCII;\n      \n      // Define the Byte array to temporary hold the current read bytes.\n      array&lt;Byte&gt;^read = gcnew array&lt;Byte&gt;(512);\n      Console::WriteLine( &quot;\\r\\nPage Content...\\r\\n&quot; );\n      \n      // Read the page content and display it on the console.\n      // Read the first 512 bytes.\n      int bytes = ReceiveStream-&gt;Read( read, 0, 512 );\n      while ( bytes &gt; 0 )\n      {\n         Console::Write( ASCII-&gt;GetString( read, 0, bytes ) );\n         bytes = ReceiveStream-&gt;Read( read, 0, 512 );\n      }\n\n      Console::WriteLine( &quot;&quot; );\n   }\n\n};\n\n\n// The CustomBasic class creates a custom Basic authentication by implementing the\n// IAuthenticationModule interface. In particular it performs the following\n// tasks:\n// 1) Defines and initializes the required properties.\n// 2) Impements the Authenticate method.\npublic ref class CustomBasic: public IAuthenticationModule\n{\nprivate:\n\n   String^ m_authenticationType;\n   bool m_canPreAuthenticate;\n\npublic:\n\n   // The CustomBasic constructor initializes the properties of the customized\n   // authentication.\n   CustomBasic()\n   {\n      m_authenticationType = &quot;Basic&quot;;\n      m_canPreAuthenticate = false;\n   }\n\n\n   property String^ AuthenticationType \n   {\n\n      // Define the authentication type. This type is then used to identify this\n      // custom authentication module. The default is set to Basic.\n      virtual String^ get()\n      {\n         return m_authenticationType;\n      }\n\n   }\n\n   property bool CanPreAuthenticate \n   {\n\n      // Define the pre-authentication capabilities for the module. The default is set\n      // to false.\n      virtual bool get()\n      {\n         return m_canPreAuthenticate;\n      }\n\n   }\n\n   // The checkChallenge method checks if the challenge sent by the HttpWebRequest\n   // contains the correct type (Basic) and the correct domain name.\n   // Note: the challenge is in the form BASIC REALM=S&quot;DOMAINNAME&quot;\n   // and you must assure that the Internet Web site resides on a server whose\n   // domain name is equal to DOMAINAME.\n   bool checkChallenge( String^ Challenge, String^ domain )\n   {\n      bool challengePasses = false;\n      String^ tempChallenge = Challenge-&gt;ToUpper();\n      \n      // Verify that this is a Basic authorization request and the requested domain\n      // is correct.\n      // Note: When the domain is an empty string the following code only checks\n      // whether the authorization type is Basic.\n      if ( tempChallenge-&gt;IndexOf( &quot;BASIC&quot; ) != -1 )\n            if ( String::Compare( domain, String::Empty ) != 0 )\n            if ( tempChallenge-&gt;IndexOf( domain-&gt;ToUpper() ) != -1 )\n            challengePasses = true; // The domain is not allowed and the authorization type is Basic.\n      else\n            challengePasses = false;\n\n      else\n            challengePasses = true;\n\n\n      return challengePasses;\n   }\n\n\n   // The PreAuthenticate method specifies if the authentication implemented\n   // by this class allows pre-authentication.\n   // Even if you do not use it, this method must be implemented to obey to the rules\n   // of interface implemebtation.\n   // In this case it always returns null.\n   virtual Authorization^ PreAuthenticate( WebRequest^ request, ICredentials^ credentials )\n   {\n      return nullptr;\n   }\n\n\n   // Authenticate is the core method for this custom authentication.\n   // When an internet resource requests authentication, the WebRequest::GetResponse\n   // method calls the AuthenticationManager::Authenticate method. This method, in\n   // turn, calls the Authenticate method on each of the registered authentication\n   // modules, in the order they were registered. When the authentication is\n   // complete an Authorization object is returned to the WebRequest, as\n   // shown by this routine&#39;s retun type.\n   virtual Authorization^ Authenticate( String^ challenge, WebRequest^ request, ICredentials^ credentials )\n   {\n      Encoding^ ASCII = Encoding::ASCII;\n      \n      // Get the username and password from the credentials\n      NetworkCredential^ MyCreds = credentials-&gt;GetCredential( request-&gt;RequestUri, &quot;Basic&quot; );\n      if ( PreAuthenticate( request, credentials ) == nullptr )\n            Console::WriteLine( &quot;\\n Pre-authentication is not allowed.&quot; );\n      else\n            Console::WriteLine( &quot;\\n Pre-authentication is allowed.&quot; );\n\n      \n      // Verify that the challenge satisfies the authorization requirements.\n      bool challengeOk = checkChallenge( challenge, MyCreds-&gt;Domain );\n      if (  !challengeOk )\n            return nullptr;\n\n      \n      // Create the encrypted string according to the Basic authentication format as\n      // follows:\n      // a)Concatenate username and password separated by colon;\n      // b)Apply ASCII encoding to obtain a stream of bytes;\n      // c)Apply Base64 Encoding to this array of bytes to obtain the encoded\n      // authorization.\n      String^ BasicEncrypt = String::Concat( MyCreds-&gt;UserName, &quot;:&quot;, MyCreds-&gt;Password );\n      String^ BasicToken = String::Concat( &quot;Basic &quot;, Convert::ToBase64String( ASCII-&gt;GetBytes( BasicEncrypt ) ) );\n      \n      // Create an Authorization object using the above encoded authorization.\n      Authorization^ resourceAuthorization = gcnew Authorization( BasicToken );\n      \n      // Get the Message property which contains the authorization string that the\n      // client returns to the server when accessing protected resources\n      Console::WriteLine( &quot;\\n Authorization Message: {0}&quot;, resourceAuthorization-&gt;Message );\n      \n      // Get the Complete property which is set to true when the authentication process\n      // between the client and the server is finished.\n      Console::WriteLine( &quot;\\n Authorization Complete: {0}&quot;, resourceAuthorization-&gt;Complete );\n      \n      Console::WriteLine( &quot;\\n Authorization ConnectionGroupId: {0}&quot;, resourceAuthorization-&gt;ConnectionGroupId );\n      return resourceAuthorization;\n   }\n\n};\n\n\n// This is the program entry point. It allows the user to enter\n// her credentials and the Internet resource (Web page) to access.\n// It also unregisters the standard and registers the customized basic\n// authentication.\nint main()\n{\n   array&lt;String^&gt;^args = Environment::GetCommandLineArgs();\n   if ( args-&gt;Length &lt; 4 )\n      TestAuthentication::showusage();\n   else\n   {\n      \n      // Read the user&#39;s credentials.\n      TestAuthentication::uri = args[ 1 ];\n      TestAuthentication::username = args[ 2 ];\n      TestAuthentication::password = args[ 3 ];\n      if ( args-&gt;Length == 4 )\n            TestAuthentication::domain = String::Empty; // If the domain exists, store it. Usually the domain name\n      else\n            TestAuthentication::domain = args[ 4 ];\n      \n      // is by default the name of the server hosting the Internet\n      // resource.\n      // Instantiate the custom Basic authentication module.\n      CustomBasic^ customBasicModule = gcnew CustomBasic;\n      \n      // Unregister the standard Basic authentication module.\n      AuthenticationManager::Unregister( &quot;Basic&quot; );\n      \n      // Register the custom Basic authentication module.\n      AuthenticationManager::Register( customBasicModule );\n      \n      // Display registered Authorization modules.\n      TestAuthentication::displayRegisteredModules();\n      \n      // Read the specified page and display it on the console.\n      TestAuthentication::getPage( TestAuthentication::uri );\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Net.Authentication#1\">&#39; The following example shows how to create a custom Basic authentication module,\n&#39; how to register it using the AuthenticationManager class and how to authorize  \n&#39; users to access a Web site.\n&#39; Note: To run this program you must create a test Web site that performs\n&#39; Basic authentication. Also you must add to your server machine a user whose\n&#39; credentials are the same as the ones you use in this program.\n&#39; Attention: Basic authentication sends the user&#39;s credentials over HTTP. \n&#39; Passwords and user names are encoded using Base64 encoding. Although the \n&#39; user information is encoded, it is considered insecure becasue it could be deciphered \n&#39; relatively easily. \n&#39; If you must use Basic authentication you are strongly advised to use strong \n&#39; security mechanisms, such as SSL, when transferring sensitive information.\n\n\nImports System\nImports System.Net\nImports System.IO\nImports System.Text\nImports System.Collections\nImports Microsoft.VisualBasic\n\nNamespace Mssc.Services.Authentication\n\n  Module TestingAuthentication\n\n    &#39; The ClientAuthentication class performs the following main tasks:\n    &#39; 1) Obtains the user&#39;s credentials.\n    &#39; 2) Unregisters the standard Basic authentication.\n    &#39; 3) Registers the custom Basic authentication.\n    &#39; 4) Reads the selected page and displays it on the console.\n\n    Class TestAuthentication\n\n      Private Shared username, password, domain, uri As String\n\n\n      &#39;This method invoked when the user does not enter the required input parameters.\n      Private Shared Sub showusage()\n        Console.WriteLine(&quot;Attempts to authenticate to a URL&quot;)\n        Console.WriteLine(ControlChars.Cr + ControlChars.Lf + &quot;Use one of the following:&quot;)\n        Console.WriteLine(ControlChars.Tab + &quot;customBasicAuthentication URL username password domain&quot;)\n        Console.WriteLine(ControlChars.Tab + &quot;customBasicAuthentication URL username password&quot;)\n      End Sub &#39;showusage\n\n\n      &#39; Display registered authentication modules.\n      Private Shared Sub displayRegisteredModules()\n        &#39; The AuthenticationManager calls all authentication modules sequentially \n        &#39; until one of them responds with an authorization instance.  Show\n        &#39; the current registered modules.\n        Dim registeredModules As IEnumerator = AuthenticationManager.RegisteredModules\n        Console.WriteLine(ControlChars.Cr + ControlChars.Lf + &quot;The following authentication modules are now registered with the system:&quot;)\n        While registeredModules.MoveNext()\n          Console.WriteLine(ControlChars.Cr + &quot; &quot; + ControlChars.Lf + &quot; Module : {0}&quot;, registeredModules.Current)\n          Dim currentAuthenticationModule As IAuthenticationModule = CType(registeredModules.Current, IAuthenticationModule)\n          Console.WriteLine(ControlChars.Tab + &quot;  CanPreAuthenticate : {0}&quot;, currentAuthenticationModule.CanPreAuthenticate)\n        End While\n      End Sub &#39;displayRegisteredModules \n\n      &#39; The getPage method accesses the selected page and displays its content \n      &#39; on the console.\n      Private Shared Sub getPage(ByVal url As [String])\n        Try\n          &#39; Create the Web request object.\n          Dim req As HttpWebRequest = CType(WebRequest.Create(url), HttpWebRequest)\n\n          &#39; Define the request access method.\n          req.Method = &quot;GET&quot;\n\n          &#39; Define the request credentials according to the user&#39;s input.\n          If domain = [String].Empty Then\n            req.Credentials = New NetworkCredential(username, password)\n            &#39; If the user does not specify the Internet resource domain, this usually\n            &#39; is by default the name of the sever hosting the resource.\n          Else\n            req.Credentials = New NetworkCredential(username, password, domain)\n          End If\n          &#39; Issue the request.\n          Dim result As HttpWebResponse = CType(req.GetResponse(), HttpWebResponse)\n\n          Console.WriteLine(ControlChars.Lf + &quot;Authentication Succeeded:&quot;)\n\n          &#39; Store the response.\n          Dim sData As Stream = result.GetResponseStream()\n\n          &#39; Display the response.\n          displayPageContent(sData)\n        Catch e As WebException\n          &#39; Display any errors. In particular, display any protocol-related error. \n          If e.Status = WebExceptionStatus.ProtocolError Then\n            Dim hresp As HttpWebResponse = CType(e.Response, HttpWebResponse)\n            Console.WriteLine((ControlChars.Lf + &quot;Authentication Failed, &quot; + hresp.StatusCode))\n            Console.WriteLine((&quot;Status Code: &quot; + Fix(hresp.StatusCode)))\n            Console.WriteLine((&quot;Status Description: &quot; + hresp.StatusDescription))\n            Return\n          End If\n          Console.WriteLine((&quot;Caught Exception: &quot; + e.Message))\n          Console.WriteLine((&quot;Stack: &quot; + e.StackTrace))\n        End Try\n      End Sub &#39;getPage\n\n\n      &#39; The displayPageContent method display the content of the\n      &#39; selected page.\n      Private Shared Sub displayPageContent(ByVal ReceiveStream As Stream)\n        &#39; Create an ASCII encoding object.\n        Dim ASCII As Encoding = Encoding.ASCII\n\n        &#39; Define the byte array to temporarily hold the current read bytes. \n        Dim read(511) As [Byte]\n\n        Console.WriteLine(ControlChars.Cr + ControlChars.Lf + &quot;Page Content...&quot; + ControlChars.Cr + ControlChars.Lf)\n\n        &#39; Read the page content and display it on the console.\n        &#39; Read the first 512 bytes.\n        Dim bytes As Integer = ReceiveStream.Read(read, 0, 512)\n        While bytes &gt; 0\n          Console.Write(ASCII.GetString(read, 0, bytes))\n          bytes = ReceiveStream.Read(read, 0, 512)\n        End While\n        Console.WriteLine(&quot;&quot;)\n      End Sub &#39;displayPageContent\n\n      &#39;Entry point which delegates to C-style main Private Function\n      &#39;Public Overloads Sub Main(ByVal args() As String)\n      &#39; Main(System.Environment.GetCommandLineArgs())\n      &#39;End Sub\n\n\n      &#39; This is the program entry point. It allows the user to enter \n      &#39; her credentials and the Internet resource (Web page) to access.\n      &#39; It also unregisters the standard and registers the customized Basic \n      &#39; authentication.\n      Public Shared Sub Main(ByVal args() As String)\n\n        If args.Length &lt; 3 Then\n          showusage()\n        Else\n\n          &#39; Read the user&#39;s credentials.\n          uri = args(0)\n          username = args(1)\n          password = args(2)\n\n          If args.Length = 3 Then\n            domain = String.Empty\n            &#39; If the domain exists, store it. Usually the domain name\n            &#39; is by default the name of the server hosting the Internet\n            &#39; resource.\n          Else\n            domain = args(3)\n          End If\n\n          &#39; Instantiate the custom Basic authentication module.\n          Dim customBasicModule As New CustomBasic()\n\n          &#39; Unregister the standard Basic authentication module.\n          AuthenticationManager.Unregister(&quot;Basic&quot;)\n\n          &#39; Register the custom Basic authentication module.\n          AuthenticationManager.Register(customBasicModule)\n\n          &#39; Display registered authorization modules.\n          displayRegisteredModules()\n\n          &#39; Read the specified page and display it on the console.\n          getPage(uri)\n        End If\n        Return\n      End Sub &#39;Main\n\n    End Class &#39;ClientAuthentication \n\n    &#39; The CustomBasic class creates a custom Basic authentication by implementing the\n    &#39; IAuthenticationModule interface. It performs the following\n    &#39; tasks:\n    &#39; 1) Defines and initializes the required properties.\n    &#39; 2) Implements the Authenticate and PreAuthenticate methods.\n\n    Public Class CustomBasic\n      Implements IAuthenticationModule\n\n      Private m_authenticationType As String\n      Private m_canPreAuthenticate As Boolean\n\n\n      &#39; The CustomBasic constructor initializes the properties of the customized \n      &#39; authentication.\n      Public Sub New()\n        m_authenticationType = &quot;Basic&quot;\n        m_canPreAuthenticate = False\n      End Sub &#39;New\n\n      &#39; Define the authentication type. This type is then used to identify this\n      &#39; custom authentication module. The default is set to Basic.\n\n      Public ReadOnly Property AuthenticationType() As String _\n       Implements IAuthenticationModule.AuthenticationType\n\n        Get\n          Return m_authenticationType\n        End Get\n      End Property\n\n      &#39; Define the pre-authentication capabilities for the module. The default is set\n      &#39; to false.\n\n      Public ReadOnly Property CanPreAuthenticate() As Boolean _\n       Implements IAuthenticationModule.CanPreAuthenticate\n\n\n        Get\n          Return m_canPreAuthenticate\n        End Get\n      End Property\n\n    &#39; The checkChallenge method checks whether the challenge sent by the HttpWebRequest \n    &#39; contains the correct type (Basic) and the correct domain name. \n    &#39; Note: The challenge is in the form BASIC REALM=&quot;DOMAINNAME&quot;; \n    &#39; the Internet Web site must reside on a server whose\n    &#39; domain name is equal to DOMAINNAME.\n      Public Function checkChallenge(ByVal Challenge As String, ByVal domain As String) As Boolean\n        Dim challengePasses As Boolean = False\n\n        Dim tempChallenge As [String] = Challenge.ToUpper()\n\n        &#39; Verify that this is a Basic authorization request and that the requested domain\n        &#39; is correct.\n        &#39; Note: When the domain is an empty string, the following code only checks \n        &#39; whether the authorization type is Basic.\n        If tempChallenge.IndexOf(&quot;BASIC&quot;) &lt;&gt; -1 Then\n          If domain &lt;&gt; [String].Empty Then\n            If tempChallenge.IndexOf(domain.ToUpper()) &lt;&gt; -1 Then\n              challengePasses = True\n              &#39; The domain is not allowed and the authorization type is Basic.\n            Else\n              challengePasses = False\n            End If\n            &#39; The domain is a blank string and the authorization type is Basic.\n          Else\n            challengePasses = True\n          End If\n        End If\n        Return challengePasses\n      End Function &#39;checkChallenge\n\n\n      &#39; The PreAuthenticate method specifies whether the authentication implemented \n      &#39; by this class allows pre-authentication. \n      &#39; Even if you do not use it, this method must be implemented to obey to the rules \n      &#39; of interface implementation.\n      &#39; In this case it always returns null. \n      Public Function PreAuthenticate(ByVal request As WebRequest, ByVal credentials As ICredentials) As Authorization _\n          Implements IAuthenticationModule.PreAuthenticate\n\n        Return Nothing\n      End Function &#39;PreAuthenticate\n\n      \n      &#39; Authenticate is the core method for this custom authentication.\n      &#39; When an Internet resource requests authentication, the WebRequest.GetResponse \n      &#39; method calls the AuthenticationManager.Authenticate method. This method, in \n      &#39; turn, calls the Authenticate method on each of the registered authentication\n      &#39; modules, in the order in which they were registered. When the authentication is \n      &#39; complete an Authorization object is returned to the WebRequest.\n      Public Function Authenticate(ByVal challenge As String, ByVal request As WebRequest, ByVal credentials As ICredentials) As Authorization _\n          Implements IAuthenticationModule.Authenticate\n\n\n        Dim ASCII As Encoding = Encoding.ASCII\n\n        &#39; Get the username and password from the credentials\n        Dim MyCreds As NetworkCredential = credentials.GetCredential(request.RequestUri, &quot;Basic&quot;)\n\n        If PreAuthenticate(request, credentials) Is Nothing Then\n          Console.WriteLine(ControlChars.Lf + &quot; Pre-authentication is not allowed.&quot;)\n        Else\n          Console.WriteLine(ControlChars.Lf + &quot; Pre-authentication is allowed.&quot;)\n        End If\n        &#39; Verify that the challenge satisfies the authorization requirements.\n        Dim challengeOk As Boolean = checkChallenge(challenge, MyCreds.Domain)\n\n        If Not challengeOk Then\n          Return Nothing\n        End If\n\n        &#39; Create the encrypted string according to the Basic authentication format as\n        &#39; follows:\n        &#39; a)Concatenate the username and password separated by colon;\n        &#39; b)Apply ASCII encoding to obtain a stream of bytes;\n        &#39; c)Apply Base64 encoding to this array of bytes to obtain the encoded \n        &#39; authorization.\n        Dim BasicEncrypt As String = MyCreds.UserName + &quot;:&quot; + MyCreds.Password\n\n        Dim BasicToken As String = &quot;Basic &quot; + Convert.ToBase64String(ASCII.GetBytes(BasicEncrypt))\n\n        &#39; Create an Authorization object using the encoded authorization above.\n        Dim resourceAuthorization As New Authorization(BasicToken)\n\n        &#39; Get the Message property, which contains the authorization string that the \n        &#39; client returns to the server when accessing protected resources.\n        Console.WriteLine(ControlChars.Lf + &quot; Authorization Message:{0}&quot;, resourceAuthorization.Message)\n\n        &#39; Get the Complete property, which is set to true when the authentication process \n        &#39; between the client and the server is finished.\n        Console.WriteLine(ControlChars.Lf + &quot; Authorization Complete:{0}&quot;, resourceAuthorization.Complete)\n\n        Console.WriteLine(ControlChars.Lf + &quot; Authorization ConnectionGroupId:{0}&quot;, resourceAuthorization.ConnectionGroupId)\n\n\n        Return resourceAuthorization\n      End Function &#39;Authenticate\n    End Class &#39;CustomBasic \n  End Module\nEnd Namespace\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>AuthenticationManager is a static class that manages the authentication modules that an application uses. When a request is made to protected resources, the AuthenticationManager calls the <a class=\"xref\" href=\"system.net.authenticationmanager#System_Net_AuthenticationManager_Authenticate_\" data-linktype=\"relative-path\">Authenticate</a> method to get an <a class=\"xref\" href=\"system.net.authorization\" data-linktype=\"relative-path\">Authorization</a> instance to use in subsequent requests.  </p>\n<p> The AuthenticationManager queries each registered authentication module by calling the <a class=\"xref\" href=\"system.net.iauthenticationmodule#System_Net_IAuthenticationModule_Authenticate_\" data-linktype=\"relative-path\">Authenticate</a> method for each module. The first authentication module to return an <a class=\"xref\" href=\"system.net.authorization\" data-linktype=\"relative-path\">Authorization</a> instance is used to authenticate the request.  </p>\n<p> Modules that provide the basic, digest, negotiate, NTLM, and Kerberos authentication types are registered with the AuthenticationManager by default. Additional authentication modules that implement the <a class=\"xref\" href=\"system.net.iauthenticationmodule\" data-linktype=\"relative-path\">IAuthenticationModule</a> interface can be added using the <a class=\"xref\" href=\"system.net.authenticationmanager#System_Net_AuthenticationManager_Register_\" data-linktype=\"relative-path\">Register</a> method. Authentication modules are called in the order in which they were added to the list.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The Kerberos and negotiate authentication type is not supported on Windows 95/98 or Windows NT 4.0.</p>\n</div>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Net_AuthenticationManager_CredentialPolicy\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CredentialPolicy</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets the credential policy to be used for resource requests made using the <a class=\"xref\" href=\"system.net.httpwebrequest\" data-linktype=\"relative-path\">HttpWebRequest</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Net.ICredentialPolicy CredentialPolicy { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.icredentialpolicy\" data-linktype=\"relative-path\">ICredentialPolicy</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object that implements the <a class=\"xref\" href=\"system.net.icredentialpolicy\" data-linktype=\"relative-path\">ICredentialPolicy</a> interface that determines whether credentials are sent with requests. The default value is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The credential policy determines whether to send credentials when sending a request for a network resource, such as the content of a Web page. If credentials are sent, servers that require client authentication can attempt to authenticate the client when the request is received instead of sending a response indicating that the client&#39;s credentials are required. While this saves a round trip to the server, this must be balanced against the security risk inherent in sending credentials across the network. When the destination server does not require client authentication it is best to not send credentials.  </p>\n<p> The credential policy will be called only for requests that specify credentials or use a <a class=\"xref\" href=\"system.net.webproxy\" data-linktype=\"relative-path\">WebProxy</a> object that specifies credentials.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Net_AuthenticationManager_CustomTargetNameDictionary\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CustomTargetNameDictionary</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the dictionary that contains Service Principal Names (SPNs) that are used to identify hosts during Kerberos authentication for requests made using <a class=\"xref\" href=\"system.net.webrequest\" data-linktype=\"relative-path\">WebRequest</a> and its derived classes.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Collections.Specialized.StringDictionary CustomTargetNameDictionary { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A writable <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a> that contains the SPN values for keys composed of host information.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>An SPN is a name by which a client uniquely identifies an instance of a service or application on a server for purposes of mutual authentication. Mutual authentication is requested by default, and you can require it by setting <a class=\"xref\" href=\"system.net.webrequest#System_Net_WebRequest_AuthenticationLevel_\" data-linktype=\"relative-path\">AuthenticationLevel</a> to <a class=\"xref\" href=\"system.net.security.authenticationlevel\" data-linktype=\"relative-path\">AuthenticationLevel</a> in your request.  </p>\n<p> When a <a class=\"xref\" href=\"system.net.webrequest\" data-linktype=\"relative-path\">WebRequest</a> requires mutual authentication, the SPN for the destination must be supplied by the client. If you know the SPN, you can add it to the CustomTargetNameDictionary before sending the request. If you have not added SPN information to this dictionary, the <a class=\"xref\" href=\"system.net.authenticationmanager\" data-linktype=\"relative-path\">AuthenticationManager</a> uses the <a class=\"xref\" href=\"system.net.webrequest#System_Net_WebRequest_RequestUri_\" data-linktype=\"relative-path\">RequestUri</a> method to compose the most likely SPN; however, this is a computed value and might be incorrect. If mutual authentication is attempted and fails, you can check the dictionary to determine the computed SPN. No SPN is entered into the dictionary if the authentication protocol does not support mutual authentication.  </p>\n<p> To add an SPN value to this dictionary, use the <a class=\"xref\" href=\"system.uri#System_Uri_AbsoluteUri_\" data-linktype=\"relative-path\">AbsoluteUri</a> of the <a class=\"xref\" href=\"system.net.webrequest#System_Net_WebRequest_RequestUri_\" data-linktype=\"relative-path\">RequestUri</a> as the key. Internally, the key is truncated to include the <a class=\"xref\" href=\"system.uri#System_Uri_Scheme_\" data-linktype=\"relative-path\">Scheme</a>, <a class=\"xref\" href=\"system.uri#System_Uri_Host_\" data-linktype=\"relative-path\">Host</a>, and the <a class=\"xref\" href=\"system.uri#System_Uri_Port_\" data-linktype=\"relative-path\">Port</a> if it is not the default port.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Accessing the methods and properties of the CustomTargetNameDictionary requires unrestricted <a class=\"xref\" href=\"system.net.webpermission\" data-linktype=\"relative-path\">WebPermission</a>.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> When Kerberos authentication is performed through a proxy, both the proxy and the ultimate host name need to be resolved to an SPN. The proxy name resolution is protected by a timeout. Resolution of the ultimate host name to a SPN requires a DNS lookup, and there is no timeout associated directly with this operation. Therefore synchronous operations may take longer to timeout. To overcome this, add the ultimate host&#39;s URI prefix to the SPN cache prior to making requests to it.  </p>\n</div>\n<p> Version 3.5 SP1 now defaults to specifying the host name used in the request URL in the SPN in the NTLM (NT LAN Manager) authentication exchange when the CustomTargetNameDictionary property is not set. The host name used in the request URL may be different from the Host header specified in the <a class=\"xref\" href=\"system.net.httprequestheader\" data-linktype=\"relative-path\">System.Net.HttpRequestHeader</a> in the client request. The host name used in the request URL may be different from the actual host name of the server, the machine name of the server, the computer&#39;s IP address, or the loopback address. In these cases, Windows will fail the authentication request. To address the issue, you may need to notify Windows that the host name used in the request URL in the client request (&quot;contoso&quot;, for example) is actually an alternate name for the local computer.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Net_AuthenticationManager_RegisteredModules\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">RegisteredModules</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a list of authentication modules that are registered with the authentication manager.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Collections.IEnumerator RegisteredModules { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a> that enables the registered authentication modules to be read.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The RegisteredModules property provides an <a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a> instance that enables the list of registered authentication modules to be read. The <a class=\"xref\" href=\"system.net.authenticationmanager#System_Net_AuthenticationManager_Register_\" data-linktype=\"relative-path\">Register</a> method adds modules to the list, and the <a class=\"xref\" href=\"system.net.authenticationmanager#System_Net_AuthenticationManager_Unregister_\" data-linktype=\"relative-path\">Unregister</a> method removes modules from it.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Net_AuthenticationManager_Authenticate_System_String_System_Net_WebRequest_System_Net_ICredentials_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Authenticate(String,WebRequest,ICredentials)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Calls each registered authentication module to find the first module that can respond to the authentication request.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Net.Authorization Authenticate (string challenge, System.Net.WebRequest request, System.Net.ICredentials credentials);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>challenge</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The challenge returned by the Internet resource.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>request</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.webrequest\" data-linktype=\"relative-path\">WebRequest</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.net.webrequest\" data-linktype=\"relative-path\">WebRequest</a> that initiated the authentication challenge.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>credentials</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.icredentials\" data-linktype=\"relative-path\">ICredentials</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.net.icredentials\" data-linktype=\"relative-path\">ICredentials</a> associated with this request.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.authorization\" data-linktype=\"relative-path\">Authorization</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An instance of the <a class=\"xref\" href=\"system.net.authorization\" data-linktype=\"relative-path\">Authorization</a> class containing the result of the authorization attempt. If there is no authentication module to respond to the challenge, this method returns <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>challenge</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>request</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>credentials</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Authenticate method calls the <a class=\"xref\" href=\"system.net.iauthenticationmodule#System_Net_IAuthenticationModule_Authenticate_\" data-linktype=\"relative-path\">Authenticate</a> method on each registered authentication module until one of the module responds with an <a class=\"xref\" href=\"system.net.authorization\" data-linktype=\"relative-path\">Authorization</a> instance.  </p>\n<p> The first <a class=\"xref\" href=\"system.net.authorization\" data-linktype=\"relative-path\">Authorization</a> instance returned is used to authenticate the request. If no authentication module can authenticate the request, the Authenticate method returns <code>null</code>.  </p>\n<p> Authentication modules are called in the order in which they are registered with the <a class=\"xref\" href=\"system.net.authenticationmanager\" data-linktype=\"relative-path\">AuthenticationManager</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Net_AuthenticationManager_PreAuthenticate_System_Net_WebRequest_System_Net_ICredentials_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreAuthenticate(WebRequest,ICredentials)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Preauthenticates a request.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Net.Authorization PreAuthenticate (System.Net.WebRequest request, System.Net.ICredentials credentials);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>request</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.webrequest\" data-linktype=\"relative-path\">WebRequest</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.net.webrequest\" data-linktype=\"relative-path\">WebRequest</a> to an Internet resource.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>credentials</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.icredentials\" data-linktype=\"relative-path\">ICredentials</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.net.icredentials\" data-linktype=\"relative-path\">ICredentials</a> associated with the request.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.authorization\" data-linktype=\"relative-path\">Authorization</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An instance of the <a class=\"xref\" href=\"system.net.authorization\" data-linktype=\"relative-path\">Authorization</a> class if the request can be preauthenticated; otherwise, <code>null</code>. If <code>credentials</code> is <code>null</code>, this method returns <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>request</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If the authentication module can preauthenticate the request, the PreAuthenticate method returns an Authentication instance and sends the authorization information to the server preemptively instead of waiting for the resource to issue a challenge. This behavior is outlined in section 3.3 of RFC 2617 (HTTP Authentication: Basic and Digest Access Authentication). Authentication modules that support preauthentication allow clients to improve server efficiency by avoiding extra round trips caused by authentication challenges.  </p>\n<p> Authorization modules that can preauthenticate requests set the <a class=\"xref\" href=\"system.net.iauthenticationmodule#System_Net_IAuthenticationModule_CanPreAuthenticate_\" data-linktype=\"relative-path\">CanPreAuthenticate</a> property to <code>true</code>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Net_AuthenticationManager_Register_System_Net_IAuthenticationModule_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Register(IAuthenticationModule)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Registers an authentication module with the authentication manager.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void Register (System.Net.IAuthenticationModule authenticationModule);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>authenticationModule</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.iauthenticationmodule\" data-linktype=\"relative-path\">IAuthenticationModule</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.net.iauthenticationmodule\" data-linktype=\"relative-path\">IAuthenticationModule</a> to register with the authentication manager.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>authenticationModule</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Register method adds authentication modules to the end of the list of modules called by the <a class=\"xref\" href=\"system.net.authenticationmanager#System_Net_AuthenticationManager_Authenticate_\" data-linktype=\"relative-path\">Authenticate</a> method. Authentication modules are called in the order in which they were added to the list. If a module with the same <a class=\"xref\" href=\"system.net.iauthenticationmodule#System_Net_IAuthenticationModule_AuthenticationType_\" data-linktype=\"relative-path\">AuthenticationType</a> is already registered, this method removes the registered module and adds <code>authenticationModule</code> to the end of the list.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Net_AuthenticationManager_Unregister_System_Net_IAuthenticationModule_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Unregister(IAuthenticationModule)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Removes the specified authentication module from the list of registered modules.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void Unregister (System.Net.IAuthenticationModule authenticationModule);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>authenticationModule</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.iauthenticationmodule\" data-linktype=\"relative-path\">IAuthenticationModule</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.net.iauthenticationmodule\" data-linktype=\"relative-path\">IAuthenticationModule</a> to remove from the list of registered modules.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>authenticationModule</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The specified <a class=\"xref\" href=\"system.net.iauthenticationmodule\" data-linktype=\"relative-path\">IAuthenticationModule</a> is not registered.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Unregister method removes the specified authentication module from the list of authentication modules called by the <a class=\"xref\" href=\"system.net.authenticationmanager#System_Net_AuthenticationManager_Authenticate_\" data-linktype=\"relative-path\">Authenticate</a> method. The module must have been added to the list using the <a class=\"xref\" href=\"system.net.authenticationmanager#System_Net_AuthenticationManager_Register_\" data-linktype=\"relative-path\">Register</a> method before it can be removed from the list.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Net_AuthenticationManager_Unregister_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Unregister(String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Removes authentication modules with the specified authentication scheme from the list of registered modules.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void Unregister (string authenticationScheme);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>authenticationScheme</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The authentication scheme of the module to remove.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>authenticationScheme</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A module for this authentication scheme is not registered.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.net.authenticationmanager#System_Net_AuthenticationManager_Unregister_\" data-linktype=\"relative-path\">Unregister</a> method removes the authentication module with the specified authentication scheme from the list of authentication modules called by the <a class=\"xref\" href=\"system.net.authenticationmanager#System_Net_AuthenticationManager_Authenticate_\" data-linktype=\"relative-path\">Authenticate</a> method. The module must have been added to the list using the <a class=\"xref\" href=\"system.net.authenticationmanager#System_Net_AuthenticationManager_Register_\" data-linktype=\"relative-path\">Register</a> method before it can be removed from the list.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t  \r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Net.AuthenticationManager.yml\">\r\n<meta name=\"APIName\" content=\"System.Net.AuthenticationManager\">\r\n<meta name=\"APIName\" content=\"System.Net.AuthenticationManager.Authenticate\">\r\n<meta name=\"APIName\" content=\"System.Net.AuthenticationManager.CredentialPolicy\">\r\n<meta name=\"APIName\" content=\"System.Net.AuthenticationManager.CustomTargetNameDictionary\">\r\n<meta name=\"APIName\" content=\"System.Net.AuthenticationManager.PreAuthenticate\">\r\n<meta name=\"APIName\" content=\"System.Net.AuthenticationManager.Register\">\r\n<meta name=\"APIName\" content=\"System.Net.AuthenticationManager.RegisteredModules\">\r\n<meta name=\"APIName\" content=\"System.Net.AuthenticationManager.Unregister\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-24 01:41 AM\">\r\n<meta name=\"document_id\" content=\"68548a4c-d543-e146-08a9-c1835e4b5316\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Manages the authentication modules called during the client authentication process.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.net/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Net.AuthenticationManager\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Net.AuthenticationManager.yml","open_to_public_contributors":false,"api_name":["System.Net.AuthenticationManager","System.Net.AuthenticationManager.Authenticate","System.Net.AuthenticationManager.CredentialPolicy","System.Net.AuthenticationManager.CustomTargetNameDictionary","System.Net.AuthenticationManager.PreAuthenticate","System.Net.AuthenticationManager.Register","System.Net.AuthenticationManager.RegisteredModules","System.Net.AuthenticationManager.Unregister"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Net.AuthenticationManager","System::Net::AuthenticationManager","System.Net.AuthenticationManager.Authenticate","System::Net::AuthenticationManager::Authenticate","System.Net.AuthenticationManager.CredentialPolicy","System::Net::AuthenticationManager::CredentialPolicy","System.Net.AuthenticationManager.CustomTargetNameDictionary","System::Net::AuthenticationManager::CustomTargetNameDictionary","System.Net.AuthenticationManager.PreAuthenticate","System::Net::AuthenticationManager::PreAuthenticate","System.Net.AuthenticationManager.Register","System::Net::AuthenticationManager::Register","System.Net.AuthenticationManager.RegisteredModules","System::Net::AuthenticationManager::RegisteredModules","System.Net.AuthenticationManager.Unregister","System::Net::AuthenticationManager::Unregister"],"dev_langs":["csharp"],"updated_at":"2017-03-24 01:41 AM","document_id":"68548a4c-d543-e146-08a9-c1835e4b5316","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.Net/AuthenticationManager.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"AuthenticationManager class | Microsoft Docs","_op_ogTitle":"AuthenticationManager class","description":"Manages the authentication modules called during the client authentication process.\n","toc_asset_id":"api/_splitted/System.Net/toc.json","toc_rel":"_splitted/System.Net/toc.json","source_url":"","ms.assetid":"System.Net.AuthenticationManager","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.net.authenticationmanager","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.net.authenticationmanager","fileRelativePath":"api/System.Net.AuthenticationManager.html"},"themesRelativePathToOutputRoot":"_themes/"}