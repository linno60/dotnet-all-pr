{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">SuffixOrigin</span>\r\n      Enum\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Specifies how an IP address host suffix was located.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\r\n  \t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public enum SuffixOrigin</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a></span></div><span class=\"lang-csharp\">SuffixOrigin</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example displays prefix and suffix information for unicast addresses.  </p>\n<pre><code class=\"lang-cs\" name=\"NclNetInfo2#45\">public static void DisplayUnicastAddresses()\n{\n    Console.WriteLine(&quot;Unicast Addresses&quot;);\n    NetworkInterface[] adapters  = NetworkInterface.GetAllNetworkInterfaces();\n    foreach (NetworkInterface adapter in adapters)\n    {\n        IPInterfaceProperties adapterProperties = adapter.GetIPProperties();\n        UnicastIPAddressInformationCollection uniCast = adapterProperties.UnicastAddresses;\n        if (uniCast.Count &gt;0)\n        {\n            Console.WriteLine(adapter.Description);\n            string lifeTimeFormat = &quot;dddd, MMMM dd, yyyy  hh:mm:ss tt&quot;;\n            foreach (UnicastIPAddressInformation uni in uniCast)\n            {\n                DateTime when;\n                \n                Console.WriteLine(&quot;  Unicast Address ......................... : {0}&quot;, uni.Address);\n                Console.WriteLine(&quot;     Prefix Origin ........................ : {0}&quot;, uni.PrefixOrigin);\n                Console.WriteLine(&quot;     Suffix Origin ........................ : {0}&quot;, uni.SuffixOrigin);\n                Console.WriteLine(&quot;     Duplicate Address Detection .......... : {0}&quot;, \n                    uni.DuplicateAddressDetectionState);\n                    \n                // Format the lifetimes as Sunday, February 16, 2003 11:33:44 PM\n                // if en-us is the current culture.\n                \n                // Calculate the date and time at the end of the lifetimes.    \n                when = DateTime.UtcNow + TimeSpan.FromSeconds(uni.AddressValidLifetime);\n                when = when.ToLocalTime();    \n                Console.WriteLine(&quot;     Valid Life Time ...................... : {0}&quot;, \n                    when.ToString(lifeTimeFormat,System.Globalization.CultureInfo.CurrentCulture)\n                );\n                when = DateTime.UtcNow + TimeSpan.FromSeconds(uni.AddressPreferredLifetime);   \n                when = when.ToLocalTime();\n                Console.WriteLine(&quot;     Preferred life time .................. : {0}&quot;, \n                    when.ToString(lifeTimeFormat,System.Globalization.CultureInfo.CurrentCulture)\n                ); \n                \n                when = DateTime.UtcNow + TimeSpan.FromSeconds(uni.DhcpLeaseLifetime);\n                when = when.ToLocalTime(); \n                Console.WriteLine(&quot;     DHCP Leased Life Time ................ : {0}&quot;, \n                    when.ToString(lifeTimeFormat,System.Globalization.CultureInfo.CurrentCulture)\n                );\n            }\n            Console.WriteLine();\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"NclNetInfo2#45\">Public Shared Sub DisplayUnicastAddresses() \n\n    Console.WriteLine(&quot;Unicast Addresses&quot;)\n    Dim adapters As NetworkInterface() = NetworkInterface.GetAllNetworkInterfaces()\n    Dim adapter As NetworkInterface\n    For Each adapter In  adapters\n        Dim adapterProperties As IPInterfaceProperties = adapter.GetIPProperties()\n        Dim uniCast As UnicastIPAddressInformationCollection = adapterProperties.UnicastAddresses\n        If uniCast.Count &gt; 0 Then\n            Console.WriteLine(adapter.Description)\n            Dim lifeTimeFormat As String = &quot;dddd, MMMM dd, yyyy  hh:mm:ss tt&quot;\n            Dim uni As UnicastIPAddressInformation\n            For Each uni In  uniCast\n                Dim [when] As DateTime\n                \n                Console.WriteLine(&quot;  Unicast Address ......................... : {0}&quot;, uni.Address)\n                Console.WriteLine(&quot;     Prefix Origin ........................ : {0}&quot;, uni.PrefixOrigin)\n                Console.WriteLine(&quot;     Suffix Origin ........................ : {0}&quot;, uni.SuffixOrigin)\n                Console.WriteLine(&quot;     Duplicate Address Detection .......... : {0}&quot;, uni.DuplicateAddressDetectionState)\n                \n                &#39; Format the lifetimes as Sunday, February 16, 2003 11:33:44 PM\n                &#39; if en-us is the current culture.\n                &#39; Calculate the date and time at the end of the lifetimes.    \n                [when] = DateTime.UtcNow + TimeSpan.FromSeconds(uni.AddressValidLifetime)\n                [when] = [when].ToLocalTime()\n                Console.WriteLine(&quot;     Valid Life Time ...................... : {0}&quot;, [when].ToString(lifeTimeFormat, System.Globalization.CultureInfo.CurrentCulture))\n                [when] = DateTime.UtcNow + TimeSpan.FromSeconds(uni.AddressPreferredLifetime)\n                [when] = [when].ToLocalTime()\n                Console.WriteLine(&quot;     Preferred life time .................. : {0}&quot;, [when].ToString(lifeTimeFormat, System.Globalization.CultureInfo.CurrentCulture))\n                \n                [when] = DateTime.UtcNow + TimeSpan.FromSeconds(uni.DhcpLeaseLifetime)\n                [when] = [when].ToLocalTime()\n                Console.WriteLine(&quot;     DHCP Leased Life Time ................ : {0}&quot;, [when].ToString(lifeTimeFormat, System.Globalization.CultureInfo.CurrentCulture))\n            Next uni\n            Console.WriteLine()\n        End If\n    Next adapter\n\nEnd Sub &#39;DisplayUnicastAddresses\n\n</code></pre><pre><code class=\"lang-cpp\" name=\"NclNetInfo2#45\">void DisplayUnicastAddresses()\n{\n   Console::WriteLine( &quot;Unicast Addresses&quot; );\n   array&lt;NetworkInterface^&gt;^adapters = NetworkInterface::GetAllNetworkInterfaces();\n   System::Collections::IEnumerator^ myEnum17 = adapters-&gt;GetEnumerator();\n   while ( myEnum17-&gt;MoveNext() )\n   {\n      NetworkInterface ^ adapter = safe_cast&lt;NetworkInterface ^&gt;(myEnum17-&gt;Current);\n      IPInterfaceProperties ^ adapterProperties = adapter-&gt;GetIPProperties();\n      UnicastIPAddressInformationCollection ^ uniCast = adapterProperties-&gt;UnicastAddresses;\n      if ( uniCast-&gt;Count &gt; 0 )\n      {\n         Console::WriteLine( adapter-&gt;Description );\n         String^ lifeTimeFormat = &quot;dddd, MMMM dd, yyyy  hh:mm:ss tt&quot;;\n         System::Collections::IEnumerator^ myEnum18 = uniCast-&gt;GetEnumerator();\n         while ( myEnum18-&gt;MoveNext() )\n         {\n            UnicastIPAddressInformation ^ uni = safe_cast&lt;UnicastIPAddressInformation ^&gt;(myEnum18-&gt;Current);\n            DateTime when;\n            Console::WriteLine( &quot;  Unicast Address ......................... : {0}&quot;, \n               uni-&gt;Address );\n            Console::WriteLine( &quot;     Prefix Origin ........................ : {0}&quot;, \n               uni-&gt;PrefixOrigin );\n            Console::WriteLine( &quot;     Suffix Origin ........................ : {0}&quot;, \n               uni-&gt;SuffixOrigin );\n            Console::WriteLine( &quot;     Duplicate Address Detection .......... : {0}&quot;, \n               uni-&gt;DuplicateAddressDetectionState );\n            \n            // Format the lifetimes as Sunday, February 16, 2003 11:33:44 PM\n            // if en-us is the current culture.\n            // Calculate the date and time at the end of the lifetimes.    \n            when = DateTime::UtcNow + TimeSpan::FromSeconds( (double)uni-&gt;AddressValidLifetime );\n            when = when.ToLocalTime();\n            Console::WriteLine( &quot;     Valid Life Time ...................... : {0}&quot;, \n               when.ToString( lifeTimeFormat, System::Globalization::CultureInfo::CurrentCulture ) );\n            when = DateTime::UtcNow + TimeSpan::FromSeconds( (double)uni-&gt;AddressPreferredLifetime );\n            when = when.ToLocalTime();\n            Console::WriteLine( &quot;     Preferred life time .................. : {0}&quot;, \n               when.ToString( lifeTimeFormat, System::Globalization::CultureInfo::CurrentCulture ) );\n            when = DateTime::UtcNow + TimeSpan::FromSeconds( (double)uni-&gt;DhcpLeaseLifetime );\n            when = when.ToLocalTime();\n            Console::WriteLine( &quot;     DHCP Leased Life Time ................ : {0}&quot;, \n               when.ToString( lifeTimeFormat, System::Globalization::CultureInfo::CurrentCulture ) );\n         }\n         Console::WriteLine();\n      }\n   }\n}\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>IP addresses are divided into two parts: the prefix and the suffix. The address prefix identifies the network portion of an IP address, and the address suffix identifies the host portion. Prefixes are assigned by global authorities, and suffixes are assigned by local system administrators.  </p>\n<p> This enumeration is used by the <a class=\"xref\" href=\"system.net.networkinformation.unicastipaddressinformation\" data-linktype=\"relative-path\">UnicastIPAddressInformation</a> class. Instances of this class are returned when you retrieve the unicast address information for a <a class=\"xref\" href=\"system.net.networkinformation.networkinterface\" data-linktype=\"relative-path\">NetworkInterface</a> object.</p>\n\r\n  \r\n      \t<h2 class=\"accented\">Fields\r\n      </h2>\r\n      <table class=\"nameValue\">\r\n      \t<tr><td id=\"System_Net_NetworkInformation_SuffixOrigin_LinkLayerAddress\">\r\n      \t\t\t<span class=\"lang-csharp\">LinkLayerAddress</span>\r\n      \t</td>\r\n      \t<td><p>The suffix is a link-local suffix.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Net_NetworkInformation_SuffixOrigin_Manual\">\r\n      \t\t\t<span class=\"lang-csharp\">Manual</span>\r\n      \t</td>\r\n      \t<td><p>The suffix was manually configured.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Net_NetworkInformation_SuffixOrigin_OriginDhcp\">\r\n      \t\t\t<span class=\"lang-csharp\">OriginDhcp</span>\r\n      \t</td>\r\n      \t<td><p>The suffix was supplied by a Dynamic Host Configuration Protocol (DHCP) server.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Net_NetworkInformation_SuffixOrigin_Other\">\r\n      \t\t\t<span class=\"lang-csharp\">Other</span>\r\n      \t</td>\r\n      \t<td><p>The suffix was located using an unspecified source.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Net_NetworkInformation_SuffixOrigin_Random\">\r\n      \t\t\t<span class=\"lang-csharp\">Random</span>\r\n      \t</td>\r\n      \t<td><p>The suffix was randomly assigned.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Net_NetworkInformation_SuffixOrigin_WellKnown\">\r\n      \t\t\t<span class=\"lang-csharp\">WellKnown</span>\r\n      \t</td>\r\n      \t<td><p>The suffix is a well-known suffix. Well-known suffixes are specified in standard-track Request for Comments (RFC) documents and assigned by the Internet Assigned Numbers Authority (Iana) or an address registry. Such suffixes are reserved for special purposes.</p>\n</td>\r\n      \t</tr>\r\n      </table>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Net.NetworkInformation.SuffixOrigin.yml\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.SuffixOrigin\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.SuffixOrigin.LinkLayerAddress\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.SuffixOrigin.Manual\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.SuffixOrigin.OriginDhcp\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.SuffixOrigin.Other\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.SuffixOrigin.Random\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.SuffixOrigin.WellKnown\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 02:21 PM\">\r\n<meta name=\"document_id\" content=\"37186b8c-4073-754f-8725-171e1bde0cc8\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Specifies how an IP address host suffix was located.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.net.networkinformation/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Net.NetworkInformation.SuffixOrigin\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Net.NetworkInformation.SuffixOrigin.yml","open_to_public_contributors":false,"api_name":["System.Net.NetworkInformation.SuffixOrigin","System.Net.NetworkInformation.SuffixOrigin.LinkLayerAddress","System.Net.NetworkInformation.SuffixOrigin.Manual","System.Net.NetworkInformation.SuffixOrigin.OriginDhcp","System.Net.NetworkInformation.SuffixOrigin.Other","System.Net.NetworkInformation.SuffixOrigin.Random","System.Net.NetworkInformation.SuffixOrigin.WellKnown"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Net.NetworkInformation.SuffixOrigin","System::Net::NetworkInformation::SuffixOrigin","System.Net.NetworkInformation.SuffixOrigin.LinkLayerAddress","System::Net::NetworkInformation::SuffixOrigin::LinkLayerAddress","System.Net.NetworkInformation.SuffixOrigin.Manual","System::Net::NetworkInformation::SuffixOrigin::Manual","System.Net.NetworkInformation.SuffixOrigin.OriginDhcp","System::Net::NetworkInformation::SuffixOrigin::OriginDhcp","System.Net.NetworkInformation.SuffixOrigin.Other","System::Net::NetworkInformation::SuffixOrigin::Other","System.Net.NetworkInformation.SuffixOrigin.Random","System::Net::NetworkInformation::SuffixOrigin::Random","System.Net.NetworkInformation.SuffixOrigin.WellKnown","System::Net::NetworkInformation::SuffixOrigin::WellKnown"],"dev_langs":["csharp"],"updated_at":"2017-03-31 02:21 PM","document_id":"37186b8c-4073-754f-8725-171e1bde0cc8","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Net.NetworkInformation/SuffixOrigin.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"SuffixOrigin enum | Microsoft Docs","_op_ogTitle":"SuffixOrigin enum","description":"Specifies how an IP address host suffix was located.\n","toc_asset_id":"api/_splitted/System.Net.NetworkInformation/toc.json","toc_rel":"_splitted/System.Net.NetworkInformation/toc.json","source_url":"","ms.assetid":"System.Net.NetworkInformation.SuffixOrigin","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.net.networkinformation.suffixorigin","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.net.networkinformation.suffixorigin","fileRelativePath":"api/System.Net.NetworkInformation.SuffixOrigin.html"},"themesRelativePathToOutputRoot":"_themes/"}