{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">DSAKeyValue</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the <a class=\"xref\" href=\"system.security.cryptography.dsa\" data-linktype=\"relative-path\">DSA</a> private key of the <code>&lt;KeyInfo&gt;</code> element.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public class DSAKeyValue : System.Security.Cryptography.Xml.KeyInfoClause</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.xml.keyinfoclause\" data-linktype=\"relative-path\">System.Security.Cryptography.Xml.KeyInfoClause</a></span></div><span class=\"lang-csharp\">DSAKeyValue</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example demonstrates how to use the DSAKeyValue class in XML encryption to create a detached signature.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.XML.DSAKeyValue_Detached#1\">&#39;\n&#39; This example signs a file specified by a URI \n&#39; using a detached signature. It then verifies  \n&#39; the signed XML.\n&#39;\nImports System\nImports System.Security.Cryptography\nImports System.Security.Cryptography.Xml\nImports System.Text\nImports System.Xml\n\n\nClass XMLDSIGDetached\n   \n  \n   &lt;STAThread()&gt;  _\n   Overloads Shared Sub Main(args() As String)\n      &#39; The URI to sign.\n      Dim resourceToSign As String = &quot;http://www.microsoft.com&quot;\n      \n      &#39; The name of the file to which to save the XML signature.\n      Dim XmlFileName As String = &quot;xmldsig.xml&quot;\n      \n      Try\n         \n         &#39; Generate a DSA signing key.\n         Dim DSAKey As New DSACryptoServiceProvider()\n         \n         Console.WriteLine(&quot;Signing: {0}&quot;, resourceToSign)\n         \n         &#39; Sign the detached resourceand save the signature in an XML file.\n         SignDetachedResource(resourceToSign, XmlFileName, DSAKey)\n         \n         Console.WriteLine(&quot;XML signature was succesfully computed and saved to {0}.&quot;, XmlFileName)\n         \n         &#39; Verify the signature of the signed XML.\n         Console.WriteLine(&quot;Verifying signature...&quot;)\n         \n         &#39;Verify the XML signature in the XML file.\n         Dim result As Boolean = VerifyDetachedSignature(XmlFileName)\n         \n         &#39; Display the results of the signature verification to \n         &#39; the console.\n         If result Then\n            Console.WriteLine(&quot;The XML signature is valid.&quot;)\n         Else\n            Console.WriteLine(&quot;The XML signature is not valid.&quot;)\n         End If\n      Catch e As CryptographicException\n         Console.WriteLine(e.Message)\n      End Try \n   End Sub \n   \n   \n   \n   &#39; Sign an XML file and save the signature in a new file.\n   Public Shared Sub SignDetachedResource(URIString As String, XmlSigFileName As String, DSAKey As DSA)\n      &#39; Create a SignedXml object.\n      Dim signedXml As New SignedXml()\n      \n      &#39; Assign the DSA key to the SignedXml object.\n      signedXml.SigningKey = DSAKey\n      \n      &#39; Create a reference to be signed.\n      Dim reference As New Reference()\n      \n      &#39; Add the passed URI to the reference object.\n      reference.Uri = URIString\n      \n      &#39; Add the reference to the SignedXml object.\n      signedXml.AddReference(reference)\n      \n      &#39; Add a DSAKeyValue to the KeyInfo (optional; helps recipient find key to validate).\n      Dim keyInfo As New KeyInfo()\n      keyInfo.AddClause(New DSAKeyValue(CType(DSAKey, DSA)))\n      signedXml.KeyInfo = keyInfo\n      \n      &#39; Compute the signature.\n      signedXml.ComputeSignature()\n      \n      &#39; Get the XML representation of the signature and save\n      &#39; it to an XmlElement object.\n      Dim xmlDigitalSignature As XmlElement = signedXml.GetXml()\n      \n      &#39; Save the signed XML document to a file specified\n      &#39; using the passed string.\n      Dim xmltw As New XmlTextWriter(XmlSigFileName, New UTF8Encoding(False))\n      xmlDigitalSignature.WriteTo(xmltw)\n      xmltw.Close()\n   End Sub \n   \n\n   &#39; Verify the signature of an XML file and return the result.\n   Public Shared Function VerifyDetachedSignature(XmlSigFileName As String) As [Boolean]\n      &#39; Create a new XML document.\n      Dim xmlDocument As New XmlDocument()\n      \n      &#39; Load the passed XML file into the document.\n      xmlDocument.Load(XmlSigFileName)\n      \n      &#39; Create a new SignedXMl object.\n      Dim signedXml As New SignedXml()\n      \n      &#39; Find the &quot;Signature&quot; node and create a new\n      &#39; XmlNodeList object.\n      Dim nodeList As XmlNodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;)\n      \n      &#39; Load the signature node.\n      signedXml.LoadXml(CType(nodeList(0), XmlElement))\n      \n      &#39; Check the signature and return the result.\n      Return signedXml.CheckSignature()\n   End Function \n\n\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.XML.DSAKeyValue_Detached#1\">//\n// This example signs a file specified by a URI \n// using a detached signature. It then verifies  \n// the signed XML.\n//\n\nusing System;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.Xml;\nusing System.Text;\nusing System.Xml;\n\n\n\nclass XMLDSIGDetached\n{\n\t\n    [STAThread]\n    static void Main(string[] args)\n    {\n        // The URI to sign.\n        string resourceToSign = &quot;http://www.microsoft.com&quot;;\n\t\t\n        // The name of the file to which to save the XML signature.\n        string XmlFileName = &quot;xmldsig.xml&quot;;\n\n        try\n        {\n\n            // Generate a DSA signing key.\n            DSACryptoServiceProvider DSAKey = new DSACryptoServiceProvider();\n\n            Console.WriteLine(&quot;Signing: {0}&quot;, resourceToSign);\n\n            // Sign the detached resourceand save the signature in an XML file.\n            SignDetachedResource(resourceToSign, XmlFileName, DSAKey);\n\n            Console.WriteLine(&quot;XML signature was succesfully computed and saved to {0}.&quot;, XmlFileName);\n\n            // Verify the signature of the signed XML.\n            Console.WriteLine(&quot;Verifying signature...&quot;);\n\n            //Verify the XML signature in the XML file.\n            bool result = VerifyDetachedSignature(XmlFileName);\n\n            // Display the results of the signature verification to \n            // the console.\n            if(result)\n            {\n                Console.WriteLine(&quot;The XML signature is valid.&quot;);\n            }\n            else\n            {\n                Console.WriteLine(&quot;The XML signature is not valid.&quot;);\n            }\n        }\n        catch(CryptographicException e)\n        {\n            Console.WriteLine(e.Message);\n\n        }\n\t\t\n    }\n\n    // Sign an XML file and save the signature in a new file.\n    public static void SignDetachedResource(string URIString, string XmlSigFileName, DSA DSAKey)\n    {\n        // Create a SignedXml object.\n        SignedXml signedXml = new SignedXml();\n\n        // Assign the DSA key to the SignedXml object.\n        signedXml.SigningKey = DSAKey;\n\n        // Create a reference to be signed.\n        Reference reference = new Reference();\n\n        // Add the passed URI to the reference object.\n        reference.Uri = URIString;\n\t\t\n        // Add the reference to the SignedXml object.\n        signedXml.AddReference(reference);\n\n        // Add a DSAKeyValue to the KeyInfo (optional; helps recipient find key to validate).\n        KeyInfo keyInfo = new KeyInfo();\n        keyInfo.AddClause(new DSAKeyValue((DSA)DSAKey));\t\n        signedXml.KeyInfo = keyInfo;\n\n        // Compute the signature.\n        signedXml.ComputeSignature();\n\n        // Get the XML representation of the signature and save\n        // it to an XmlElement object.\n        XmlElement xmlDigitalSignature = signedXml.GetXml();\n\n        // Save the signed XML document to a file specified\n        // using the passed string.\n        XmlTextWriter xmltw = new XmlTextWriter(XmlSigFileName, new UTF8Encoding(false));\n        xmlDigitalSignature.WriteTo(xmltw);\n        xmltw.Close();\n    }\n    // Verify the signature of an XML file and return the result.\n    public static Boolean VerifyDetachedSignature(string XmlSigFileName)\n    {\t\n        // Create a new XML document.\n        XmlDocument xmlDocument = new XmlDocument();\n\n        // Load the passed XML file into the document.\n        xmlDocument.Load(XmlSigFileName);\n\t\n        // Create a new SignedXMl object.\n        SignedXml signedXml = new SignedXml();\n\n        // Find the &quot;Signature&quot; node and create a new\n        // XmlNodeList object.\n        XmlNodeList nodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;);\n\n        // Load the signature node.\n        signedXml.LoadXml((XmlElement)nodeList[0]);\n\n        // Check the signature and return the result.\n        return signedXml.CheckSignature();\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Security.Cryptography.XML.DSAKeyValue_Detached#1\">//\n// This example signs a file specified by a URI \n// using a detached signature. It then verifies  \n// the signed XML.\n//\n#using &lt;System.Security.dll&gt;\n#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Cryptography::Xml;\nusing namespace System::Text;\nusing namespace System::Xml;\n\n// Sign an XML file and save the signature in a new file.\nvoid SignDetachedResource( String^ URIString, String^ XmlSigFileName, DSA^ DSAKey )\n{\n   \n   // Create a SignedXml Object*.\n   SignedXml^ signedXml = gcnew SignedXml;\n   \n   // Assign the DSA key to the SignedXml object.\n   signedXml-&gt;SigningKey = DSAKey;\n   \n   // Create a reference to be signed.\n   Reference^ reference = gcnew Reference;\n   \n   // Add the passed URI to the reference object.\n   reference-&gt;Uri = URIString;\n   \n   // Add the reference to the SignedXml object.\n   signedXml-&gt;AddReference( reference );\n   \n   // Add a DSAKeyValue to the KeyInfo (optional; helps recipient find key to validate).\n   KeyInfo^ keyInfo = gcnew KeyInfo;\n   keyInfo-&gt;AddClause( gcnew DSAKeyValue( safe_cast&lt;DSA^&gt;(DSAKey) ) );\n   signedXml-&gt;KeyInfo = keyInfo;\n   \n   // Compute the signature.\n   signedXml-&gt;ComputeSignature();\n   \n   // Get the XML representation of the signature and save\n   // it to an XmlElement object.\n   XmlElement^ xmlDigitalSignature = signedXml-&gt;GetXml();\n   \n   // Save the signed XML document to a file specified\n   // using the passed string.\n   XmlTextWriter^ xmltw = gcnew XmlTextWriter( XmlSigFileName,gcnew UTF8Encoding( false ) );\n   xmlDigitalSignature-&gt;WriteTo( xmltw );\n   xmltw-&gt;Close();\n}\n\n\n// Verify the signature of an XML file and return the result.\nBoolean VerifyDetachedSignature( String^ XmlSigFileName )\n{\n   \n   // Create a new XML document.\n   XmlDocument^ xmlDocument = gcnew XmlDocument;\n   \n   // Load the passed XML file into the document.\n   xmlDocument-&gt;Load( XmlSigFileName );\n   \n   // Create a new SignedXMl object.\n   SignedXml^ signedXml = gcnew SignedXml;\n   \n   // Find the S&quot;Signature&quot; node and create a new\n   // XmlNodeList object.\n   XmlNodeList^ nodeList = xmlDocument-&gt;GetElementsByTagName( &quot;Signature&quot; );\n   \n   // Load the signature node.\n   signedXml-&gt;LoadXml( safe_cast&lt;XmlElement^&gt;(nodeList-&gt;Item( 0 )) );\n   \n   // Check the signature and return the result.\n   return signedXml-&gt;CheckSignature();\n}\n\n\n\n[STAThread]\nint main()\n{\n   array&lt;String^&gt;^args = Environment::GetCommandLineArgs();\n   \n   // The URI to sign.\n   String^ resourceToSign = &quot;http://www.microsoft.com&quot;;\n   \n   // The name of the file to which to save the XML signature.\n   String^ XmlFileName = &quot;xmldsig.xml&quot;;\n   try\n   {\n      \n      // Generate a DSA signing key.\n      DSACryptoServiceProvider^ DSAKey = gcnew DSACryptoServiceProvider;\n      Console::WriteLine( &quot;Signing: {0}&quot;, resourceToSign );\n      \n      // Sign the detached resourceand save the signature in an XML file.\n      SignDetachedResource( resourceToSign, XmlFileName, DSAKey );\n      Console::WriteLine( &quot;XML signature was succesfully computed and saved to {0}.&quot;, XmlFileName );\n      \n      // Verify the signature of the signed XML.\n      Console::WriteLine( &quot;Verifying signature...&quot; );\n      \n      //Verify the XML signature in the XML file.\n      bool result = VerifyDetachedSignature( XmlFileName );\n      \n      // Display the results of the signature verification to \n      // the console.\n      if ( result )\n      {\n         Console::WriteLine( &quot;The XML signature is valid.&quot; );\n      }\n      else\n      {\n         Console::WriteLine( &quot;The XML signature is not valid.&quot; );\n      }\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n\n}\n</code></pre><p> The following code example demonstrates how to use the DSAKeyValue class in XML encryption to create an envelope signature.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Security.Cryptography.XML.DSAKeyValue_Envelope#1\">//\n// This example signs an XML file using an\n// envelope signature. It then verifies the \n// signed XML.\n//\n#using &lt;System.Security.dll&gt;\n#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Cryptography::Xml;\nusing namespace System::Text;\nusing namespace System::Xml;\n\n// Sign an XML file and save the signature in a new file.\nvoid SignXmlFile( String^ FileName, String^ SignedFileName, DSA^ DSAKey )\n{\n   \n   // Create a new XML document.\n   XmlDocument^ doc = gcnew XmlDocument;\n   \n   // Format the document to ignore white spaces.\n   doc-&gt;PreserveWhitespace = false;\n   \n   // Load the passed XML file using its name.\n   doc-&gt;Load( gcnew XmlTextReader( FileName ) );\n   \n   // Create a SignedXml object.\n   SignedXml^ signedXml = gcnew SignedXml( doc );\n   \n   // Add the DSA key to the SignedXml document. \n   signedXml-&gt;SigningKey = DSAKey;\n   \n   // Create a reference to be signed.\n   Reference^ reference = gcnew Reference;\n   reference-&gt;Uri = &quot;&quot;;\n   \n   // Add a transformation to the reference.\n   Transform^ trns = gcnew XmlDsigC14NTransform;\n   reference-&gt;AddTransform( trns );\n   \n   // Add an enveloped transformation to the reference.\n   XmlDsigEnvelopedSignatureTransform^ env = gcnew XmlDsigEnvelopedSignatureTransform;\n   reference-&gt;AddTransform( env );\n   \n   // Add the reference to the SignedXml object.\n   signedXml-&gt;AddReference( reference );\n   \n   // Add a DSAKeyValue to the KeyInfo (optional; helps recipient find key to validate).\n   KeyInfo^ keyInfo = gcnew KeyInfo;\n   keyInfo-&gt;AddClause( gcnew DSAKeyValue( safe_cast&lt;DSA^&gt;(DSAKey) ) );\n   signedXml-&gt;KeyInfo = keyInfo;\n   \n   // Compute the signature.\n   signedXml-&gt;ComputeSignature();\n   \n   // Get the XML representation of the signature and save\n   // it to an XmlElement object.\n   XmlElement^ xmlDigitalSignature = signedXml-&gt;GetXml();\n   \n   // Append the element to the XML document.\n   doc-&gt;DocumentElement-&gt;AppendChild( doc-&gt;ImportNode( xmlDigitalSignature, true ) );\n   if ( (doc-&gt;FirstChild)-&gt;GetType() == XmlDeclaration::typeid )\n   {\n      doc-&gt;RemoveChild( doc-&gt;FirstChild );\n   }\n\n   \n   // Save the signed XML document to a file specified\n   // using the passed string.\n   XmlTextWriter^ xmltw = gcnew XmlTextWriter( SignedFileName,gcnew UTF8Encoding( false ) );\n   doc-&gt;WriteTo( xmltw );\n   xmltw-&gt;Close();\n}\n\n\n// Verify the signature of an XML file and return the result.\nBoolean VerifyXmlFile( String^ Name )\n{\n   \n   // Create a new XML document.\n   XmlDocument^ xmlDocument = gcnew XmlDocument;\n   \n   // Format using white spaces.\n   xmlDocument-&gt;PreserveWhitespace = true;\n   \n   // Load the passed XML file into the document. \n   xmlDocument-&gt;Load( Name );\n   \n   // Create a new SignedXml object and pass it\n   // the XML document class.\n   SignedXml^ signedXml = gcnew SignedXml( xmlDocument );\n   \n   // Find the &quot;Signature&quot; node and create a new\n   // XmlNodeList object.\n   XmlNodeList^ nodeList = xmlDocument-&gt;GetElementsByTagName( &quot;Signature&quot; );\n   \n   // Load the signature node.\n   signedXml-&gt;LoadXml( safe_cast&lt;XmlElement^&gt;(nodeList-&gt;Item( 0 )) );\n   \n   // Check the signature and return the result.\n   return signedXml-&gt;CheckSignature();\n}\n\n\n// Create example data to sign.\nvoid CreateSomeXml( String^ FileName )\n{\n   \n   // Create a new XmlDocument object.\n   XmlDocument^ document = gcnew XmlDocument;\n   \n   // Create a new XmlNode object.\n   XmlNode^ node = document-&gt;CreateNode( XmlNodeType::Element, &quot;&quot;, &quot;MyElement&quot;, &quot;samples&quot; );\n   \n   // Add some text to the node.\n   node-&gt;InnerText = &quot;Example text to be signed.&quot;;\n   \n   // Append the node to the document.\n   document-&gt;AppendChild( node );\n   \n   // Save the XML document to the file name specified.\n   XmlTextWriter^ xmltw = gcnew XmlTextWriter( FileName,gcnew UTF8Encoding( false ) );\n   document-&gt;WriteTo( xmltw );\n   xmltw-&gt;Close();\n}\n\nint main()\n{\n   try\n   {\n      \n      // Generate a DSA signing key.\n      DSACryptoServiceProvider^ DSAKey = gcnew DSACryptoServiceProvider;\n      \n      // Create an XML file to sign.\n      CreateSomeXml( &quot;Example.xml&quot; );\n      Console::WriteLine( &quot;New XML file created.&quot; );\n      \n      // Sign the XML that was just created and save it in a \n      // new file.\n      SignXmlFile( &quot;Example.xml&quot;, &quot;SignedExample.xml&quot;, DSAKey );\n      Console::WriteLine( &quot;XML file signed.&quot; );\n      \n      // Verify the signature of the signed XML.\n      Console::WriteLine( &quot;Verifying signature...&quot; );\n      bool result = VerifyXmlFile( &quot;SignedExample.xml&quot; );\n      \n      // Display the results of the signature verification to\n      // the console.\n      if ( result )\n      {\n         Console::WriteLine( &quot;The XML signature is valid.&quot; );\n      }\n      else\n      {\n         Console::WriteLine( &quot;The XML signature is not valid.&quot; );\n      }\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.XML.DSAKeyValue_Envelope#1\">&#39;\n&#39; This example signs an XML file using an\n&#39; envelope signature. It then verifies the \n&#39; signed XML.\n&#39;\nImports System\nImports System.Security.Cryptography\nImports System.Security.Cryptography.Xml\nImports System.Text\nImports System.Xml\n\n\n\nPublic Class SignVerifyEnvelope\n   \n   \n   Overloads Public Shared Sub Main(args() As [String])\n      Try\n         &#39; Generate a DSA signing key.\n         Dim DSAKey As New DSACryptoServiceProvider()\n         \n         &#39; Create an XML file to sign.\n         CreateSomeXml(&quot;Example.xml&quot;)\n         Console.WriteLine(&quot;New XML file created.&quot;)\n         \n         &#39; Sign the XML that was just created and save it in a \n         &#39; new file.\n         SignXmlFile(&quot;Example.xml&quot;, &quot;SignedExample.xml&quot;, DSAKey)\n         Console.WriteLine(&quot;XML file signed.&quot;)\n         \n         &#39; Verify the signature of the signed XML.\n         Console.WriteLine(&quot;Verifying signature...&quot;)\n         Dim result As Boolean = VerifyXmlFile(&quot;SignedExample.xml&quot;)\n         \n         &#39; Display the results of the signature verification to \\\n         &#39; the console.\n         If result Then\n            Console.WriteLine(&quot;The XML signature is valid.&quot;)\n         Else\n            Console.WriteLine(&quot;The XML signature is not valid.&quot;)\n         End If\n      Catch e As CryptographicException\n         Console.WriteLine(e.Message)\n      End Try\n   End Sub \n   \n   \n   &#39; Sign an XML file and save the signature in a new file.\n   Public Shared Sub SignXmlFile(FileName As String, SignedFileName As String, DSAKey As DSA)\n      &#39; Create a new XML document.\n      Dim doc As New XmlDocument()\n      \n      &#39; Format the document to ignore white spaces.\n      doc.PreserveWhitespace = False\n      \n      &#39; Load the passed XML file using it&#39;s name.\n      doc.Load(New XmlTextReader(FileName))\n      \n      &#39; Create a SignedXml object.\n      Dim signedXml As New SignedXml(doc)\n      \n      &#39; Add the DSA key to the SignedXml document. \n      signedXml.SigningKey = DSAKey\n      \n      &#39; Create a reference to be signed.\n      Dim reference As New Reference()\n      reference.Uri = &quot;&quot;\n      \n      &#39; Add a transformation to the reference.\n      Dim trns = New XmlDsigC14NTransform()\n      reference.AddTransform(trns)\n      \n      &#39; Add an enveloped transformation to the reference.\n      Dim env As New XmlDsigEnvelopedSignatureTransform()\n      reference.AddTransform(env)\n      \n      &#39; Add the reference to the SignedXml object.\n      signedXml.AddReference(reference)\n      \n      \n      &#39; Add a DSAKeyValue to the KeyInfo (optional; helps recipient find key to validate).\n      Dim keyInfo As New KeyInfo()\n      keyInfo.AddClause(New DSAKeyValue(CType(DSAKey, DSA)))\n      signedXml.KeyInfo = keyInfo\n      \n      &#39; Compute the signature.\n      signedXml.ComputeSignature()\n      \n      &#39; Get the XML representation of the signature and save\n      &#39; it to an XmlElement object.\n      Dim xmlDigitalSignature As XmlElement = signedXml.GetXml()\n      \n      &#39; Append the element to the XML document.\n      doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, True))\n      \n      \n      If TypeOf doc.FirstChild Is XmlDeclaration Then\n         doc.RemoveChild(doc.FirstChild)\n      End If\n      \n      &#39; Save the signed XML document to a file specified\n      &#39; using the passed string.\n      Dim xmltw As New XmlTextWriter(SignedFileName, New UTF8Encoding(False))\n      doc.WriteTo(xmltw)\n      xmltw.Close()\n   End Sub \n   \n   &#39; Verify the signature of an XML file and return the result.\n   Public Shared Function VerifyXmlFile(Name As [String]) As [Boolean]\n      &#39; Create a new XML document.\n      Dim xmlDocument As New XmlDocument()\n      \n      &#39; Format using white spaces.\n      xmlDocument.PreserveWhitespace = True\n      \n      &#39; Load the passed XML file into the document. \n      xmlDocument.Load(Name)\n      \n      &#39; Create a new SignedXml object and pass it\n      &#39; the XML document class.\n      Dim signedXml As New SignedXml(xmlDocument)\n      \n      &#39; Find the &quot;Signature&quot; node and create a new\n      &#39; XmlNodeList object.\n      Dim nodeList As XmlNodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;)\n      \n      &#39; Load the signature node.\n      signedXml.LoadXml(CType(nodeList(0), XmlElement))\n      \n      &#39; Check the signature and return the result.\n      Return signedXml.CheckSignature()\n   End Function \n   \n   &#39; Create example data to sign.\n   Public Shared Sub CreateSomeXml(FileName As String)\n      &#39; Create a new XmlDocument object.\n      Dim document As New XmlDocument()\n      \n      &#39; Create a new XmlNode object.\n      Dim node As XmlNode = document.CreateNode(XmlNodeType.Element, &quot;&quot;, &quot;MyElement&quot;, &quot;samples&quot;)\n      \n      &#39; Add some text to the node.\n      node.InnerText = &quot;Example text to be signed.&quot;\n      \n      &#39; Append the node to the document.\n      document.AppendChild(node)\n      \n      &#39; Save the XML document to the file name specified.\n      Dim xmltw As New XmlTextWriter(FileName, New UTF8Encoding(False))\n      document.WriteTo(xmltw)\n      xmltw.Close()\n   End Sub \nEnd Class \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.XML.DSAKeyValue_Envelope#1\">//\n// This example signs an XML file using an\n// envelope signature. It then verifies the \n// signed XML.\n//\nusing System;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.Xml;\nusing System.Text;\nusing System.Xml;\n\npublic class SignVerifyEnvelope\n{\n\n    public static void Main(String[] args)\n    {\n        try\n        {\n            // Generate a DSA signing key.\n            DSACryptoServiceProvider DSAKey = new DSACryptoServiceProvider();\n\n            // Create an XML file to sign.\n            CreateSomeXml(&quot;Example.xml&quot;);\n            Console.WriteLine(&quot;New XML file created.&quot;); \n\n            // Sign the XML that was just created and save it in a \n            // new file.\n            SignXmlFile(&quot;Example.xml&quot;, &quot;SignedExample.xml&quot;, DSAKey);\n            Console.WriteLine(&quot;XML file signed.&quot;); \n\n            // Verify the signature of the signed XML.\n            Console.WriteLine(&quot;Verifying signature...&quot;);\n            bool result = VerifyXmlFile(&quot;SignedExample.xml&quot;);\n\n            // Display the results of the signature verification to \\\n            // the console.\n            if(result)\n            {\n                Console.WriteLine(&quot;The XML signature is valid.&quot;);\n            }\n            else\n            {\n                Console.WriteLine(&quot;The XML signature is not valid.&quot;);\n            }\n        }\n        catch(CryptographicException e)\n        {\n            Console.WriteLine(e.Message);\n        }\n    }\n\n    // Sign an XML file and save the signature in a new file.\n    public static void SignXmlFile(string FileName, string SignedFileName, DSA DSAKey)\n    {\n        // Create a new XML document.\n        XmlDocument doc = new XmlDocument();\n\n        // Format the document to ignore white spaces.\n        doc.PreserveWhitespace = false;\n\n        // Load the passed XML file using it&#39;s name.\n        doc.Load(new XmlTextReader(FileName));\n\n        // Create a SignedXml object.\n        SignedXml signedXml = new SignedXml(doc);\n\n        // Add the DSA key to the SignedXml document. \n        signedXml.SigningKey = DSAKey;\n\n        // Create a reference to be signed.\n        Reference reference = new Reference();\n        reference.Uri = &quot;&quot;;\n\n        // Add a transformation to the reference.\n        Transform trns = new XmlDsigC14NTransform();\n        reference.AddTransform(trns);\n\n        // Add an enveloped transformation to the reference.\n        XmlDsigEnvelopedSignatureTransform env = new XmlDsigEnvelopedSignatureTransform();\n        reference.AddTransform(env);\n\n        // Add the reference to the SignedXml object.\n        signedXml.AddReference(reference);\n\n\t\t\n        // Add a DSAKeyValue to the KeyInfo (optional; helps recipient find key to validate).\n        KeyInfo keyInfo = new KeyInfo();\n        keyInfo.AddClause(new DSAKeyValue((DSA)DSAKey));\n        signedXml.KeyInfo = keyInfo;\n\n        // Compute the signature.\n        signedXml.ComputeSignature();\n\n        // Get the XML representation of the signature and save\n        // it to an XmlElement object.\n        XmlElement xmlDigitalSignature = signedXml.GetXml();\n\n        // Append the element to the XML document.\n        doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, true));\n\t\t\n\t\t\n        if (doc.FirstChild is XmlDeclaration)  \n        {\n            doc.RemoveChild(doc.FirstChild);\n        }\n\n        // Save the signed XML document to a file specified\n        // using the passed string.\n        XmlTextWriter xmltw = new XmlTextWriter(SignedFileName, new UTF8Encoding(false));\n        doc.WriteTo(xmltw);\n        xmltw.Close();\n    }\n    // Verify the signature of an XML file and return the result.\n    public static Boolean VerifyXmlFile(String Name)\n    {\n        // Create a new XML document.\n        XmlDocument xmlDocument = new XmlDocument();\n\n        // Format using white spaces.\n        xmlDocument.PreserveWhitespace = true;\n\n        // Load the passed XML file into the document. \n        xmlDocument.Load(Name);\n\n        // Create a new SignedXml object and pass it\n        // the XML document class.\n        SignedXml signedXml = new SignedXml(xmlDocument);\n\n        // Find the &quot;Signature&quot; node and create a new\n        // XmlNodeList object.\n        XmlNodeList nodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;);\n\n        // Load the signature node.\n        signedXml.LoadXml((XmlElement)nodeList[0]);\n\n        // Check the signature and return the result.\n        return signedXml.CheckSignature();\n    }\n\n    // Create example data to sign.\n    public static void CreateSomeXml(string FileName)\n    {\n        // Create a new XmlDocument object.\n        XmlDocument document = new XmlDocument();\n\n        // Create a new XmlNode object.\n        XmlNode  node = document.CreateNode(XmlNodeType.Element, &quot;&quot;, &quot;MyElement&quot;, &quot;samples&quot;);\n\t\t\n        // Add some text to the node.\n        node.InnerText = &quot;Example text to be signed.&quot;;\n\n        // Append the node to the document.\n        document.AppendChild(node);\n\n        // Save the XML document to the file name specified.\n        XmlTextWriter xmltw = new XmlTextWriter(FileName, new UTF8Encoding(false));\n        document.WriteTo(xmltw);\n        xmltw.Close();\n    }\n}\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The <a class=\"xref\" href=\"system.security.cryptography.xml.keyinfo\" data-linktype=\"relative-path\">KeyInfo</a> class represents the <code>&lt;KeyInfo&gt;</code> element, which contains a <a class=\"xref\" href=\"system.security.cryptography.dsa\" data-linktype=\"relative-path\">DSA</a> public key.  </p>\n<p> Use DSAKeyValue to identify the public key that corresponds to the <a class=\"xref\" href=\"system.security.cryptography.dsa\" data-linktype=\"relative-path\">DSA</a> private key that was used to create the digital signature.  </p>\n<p> If a key is not explicitly supplied to the constructor, a new <a class=\"xref\" href=\"system.security.cryptography.dsa\" data-linktype=\"relative-path\">DSA</a> key pair is randomly generated.  </p>\n<p> The DSAKeyValue class is used with XML signatures. For more information about the W3C specification, see <a href=\"http://www.w3.org/TR/xmldsig-core/\" data-linktype=\"external\">http://www.w3.org/TR/xmldsig-core/</a>.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_Xml_DSAKeyValue__ctor\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">DSAKeyValue()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.xml.dsakeyvalue\" data-linktype=\"relative-path\">DSAKeyValue</a> class with a new, randomly-generated <a class=\"xref\" href=\"system.security.cryptography.dsa\" data-linktype=\"relative-path\">DSA</a> public key.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public DSAKeyValue ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>When creating a new <a class=\"xref\" href=\"system.security.cryptography.dsa\" data-linktype=\"relative-path\">DSA</a> key, this constructor uses the default implementation of <a class=\"xref\" href=\"system.security.cryptography.dsa\" data-linktype=\"relative-path\">DSA</a> as defined by the <a class=\"xref\" href=\"system.security.cryptography.cryptoconfig\" data-linktype=\"relative-path\">CryptoConfig</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_Xml_DSAKeyValue__ctor_System_Security_Cryptography_DSA_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">DSAKeyValue(DSA)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.xml.dsakeyvalue\" data-linktype=\"relative-path\">DSAKeyValue</a> class with the specified <a class=\"xref\" href=\"system.security.cryptography.dsa\" data-linktype=\"relative-path\">DSA</a> public key.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public DSAKeyValue (System.Security.Cryptography.DSA key);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>key</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.dsa\" data-linktype=\"relative-path\">DSA</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The instance of an implementation of the <a class=\"xref\" href=\"system.security.cryptography.dsa\" data-linktype=\"relative-path\">DSA</a> class that holds the public key.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_Xml_DSAKeyValue_Key\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Key</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets the key value represented by a <a class=\"xref\" href=\"system.security.cryptography.dsa\" data-linktype=\"relative-path\">DSA</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Security.Cryptography.DSA Key { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.dsa\" data-linktype=\"relative-path\">DSA</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The public key represented by a <a class=\"xref\" href=\"system.security.cryptography.dsa\" data-linktype=\"relative-path\">DSA</a> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This property represents the DSA key used to sign the XML.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_Xml_DSAKeyValue_GetXml\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetXml()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns the XML representation of a <a class=\"xref\" href=\"system.security.cryptography.xml.dsakeyvalue\" data-linktype=\"relative-path\">DSAKeyValue</a> element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override System.Xml.XmlElement GetXml ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlelement\" data-linktype=\"relative-path\">XmlElement</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The XML representation of the <a class=\"xref\" href=\"system.security.cryptography.xml.dsakeyvalue\" data-linktype=\"relative-path\">DSAKeyValue</a> element.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Use this method to output XML for a <a class=\"xref\" href=\"system.security.cryptography.xml.dsakeyvalue\" data-linktype=\"relative-path\">DSAKeyValue</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_Xml_DSAKeyValue_LoadXml_System_Xml_XmlElement_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LoadXml(XmlElement)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Loads a <a class=\"xref\" href=\"system.security.cryptography.xml.dsakeyvalue\" data-linktype=\"relative-path\">DSAKeyValue</a> state from an XML element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override void LoadXml (System.Xml.XmlElement value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlelement\" data-linktype=\"relative-path\">XmlElement</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The XML element to load the <a class=\"xref\" href=\"system.security.cryptography.xml.dsakeyvalue\" data-linktype=\"relative-path\">DSAKeyValue</a> state from.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <code>value</code> parameter is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <code>value</code> parameter is not a valid <a class=\"xref\" href=\"system.security.cryptography.xml.dsakeyvalue\" data-linktype=\"relative-path\">DSAKeyValue</a> XML element.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method can be used to add XML elements to a <a class=\"xref\" href=\"system.security.cryptography.xml.dsakeyvalue\" data-linktype=\"relative-path\">DSAKeyValue</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t  \r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Security.Cryptography.Xml.DSAKeyValue.yml\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.DSAKeyValue\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.DSAKeyValue..ctor\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.DSAKeyValue.GetXml\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.DSAKeyValue.Key\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.DSAKeyValue.LoadXml\">\r\n<meta name=\"APILocation\" content=\"System.Security.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-24 01:41 AM\">\r\n<meta name=\"document_id\" content=\"a59d73ab-2970-f3ee-feac-22c388638d94\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the  private key of the &amp;lt;KeyInfo&amp;gt; element.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.security.cryptography.xml/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Security.Cryptography.Xml.DSAKeyValue\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Security.Cryptography.Xml.DSAKeyValue.yml","open_to_public_contributors":false,"api_name":["System.Security.Cryptography.Xml.DSAKeyValue","System.Security.Cryptography.Xml.DSAKeyValue..ctor","System.Security.Cryptography.Xml.DSAKeyValue.GetXml","System.Security.Cryptography.Xml.DSAKeyValue.Key","System.Security.Cryptography.Xml.DSAKeyValue.LoadXml"],"api_location":["System.Security.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Security.Cryptography.Xml.DSAKeyValue","System::Security::Cryptography::Xml::DSAKeyValue","System.Security.Cryptography.Xml.DSAKeyValue.#ctor","System::Security::Cryptography::Xml::DSAKeyValue::#ctor","System.Security.Cryptography.Xml.DSAKeyValue.GetXml","System::Security::Cryptography::Xml::DSAKeyValue::GetXml","System.Security.Cryptography.Xml.DSAKeyValue.Key","System::Security::Cryptography::Xml::DSAKeyValue::Key","System.Security.Cryptography.Xml.DSAKeyValue.LoadXml","System::Security::Cryptography::Xml::DSAKeyValue::LoadXml"],"dev_langs":["csharp"],"updated_at":"2017-03-24 01:41 AM","document_id":"a59d73ab-2970-f3ee-feac-22c388638d94","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.Xml/DSAKeyValue.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"DSAKeyValue class | Microsoft Docs","_op_ogTitle":"DSAKeyValue class","description":"Represents the  private key of the &lt;KeyInfo&gt; element.\n","toc_asset_id":"api/_splitted/System.Security.Cryptography.Xml/toc.json","toc_rel":"_splitted/System.Security.Cryptography.Xml/toc.json","source_url":"","ms.assetid":"System.Security.Cryptography.Xml.DSAKeyValue","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.xml.dsakeyvalue","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.xml.dsakeyvalue","fileRelativePath":"api/System.Security.Cryptography.Xml.DSAKeyValue.html"},"themesRelativePathToOutputRoot":"_themes/"}