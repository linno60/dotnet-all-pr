{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">CodeTypeParameter</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents a type parameter of a generic type or method.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[ECMA2Yaml.Models.ECMAAttribute]\n[ECMA2Yaml.Models.ECMAAttribute]\npublic class CodeTypeParameter : System.CodeDom.CodeObject</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.codeobject\" data-linktype=\"relative-path\">CodeObject</a></span></div><span class=\"lang-csharp\">CodeTypeParameter</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Attributes</dt><dd>\r\n  \t\t<div class=\"cdlHolder\">\r\n  \t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.classinterfaceattribute\" title=\"System.Runtime.InteropServices.ClassInterfaceAttribute\" data-linktype=\"relative-path\">ClassInterfaceAttribute</a></span>\r\n  \t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.codeobject#System_CodeDom_CodeObject_UserData\" data-linktype=\"relative-path\">UserData</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example shows the use of the CodeTypeParameter class to create a CodeDOM graph to generate an application containing generics code.  </p>\n<pre><code class=\"lang-vb\" name=\"System.CodeDom.Generics.1#1\">Imports System.CodeDom\nImports System.CodeDom.Compiler\nImports System.Collections\nImports System.Collections.Specialized\nImports System.IO\nImports System.Reflection\nImports System.Text.RegularExpressions\nImports System.Globalization\nImports System.Collections.Generic\n\n\nClass CodeDomGenericsDemo\n\n    Shared Sub Main()\n        Try\n            CreateGenericsCode(&quot;vb&quot;, &quot;Generic.vb&quot;, &quot;GenericVB.exe&quot;)\n        Catch e As Exception\n            LogMessage((&quot;Unexpected Exception:&quot; + e.ToString()))\n        End Try\n\n    End Sub &#39;Main\n\n\n    Shared Sub CreateGenericsCode(ByVal providerName As String, ByVal sourceFileName As String, ByVal assemblyName As String)\n\n        Dim provider As CodeDomProvider = CodeDomProvider.CreateProvider(providerName)\n\n        LogMessage(&quot;Building CodeDOM graph...&quot;)\n\n        Dim cu As New CodeCompileUnit()\n\n        CreateGraph(provider, cu)\n\n        Dim sw As New StringWriter()\n\n        LogMessage(&quot;Generating code...&quot;)\n        provider.GenerateCodeFromCompileUnit(cu, sw, Nothing)\n\n        Dim output As String = sw.ToString()\n        output = Regex.Replace(output, &quot;Runtime version:[^&quot; + vbCr + vbLf + &quot;]*&quot;, &quot;Runtime version omitted for demo&quot;)\n\n        LogMessage(&quot;Displaying source code...&quot;)\n        LogMessage(output)\n\n        LogMessage(&quot;Writing source code to file...&quot;)\n        Dim s As Stream = File.Open(sourceFileName, FileMode.Create)\n        Dim t As New StreamWriter(s)\n        t.Write(output)\n        t.Close()\n        s.Close()\n\n        Dim opt As New CompilerParameters(New String() {&quot;System.dll&quot;, &quot;System.Xml.dll&quot;, &quot;System.Windows.Forms.dll&quot;, &quot;System.Data.dll&quot;, &quot;System.Drawing.dll&quot;})\n        opt.GenerateExecutable = False\n        opt.TreatWarningsAsErrors = True\n        opt.IncludeDebugInformation = True\n        opt.GenerateInMemory = True\n\n        Dim results As CompilerResults\n\n        LogMessage((&quot;Compiling with provider &quot; + providerName))\n        results = provider.CompileAssemblyFromFile(opt, sourceFileName)\n\n        OutputResults(results)\n        If results.NativeCompilerReturnValue &lt;&gt; 0 Then\n            LogMessage(&quot;&quot;)\n            LogMessage(&quot;Compilation failed.&quot;)\n        Else\n            LogMessage(&quot;&quot;)\n            LogMessage(&quot;Demo completed successfully.&quot;)\n        End If\n        File.Delete(sourceFileName)\n\n    End Sub &#39;CreateGenericsCode\n\n\n    &#39; Create a CodeDOM graph.\n    Shared Sub CreateGraph(ByVal provider As CodeDomProvider, ByVal cu As CodeCompileUnit)\n        &#39; Determine if the generator supports generics.\n        If Not provider.Supports(GeneratorSupport.GenericTypeReference Or GeneratorSupport.GenericTypeDeclaration) Then\n            &#39; Return if the generator does not support generics.\n            Return\n        End If\n        Dim ns As New CodeNamespace(&quot;DemoNamespace&quot;)\n        ns.Imports.Add(New CodeNamespaceImport(&quot;System&quot;))\n        ns.Imports.Add(New CodeNamespaceImport(&quot;System.Collections.Generic&quot;))\n        cu.Namespaces.Add(ns)\n\n        &#39; Declare a generic class.\n        Dim class1 As New CodeTypeDeclaration()\n        class1.Name = &quot;MyDictionary&quot;\n        class1.BaseTypes.Add( _\n            New CodeTypeReference(&quot;Dictionary&quot;, _\n                New CodeTypeReference() {New CodeTypeReference(&quot;TKey&quot;), _\n                    New CodeTypeReference(&quot;TValue&quot;)}))\n        Dim kType As New CodeTypeParameter(&quot;TKey&quot;)\n        kType.HasConstructorConstraint = True\n        kType.Constraints.Add(New CodeTypeReference(GetType(IComparable)))\n        kType.CustomAttributes.Add _\n            (New CodeAttributeDeclaration(&quot;System.ComponentModel.DescriptionAttribute&quot;, _\n                New CodeAttributeArgument(New CodePrimitiveExpression(&quot;KeyType&quot;))))\n        Dim iComparableT As New CodeTypeReference(&quot;IComparable&quot;)\n        iComparableT.TypeArguments.Add(New CodeTypeReference(kType))\n\n        kType.Constraints.Add(iComparableT)\n\n        Dim vType As New CodeTypeParameter(&quot;TValue&quot;)\n        vType.Constraints.Add(New CodeTypeReference(GetType(IList(Of System.String))))\n        vType.CustomAttributes.Add _\n            (New CodeAttributeDeclaration(&quot;System.ComponentModel.DescriptionAttribute&quot;, _\n                New CodeAttributeArgument(New CodePrimitiveExpression(&quot;ValueType&quot;))))\n\n        class1.TypeParameters.Add(kType)\n        class1.TypeParameters.Add(vType)\n        ns.Types.Add(class1)\n\n        &#39; Declare a generic method.\n        Dim printMethod As New CodeMemberMethod()\n        Dim sType As New CodeTypeParameter(&quot;S&quot;)\n        sType.HasConstructorConstraint = True\n        Dim tType As New CodeTypeParameter(&quot;T&quot;)\n        tType.HasConstructorConstraint = True\n\n        printMethod.Name = &quot;Print&quot;\n        printMethod.TypeParameters.Add(sType)\n        printMethod.TypeParameters.Add(tType)\n\n        printMethod.Statements.Add(ConsoleWriteLineStatement _\n            (New CodeDefaultValueExpression(New CodeTypeReference(&quot;T&quot;))))\n        printMethod.Statements.Add(ConsoleWriteLineStatement _\n            (New CodeDefaultValueExpression(New CodeTypeReference(&quot;S&quot;))))\n        printMethod.Attributes = MemberAttributes.Public\n        class1.Members.Add(printMethod)\n\n        Dim class2 As New CodeTypeDeclaration()\n        class2.Name = &quot;Demo&quot;\n\n        Dim methodMain As New CodeEntryPointMethod()\n\n        Dim [myClass] As New CodeTypeReference(&quot;MyDictionary&quot;, _\n            New CodeTypeReference() {New CodeTypeReference(GetType(Integer)), _\n                New CodeTypeReference(&quot;List&quot;, _\n                    New CodeTypeReference() {New CodeTypeReference(&quot;System.String&quot;)})})\n\n        methodMain.Statements.Add(New CodeVariableDeclarationStatement([myClass], _\n            &quot;dict&quot;, New CodeObjectCreateExpression([myClass])))\n\n        methodMain.Statements.Add(ConsoleWriteLineStatement _\n            (New CodePropertyReferenceExpression _\n                (New CodeVariableReferenceExpression(&quot;dict&quot;), &quot;Count&quot;)))\n\n        methodMain.Statements.Add _\n            (New CodeExpressionStatement _\n                (New CodeMethodInvokeExpression _\n                    (New CodeMethodReferenceExpression _\n                        (New CodeVariableReferenceExpression(&quot;dict&quot;), _\n                            &quot;Print&quot;, New CodeTypeReference() _\n                                    {New CodeTypeReference(&quot;System.Decimal&quot;), _\n                                        New CodeTypeReference(&quot;System.Int32&quot;)}), _\n                                            New CodeExpression(-1) {})))\n        Dim longTypeName As String = GetType( _\n            System.Collections.Generic.Dictionary(Of Integer, _\n                System.Collections.Generic.List(Of String))()).FullName\n\n        Dim longType As New CodeTypeReference(longTypeName)\n\n        methodMain.Statements.Add(New CodeVariableDeclarationStatement _\n            (longType, &quot;dict2&quot;, New CodeArrayCreateExpression _\n                (longType, New CodeExpression(0) {New CodePrimitiveExpression(Nothing)})))\n\n        methodMain.Statements.Add(ConsoleWriteLineStatement(New CodePropertyReferenceExpression(New CodeVariableReferenceExpression(&quot;dict2&quot;), &quot;Length&quot;)))\n\n        class2.Members.Add(methodMain)\n        ns.Types.Add(class2)\n\n    End Sub &#39;CreateGraph\n\n\n    Overloads Shared Function ConsoleWriteLineStatement(ByVal exp As CodeExpression) As CodeStatement\n        Return New CodeExpressionStatement(New CodeMethodInvokeExpression _\n            (New CodeMethodReferenceExpression _\n                (New CodeTypeReferenceExpression _\n                    (New CodeTypeReference(&quot;Console&quot;)), &quot;WriteLine&quot;), _\n                        New CodeExpression() {exp}))\n\n    End Function &#39;ConsoleWriteLineStatement\n\n\n    Overloads Shared Function ConsoleWriteLineStatement(ByVal [text] As String) As CodeStatement\n        Return ConsoleWriteLineStatement(New CodePrimitiveExpression([text]))\n\n    End Function &#39;ConsoleWriteLineStatement\n\n    Shared Sub LogMessage(ByVal [text] As String)\n        Console.WriteLine([text])\n\n    End Sub &#39;LogMessage\n\n\n    Shared Sub OutputResults(ByVal results As CompilerResults)\n        LogMessage((&quot;NativeCompilerReturnValue=&quot; + results.NativeCompilerReturnValue.ToString()))\n        Dim s As String\n        For Each s In results.Output\n            LogMessage(s)\n        Next s\n\n    End Sub &#39;OutputResults\nEnd Class &#39;CodeDomGenericsDemo \n&#39;\n&#39; This example generates the following code:\n&#39;------------------------------------------------------------------------------\n&#39; &lt;auto-generated&gt;\n&#39;     This code was generated by a tool.\n&#39;     Runtime Version:2.0.50727.1434\n&#39;\n&#39;     Changes to this file may cause incorrect behavior and will be lost if\n&#39;     the code is regenerated.\n&#39; &lt;/auto-generated&gt;\n&#39;------------------------------------------------------------------------------\n\n&#39;Option Strict Off\n&#39;Option Explicit On\n\n&#39;Imports System\n&#39;Imports System.Collections.Generic\n\n&#39;Namespace DemoNamespace\n\n&#39;    Public Class MyDictionary(Of TKey As  {System.IComparable, IComparable(Of TKey), New}, TValue As System.Collections.\n&#39;Generic.IList(Of String))\n&#39;        Inherits Dictionary(Of TKey, TValue)\n\n&#39;        Public Overridable Sub Print(Of S As New, T As New)()\n&#39;            Console.WriteLine(CType(Nothing, T))\n&#39;            Console.WriteLine(CType(Nothing, S))\n&#39;        End Sub\n&#39;    End Class\n\n&#39;    Public Class Demo\n\n&#39;        Public Shared Sub Main()\n&#39;            Dim dict As MyDictionary(Of Integer, List(Of String)) = New MyDictionary(Of Integer, List(Of String))\n&#39;            Console.WriteLine(dict.Count)\n&#39;            dict.Print(Of Decimal, Integer)()\n&#39;            Dim dict2() As System.Collections.Generic.Dictionary(Of Integer, System.Collections.Generic.List(Of String))\n&#39; = New System.Collections.Generic.Dictionary(Of Integer, System.Collections.Generic.List(Of String))() {Nothing}\n&#39;            Console.WriteLine(dict2.Length)\n&#39;        End Sub\n&#39;    End Class\n&#39;End Namespace\n</code></pre><pre><code class=\"lang-cs\" name=\"System.CodeDom.Generics.1#1\">using System.CodeDom;\nusing System.CodeDom.Compiler;\nusing System.Collections;\nusing System.Collections.Specialized;\nusing System.IO;\nusing System.Reflection;\nusing System.Text.RegularExpressions;\nusing System.Globalization;\nusing System.Collections.Generic;\nnamespace System.CodeDom\n{\n    class CodeDomGenericsDemo\n    {\n        static void Main()\n        {\n            try\n            {\n                CreateGenericsCode(&quot;cs&quot;, &quot;Generic.cs&quot;, &quot;GenericCS.exe&quot;);\n            }\n            catch (Exception e)\n            {\n                LogMessage(&quot;Unexpected Exception:&quot; + e.ToString());\n            }\n        }\n\n        static void CreateGenericsCode(string providerName, string sourceFileName, string assemblyName)\n        {\n\n            CodeDomProvider provider = CodeDomProvider.CreateProvider(providerName);\n\n            LogMessage(&quot;Building CodeDOM graph...&quot;);\n\n            CodeCompileUnit cu = new CodeCompileUnit();\n\n            CreateGraph(provider, cu);\n\n            StringWriter sw = new StringWriter();\n\n            LogMessage(&quot;Generating code...&quot;);\n            provider.GenerateCodeFromCompileUnit(cu, sw, null);\n\n            string output = sw.ToString();\n            output = Regex.Replace(output, &quot;Runtime Version:[^\\r\\n]*&quot;,\n                &quot;Runtime Version omitted for demo&quot;);\n\n            LogMessage(&quot;Dumping source...&quot;);\n            LogMessage(output);\n\n            LogMessage(&quot;Writing source to file...&quot;);\n            Stream s = File.Open(sourceFileName, FileMode.Create);\n            StreamWriter t = new StreamWriter(s);\n            t.Write(output);\n            t.Close();\n            s.Close();\n\n            CompilerParameters opt = new CompilerParameters(new string[]{\n                                      &quot;System.dll&quot;, \n                                      &quot;System.Xml.dll&quot;,\n                                      &quot;System.Windows.Forms.dll&quot;,\n                                      &quot;System.Data.dll&quot;,\n                                      &quot;System.Drawing.dll&quot;});\n            opt.GenerateExecutable = false;\n            opt.TreatWarningsAsErrors = true;\n            opt.IncludeDebugInformation = true;\n            opt.GenerateInMemory = true;\n\n            CompilerResults results;\n\n            LogMessage(&quot;Compiling with &quot; + providerName);\n            results = provider.CompileAssemblyFromFile(opt, sourceFileName);\n\n            OutputResults(results);\n            if (results.NativeCompilerReturnValue != 0)\n            {\n                LogMessage(&quot;&quot;);\n                LogMessage(&quot;Compilation failed.&quot;);\n            }\n            else\n            {\n                LogMessage(&quot;&quot;);\n                LogMessage(&quot;Demo completed successfully.&quot;);\n            }\n            File.Delete(sourceFileName);\n        }\n\n        // Create a CodeDOM graph.\n        static void CreateGraph(CodeDomProvider provider, CodeCompileUnit cu)\n        {\n            if (!provider.Supports(GeneratorSupport.GenericTypeReference |\n               GeneratorSupport.GenericTypeDeclaration))\n            {\n                // Return if the generator does not support generics.\n                return;\n            }\n\n            CodeNamespace ns = new CodeNamespace(&quot;DemoNamespace&quot;);\n            ns.Imports.Add(new CodeNamespaceImport(&quot;System&quot;));\n            ns.Imports.Add(new CodeNamespaceImport(&quot;System.Collections.Generic&quot;));\n            cu.Namespaces.Add(ns);\n\n            // Declare a generic class.\n            CodeTypeDeclaration class1 = new CodeTypeDeclaration();\n            class1.Name = &quot;MyDictionary&quot;;\n            class1.BaseTypes.Add(new CodeTypeReference(&quot;Dictionary&quot;,\n                                      new CodeTypeReference[] {\n                                          new CodeTypeReference(&quot;TKey&quot;),    \n                                          new CodeTypeReference(&quot;TValue&quot;),    \n                                     }));\n            CodeTypeParameter kType = new CodeTypeParameter(&quot;TKey&quot;);\n            kType.HasConstructorConstraint = true;\n            kType.Constraints.Add(new CodeTypeReference(typeof(IComparable)));\n            kType.CustomAttributes.Add(new CodeAttributeDeclaration(\n                &quot;System.ComponentModel.DescriptionAttribute&quot;,\n                    new CodeAttributeArgument(new CodePrimitiveExpression(&quot;KeyType&quot;))));\n\n            CodeTypeReference iComparableT = new CodeTypeReference(&quot;IComparable&quot;);\n            iComparableT.TypeArguments.Add(new CodeTypeReference(kType));\n\n            kType.Constraints.Add(iComparableT);\n\n            CodeTypeParameter vType = new CodeTypeParameter(&quot;TValue&quot;);\n            vType.Constraints.Add(new CodeTypeReference(typeof(IList&lt;System.String&gt;)));\n            vType.CustomAttributes.Add(new CodeAttributeDeclaration(\n                &quot;System.ComponentModel.DescriptionAttribute&quot;,\n                    new CodeAttributeArgument(new CodePrimitiveExpression(&quot;ValueType&quot;))));\n\n            class1.TypeParameters.Add(kType);\n            class1.TypeParameters.Add(vType);\n\n            ns.Types.Add(class1);\n\n            // Declare a generic method.\n            CodeMemberMethod printMethod = new CodeMemberMethod();\n            CodeTypeParameter sType = new CodeTypeParameter(&quot;S&quot;);\n            sType.HasConstructorConstraint = true;\n            CodeTypeParameter tType = new CodeTypeParameter(&quot;T&quot;);\n            sType.HasConstructorConstraint = true;\n\n            printMethod.Name = &quot;Print&quot;;\n            printMethod.TypeParameters.Add(sType);\n            printMethod.TypeParameters.Add(tType);\n\n            printMethod.Statements.Add(ConsoleWriteLineStatement(\n                new CodeDefaultValueExpression(new CodeTypeReference(&quot;T&quot;))));\n            printMethod.Statements.Add(ConsoleWriteLineStatement(\n                new CodeDefaultValueExpression(new CodeTypeReference(&quot;S&quot;))));\n\n            printMethod.Attributes = MemberAttributes.Public;\n            class1.Members.Add(printMethod);\n\n            CodeTypeDeclaration class2 = new CodeTypeDeclaration();\n            class2.Name = &quot;Demo&quot;;\n\n            CodeEntryPointMethod methodMain = new CodeEntryPointMethod();\n\n            CodeTypeReference myClass = new CodeTypeReference(\n                &quot;MyDictionary&quot;,\n                new CodeTypeReference[] {\n                    new CodeTypeReference(typeof(int)),\n                    new CodeTypeReference(&quot;List&quot;, \n                       new CodeTypeReference[] \n                            {new CodeTypeReference(&quot;System.String&quot;) })});\n\n            methodMain.Statements.Add(\n                  new CodeVariableDeclarationStatement(myClass,\n                      &quot;dict&quot;,\n                          new CodeObjectCreateExpression(myClass)));\n\n            methodMain.Statements.Add(ConsoleWriteLineStatement(\n                new CodePropertyReferenceExpression(\n                      new CodeVariableReferenceExpression(&quot;dict&quot;),\n                            &quot;Count&quot;)));\n\n            methodMain.Statements.Add(new CodeExpressionStatement(\n                 new CodeMethodInvokeExpression(\n                      new CodeMethodReferenceExpression(\n                         new CodeVariableReferenceExpression(&quot;dict&quot;),\n                             &quot;Print&quot;,\n                                 new CodeTypeReference[] {\n                                    new CodeTypeReference(&quot;System.Decimal&quot;),\n                                       new CodeTypeReference(&quot;System.Int32&quot;),}),\n                                           new CodeExpression[0])));\n\n            string dictionaryTypeName = typeof(System.Collections.Generic.Dictionary&lt;int,\n                System.Collections.Generic.List&lt;string&gt;&gt;[]).FullName;\n\n            CodeTypeReference dictionaryType = new CodeTypeReference(dictionaryTypeName);\n            methodMain.Statements.Add(\n                  new CodeVariableDeclarationStatement(dictionaryType, &quot;dict2&quot;,\n                     new CodeArrayCreateExpression(dictionaryType, new CodeExpression[1] { new CodePrimitiveExpression(null) })));\n\n            methodMain.Statements.Add(ConsoleWriteLineStatement(\n                           new CodePropertyReferenceExpression(\n                                new CodeVariableReferenceExpression(&quot;dict2&quot;),\n                                        &quot;Length&quot;)));\n\n            class2.Members.Add(methodMain);\n            ns.Types.Add(class2);\n\n        }\n\n        static CodeStatement ConsoleWriteLineStatement(CodeExpression exp)\n        {\n            return new CodeExpressionStatement(\n                new CodeMethodInvokeExpression(\n                   new CodeMethodReferenceExpression(\n                       new CodeTypeReferenceExpression(new CodeTypeReference(&quot;Console&quot;)),\n                           &quot;WriteLine&quot;),\n                               new CodeExpression[]{\n                                   exp,\n                                     }));\n        }\n\n        static CodeStatement ConsoleWriteLineStatement(string text)\n        {\n            return ConsoleWriteLineStatement(new CodePrimitiveExpression(text));\n        }\n        static void LogMessage(string text)\n        {\n            Console.WriteLine(text);\n        }\n\n        static void OutputResults(CompilerResults results)\n        {\n            LogMessage(&quot;NativeCompilerReturnValue=&quot; +\n                results.NativeCompilerReturnValue.ToString());\n            foreach (string s in results.Output)\n            {\n                LogMessage(s);\n            }\n        }\n\n    }\n}\n// This example generates the following code:\n//------------------------------------------------------------------------------\n// &lt;auto-generated&gt;\n//     This code was generated by a tool.\n//     Runtime Version omitted for demo\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// &lt;/auto-generated&gt;\n//------------------------------------------------------------------------------\n\n//namespace DemoNamespace\n//{\n//    using System;\n//    using System.Collections.Generic;\n\n\n//    public class MyDictionary&lt;[System.ComponentModel.DescriptionAttribute(&quot;KeyType&quot;)]  TKey,\n//          [System.ComponentModel.DescriptionAttribute(&quot;ValueType&quot;)]  TValue&gt; : Dictionary&lt;TKey, TValue&gt;\n//        where TKey : System.IComparable, IComparable&lt;TKey&gt;, new()\n//        where TValue : System.Collections.Generic.IList&lt;string&gt;\n//    {\n\n//        public virtual void Print&lt;S, T&gt;()\n//            where S : new()\n//        {\n//            Console.WriteLine(default(T));\n//            Console.WriteLine(default(S));\n//        }\n//    }\n\n//    public class Demo\n//    {\n\n//        public static void Main()\n//        {\n//            MyDictionary&lt;int, List&lt;string&gt;&gt; dict = new MyDictionary&lt;int, List&lt;string&gt;&gt;();\n//            Console.WriteLine(dict.Count);\n//            dict.Print&lt;decimal, int&gt;();\n//            System.Collections.Generic.Dictionary&lt;int, System.Collections.Generic.List&lt;string&gt;&gt;[] dict2 =\n//              new System.Collections.Generic.Dictionary&lt;int, System.Collections.Generic.List&lt;string&gt;&gt;[] { null };\n//            Console.WriteLine(dict2.Length);\n//        }\n//    }\n//}\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The CodeTypeParameter class represents a type parameter in the declaration of a generic type or method.  </p>\n<p> A generic type or method declaration contains one or more unspecified types known as type parameters. A type parameter name stands for the type within the body of the generic declaration. For example, the generic declaration for the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> class contains the type parameter <code>T</code>.  </p>\n<p> For more information on generics, see <a href=\"../topic/generics%20in%20the%20.net%20framework%20class%20library%20(c%23%20programming%20guide)\" data-linktype=\"relative-path\">Generics in the .NET Framework Class Library</a>.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_CodeDom_CodeTypeParameter__ctor_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_CodeDom_CodeTypeParameter__ctor\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CodeTypeParameter()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.codedom.codetypeparameter\" data-linktype=\"relative-path\">CodeTypeParameter</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public CodeTypeParameter ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.classinterfaceattribute\" title=\"System.Runtime.InteropServices.ClassInterfaceAttribute\" data-linktype=\"relative-path\">ClassInterfaceAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If you use this constructor, you should set the <a class=\"xref\" href=\"system.codedom.codetypeparameter#System_CodeDom_CodeTypeParameter_Name_\" data-linktype=\"relative-path\">Name</a> property.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_CodeDom_CodeTypeParameter__ctor_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_CodeDom_CodeTypeParameter__ctor_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CodeTypeParameter(String)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.codedom.codetypeparameter\" data-linktype=\"relative-path\">CodeTypeParameter</a> class with the specified type parameter name.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public CodeTypeParameter (string name);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>name</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The name of the type parameter.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.classinterfaceattribute\" title=\"System.Runtime.InteropServices.ClassInterfaceAttribute\" data-linktype=\"relative-path\">ClassInterfaceAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_CodeDom_CodeTypeParameter_Constraints_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_CodeDom_CodeTypeParameter_Constraints\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Constraints</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the constraints for the type parameter.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.CodeDom.CodeTypeReferenceCollection Constraints { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.codetypereferencecollection\" data-linktype=\"relative-path\">CodeTypeReferenceCollection</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.codedom.codetypereferencecollection\" data-linktype=\"relative-path\">CodeTypeReferenceCollection</a> object that contains the constraints for the type parameter.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.classinterfaceattribute\" title=\"System.Runtime.InteropServices.ClassInterfaceAttribute\" data-linktype=\"relative-path\">ClassInterfaceAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>A constraint specifies the type that the type parameter must derive from or implement.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_CodeDom_CodeTypeParameter_CustomAttributes_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_CodeDom_CodeTypeParameter_CustomAttributes\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CustomAttributes</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the custom attributes of the type parameter.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.CodeDom.CodeAttributeDeclarationCollection CustomAttributes { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.codeattributedeclarationcollection\" data-linktype=\"relative-path\">CodeAttributeDeclarationCollection</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.codedom.codeattributedeclarationcollection\" data-linktype=\"relative-path\">CodeAttributeDeclarationCollection</a> that indicates the custom attributes of the type parameter. The default is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.classinterfaceattribute\" title=\"System.Runtime.InteropServices.ClassInterfaceAttribute\" data-linktype=\"relative-path\">ClassInterfaceAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This property can be used to add metadata attributes to the declaration of the type parameter.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> This property is <code>null</code> by default and should be checked before referencing.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_CodeDom_CodeTypeParameter_HasConstructorConstraint_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_CodeDom_CodeTypeParameter_HasConstructorConstraint\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">HasConstructorConstraint</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets a value indicating whether the type parameter has a constructor constraint.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool HasConstructorConstraint { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the type parameter has a constructor constraint; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.classinterfaceattribute\" title=\"System.Runtime.InteropServices.ClassInterfaceAttribute\" data-linktype=\"relative-path\">ClassInterfaceAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>A constructor constraint indicates to the compiler that the type parameter exposes a default public constructor (a public constructor with no parameters).</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_CodeDom_CodeTypeParameter_Name_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_CodeDom_CodeTypeParameter_Name\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Name</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets the name of the type parameter.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string Name { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The name of the type parameter. The default is an empty string (&quot;&quot;).</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.classinterfaceattribute\" title=\"System.Runtime.InteropServices.ClassInterfaceAttribute\" data-linktype=\"relative-path\">ClassInterfaceAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.CodeDom.CodeTypeParameter.yml\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.CodeTypeParameter\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.CodeTypeParameter..ctor\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.CodeTypeParameter.Constraints\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.CodeTypeParameter.CustomAttributes\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.CodeTypeParameter.HasConstructorConstraint\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.CodeTypeParameter.Name\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 02:21 PM\">\r\n<meta name=\"document_id\" content=\"b9df618a-33c1-a98f-b0dd-de4a75f3c6d9\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a type parameter of a generic type or method.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.codedom/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.CodeDom.CodeTypeParameter\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.CodeDom.CodeTypeParameter.yml","open_to_public_contributors":false,"api_name":["System.CodeDom.CodeTypeParameter","System.CodeDom.CodeTypeParameter..ctor","System.CodeDom.CodeTypeParameter.Constraints","System.CodeDom.CodeTypeParameter.CustomAttributes","System.CodeDom.CodeTypeParameter.HasConstructorConstraint","System.CodeDom.CodeTypeParameter.Name"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.CodeDom.CodeTypeParameter","System::CodeDom::CodeTypeParameter","System.CodeDom.CodeTypeParameter.#ctor","System::CodeDom::CodeTypeParameter::#ctor","System.CodeDom.CodeTypeParameter.Constraints","System::CodeDom::CodeTypeParameter::Constraints","System.CodeDom.CodeTypeParameter.CustomAttributes","System::CodeDom::CodeTypeParameter::CustomAttributes","System.CodeDom.CodeTypeParameter.HasConstructorConstraint","System::CodeDom::CodeTypeParameter::HasConstructorConstraint","System.CodeDom.CodeTypeParameter.Name","System::CodeDom::CodeTypeParameter::Name"],"dev_langs":["csharp"],"updated_at":"2017-03-31 02:21 PM","document_id":"b9df618a-33c1-a98f-b0dd-de4a75f3c6d9","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.CodeDom/CodeTypeParameter.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"CodeTypeParameter class | Microsoft Docs","_op_ogTitle":"CodeTypeParameter class","description":"Represents a type parameter of a generic type or method.\n","toc_asset_id":"api/_splitted/System.CodeDom/toc.json","toc_rel":"_splitted/System.CodeDom/toc.json","source_url":"","ms.assetid":"System.CodeDom.CodeTypeParameter","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.codedom.codetypeparameter","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.codedom.codetypeparameter","fileRelativePath":"api/System.CodeDom.CodeTypeParameter.html"},"themesRelativePathToOutputRoot":"_themes/"}