{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">ApplicationContext</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Specifies the contextual information about an application thread.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public class ApplicationContext : IDisposable</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><span class=\"lang-csharp\">ApplicationContext</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example displays two forms and exits the application when both forms are closed. When the application starts and exits, the position of each form is remembered. This example demonstrates how to use an ApplicationContext, along with the <code>Application.Run(context)</code> method, to display multiple forms when the application starts.  </p>\n<p> The class <code>MyApplicationContext</code> inherits from ApplicationContext and keeps track when each form is closed, and exits the current thread when they both are. The class stores the positions of each form for the user. The form position data is stored in a file titled <code>Appdata.txt</code> that is created in the location determined by <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_UserAppDataPath_\" data-linktype=\"relative-path\">UserAppDataPath</a>.  </p>\n<p> The <code>Main</code> method calls <code>Application.Run(context)</code> to start the application, given the ApplicationContext.  </p>\n<pre><code class=\"lang-vb\" name=\"Application#1\">Imports System\nImports System.Drawing\nImports System.Windows.Forms\nImports System.ComponentModel\nImports System.Text\nImports System.IO\n\n&#39; A simple form that represents a window in our application\nPublic Class AppForm1\n    Inherits System.Windows.Forms.Form\n\n    Public Sub New()\n        MyBase.New()\n\n        Me.Size = New System.Drawing.Size(300, 300)\n        Me.Text = &quot;AppForm1&quot;\n\n    End Sub\n\nEnd Class\n\n&#39; A simple form that represents a window in our application\nPublic Class AppForm2\n    Inherits System.Windows.Forms.Form\n\n    Public Sub New()\n        MyBase.New()\n\n        Me.Size = New System.Drawing.Size(300, 300)\n        Me.Text = &quot;AppForm2&quot;\n\n    End Sub\n\nEnd Class\n\n&#39; The class that handles the creation of the application windows\nPublic Class MyApplicationContext\n    Inherits ApplicationContext\n\n    Private formCount As Integer\n    Private form1 As AppForm1\n    Private form2 As AppForm2\n\n    Private form1Position As Rectangle\n    Private form2Position As Rectangle\n\n    Private userData As FileStream\n\n    Public Sub New()\n        MyBase.New()\n        formCount = 0\n\n        &#39; Handle the ApplicationExit event to know when the application is exiting.\n        AddHandler Application.ApplicationExit, AddressOf OnApplicationExit\n\n        Try\n            &#39; Create a file that the application will store user specific data in.\n            userData = New FileStream(Application.UserAppDataPath + &quot;\\appdata.txt&quot;, FileMode.OpenOrCreate)\n\n        Catch e As IOException\n            &#39; Inform the user that an error occurred.\n            MessageBox.Show(&quot;An error occurred while attempting to show the application.&quot; + _\n                            &quot;The error is:&quot; + e.ToString())\n\n            &#39; Exit the current thread instead of showing the windows.\n            ExitThread()\n        End Try\n\n        &#39; Create both application forms and handle the Closed event\n        &#39; to know when both forms are closed.\n        form1 = New AppForm1()\n        AddHandler form1.Closed, AddressOf OnFormClosed\n        AddHandler form1.Closing, AddressOf OnFormClosing\n        formCount = formCount + 1\n\n        form2 = New AppForm2()\n        AddHandler form2.Closed, AddressOf OnFormClosed\n        AddHandler form2.Closing, AddressOf OnFormClosing\n        formCount = formCount + 1\n\n        &#39; Get the form positions based upon the user specific data.\n        If (ReadFormDataFromFile()) Then\n            &#39; If the data was read from the file, set the form\n            &#39; positions manually.\n            form1.StartPosition = FormStartPosition.Manual\n            form2.StartPosition = FormStartPosition.Manual\n\n            form1.Bounds = form1Position\n            form2.Bounds = form2Position\n        End If\n\n        &#39; Show both forms.\n        form1.Show()\n        form2.Show()\n    End Sub\n\n    Private Sub OnApplicationExit(ByVal sender As Object, ByVal e As EventArgs)\n        &#39; When the application is exiting, write the application data to the\n        &#39; user file and close it.\n        WriteFormDataToFile()\n\n        Try\n            &#39; Ignore any errors that might occur while closing the file handle.\n            userData.Close()\n        Catch\n        End Try\n    End Sub\n\n    Private Sub OnFormClosing(ByVal sender As Object, ByVal e As CancelEventArgs)\n        &#39; When a form is closing, remember the form position so it\n        &#39; can be saved in the user data file.\n        If TypeOf sender Is AppForm1 Then\n            form1Position = CType(sender, Form).Bounds\n        ElseIf TypeOf sender Is AppForm2 Then\n            form2Position = CType(sender, Form).Bounds\n        End If\n    End Sub\n    \n    Private Sub OnFormClosed(ByVal sender As Object, ByVal e As EventArgs)\n        &#39; When a form is closed, decrement the count of open forms.\n\n        &#39; When the count gets to 0, exit the app by calling\n        &#39; ExitThread().\n        formCount = formCount - 1\n        If (formCount = 0) Then\n            ExitThread()\n        End If\n    End Sub\n\n    Private Function WriteFormDataToFile() As Boolean\n        &#39; Write the form positions to the file.\n        Dim encoding As UTF8Encoding = New UTF8Encoding()\n\n        Dim rectConv As RectangleConverter = New RectangleConverter()\n        Dim form1pos As String = rectConv.ConvertToString(form1Position)\n        Dim form2pos As String = rectConv.ConvertToString(form2Position)\n\n        Dim dataToWrite As Byte() = encoding.GetBytes(&quot;~&quot; + form1pos + &quot;~&quot; + form2pos)\n\n        Try\n            &#39; Set the write position to the start of the file and write\n            userData.Seek(0, SeekOrigin.Begin)\n            userData.Write(dataToWrite, 0, dataToWrite.Length)\n            userData.Flush()\n\n            userData.SetLength(dataToWrite.Length)\n            Return True\n\n        Catch\n            &#39; An error occurred while attempting to write, return false.\n            Return False\n        End Try\n\n    End Function\n\n    Private Function ReadFormDataFromFile() As Boolean\n        &#39; Read the form positions from the file.\n        Dim encoding As UTF8Encoding = New UTF8Encoding()\n        Dim data As String\n\n        If (userData.Length &lt;&gt; 0) Then\n            Dim dataToRead(userData.Length) As Byte\n\n            Try\n                &#39; Set the read position to the start of the file and read.\n                userData.Seek(0, SeekOrigin.Begin)\n                userData.Read(dataToRead, 0, dataToRead.Length)\n\n            Catch e As IOException\n                Dim errorInfo As String = e.ToString()\n                &#39; An error occurred while attempt to read, return false.\n                Return False\n            End Try\n\n            &#39; Parse out the data to get the window rectangles\n            data = encoding.GetString(dataToRead)\n\n            Try\n                &#39; Convert the string data to rectangles\n                Dim rectConv As RectangleConverter = New RectangleConverter()\n                Dim form1pos As String = data.Substring(1, data.IndexOf(&quot;~&quot;, 1) - 1)\n\n                form1Position = CType(rectConv.ConvertFromString(form1pos), Rectangle)\n\n                Dim form2pos As String = data.Substring(data.IndexOf(&quot;~&quot;, 1) + 1)\n                form2Position = CType(rectConv.ConvertFromString(form2pos), Rectangle)\n\n                Return True\n\n            Catch\n                &#39; Error occurred while attempting to convert the rectangle data.\n                &#39; Return false to use default values.\n                Return False\n            End Try\n\n        Else\n            &#39; No data in the file, return false to use default values.\n            Return False\n        End If\n    End Function\n\nEnd Class\n\nPublic Module MyApplication\n    Public Sub Main()\n        &#39; Create the MyApplicationContext, that derives from ApplicationContext,\n        &#39; that manages when the application should exit.\n\n        Dim context As MyApplicationContext = New MyApplicationContext()\n\n        &#39; Run the application with the specific context. It will exit when\n        &#39; all forms are closed.\n        Application.Run(context)\n    End Sub\nEnd Module\n</code></pre><pre><code class=\"lang-cpp\" name=\"Application#1\">#using &lt;System.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.Windows.Forms.dll&gt;\n\nusing namespace System;\nusing namespace System::Drawing;\nusing namespace System::Windows::Forms;\nusing namespace System::ComponentModel;\nusing namespace System::Text;\nusing namespace System::IO;\n\n// A simple form that represents a window in our application\npublic ref class AppForm2: public System::Windows::Forms::Form\n{\npublic:\n   AppForm2()\n   {\n      this-&gt;Size = System::Drawing::Size( 300, 300 );\n      this-&gt;Text = &quot;AppForm2&quot;;\n   }\n\n};\n\n\n// A simple form that represents a window in our application\npublic ref class AppForm1: public System::Windows::Forms::Form\n{\npublic:\n   AppForm1()\n   {\n      this-&gt;Size = System::Drawing::Size( 300, 300 );\n      this-&gt;Text = &quot;AppForm1&quot;;\n   }\n\n};\n\n\n// The class that handles the creation of the application windows\nref class MyApplicationContext: public ApplicationContext\n{\nprivate:\n   int formCount;\n   AppForm1^ form1;\n   AppForm2^ form2;\n   System::Drawing::Rectangle form1Position;\n   System::Drawing::Rectangle form2Position;\n   FileStream^ userData;\n\npublic:\n\n   MyApplicationContext()\n   {\n      formCount = 0;\n      \n      // Handle the ApplicationExit event to know when the application is exiting.\n      Application::ApplicationExit += gcnew EventHandler( this, &amp;MyApplicationContext::OnApplicationExit );\n      try\n      {\n         \n         // Create a file that the application will store user specific data in.\n         userData = gcnew FileStream( String::Concat( Application::UserAppDataPath, &quot;\\\\appdata.txt&quot; ),FileMode::OpenOrCreate );\n      }\n      catch ( IOException^ e ) \n      {\n         \n         // Inform the user that an error occurred.\n         MessageBox::Show( &quot;An error occurred while attempting to show the application. The error is: {0}&quot;, dynamic_cast&lt;String^&gt;(e) );\n         \n         // Exit the current thread instead of showing the windows.\n         ExitThread();\n      }\n\n      \n      // Create both application forms and handle the Closed event\n      // to know when both forms are closed.\n      form1 = gcnew AppForm1;\n      form1-&gt;Closed += gcnew EventHandler( this, &amp;MyApplicationContext::OnFormClosed );\n      form1-&gt;Closing += gcnew CancelEventHandler( this, &amp;MyApplicationContext::OnFormClosing );\n      formCount++;\n      form2 = gcnew AppForm2;\n      form2-&gt;Closed += gcnew EventHandler( this, &amp;MyApplicationContext::OnFormClosed );\n      form2-&gt;Closing += gcnew CancelEventHandler( this, &amp;MyApplicationContext::OnFormClosing );\n      formCount++;\n      \n      // Get the form positions based upon the user specific data.\n      if ( ReadFormDataFromFile() )\n      {\n         \n         // If the data was read from the file, set the form\n         // positions manually.\n         form1-&gt;StartPosition = FormStartPosition::Manual;\n         form2-&gt;StartPosition = FormStartPosition::Manual;\n         form1-&gt;Bounds = form1Position;\n         form2-&gt;Bounds = form2Position;\n      }\n\n      \n      // Show both forms.\n      form1-&gt;Show();\n      form2-&gt;Show();\n   }\n\n   void OnApplicationExit( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // When the application is exiting, write the application data to the\n      // user file and close it.\n      WriteFormDataToFile();\n      try\n      {\n         \n         // Ignore any errors that might occur while closing the file handle.\n         userData-&gt;Close();\n      }\n      catch ( Exception^ ) \n      {\n      }\n\n   }\n\n\nprivate:\n\n   void OnFormClosing( Object^ sender, CancelEventArgs^ /*e*/ )\n   {\n      \n      // When a form is closing, remember the form position so it\n      // can be saved in the user data file.\n      if ( dynamic_cast&lt;AppForm1^&gt;(sender) != nullptr )\n            form1Position = (dynamic_cast&lt;Form^&gt;(sender))-&gt;Bounds;\n      else\n      if ( dynamic_cast&lt;AppForm1^&gt;(sender) != nullptr )\n            form2Position = (dynamic_cast&lt;Form^&gt;(sender))-&gt;Bounds;\n   }\n\n\n   void OnFormClosed( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // When a form is closed, decrement the count of open forms.\n      // When the count gets to 0, exit the app by calling\n      // ExitThread().\n      formCount--;\n      if ( formCount == 0 )\n      {\n         ExitThread();\n      }\n   }\n\n\n   bool WriteFormDataToFile()\n   {\n      \n      // Write the form positions to the file.\n      UTF8Encoding^ encoding = gcnew UTF8Encoding;\n      RectangleConverter^ rectConv = gcnew RectangleConverter;\n      String^ form1pos = rectConv-&gt;ConvertToString( form1Position );\n      String^ form2pos = rectConv-&gt;ConvertToString( form2Position );\n      array&lt;Byte&gt;^dataToWrite = encoding-&gt;GetBytes( String::Concat( &quot;~&quot;, form1pos, &quot;~&quot;, form2pos ) );\n      try\n      {\n         \n         // Set the write position to the start of the file and write\n         userData-&gt;Seek( 0, SeekOrigin::Begin );\n         userData-&gt;Write( dataToWrite, 0, dataToWrite-&gt;Length );\n         userData-&gt;Flush();\n         userData-&gt;SetLength( dataToWrite-&gt;Length );\n         return true;\n      }\n      catch ( Exception^ ) \n      {\n         \n         // An error occurred while attempting to write, return false.\n         return false;\n      }\n\n   }\n\n   bool ReadFormDataFromFile()\n   {\n      \n      // Read the form positions from the file.\n      UTF8Encoding^ encoding = gcnew UTF8Encoding;\n      String^ data;\n      if ( userData-&gt;Length != 0 )\n      {\n         array&lt;Byte&gt;^dataToRead = gcnew array&lt;Byte&gt;(userData-&gt;Length);\n         try\n         {\n            \n            // Set the read position to the start of the file and read.\n            userData-&gt;Seek( 0, SeekOrigin::Begin );\n            userData-&gt;Read( dataToRead, 0, dataToRead-&gt;Length );\n         }\n         catch ( IOException^ e ) \n         {\n            String^ errorInfo = dynamic_cast&lt;String^&gt;(e);\n            \n            // An error occurred while attempt to read, return false.\n            return false;\n         }\n\n         \n         // Parse out the data to get the window rectangles\n         data = encoding-&gt;GetString( dataToRead );\n         try\n         {\n            \n            // Convert the String* data to rectangles\n            RectangleConverter^ rectConv = gcnew RectangleConverter;\n            String^ form1pos = data-&gt;Substring( 1, data-&gt;IndexOf( &quot;~&quot;, 1 ) - 1 );\n            form1Position =  *safe_cast&lt;Rectangle^&gt;(rectConv-&gt;ConvertFromString( form1pos ));\n            String^ form2pos = data-&gt;Substring( data-&gt;IndexOf( &quot;~&quot;, 1 ) + 1 );\n            form2Position =  *safe_cast&lt;Rectangle^&gt;(rectConv-&gt;ConvertFromString( form2pos ));\n            return true;\n         }\n         catch ( Exception^ ) \n         {\n            \n            // Error occurred while attempting to convert the rectangle data.\n            // Return false to use default values.\n            return false;\n         }\n\n      }\n      else\n      {\n         \n         // No data in the file, return false to use default values.\n         return false;\n      }\n   }\n\n};\n\n\n\n[STAThread]\nint main()\n{\n   \n   // Create the MyApplicationContext, that derives from ApplicationContext,\n   // that manages when the application should exit.\n   MyApplicationContext^ context = gcnew MyApplicationContext;\n   \n   // Run the application with the specific context. It will exit when\n   // all forms are closed.\n   Application::Run( context );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Application#1\">using System;\nusing System.Drawing;\nusing System.Windows.Forms;\nusing System.ComponentModel;\nusing System.Text;\nusing System.IO;\n\nnamespace MyApplication\n{\n    // A simple form that represents a window in our application\n    public class AppForm2 : System.Windows.Forms.Form {\n        public AppForm2(){ \n            this.Size = new System.Drawing.Size(300,300);\n            this.Text = &quot;AppForm2&quot;;\n        }\n    }\n\n    // A simple form that represents a window in our application\n    public class AppForm1 : System.Windows.Forms.Form {\n        public AppForm1(){ \n            this.Size = new System.Drawing.Size(300,300);\n            this.Text = &quot;AppForm1&quot;;\n        }\n    }\n\n    // The class that handles the creation of the application windows\n    class MyApplicationContext : ApplicationContext {\n    \n        private int formCount;\n        private AppForm1 form1;\n        private AppForm2 form2;\n\n        private Rectangle form1Position;\n        private Rectangle form2Position;\n\n        private FileStream userData;\n\n        private MyApplicationContext() {\n            formCount = 0;\n\n            // Handle the ApplicationExit event to know when the application is exiting.\n            Application.ApplicationExit += new EventHandler(this.OnApplicationExit);\n\n            try {\n                // Create a file that the application will store user specific data in.\n                userData = new FileStream(Application.UserAppDataPath + &quot;\\\\appdata.txt&quot;, FileMode.OpenOrCreate);\n\n            } catch(IOException e) {\n                // Inform the user that an error occurred.\n                MessageBox.Show(&quot;An error occurred while attempting to show the application.&quot; + \n                                &quot;The error is:&quot; + e.ToString());\n\n                // Exit the current thread instead of showing the windows.\n                ExitThread();\n            }\n\n            // Create both application forms and handle the Closed event\n            // to know when both forms are closed.\n            form1 = new AppForm1();\n            form1.Closed += new EventHandler(OnFormClosed);            \n            form1.Closing += new CancelEventHandler(OnFormClosing);            \n            formCount++;\n\n            form2 = new AppForm2();\n            form2.Closed += new EventHandler(OnFormClosed);            \n            form2.Closing += new CancelEventHandler(OnFormClosing);            \n            formCount++;\n\n            // Get the form positions based upon the user specific data.\n            if (ReadFormDataFromFile()) {\n                // If the data was read from the file, set the form\n                // positions manually.\n                form1.StartPosition = FormStartPosition.Manual;\n                form2.StartPosition = FormStartPosition.Manual;\n                \n                form1.Bounds = form1Position;\n                form2.Bounds = form2Position;\n            }\n\n            // Show both forms.\n            form1.Show();\n            form2.Show();\n        }\n\n        private void OnApplicationExit(object sender, EventArgs e) {\n            // When the application is exiting, write the application data to the\n            // user file and close it.\n            WriteFormDataToFile();\n\n            try {\n                // Ignore any errors that might occur while closing the file handle.\n                userData.Close();\n            } catch {}\n        }\n\n        private void OnFormClosing(object sender, CancelEventArgs e) {\n            // When a form is closing, remember the form position so it\n            // can be saved in the user data file.\n            if (sender is AppForm1) \n                form1Position = ((Form)sender).Bounds;\n            else if (sender is AppForm2)\n                form2Position = ((Form)sender).Bounds;\n        }\n\n        private void OnFormClosed(object sender, EventArgs e) {\n            // When a form is closed, decrement the count of open forms.\n\n            // When the count gets to 0, exit the app by calling\n            // ExitThread().\n            formCount--;\n            if (formCount == 0) {\n                ExitThread();\n            }\n        }\n\n        private bool WriteFormDataToFile(){\n            // Write the form positions to the file.\n            UTF8Encoding encoding = new UTF8Encoding();\n\n            RectangleConverter rectConv = new RectangleConverter();\n            String form1pos = rectConv.ConvertToString(form1Position);\n            String form2pos = rectConv.ConvertToString(form2Position);\n\n            byte[] dataToWrite = encoding.GetBytes(&quot;~&quot; + form1pos + &quot;~&quot; + form2pos);\n\n            try {\n                // Set the write position to the start of the file and write\n                userData.Seek(0,SeekOrigin.Begin);\n                userData.Write(dataToWrite, 0, dataToWrite.Length);\n                userData.Flush();\n\n                userData.SetLength(dataToWrite.Length);\n                return true;\n\n            } catch {\n                // An error occurred while attempting to write, return false.\n                return false;\n            }\n\n        }\n\n        private bool ReadFormDataFromFile(){\n            // Read the form positions from the file.\n            UTF8Encoding encoding = new UTF8Encoding();\n            String data;\n\n            if (userData.Length != 0) {\n                byte[] dataToRead = new Byte[userData.Length];\n\n                try {\n                    // Set the read position to the start of the file and read.\n                    userData.Seek(0, SeekOrigin.Begin);\n                    userData.Read(dataToRead, 0, dataToRead.Length);\n\n                } catch (IOException e) {\n                    String errorInfo = e.ToString();\n                    // An error occurred while attempt to read, return false.\n                    return false;\n                }\n\n                // Parse out the data to get the window rectangles\n                data = encoding.GetString(dataToRead);\n\n                try {\n                    // Convert the string data to rectangles\n                    RectangleConverter rectConv = new RectangleConverter();\n                    String form1pos = data.Substring(1,data.IndexOf(&quot;~&quot;,1)-1);\n\n                    form1Position = (Rectangle)rectConv.ConvertFromString(form1pos);\n\n                    String form2pos = data.Substring(data.IndexOf(&quot;~&quot;,1)+1);\n                    form2Position = (Rectangle)rectConv.ConvertFromString(form2pos);\n\n                    return true;\n\n                } catch {\n                    // Error occurred while attempting to convert the rectangle data.\n                    // Return false to use default values.\n                    return false;\n                }\n\n            } else {\n                // No data in the file, return false to use default values.\n                return false;\n            }\n        }        \n        \n        [STAThread]\n        static void Main(string[] args) {\n            \n            // Create the MyApplicationContext, that derives from ApplicationContext,\n            // that manages when the application should exit.\n\n            MyApplicationContext context = new MyApplicationContext();\n\n            // Run the application with the specific context. It will exit when\n            // all forms are closed.\n            Application.Run(context);\n\n        }\n    }\n}\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>You can use the ApplicationContext class to redefine the circumstances that cause a message loop to exit. By default, the ApplicationContext listens to the <a class=\"xref\" href=\"system.windows.forms.form#System_Windows_Forms_Form_Closed\" data-linktype=\"relative-path\">Closed</a> event on the application&#39;s main <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a>, then exits the thread&#39;s message loop.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Windows_Forms_ApplicationContext__ctor_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_Forms_ApplicationContext__ctor\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ApplicationContext()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.forms.applicationcontext\" data-linktype=\"relative-path\">ApplicationContext</a> class with no context.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public ApplicationContext ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Windows_Forms_ApplicationContext__ctor_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_Forms_ApplicationContext__ctor_System_Windows_Forms_Form_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ApplicationContext(Form)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.forms.applicationcontext\" data-linktype=\"relative-path\">ApplicationContext</a> class with the specified <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public ApplicationContext (System.Windows.Forms.Form mainForm);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>mainForm</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The main <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> of the application to use for context.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If <a class=\"xref\" href=\"system.windows.forms.applicationcontext#System_Windows_Forms_ApplicationContext_OnMainFormClosed_\" data-linktype=\"relative-path\">OnMainFormClosed</a> is not overridden, the message loop of the thread terminates when <a class=\"xref\" href=\"system.windows.forms.applicationcontext#System_Windows_Forms_ApplicationContext_MainForm_\" data-linktype=\"relative-path\">MainForm</a> is closed.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Windows_Forms_ApplicationContext_MainForm_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_Forms_ApplicationContext_MainForm\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">MainForm</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets the <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> to use as context.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Windows.Forms.Form MainForm { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> to use as context.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This property determines the main <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> for this context. This property can change at any time. If <a class=\"xref\" href=\"system.windows.forms.applicationcontext#System_Windows_Forms_ApplicationContext_OnMainFormClosed_\" data-linktype=\"relative-path\">OnMainFormClosed</a> is not overridden, the message loop of the thread terminates when the <code>mainForm</code> parameter closes.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Windows_Forms_ApplicationContext_Tag_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_Forms_ApplicationContext_Tag\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Tag</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets an object that contains data about the control.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public object Tag { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> that contains data about the control. The default is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.componentmodel.bindableattribute\" title=\"System.ComponentModel.BindableAttribute\" data-linktype=\"relative-path\">BindableAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.componentmodel.defaultvalueattribute\" title=\"System.ComponentModel.DefaultValueAttribute\" data-linktype=\"relative-path\">DefaultValueAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.componentmodel.localizableattribute\" title=\"System.ComponentModel.LocalizableAttribute\" data-linktype=\"relative-path\">LocalizableAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.componentmodel.typeconverterattribute\" title=\"System.ComponentModel.TypeConverterAttribute\" data-linktype=\"relative-path\">TypeConverterAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Any type derived from the <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> class can be assigned to this property. If the Tag property is set through the Windows Forms designer, only text can be assigned.  </p>\n<p> A common use for the Tag property is to store data that is closely associated with the control. For example, if you have a control that displays information about a customer, you might store a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> that contains the customer&#39;s order history in that control&#39;s Tag property so the data can be accessed quickly.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Windows_Forms_ApplicationContext_Dispose_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_Forms_ApplicationContext_Dispose\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Dispose()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Releases all resources used by the <a class=\"xref\" href=\"system.windows.forms.applicationcontext\" data-linktype=\"relative-path\">ApplicationContext</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void Dispose ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Call Dispose when you are finished using the <a class=\"xref\" href=\"system.windows.forms.applicationcontext\" data-linktype=\"relative-path\">ApplicationContext</a>. The Dispose method leaves the <a class=\"xref\" href=\"system.windows.forms.applicationcontext\" data-linktype=\"relative-path\">ApplicationContext</a> in an unusable state. After calling Dispose, you must release all references to the <a class=\"xref\" href=\"system.windows.forms.applicationcontext\" data-linktype=\"relative-path\">ApplicationContext</a> so the garbage collector can reclaim the memory that the <a class=\"xref\" href=\"system.windows.forms.applicationcontext\" data-linktype=\"relative-path\">ApplicationContext</a> was occupying. For more information, see <a href=\"../topic/cleaning%20up%20unmanaged%20resources\" data-linktype=\"relative-path\">Cleaning Up Unmanaged Resources</a> and <a href=\"../topic/implementing%20a%20dispose%20method\" data-linktype=\"relative-path\">Implementing a Dispose Method</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Always call Dispose before you release your last reference to the <a class=\"xref\" href=\"system.windows.forms.applicationcontext\" data-linktype=\"relative-path\">ApplicationContext</a>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <a class=\"xref\" href=\"system.windows.forms.applicationcontext\" data-linktype=\"relative-path\">ApplicationContext</a> object&#39;s <code>Finalize</code> method.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Windows_Forms_ApplicationContext_Dispose_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_Forms_ApplicationContext_Dispose_System_Boolean_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Dispose(Boolean)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Releases the unmanaged resources used by the <a class=\"xref\" href=\"system.windows.forms.applicationcontext\" data-linktype=\"relative-path\">ApplicationContext</a> and optionally releases the managed resources.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void Dispose (bool disposing);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>disposing</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> to release both managed and unmanaged resources; <code>false</code> to release only unmanaged resources.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method is called by the public <code>Dispose()</code> method and the <a class=\"xref\" href=\"system.object#System_Object_Finalize_\" data-linktype=\"relative-path\">Finalize</a> method. <code>Dispose()</code> invokes the protected Dispose method with the <code>disposing</code> parameter set to <code>true</code>. <a class=\"xref\" href=\"system.object#System_Object_Finalize_\" data-linktype=\"relative-path\">Finalize</a> invokes <code>Dispose</code> with <code>disposing</code> set to <code>false</code>.  </p>\n<p> When the <code>disposing</code> parameter is true, this method releases all resources held by any managed objects that this <a class=\"xref\" href=\"system.windows.forms.applicationcontext\" data-linktype=\"relative-path\">ApplicationContext</a> references. This method invokes the <code>Dispose()</code> method of each referenced object.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Windows_Forms_ApplicationContext_ExitThread_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_Forms_ApplicationContext_ExitThread\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ExitThread()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Terminates the message loop of the thread.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void ExitThread ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method calls <a class=\"xref\" href=\"system.windows.forms.applicationcontext#System_Windows_Forms_ApplicationContext_ExitThreadCore_\" data-linktype=\"relative-path\">ExitThreadCore</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> ExitThread and <a class=\"xref\" href=\"system.windows.forms.applicationcontext#System_Windows_Forms_ApplicationContext_ExitThreadCore_\" data-linktype=\"relative-path\">ExitThreadCore</a> do not actually cause the thread to terminate. These methods raise the <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_ThreadExit\" data-linktype=\"relative-path\">ThreadExit</a> event to which the <a class=\"xref\" href=\"system.windows.forms.application\" data-linktype=\"relative-path\">Application</a> object listens. The <a class=\"xref\" href=\"system.windows.forms.application\" data-linktype=\"relative-path\">Application</a> object then terminates the thread.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Windows_Forms_ApplicationContext_ExitThreadCore_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_Forms_ApplicationContext_ExitThreadCore\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ExitThreadCore()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Terminates the message loop of the thread.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void ExitThreadCore ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method is called from <a class=\"xref\" href=\"system.windows.forms.applicationcontext#System_Windows_Forms_ApplicationContext_ExitThread_\" data-linktype=\"relative-path\">ExitThread</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> <a class=\"xref\" href=\"system.windows.forms.applicationcontext#System_Windows_Forms_ApplicationContext_ExitThread_\" data-linktype=\"relative-path\">ExitThread</a> and ExitThreadCore do not actually cause the thread to terminate. These methods raise the <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_ThreadExit\" data-linktype=\"relative-path\">ThreadExit</a> event to which the <a class=\"xref\" href=\"system.windows.forms.application\" data-linktype=\"relative-path\">Application</a> object listens. The <a class=\"xref\" href=\"system.windows.forms.application\" data-linktype=\"relative-path\">Application</a> object then terminates the thread.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Windows_Forms_ApplicationContext_Finalize_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_Forms_ApplicationContext_Finalize\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Finalize()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Attempts to free resources and perform other cleanup operations before the application context is reclaimed by garbage collection.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">~ApplicationContext ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method overrides <a class=\"xref\" href=\"system.object#System_Object_Finalize_\" data-linktype=\"relative-path\">Finalize</a> and cleans up resources by calling <code>Dispose(false)</code>. Override <code>Dispose(Boolean)</code> to customize the cleanup.  </p>\n<p> Application code should not call this method; an object&#39;s <code>Finalize</code> method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <a class=\"xref\" href=\"system.gc#System_GC_SuppressFinalize_\" data-linktype=\"relative-path\">SuppressFinalize</a> method.  </p>\n<p> For more information, see <a href=\"http://msdn.microsoft.com/en-us/fd376774-1643-499b-869e-9546a3aeea70\" data-linktype=\"external\">Finalize Methods and Destructors</a>, <a href=\"../topic/cleaning%20up%20unmanaged%20resources\" data-linktype=\"relative-path\">Cleaning Up Unmanaged Resources</a>, and <a href=\"http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3\" data-linktype=\"external\">Overriding the Finalize Method</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Windows_Forms_ApplicationContext_OnMainFormClosed_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_Forms_ApplicationContext_OnMainFormClosed_System_Object_System_EventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnMainFormClosed(Object, EventArgs)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Calls <span class=\"xref\">stem.Windows.Forms.ApplicationContext.ExitThreadCore*</span>, which raises the <a class=\"xref\" href=\"system.windows.forms.applicationcontext#System_Windows_Forms_ApplicationContext_ThreadExit\" data-linktype=\"relative-path\">ThreadExit</a> event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnMainFormClosed (object sender, EventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>sender</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The object that raised the event.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The default implementation of this method calls <a class=\"xref\" href=\"system.windows.forms.applicationcontext#System_Windows_Forms_ApplicationContext_ExitThreadCore_\" data-linktype=\"relative-path\">ExitThreadCore</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Events\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_Forms_ApplicationContext_ThreadExit\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ThreadExit</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the message loop of the thread should be terminated, by calling <span class=\"xref\">stem.Windows.Forms.ApplicationContext.ExitThread*</span>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event EventHandler ThreadExit;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Windows.Forms.ApplicationContext.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.ApplicationContext\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.ApplicationContext..ctor\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.ApplicationContext.Dispose\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.ApplicationContext.ExitThread\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.ApplicationContext.ExitThreadCore\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.ApplicationContext.Finalize\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.ApplicationContext.MainForm\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.ApplicationContext.OnMainFormClosed\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.ApplicationContext.Tag\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.ApplicationContext.ThreadExit\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.ApplicationContext.add_ThreadExit\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.ApplicationContext.remove_ThreadExit\">\r\n<meta name=\"APILocation\" content=\"System.Windows.Forms.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 02:21 PM\">\r\n<meta name=\"document_id\" content=\"0f6bb3a6-2a81-fc04-2a2b-2ec684a7fe71\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Specifies the contextual information about an application thread.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.windows.forms/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Forms.ApplicationContext\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Windows.Forms.ApplicationContext.yml","open_to_public_contributors":false,"api_name":["System.Windows.Forms.ApplicationContext","System.Windows.Forms.ApplicationContext..ctor","System.Windows.Forms.ApplicationContext.Dispose","System.Windows.Forms.ApplicationContext.ExitThread","System.Windows.Forms.ApplicationContext.ExitThreadCore","System.Windows.Forms.ApplicationContext.Finalize","System.Windows.Forms.ApplicationContext.MainForm","System.Windows.Forms.ApplicationContext.OnMainFormClosed","System.Windows.Forms.ApplicationContext.Tag","System.Windows.Forms.ApplicationContext.ThreadExit","System.Windows.Forms.ApplicationContext.add_ThreadExit","System.Windows.Forms.ApplicationContext.remove_ThreadExit"],"api_location":["System.Windows.Forms.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Forms.ApplicationContext","System::Windows::Forms::ApplicationContext","System.Windows.Forms.ApplicationContext.#ctor","System::Windows::Forms::ApplicationContext::#ctor","System.Windows.Forms.ApplicationContext.Dispose","System::Windows::Forms::ApplicationContext::Dispose","System.Windows.Forms.ApplicationContext.ExitThread","System::Windows::Forms::ApplicationContext::ExitThread","System.Windows.Forms.ApplicationContext.ExitThreadCore","System::Windows::Forms::ApplicationContext::ExitThreadCore","System.Windows.Forms.ApplicationContext.Finalize","System::Windows::Forms::ApplicationContext::Finalize","System.Windows.Forms.ApplicationContext.MainForm","System::Windows::Forms::ApplicationContext::MainForm","System.Windows.Forms.ApplicationContext.OnMainFormClosed","System::Windows::Forms::ApplicationContext::OnMainFormClosed","System.Windows.Forms.ApplicationContext.Tag","System::Windows::Forms::ApplicationContext::Tag","System.Windows.Forms.ApplicationContext.ThreadExit","System::Windows::Forms::ApplicationContext::ThreadExit"],"dev_langs":["csharp"],"updated_at":"2017-03-31 02:21 PM","document_id":"0f6bb3a6-2a81-fc04-2a2b-2ec684a7fe71","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Windows.Forms/ApplicationContext.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ApplicationContext class | Microsoft Docs","_op_ogTitle":"ApplicationContext class","description":"Specifies the contextual information about an application thread.\n","toc_asset_id":"api/_splitted/System.Windows.Forms/toc.json","toc_rel":"_splitted/System.Windows.Forms/toc.json","source_url":"","ms.assetid":"System.Windows.Forms.ApplicationContext","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.applicationcontext","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.applicationcontext","fileRelativePath":"api/System.Windows.Forms.ApplicationContext.html"},"themesRelativePathToOutputRoot":"_themes/"}