{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">SignatureDescription</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Contains information about the properties of a digital signature.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic class SignatureDescription</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><span class=\"lang-csharp\">SignatureDescription</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example demonstrates how to use members of the SignatureDescription class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.SignatureDescription#2\">using System;\nusing System.Security;\nusing System.Security.Cryptography;\n\nclass SignatureDescriptionImpl\n{\n    [STAThread]\n    static void Main(string[] args)\n    {\n        // Create a digital signature based on RSA encryption.\n        SignatureDescription rsaSignature = CreateRSAPKCS1Signature();\n        ShowProperties(rsaSignature);\n\n        // Create a digital signature based on DSA encryption.\n        SignatureDescription dsaSignature = CreateDSASignature();\n        ShowProperties(dsaSignature);\n\n        // Create a HashAlgorithm using the digest algorithm of the signature.\n        HashAlgorithm hashAlgorithm = dsaSignature.CreateDigest();\n        Console.WriteLine(&quot;\\nHash algorithm for the DigestAlgorithm property:&quot;\n            + &quot; &quot; + hashAlgorithm.ToString());\n\n        // Create an AsymmetricSignatureFormatter instance using the DSA key.\n        DSA dsa = DSA.Create();\n        AsymmetricSignatureFormatter asymmetricFormatter =\n            CreateDSAFormatter(dsa);\n        \n        // Create an AsymmetricSignatureDeformatter instance using the\n        // DSA key.\n        AsymmetricSignatureDeformatter asymmetricDeformatter =\n            CreateDSADeformatter(dsa);\n\n        Console.WriteLine(&quot;This sample completed successfully; &quot; +\n            &quot;press Enter to exit.&quot;);\n        Console.ReadLine();\n    }\n\n    // Create a SignatureDescription for RSA encryption.\n    private static SignatureDescription CreateRSAPKCS1Signature()\n    {\n        SignatureDescription signatureDescription = \n            new SignatureDescription();\n\n        // Set the key algorithm property for RSA encryption.\n        signatureDescription.KeyAlgorithm =\n            &quot;System.Security.Cryptography.RSACryptoServiceProvider&quot;;\n\n        // Set the digest algorithm for RSA encryption using the\n        // SHA1 provider.\n        signatureDescription.DigestAlgorithm =\n            &quot;System.Security.Cryptography.SHA1CryptoServiceProvider&quot;;\n\n        // Set the formatter algorithm with the RSAPKCS1 formatter.\n        signatureDescription.FormatterAlgorithm =\n            &quot;System.Security.Cryptography.RSAPKCS1SignatureFormatter&quot;;\n\n        // Set the formatter algorithm with the RSAPKCS1 deformatter.\n        signatureDescription.DeformatterAlgorithm =\n            &quot;System.Security.Cryptography.RSAPKCS1SignatureDeformatter&quot;;\n\n        return signatureDescription;\n    }\n\n    // Create a SignatureDescription using a constructed SecurityElement for \n    // DSA encryption.\n    private static SignatureDescription CreateDSASignature()\n    {\n        SecurityElement securityElement = new SecurityElement(&quot;DSASignature&quot;);\n\n        // Create new security elements for the four algorithms.\n        securityElement.AddChild(new SecurityElement(\n            &quot;Key&quot;,\n            &quot;System.Security.Cryptography.DSACryptoServiceProvider&quot;));\n        securityElement.AddChild(new SecurityElement(\n            &quot;Digest&quot;,\n            &quot;System.Security.Cryptography.SHA1CryptoServiceProvider&quot;)); \n        securityElement.AddChild(new SecurityElement(\n            &quot;Formatter&quot;,\n            &quot;System.Security.Cryptography.DSASignatureFormatter&quot;));\n        securityElement.AddChild(new SecurityElement(\n            &quot;Deformatter&quot;,\n            &quot;System.Security.Cryptography.DSASignatureDeformatter&quot;));\n\n        SignatureDescription signatureDescription = \n            new SignatureDescription(securityElement);\n\n        return signatureDescription;\n    }\n\n    // Create a signature formatter for DSA encryption.\n    private static AsymmetricSignatureFormatter CreateDSAFormatter(DSA dsa)\n    {\n        // Create a DSA signature formatter for encryption.\n        SignatureDescription signatureDescription = \n            new SignatureDescription();\n        signatureDescription.FormatterAlgorithm =\n            &quot;System.Security.Cryptography.DSASignatureFormatter&quot;;\n\n        AsymmetricSignatureFormatter asymmetricFormatter =\n            signatureDescription.CreateFormatter(dsa);\n\n        Console.WriteLine(&quot;\\nCreated formatter : &quot; + \n            asymmetricFormatter.ToString());\n        return asymmetricFormatter;\n    }\n\n    // Create a signature deformatter for DSA decryption.\n    private static AsymmetricSignatureDeformatter CreateDSADeformatter(\n        DSA dsa)\n    {\n        // Create a DSA signature deformatter to verify the signature.\n        SignatureDescription signatureDescription = \n            new SignatureDescription();\n        signatureDescription.DeformatterAlgorithm =\n            &quot;System.Security.Cryptography.DSASignatureDeformatter&quot;;\n\n        AsymmetricSignatureDeformatter asymmetricDeformatter =\n            signatureDescription.CreateDeformatter(dsa);\n\n        Console.WriteLine(&quot;\\nCreated deformatter : &quot; + \n            asymmetricDeformatter.ToString());\n        return asymmetricDeformatter;\n    }\n\n    // Display to the console the properties of the specified\n    // SignatureDescription.\n    private static void ShowProperties(\n        SignatureDescription signatureDescription)\n    {\n        // Retrieve the class path for the specified SignatureDescription.\n        string classDescription = signatureDescription.ToString();\n\n        string deformatterAlgorithm = \n            signatureDescription.DeformatterAlgorithm;\n        string formatterAlgorithm = signatureDescription.FormatterAlgorithm;\n        string digestAlgorithm = signatureDescription.DigestAlgorithm;\n        string keyAlgorithm = signatureDescription.KeyAlgorithm;\n\n        Console.WriteLine(&quot;\\n** &quot; + classDescription + &quot; **&quot;);\n        Console.WriteLine(&quot;DeformatterAlgorithm : &quot; + deformatterAlgorithm);\n        Console.WriteLine(&quot;FormatterAlgorithm : &quot; + formatterAlgorithm);\n        Console.WriteLine(&quot;DigestAlgorithm : &quot; + digestAlgorithm);\n        Console.WriteLine(&quot;KeyAlgorithm : &quot; + keyAlgorithm);\n    }\n}\n//\n// This sample produces the following output:\n// \n// ** System.Security.Cryptography.SignatureDescription **\n// DeformatterAlgorithm : System.Security.Cryptography.\n// RSAPKCS1SignatureDeformatter\n// \n// FormatterAlgorithm : System.Security.Cryptography.\n// RSAPKCS1SignatureFormatter\n// DigestAlgorithm : System.Security.Cryptography.SHA1CryptoServiceProvider\n// KeyAlgorithm : System.Security.Cryptography.RSACryptoServiceProvider\n// \n// ** System.Security.Cryptography.SignatureDescription **\n// DeformatterAlgorithm : System.Security.Cryptography.DSASignatureDeformatter\n// FormatterAlgorithm : System.Security.Cryptography.DSASignatureFormatter\n// DigestAlgorithm : System.Security.Cryptography.SHA1CryptoServiceProvider\n// KeyAlgorithm : System.Security.Cryptography.DSACryptoServiceProvider\n// \n// Hash algorithm for the DigestAlgorithm property: \n// System.Security.Cryptography.SH\n// A1CryptoServiceProvider\n// \n// Created formatter : System.Security.Cryptography.DSASignatureFormatter\n// \n// Created deformatter : System.Security.Cryptography.DSASignatureDeformatter\n// This sample completed successfully; press Enter to exit.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.SignatureDescription#2\">Imports System\nImports System.Security\nImports System.Security.Cryptography\n\nPublic Class Form1\n    Inherits System.Windows.Forms.Form\n\n    &#39; Event handler for Run button.\n    Private Sub Button1_Click( _\n        ByVal sender As System.Object, _\n        ByVal e As System.EventArgs) Handles Button1.Click\n\n        tbxOutput.Cursor = Cursors.WaitCursor\n        tbxOutput.Text = &quot;&quot;\n\n        &#39; Create a digital signature based on RSA encryption.\n        Dim rsaSignature As SignatureDescription = CreateRSAPKCS1Signature()\n        ShowProperties(rsaSignature)\n\n        &#39; Create a digital signature based on DSA encryption.\n        Dim dsaSignature As SignatureDescription = CreateDSASignature()\n        ShowProperties(dsaSignature)\n\n        &#39; Create a HashAlgorithm using the digest algorithm of the signature.\n        Dim hashAlgorithm As HashAlgorithm = dsaSignature.CreateDigest()\n        WriteLine(&quot;Hash algorithm for the DigestAlgorithm property: &quot; + _\n            hashAlgorithm.ToString())\n\n        &#39; Create an AsymmetricSignatureFormatter instance using the DSA key.\n        Dim dsa As DSA = dsa.Create()\n        Dim asymmetricFormatter As AsymmetricSignatureFormatter = _\n            CreateDSAFormatter(dsa)\n\n        &#39; Create an AsymmetricSignatureDeformatter instance using the DSA key.\n        dim asymmetricDeformatter as AsymmetricSignatureDeformatter = _\n            CreateDSADeformatter(dsa)\n\n        &#39; Align interface and conclude application.\n        WriteLine(&quot;This sample completed successfully;&quot; + _\n            &quot; press Exit to continue.&quot;)\n\n        &#39; Reset the cursor to the default look.\n        tbxOutput.Cursor = Cursors.Default\n    End Sub\n\n    &#39; Create a SignatureDescription for RSA encryption.\n    Private Function CreateRSAPKCS1Signature() As SignatureDescription\n        Dim signatureDescription As New SignatureDescription\n\n        &#39; Set the key algorithm property for RSA encryption.\n        signatureDescription.KeyAlgorithm = _\n            &quot;System.Security.Cryptography.RSACryptoServiceProvider&quot;\n\n        &#39; Set the digest algorithm for RSA encryption using the SHA1 provider.\n        signatureDescription.DigestAlgorithm = _\n            &quot;System.Security.Cryptography.SHA1CryptoServiceProvider&quot;\n\n        &#39; Set the formatter algorithm with the RSAPKCS1 formatter.\n        signatureDescription.FormatterAlgorithm = _\n            &quot;System.Security.Cryptography.RSAPKCS1SignatureFormatter&quot;\n\n        &#39; Set the formatter algorithm with the RSAPKCS1 deformatter.\n        signatureDescription.DeformatterAlgorithm = _\n            &quot;System.Security.Cryptography.RSAPKCS1SignatureDeformatter&quot;\n\n        Return SignatureDescription\n    End Function\n\n    &#39; Create a SignatureDescription using a constructed SecurityElement for \n    &#39; DSA encryption.\n    Private Function CreateDSASignature() As SignatureDescription\n        Dim securityElement As New SecurityElement(&quot;DSASignature&quot;)\n\n        &#39; Create new security elements for the four algorithms.\n        securityElement.AddChild(new SecurityElement( _\n            &quot;Key&quot;, _\n            &quot;System.Security.Cryptography.DSACryptoServiceProvider&quot;))\n        securityElement.AddChild(New SecurityElement( _\n            &quot;Digest&quot;, _\n            &quot;System.Security.Cryptography.SHA1CryptoServiceProvider&quot;))\n        securityElement.AddChild(new SecurityElement( _\n            &quot;Formatter&quot;, _\n            &quot;System.Security.Cryptography.DSASignatureFormatter&quot;))\n        securityElement.AddChild(new SecurityElement( _\n            &quot;Deformatter&quot;, _\n            &quot;System.Security.Cryptography.DSASignatureDeformatter&quot;))\n\n        Dim signatureDescription As New SignatureDescription(securityElement)\n\n        Return signatureDescription\n    End Function\n\n    &#39; Create a signature formatter for DSA encryption.\n    Private Function CreateDSAFormatter(ByVal dsa As DSA) _\n        As AsymmetricSignatureFormatter\n\n        &#39; Create a DSA signature formatter for encryption.\n        Dim signatureDescription As New SignatureDescription\n        signatureDescription.FormatterAlgorithm = _\n            &quot;System.Security.Cryptography.DSASignatureFormatter&quot;\n\n        Dim asymmetricFormatter As AsymmetricSignatureFormatter\n        asymmetricFormatter = signatureDescription.CreateFormatter(dsa)\n\n        WriteLine(&quot;Created formatter : &quot; + asymmetricFormatter.ToString())\n        Return asymmetricFormatter\n    End Function\n\n    &#39; Create a signature deformatter for DSA decryption.\n    Private Function CreateDSADeformatter(ByVal dsa As DSA) _\n        As AsymmetricSignatureDeformatter\n\n        &#39; Create a DSA signature deformatter to verify the signature.\n        Dim signatureDescription As New SignatureDescription\n        signatureDescription.DeformatterAlgorithm = _\n            &quot;System.Security.Cryptography.DSASignatureDeformatter&quot;\n\n        Dim asymmetricDeformatter As AsymmetricSignatureDeformatter\n        asymmetricDeformatter = SignatureDescription.CreateDeformatter(dsa)\n\n        WriteLine(&quot;Created deformatter : &quot; + asymmetricDeformatter.ToString())\n        Return asymmetricDeformatter\n    End Function\n\n    &#39; Display to the console the properties of the specified\n    &#39; SignatureDescription.\n    Private Sub ShowProperties(ByVal signatureDescription _\n        As SignatureDescription)\n\n        &#39; Retrieve the class path for the specified SignatureDescription.\n        Dim classDescription As String = signatureDescription.ToString()\n\n        Dim deformatterAlgorithm As String \n        deformatterAlgorithm = signatureDescription.DeformatterAlgorithm\n        Dim formatterAlgorithm As String \n        formatterAlgorithm = signatureDescription.FormatterAlgorithm\n        Dim digestAlgorithm As String \n        digestAlgorithm = signatureDescription.DigestAlgorithm\n        Dim keyAlgorithm As String \n        keyAlgorithm = signatureDescription.KeyAlgorithm\n\n        WriteLine(vbCrLf + &quot;** &quot; + classDescription + &quot; **&quot;)\n        WriteLine(&quot;DeformatterAlgorithm : &quot; + deformatterAlgorithm)\n        WriteLine(&quot;FormatterAlgorithm : &quot; + formatterAlgorithm)\n        WriteLine(&quot;DigestAlgorithm : &quot; + digestAlgorithm)\n        WriteLine(&quot;KeyAlgorithm : &quot; + keyAlgorithm)\n    End Sub\n\n    &#39; Write the specified message and carriage return to the output textbox.\n    Private Sub WriteLine(ByVal message As String)\n        tbxOutput.AppendText(message + vbCrLf)\n    End Sub\n\n    &#39; Event handler for Exit button.\n    Private Sub Button2_Click( _\n        ByVal sender As System.Object, _\n        ByVal e As System.EventArgs) Handles Button2.Click\n\n        Application.Exit()\n    End Sub\n#Region &quot; Windows Form Designer generated code &quot;\n\n    Public Sub New()\n        MyBase.New()\n\n        &#39;This call is required by the Windows Form Designer.\n        InitializeComponent()\n\n        &#39;Add any initialization after the InitializeComponent() call\n\n    End Sub\n\n    &#39;Form overrides dispose to clean up the component list.\n    Protected Overloads Overrides Sub Dispose(ByVal disposing As Boolean)\n        If disposing Then\n            If Not (components Is Nothing) Then\n                components.Dispose()\n            End If\n        End If\n        MyBase.Dispose(disposing)\n    End Sub\n\n    &#39;Required by the Windows Form Designer\n    Private components As System.ComponentModel.IContainer\n\n    &#39;NOTE: The following procedure is required by the Windows Form Designer\n    &#39;It can be modified using the Windows Form Designer.  \n    &#39;Do not modify it using the code editor.\n    Friend WithEvents Panel2 As System.Windows.Forms.Panel\n    Friend WithEvents Panel1 As System.Windows.Forms.Panel\n    Friend WithEvents Button1 As System.Windows.Forms.Button\n    Friend WithEvents Button2 As System.Windows.Forms.Button\n    Friend WithEvents tbxOutput As System.Windows.Forms.RichTextBox\n    &lt;System.Diagnostics.DebuggerStepThrough()&gt; _\n    Private Sub InitializeComponent()\n        Me.Panel2 = New System.Windows.Forms.Panel\n        Me.Button1 = New System.Windows.Forms.Button\n        Me.Button2 = New System.Windows.Forms.Button\n        Me.Panel1 = New System.Windows.Forms.Panel\n        Me.tbxOutput = New System.Windows.Forms.RichTextBox\n        Me.Panel2.SuspendLayout()\n        Me.Panel1.SuspendLayout()\n        Me.SuspendLayout()\n        &#39;\n        &#39;Panel2\n        &#39;\n        Me.Panel2.Controls.Add(Me.Button1)\n        Me.Panel2.Controls.Add(Me.Button2)\n        Me.Panel2.Dock = System.Windows.Forms.DockStyle.Bottom\n        Me.Panel2.DockPadding.All = 20\n        Me.Panel2.Location = New System.Drawing.Point(0, 320)\n        Me.Panel2.Name = &quot;Panel2&quot;\n        Me.Panel2.Size = New System.Drawing.Size(616, 64)\n        Me.Panel2.TabIndex = 1\n        &#39;\n        &#39;Button1\n        &#39;\n        Me.Button1.Dock = System.Windows.Forms.DockStyle.Right\n        Me.Button1.Font = New System.Drawing.Font(&quot;Microsoft Sans Serif&quot;, _\n            9.0!, _\n            System.Drawing.FontStyle.Regular, _\n            System.Drawing.GraphicsUnit.Point, _\n            CType(0, Byte))\n        Me.Button1.Location = New System.Drawing.Point(446, 20)\n        Me.Button1.Name = &quot;Button1&quot;\n        Me.Button1.Size = New System.Drawing.Size(75, 24)\n        Me.Button1.TabIndex = 2\n        Me.Button1.Text = &quot;&amp;Run&quot;\n        &#39;\n        &#39;Button2\n        &#39;\n        Me.Button2.Dock = System.Windows.Forms.DockStyle.Right\n        Me.Button2.Font = New System.Drawing.Font( _\n            &quot;Microsoft Sans Serif&quot;, _\n            9.0!, _\n            System.Drawing.FontStyle.Regular, _\n            System.Drawing.GraphicsUnit.Point, _\n            CType(0, Byte))\n        Me.Button2.Location = New System.Drawing.Point(521, 20)\n        Me.Button2.Name = &quot;Button2&quot;\n        Me.Button2.Size = New System.Drawing.Size(75, 24)\n        Me.Button2.TabIndex = 3\n        Me.Button2.Text = &quot;E&amp;xit&quot;\n        &#39;\n        &#39;Panel1\n        &#39;\n        Me.Panel1.Controls.Add(Me.tbxOutput)\n        Me.Panel1.Dock = System.Windows.Forms.DockStyle.Fill\n        Me.Panel1.DockPadding.All = 20\n        Me.Panel1.Location = New System.Drawing.Point(0, 0)\n        Me.Panel1.Name = &quot;Panel1&quot;\n        Me.Panel1.Size = New System.Drawing.Size(616, 320)\n        Me.Panel1.TabIndex = 2\n        &#39;\n        &#39;tbxOutput\n        &#39;\n        Me.tbxOutput.AccessibleDescription = _\n            &quot;Displays output from application.&quot;\n        Me.tbxOutput.AccessibleName = &quot;Output textbox.&quot;\n        Me.tbxOutput.Dock = System.Windows.Forms.DockStyle.Fill\n        Me.tbxOutput.Location = New System.Drawing.Point(20, 20)\n        Me.tbxOutput.Name = &quot;tbxOutput&quot;\n        Me.tbxOutput.Size = New System.Drawing.Size(576, 280)\n        Me.tbxOutput.TabIndex = 1\n        Me.tbxOutput.Text = &quot;Click the Run button to run the application.&quot;\n        &#39;\n        &#39;Form1\n        &#39;\n        Me.AutoScaleBaseSize = New System.Drawing.Size(6, 15)\n        Me.ClientSize = New System.Drawing.Size(616, 384)\n        Me.Controls.Add(Me.Panel1)\n        Me.Controls.Add(Me.Panel2)\n        Me.Name = &quot;Form1&quot;\n        Me.Text = &quot;SignatureDescription&quot;\n        Me.Panel2.ResumeLayout(False)\n        Me.Panel1.ResumeLayout(False)\n        Me.ResumeLayout(False)\n\n    End Sub\n\n#End Region\nEnd Class\n&#39;\n&#39; This sample produces the following output:\n&#39;\n&#39;\n&#39; ** System.Security.Cryptography.SignatureDescription **\n&#39; DeformatterAlgorithm : System.Security.Cryptography.\n&#39; RSAPKCS1SignatureDeformatter\n&#39; FormatterAlgorithm : System.Security.Cryptography.RSAPKCS1SignatureFormatter\n&#39; DigestAlgorithm : System.Security.Cryptography.SHA1CryptoServiceProvider\n&#39; KeyAlgorithm : System.Security.Cryptography.RSACryptoServiceProvider\n&#39; \n&#39; ** System.Security.Cryptography.SignatureDescription **\n&#39; DeformatterAlgorithm : System.Security.Cryptography.DSASignatureDeformatter\n&#39; FormatterAlgorithm : System.Security.Cryptography.DSASignatureFormatter\n&#39; DigestAlgorithm : System.Security.Cryptography.SHA1CryptoServiceProvider\n&#39; KeyAlgorithm : System.Security.Cryptography.DSACryptoServiceProvider\n&#39; Hash algorithm for the DigestAlgorithm property: System.Security.\n&#39; Cryptography.\n&#39; SHA1CryptoServiceProvider\n&#39; Created formatter : System.Security.Cryptography.DSASignatureFormatter\n&#39; Created deformatter : System.Security.Cryptography.DSASignatureDeformatter\n&#39; This sample completed successfully; press Exit to continue.\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Security.Cryptography.SignatureDescription#2\">using namespace System;\nusing namespace System::Security;\nusing namespace System::Security::Cryptography;\n\nref class SignatureDescriptionImpl\n{\npublic:\n   [STAThread]\n   static void Main()\n   {\n      // Create a digital signature based on RSA encryption.\n      SignatureDescription^ rsaSignature = CreateRSAPKCS1Signature();\n      ShowProperties( rsaSignature );\n      \n      // Create a digital signature based on DSA encryption.\n      SignatureDescription^ dsaSignature = CreateDSASignature();\n      ShowProperties( dsaSignature );\n      \n      // Create a HashAlgorithm using the digest algorithm of the signature.\n      HashAlgorithm^ hashAlgorithm = dsaSignature-&gt;CreateDigest();\n\n      Console::WriteLine( L&quot;\\nHash algorithm for the DigestAlgorithm property:&quot;\n         L&quot; {0}&quot;, hashAlgorithm );\n      \n      // Create an AsymmetricSignatureFormatter instance using the DSA key.\n      DSA^ dsa = DSA::Create();\n      AsymmetricSignatureFormatter^ asymmetricFormatter = CreateDSAFormatter( dsa );\n      \n      // Create an AsymmetricSignatureDeformatter instance using the\n      // DSA key.\n      AsymmetricSignatureDeformatter^ asymmetricDeformatter =\n         CreateDSADeformatter( dsa );\n      Console::WriteLine( L&quot;This sample completed successfully; &quot;\n         L&quot;press Enter to exit.&quot; );\n      Console::ReadLine();\n   }\n\nprivate:\n   // Create a SignatureDescription for RSA encryption.\n   static SignatureDescription^ CreateRSAPKCS1Signature()\n   {\n      SignatureDescription^ signatureDescription = gcnew SignatureDescription;\n\n      // Set the key algorithm property for RSA encryption.\n      signatureDescription-&gt;KeyAlgorithm = L&quot;System.Security.Cryptography.RSACryptoServiceProvider&quot;;\n\n      // Set the digest algorithm for RSA encryption using the\n      // SHA1 provider.\n      signatureDescription-&gt;DigestAlgorithm = L&quot;System.Security.Cryptography.SHA1CryptoServiceProvider&quot;;\n\n      // Set the formatter algorithm with the RSAPKCS1 formatter.\n      signatureDescription-&gt;FormatterAlgorithm = L&quot;System.Security.Cryptography.RSAPKCS1SignatureFormatter&quot;;\n\n      // Set the formatter algorithm with the RSAPKCS1 deformatter.\n      signatureDescription-&gt;DeformatterAlgorithm = L&quot;System.Security.Cryptography.RSAPKCS1SignatureDeformatter&quot;;\n\n      return signatureDescription;\n   }\n\n   // Create a SignatureDescription using a constructed SecurityElement for\n   // DSA encryption.\n   static SignatureDescription^ CreateDSASignature()\n   {\n      SecurityElement^ securityElement = gcnew SecurityElement( L&quot;DSASignature&quot; );\n      // Create new security elements for the four algorithms.\n      securityElement-&gt;AddChild( gcnew SecurityElement(\n         L&quot;Key&quot;,L&quot;System.Security.Cryptography.DSACryptoServiceProvider&quot; ) );\n      securityElement-&gt;AddChild( gcnew SecurityElement(\n         L&quot;Digest&quot;,L&quot;System.Security.Cryptography.SHA1CryptoServiceProvider&quot; ) );\n      securityElement-&gt;AddChild( gcnew SecurityElement(\n         L&quot;Formatter&quot;,L&quot;System.Security.Cryptography.DSASignatureFormatter&quot; ) );\n      securityElement-&gt;AddChild( gcnew SecurityElement(\n         L&quot;Deformatter&quot;,L&quot;System.Security.Cryptography.DSASignatureDeformatter&quot; ) );\n      SignatureDescription^ signatureDescription =\n         gcnew SignatureDescription( securityElement );\n\n      return signatureDescription;\n   }\n\n   // Create a signature formatter for DSA encryption.\n   static AsymmetricSignatureFormatter^ CreateDSAFormatter( DSA^ dsa )\n   {\n      // Create a DSA signature formatter for encryption.\n      SignatureDescription^ signatureDescription =\n         gcnew SignatureDescription;\n      signatureDescription-&gt;FormatterAlgorithm =\n         L&quot;System.Security.Cryptography.DSASignatureFormatter&quot;;\n      AsymmetricSignatureFormatter^ asymmetricFormatter =\n         signatureDescription-&gt;CreateFormatter( dsa );\n\n      Console::WriteLine( L&quot;\\nCreated formatter : {0}&quot;,\n         asymmetricFormatter );\n      return asymmetricFormatter;\n   }\n\n   // Create a signature deformatter for DSA decryption.\n   static AsymmetricSignatureDeformatter^ CreateDSADeformatter( DSA^ dsa )\n   {\n      // Create a DSA signature deformatter to verify the signature.\n      SignatureDescription^ signatureDescription =\n         gcnew SignatureDescription;\n      signatureDescription-&gt;DeformatterAlgorithm =\n         L&quot;System.Security.Cryptography.DSASignatureDeformatter&quot;;\n      AsymmetricSignatureDeformatter^ asymmetricDeformatter =\n         signatureDescription-&gt;CreateDeformatter( dsa );\n\n      Console::WriteLine( L&quot;\\nCreated deformatter : {0}&quot;,\n         asymmetricDeformatter );\n      return asymmetricDeformatter;\n   }\n\n   // Display to the console the properties of the specified\n   // SignatureDescription.\n   static void ShowProperties( SignatureDescription^ signatureDescription )\n   {\n      // Retrieve the class path for the specified SignatureDescription.\n      String^ classDescription = signatureDescription-&gt;ToString();\n\n      String^ deformatterAlgorithm = signatureDescription-&gt;DeformatterAlgorithm;\n      String^ formatterAlgorithm = signatureDescription-&gt;FormatterAlgorithm;\n      String^ digestAlgorithm = signatureDescription-&gt;DigestAlgorithm;\n      String^ keyAlgorithm = signatureDescription-&gt;KeyAlgorithm;\n      Console::WriteLine( L&quot;\\n** {0} **&quot;, classDescription );\n      Console::WriteLine( L&quot;DeformatterAlgorithm : {0}&quot;, deformatterAlgorithm );\n      Console::WriteLine( L&quot;FormatterAlgorithm : {0}&quot;, formatterAlgorithm );\n      Console::WriteLine( L&quot;DigestAlgorithm : {0}&quot;, digestAlgorithm );\n      Console::WriteLine( L&quot;KeyAlgorithm : {0}&quot;, keyAlgorithm );\n   }\n};\n\nint main()\n{\n   SignatureDescriptionImpl::Main();\n}\n\n//\n// This sample produces the following output:\n//\n// ** System.Security.Cryptography.SignatureDescription **\n// DeformatterAlgorithm : System.Security.Cryptography.\n// RSAPKCS1SignatureDeformatter\n//\n// FormatterAlgorithm : System.Security.Cryptography.\n// RSAPKCS1SignatureFormatter\n// DigestAlgorithm : System.Security.Cryptography.SHA1CryptoServiceProvider\n// KeyAlgorithm : System.Security.Cryptography.RSACryptoServiceProvider\n//\n// ** System.Security.Cryptography.SignatureDescription **\n// DeformatterAlgorithm : System.Security.Cryptography.DSASignatureDeformatter\n// FormatterAlgorithm : System.Security.Cryptography.DSASignatureFormatter\n// DigestAlgorithm : System.Security.Cryptography.SHA1CryptoServiceProvider\n// KeyAlgorithm : System.Security.Cryptography.DSACryptoServiceProvider\n//\n// Hash algorithm for the DigestAlgorithm property:\n// System.Security.Cryptography.SH\n// A1CryptoServiceProvider\n//\n// Created formatter : System.Security.Cryptography.DSASignatureFormatter\n//\n// Created deformatter : System.Security.Cryptography.DSASignatureDeformatter\n// This sample completed successfully; press Enter to exit.\n</code></pre>\r\n  \r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_SignatureDescription__ctor\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">SignatureDescription()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.signaturedescription\" data-linktype=\"relative-path\">SignatureDescription</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public SignatureDescription ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_SignatureDescription__ctor_System_Security_SecurityElement_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">SignatureDescription(SecurityElement)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.signaturedescription\" data-linktype=\"relative-path\">SignatureDescription</a> class from the specified <a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public SignatureDescription (System.Security.SecurityElement el);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>el</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a> from which to get the algorithms for the signature description.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <code>el</code> parameter is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_SignatureDescription_DeformatterAlgorithm\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">DeformatterAlgorithm</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets the deformatter algorithm for the signature description.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string DeformatterAlgorithm { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The deformatter algorithm for the signature description.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_SignatureDescription_DigestAlgorithm\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">DigestAlgorithm</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets the digest algorithm for the signature description.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string DigestAlgorithm { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The digest algorithm for the signature description.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_SignatureDescription_FormatterAlgorithm\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FormatterAlgorithm</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets the formatter algorithm for the signature description.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string FormatterAlgorithm { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The formatter algorithm for the signature description.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_SignatureDescription_KeyAlgorithm\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">KeyAlgorithm</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets the key algorithm for the signature description.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string KeyAlgorithm { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The key algorithm for the signature description.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_SignatureDescription_CreateDeformatter_System_Security_Cryptography_AsymmetricAlgorithm_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CreateDeformatter(AsymmetricAlgorithm)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Creates an <a class=\"xref\" href=\"system.security.cryptography.asymmetricsignaturedeformatter\" data-linktype=\"relative-path\">AsymmetricSignatureDeformatter</a> instance with the specified key using the <span class=\"xref\">stem.Security.Cryptography.SignatureDescription.DeformatterAlgorithm*</span> property.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual System.Security.Cryptography.AsymmetricSignatureDeformatter CreateDeformatter (System.Security.Cryptography.AsymmetricAlgorithm key);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>key</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The key to use in the <a class=\"xref\" href=\"system.security.cryptography.asymmetricsignaturedeformatter\" data-linktype=\"relative-path\">AsymmetricSignatureDeformatter</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.asymmetricsignaturedeformatter\" data-linktype=\"relative-path\">AsymmetricSignatureDeformatter</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The newly created <a class=\"xref\" href=\"system.security.cryptography.asymmetricsignaturedeformatter\" data-linktype=\"relative-path\">AsymmetricSignatureDeformatter</a> instance.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_SignatureDescription_CreateDigest\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CreateDigest()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Creates a <a class=\"xref\" href=\"system.security.cryptography.hashalgorithm\" data-linktype=\"relative-path\">HashAlgorithm</a> instance using the <span class=\"xref\">stem.Security.Cryptography.SignatureDescription.DigestAlgorithm*</span> property.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual System.Security.Cryptography.HashAlgorithm CreateDigest ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.hashalgorithm\" data-linktype=\"relative-path\">HashAlgorithm</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The newly created <a class=\"xref\" href=\"system.security.cryptography.hashalgorithm\" data-linktype=\"relative-path\">HashAlgorithm</a> instance.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_SignatureDescription_CreateFormatter_System_Security_Cryptography_AsymmetricAlgorithm_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CreateFormatter(AsymmetricAlgorithm)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Creates an <a class=\"xref\" href=\"system.security.cryptography.asymmetricsignatureformatter\" data-linktype=\"relative-path\">AsymmetricSignatureFormatter</a> instance with the specified key using the <span class=\"xref\">stem.Security.Cryptography.SignatureDescription.FormatterAlgorithm*</span> property.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual System.Security.Cryptography.AsymmetricSignatureFormatter CreateFormatter (System.Security.Cryptography.AsymmetricAlgorithm key);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>key</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The key to use in the <a class=\"xref\" href=\"system.security.cryptography.asymmetricsignatureformatter\" data-linktype=\"relative-path\">AsymmetricSignatureFormatter</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.asymmetricsignatureformatter\" data-linktype=\"relative-path\">AsymmetricSignatureFormatter</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The newly created <a class=\"xref\" href=\"system.security.cryptography.asymmetricsignatureformatter\" data-linktype=\"relative-path\">AsymmetricSignatureFormatter</a> instance.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Security.Cryptography.SignatureDescription.yml\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.SignatureDescription\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.SignatureDescription..ctor\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.SignatureDescription.CreateDeformatter\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.SignatureDescription.CreateDigest\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.SignatureDescription.CreateFormatter\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.SignatureDescription.DeformatterAlgorithm\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.SignatureDescription.DigestAlgorithm\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.SignatureDescription.FormatterAlgorithm\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.SignatureDescription.KeyAlgorithm\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-29 05:54 AM\">\r\n<meta name=\"document_id\" content=\"bd6e7b4b-98c9-7f27-8fea-9047a20c8d98\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Contains information about the properties of a digital signature.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.security.cryptography/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Security.Cryptography.SignatureDescription\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Security.Cryptography.SignatureDescription.yml","open_to_public_contributors":false,"api_name":["System.Security.Cryptography.SignatureDescription","System.Security.Cryptography.SignatureDescription..ctor","System.Security.Cryptography.SignatureDescription.CreateDeformatter","System.Security.Cryptography.SignatureDescription.CreateDigest","System.Security.Cryptography.SignatureDescription.CreateFormatter","System.Security.Cryptography.SignatureDescription.DeformatterAlgorithm","System.Security.Cryptography.SignatureDescription.DigestAlgorithm","System.Security.Cryptography.SignatureDescription.FormatterAlgorithm","System.Security.Cryptography.SignatureDescription.KeyAlgorithm"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Security.Cryptography.SignatureDescription","System::Security::Cryptography::SignatureDescription","System.Security.Cryptography.SignatureDescription.#ctor","System::Security::Cryptography::SignatureDescription::#ctor","System.Security.Cryptography.SignatureDescription.CreateDeformatter","System::Security::Cryptography::SignatureDescription::CreateDeformatter","System.Security.Cryptography.SignatureDescription.CreateDigest","System::Security::Cryptography::SignatureDescription::CreateDigest","System.Security.Cryptography.SignatureDescription.CreateFormatter","System::Security::Cryptography::SignatureDescription::CreateFormatter","System.Security.Cryptography.SignatureDescription.DeformatterAlgorithm","System::Security::Cryptography::SignatureDescription::DeformatterAlgorithm","System.Security.Cryptography.SignatureDescription.DigestAlgorithm","System::Security::Cryptography::SignatureDescription::DigestAlgorithm","System.Security.Cryptography.SignatureDescription.FormatterAlgorithm","System::Security::Cryptography::SignatureDescription::FormatterAlgorithm","System.Security.Cryptography.SignatureDescription.KeyAlgorithm","System::Security::Cryptography::SignatureDescription::KeyAlgorithm"],"dev_langs":["csharp"],"updated_at":"2017-03-29 05:54 AM","document_id":"bd6e7b4b-98c9-7f27-8fea-9047a20c8d98","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Security.Cryptography/SignatureDescription.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"SignatureDescription class | Microsoft Docs","_op_ogTitle":"SignatureDescription class","description":"Contains information about the properties of a digital signature.\n","toc_asset_id":"api/_splitted/System.Security.Cryptography/toc.json","toc_rel":"_splitted/System.Security.Cryptography/toc.json","source_url":"","ms.assetid":"System.Security.Cryptography.SignatureDescription","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.signaturedescription","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.signaturedescription","fileRelativePath":"api/System.Security.Cryptography.SignatureDescription.html"},"themesRelativePathToOutputRoot":"_themes/"}