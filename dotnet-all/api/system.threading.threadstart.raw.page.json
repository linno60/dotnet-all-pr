{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">ThreadStart</span>\r\n      Delegate\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the method that executes on a <a class=\"xref\" href=\"system.threading.thread\" data-linktype=\"relative-path\">Thread</a>.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic delegate void ThreadStart();</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></span></div><span class=\"lang-csharp\">ThreadStart</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Attributes</dt><dd>\r\n  \t\t<div class=\"cdlHolder\">\r\n  \t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example shows the syntax for creating and using a ThreadStart delegate with an instance method and with a static method.  </p>\n<p> For another simple example that demonstrates how to create a ThreadStart delegate, see the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_Start\" data-linktype=\"relative-path\">System.Threading.Thread.Start()</a> method overload. For more information about thread creation, see <a href=\"../topic/creating%20threads%20and%20passing%20data%20at%20start%20time\" data-linktype=\"relative-path\">Creating Threads and Passing Data at Start Time</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Threading.ThreadStart2#1\">using namespace System;\nusing namespace System::Threading;\nref class Work\n{\npublic:\n   static void DoWork()\n   {\n      Console::WriteLine( &quot;Static thread procedure.&quot; );\n   }\n\n   int Data;\n   void DoMoreWork()\n   {\n      Console::WriteLine( &quot;Instance thread procedure. Data={0}&quot;, Data );\n   }\n\n};\n\nint main()\n{\n   \n   // To start a thread using an instance method for the thread \n   // procedure, specify the object as the first argument of the\n   // ThreadStart constructor.\n   //\n   Work^ w = gcnew Work;\n   w-&gt;Data = 42;\n   ThreadStart^ threadDelegate = gcnew ThreadStart( w, &amp;Work::DoMoreWork );\n   Thread^ newThread = gcnew Thread( threadDelegate );\n   newThread-&gt;Start();\n   \n   // To start a thread using a static thread procedure, specify\n   // only the address of the procedure. This is a change from \n   // earlier versions of the .NET Framework, which required \n   // two arguments, the first of which was null (0).\n   //\n   threadDelegate = gcnew ThreadStart( &amp;Work::DoWork );\n   newThread = gcnew Thread( threadDelegate );\n   newThread-&gt;Start();\n}\n\n/* This code example produces the following output (the order \n   of the lines might vary):\nStatic thread procedure.\nInstance thread procedure. Data=42\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.ThreadStart2#1\">using System;\nusing System.Threading;\n\nclass Test\n{\n    static void Main() \n    {\n        // To start a thread using a static thread procedure, use the\n        // class name and method name when you create the ThreadStart\n        // delegate. Beginning in version 2.0 of the .NET Framework,\n        // it is not necessary to create a delegate explicitly. \n        // Specify the name of the method in the Thread constructor, \n        // and the compiler selects the correct delegate. For example:\n        //\n        // Thread newThread = new Thread(Work.DoWork);\n        //\n        ThreadStart threadDelegate = new ThreadStart(Work.DoWork);\n        Thread newThread = new Thread(threadDelegate);\n        newThread.Start();\n\n        // To start a thread using an instance method for the thread \n        // procedure, use the instance variable and method name when \n        // you create the ThreadStart delegate. Beginning in version\n        // 2.0 of the .NET Framework, the explicit delegate is not\n        // required.\n        //\n        Work w = new Work();\n        w.Data = 42;\n        threadDelegate = new ThreadStart(w.DoMoreWork);\n        newThread = new Thread(threadDelegate);\n        newThread.Start();\n    }\n}\n\nclass Work \n{\n    public static void DoWork() \n    {\n        Console.WriteLine(&quot;Static thread procedure.&quot;); \n    }\n    public int Data;\n    public void DoMoreWork() \n    {\n        Console.WriteLine(&quot;Instance thread procedure. Data={0}&quot;, Data); \n    }\n}\n\n/* This code example produces the following output (the order \n   of the lines might vary):\nStatic thread procedure.\nInstance thread procedure. Data=42\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.ThreadStart2#1\">Imports System\nImports System.Threading\n\nPublic Class Test\n\n    &lt;MTAThread&gt; _\n    Shared Sub Main()\n        &#39; To start a thread using a static thread procedure, use the\n        &#39; class name and method name when you create the ThreadStart\n        &#39; delegate. Visual Basic expands the AddressOf expression \n        &#39; to the appropriate delegate creation syntax:\n        &#39;    New ThreadStart(AddressOf Work.DoWork)\n        &#39;\n        Dim newThread As New Thread(AddressOf Work.DoWork)\n        newThread.Start()\n\n        &#39; To start a thread using an instance method for the thread \n        &#39; procedure, use the instance variable and method name when \n        &#39; you create the ThreadStart delegate. Visual Basic expands \n        &#39; the AddressOf expression to the appropriate delegate \n        &#39; creation syntax:\n        &#39;    New ThreadStart(AddressOf w.DoMoreWork)\n        &#39;\n        Dim w As New Work()\n        w.Data = 42\n        newThread = new Thread(AddressOf w.DoMoreWork)\n        newThread.Start()\n    End Sub\nEnd Class\n\nPublic Class Work \n    Public Shared Sub DoWork()\n        Console.WriteLine(&quot;Static thread procedure.&quot;)\n    End Sub\n    Public Data As Integer\n    Public Sub DoMoreWork() \n        Console.WriteLine(&quot;Instance thread procedure. Data={0}&quot;, Data) \n    End Sub\nEnd Class\n\n&#39; This code example produces the following output (the order \n&#39;   of the lines might vary):\n&#39;\n&#39;Static thread procedure.\n&#39;Instance thread procedure. Data=42\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>When a managed thread is created, the method that executes on the thread is represented by a ThreadStart delegate or a <a class=\"xref\" href=\"system.threading.parameterizedthreadstart\" data-linktype=\"relative-path\">ParameterizedThreadStart</a> delegate that is passed to the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread__ctor_\" data-linktype=\"relative-path\">Thread</a> constructor. The thread does not begin executing until the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_Start_\" data-linktype=\"relative-path\">Start</a> method is called. Execution begins at the first line of the method represented by the ThreadStart or <a class=\"xref\" href=\"system.threading.parameterizedthreadstart\" data-linktype=\"relative-path\">ParameterizedThreadStart</a> delegate.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Visual Basic and C# users can omit the ThreadStart or <a class=\"xref\" href=\"system.threading.parameterizedthreadstart\" data-linktype=\"relative-path\">ParameterizedThreadStart</a> delegate constructor when creating a thread. In Visual Basic, use the <code>AddressOf</code> operator when passing your method to the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread__ctor_\" data-linktype=\"relative-path\">Thread</a> constructor; for example, <code>Dim t As New Thread(AddressOf ThreadProc)</code>. In C#, simply specify the name of the thread procedure. The compiler selects the correct delegate constructor.  </p>\n</div>\n<p> [C++]  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In version 2.0 of the .NET Framework, creating a ThreadStart delegate for a static method in C++ requires only one parameter: the address of the callback method, qualified by the class name. In earlier versions two parameters were required when creating a delegate for a static method: zero (null) and the method address. For an instance method, all versions require two parameters: the instance variable and the method address.</p>\n</div>\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"uhfHeaderId\" content=\"MSDocsHeader-DotNet\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Threading.ThreadStart.yml\">\r\n<meta name=\"APIName\" content=\"System.Threading.ThreadStart\">\r\n<meta name=\"APIName\" content=\"System.Threading.ThreadStart..ctor\">\r\n<meta name=\"APIName\" content=\"System.Threading.ThreadStart.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Threading.ThreadStart.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.Threading.ThreadStart.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-04-01 05:59 PM\">\r\n<meta name=\"document_id\" content=\"20a7b16b-812e-fe08-47cf-d0e43874415b\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the method that executes on a .\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.threading/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Threading.ThreadStart\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","uhfHeaderId":"MSDocsHeader-DotNet","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Threading.ThreadStart.yml","open_to_public_contributors":false,"api_name":["System.Threading.ThreadStart","System.Threading.ThreadStart..ctor","System.Threading.ThreadStart.Invoke","System.Threading.ThreadStart.BeginInvoke","System.Threading.ThreadStart.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Threading.ThreadStart","System::Threading::ThreadStart"],"dev_langs":["csharp"],"updated_at":"2017-04-01 05:59 PM","document_id":"20a7b16b-812e-fe08-47cf-d0e43874415b","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Threading/ThreadStart.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ThreadStart delegate | Microsoft Docs","_op_ogTitle":"ThreadStart delegate","description":"Represents the method that executes on a .\n","toc_asset_id":"api/_splitted/System.Threading/toc.json","toc_rel":"_splitted/System.Threading/toc.json","source_url":"","ms.assetid":"System.Threading.ThreadStart","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.threading.threadstart","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.threading.threadstart","fileRelativePath":"api/System.Threading.ThreadStart.html"},"themesRelativePathToOutputRoot":"_themes/"}