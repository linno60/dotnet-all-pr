{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">FormViewUpdatedEventHandler</span>\r\n      Delegate\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the method that handles the <a class=\"xref\" href=\"system.web.ui.webcontrols.formview#System_Web_UI_WebControls_FormView_ItemUpdated\" data-linktype=\"relative-path\">ItemUpdated</a> event of a <a class=\"xref\" href=\"system.web.ui.webcontrols.formview\" data-linktype=\"relative-path\">FormView</a> control.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public delegate void FormViewUpdatedEventHandler(object sender, FormViewUpdatedEventArgs e);</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></span></div><span class=\"lang-csharp\">FormViewUpdatedEventHandler</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example demonstrates how to programmatically add a FormViewUpdatedEventHandler delegate to the <a class=\"xref\" href=\"system.web.ui.webcontrols.formview#System_Web_UI_WebControls_FormView_ItemUpdated\" data-linktype=\"relative-path\">ItemUpdated</a> event of a <a class=\"xref\" href=\"system.web.ui.webcontrols.formview\" data-linktype=\"relative-path\">FormView</a> control.  </p>\n<pre><code class=\"lang-vb\" name=\"FormViewUpdatedEventHandler#1\">\n&lt;%@ Page language=&quot;VB&quot; %&gt;\n&lt;%@ import namespace=&quot;System.Data&quot;%&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  &#39; To dynamically create a template for a FormView control,\n  &#39; you must create a custom template class to represent \n  &#39; the template. This template class represents the item\n  &#39; template for a FormView control.\n  Private NotInheritable Class EmployeeItemTemplate\n    Implements ITemplate\n\n    &#39; When implementing the ITemplate interface, you must\n    &#39; implement the InstantiateIn method. The FormView\n    &#39; control calls this method to create the template&#39;s \n    &#39; content. \n    Sub InstantiateIn(ByVal container As Control) Implements ITemplate.InstantiateIn\n      \n      &#39; Create the child controls contained in the template.\n      &#39; For this example, the item template displays the\n      &#39; FirstName and LastName fields from the data source.\n      &#39; To support data binding, create event handlers \n      &#39; for the DataBinding event of each child control.\n      &#39; The event handlers must bind the appropriate value \n      &#39; to each control.\n      Dim firstNameLabel As New Label()\n      firstNameLabel.ID = &quot;FirstNameLabel&quot;\n      AddHandler firstNameLabel.DataBinding, AddressOf FirstNameLabel_DataBinding\n\n      Dim nameLineBreak As New LiteralControl(&quot;&lt;br/&gt;&quot;)\n      Dim buttonLineBreak As New LiteralControl(&quot;&lt;br/&gt;&quot;)\n\n      Dim lastNameLabel As New Label()\n      lastNameLabel.ID = &quot;LastNameLabel&quot;\n      AddHandler lastNameLabel.DataBinding, AddressOf LastNameLabel_DataBinding\n\n      Dim editButton As New Button()\n      editButton.ID = &quot;EditButton&quot;\n      editButton.CommandName = &quot;Edit&quot;\n      editButton.Text = &quot;Edit&quot;\n\n      &#39; Add the controls to the Controls collection of the \n      &#39; container control.\n      container.Controls.Add(firstNameLabel)\n      container.Controls.Add(nameLineBreak)\n      container.Controls.Add(lastNameLabel)\n      container.Controls.Add(buttonLineBreak)\n      container.Controls.Add(editButton)\n\n    End Sub\n\n    &#39; This event handler binds the value of the FirstName field\n    &#39; to the FirstNameLabel Label control displayed in the template.\n    Private Sub FirstNameLabel_DataBinding(ByVal sender As Object, ByVal e As EventArgs)\n      \n      &#39; Use the sender parameter to retrieve the Label control\n      &#39; being bound to data.\n      Dim firstNameLabelControl As Label = CType(sender, Label)\n\n      &#39; Retrieve the value to bind to the Label control. First,\n      &#39; use the NamingContainer property to retrieve the parent \n      &#39; control of the Label control. In this example, the parent \n      &#39; control is the FormView control.\n      Dim formViewContainer As FormView = CType(firstNameLabelControl.NamingContainer, FormView)\n\n      &#39; Get the data item bound to the FormView control.\n      Dim rowView As DataRowView = CType(formViewContainer.DataItem, DataRowView)\n\n      &#39; Use the data item to retrieve the value of the FirstName field.\n      &#39; Set the Text property of the Label control to this value.        \n      firstNameLabelControl.Text = rowView(&quot;FirstName&quot;).ToString()\n      \n    End Sub\n\n    &#39; This event handler binds the value of the LastName field\n    &#39; to the LastNameLabel Label control displayed in the template.\n    Private Sub LastNameLabel_DataBinding(ByVal sender As Object, ByVal e As EventArgs)\n\n      &#39; Use the sender parameter to retrieve the Label control\n      &#39; being bound to data.\n      Dim lastNameLabelControl As Label = CType(sender, Label)\n\n      &#39; Retrieve the value to bind to the Label control. First,\n      &#39; use the NamingContainer property to retrieve the parent \n      &#39; control of the Label control. In this example, the parent \n      &#39; control is the FormView control.\n      Dim formViewContainer As FormView = CType(lastNameLabelControl.NamingContainer, FormView)\n\n      &#39; Get the data item bound to the FormView control.\n      Dim rowView As DataRowView = CType(formViewContainer.DataItem, DataRowView)\n\n      &#39; Use the data item to retrieve the value of the LastName field.\n      &#39; Set the Text property of the Label control to this value.         \n      lastNameLabelControl.Text = rowView(&quot;LastName&quot;).ToString()\n    \n    End Sub\n\n\n  End Class\n  \n  &#39; This template class represents the edit item\n  &#39; template for a FormView control.\n  Private NotInheritable Class EmployeeEditItemTemplate\n    Implements ITemplate\n\n    Sub InstantiateIn(ByVal container As Control) Implements ITemplate.InstantiateIn\n      &#39; Create the child controls contained in the template.\n      &#39; The edit item template should contain the input \n      &#39; controls for the user to edit a record.\n      Dim firstNameTextBox As New TextBox()\n      firstNameTextBox.ID = &quot;FirstNameTextBox&quot;\n\n      Dim nameLineBreak As New LiteralControl(&quot;&lt;br/&gt;&quot;)\n      Dim buttonLineBreak As New LiteralControl(&quot;&lt;br/&gt;&quot;)\n\n      Dim lastNameTextBox As New TextBox()\n      lastNameTextBox.ID = &quot;LastNameTextBox&quot;\n\n      Dim updateButton As New Button()\n      updateButton.ID = &quot;UpdateButton&quot;\n      updateButton.CommandName = &quot;Update&quot;\n      updateButton.Text = &quot;Update&quot;\n\n      Dim cancelButton As New Button()\n      cancelButton.ID = &quot;CancelButton&quot;\n      cancelButton.CommandName = &quot;Cancel&quot;\n      cancelButton.Text = &quot;Cancel&quot;\n\n      &#39; Add the controls to the Controls collection of the \n      &#39; container control.\n      container.Controls.Add(firstNameTextBox)\n      container.Controls.Add(nameLineBreak)\n      container.Controls.Add(lastNameTextBox)\n      container.Controls.Add(buttonLineBreak)\n      container.Controls.Add(updateButton)\n      container.Controls.Add(cancelButton)\n\n    End Sub\n    \n  End Class\n\n  Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)\n\n    &#39; Create a new FormView object.\n    Dim employeesFormView As New FormView()\n\n    &#39; Set the FormView object&#39;s properties.\n    employeesFormView.ID = &quot;EmployeesFormView&quot;\n    employeesFormView.DataSourceID = &quot;EmployeeSource&quot;\n    employeesFormView.AllowPaging = True\n    employeesFormView.HeaderText = &quot;Employee Name&quot;\n    \n    Dim keyArray() As String = {&quot;EmployeeID&quot;}\n    employeesFormView.DataKeyNames = keyArray\n\n    &#39; Programmatically register the event handlers for the \n    &#39; FormView control.\n    AddHandler employeesFormView.ItemUpdated, AddressOf EmployeeFormView_ItemUpdated\n    AddHandler employeesFormView.ItemUpdating, AddressOf EmployeeFormView_ItemUpdating\n\n    &#39; Create the dynamic templates using the custom template classes.\n    employeesFormView.ItemTemplate = New EmployeeItemTemplate()\n    employeesFormView.EditItemTemplate = New EmployeeEditItemTemplate()\n    &#39; Add the FormView object to the Controls collection\n    &#39; of the PlaceHolder control.\n    FormViewPlaceHolder.Controls.Add(employeesFormView)\n\n  End Sub\n\n  Sub EmployeeFormView_ItemUpdating(ByVal sender As Object, ByVal e As FormViewUpdateEventArgs)\n    \n    &#39; Because the FormView control is dynamically generated, \n    &#39; the NewValues collection must be programmatically populated\n    &#39; with the values for the record to update.\n\n    &#39; Use the sender argument to retrieve the FormView\n    &#39; control that raised the event.\n    Dim employeeFormView As FormView = CType(sender, FormView)\n    \n    &#39; Retrieve the data row from the FormView control.\n    Dim row As FormViewRow = employeeFormView.Row\n\n    &#39; Retrieve the TextBox controls that contain the updated values \n    &#39; entered by the user. \n    Dim firstNameTextBox As TextBox = CType(row.FindControl(&quot;FirstNameTextBox&quot;), TextBox)\n    Dim lastNameTextBox As TextBox = CType(row.FindControl(&quot;LastNameTextBox&quot;), TextBox)\n\n    If firstNameTextBox IsNot Nothing And lastNameTextBox IsNot Nothing Then\n    \n      &#39; Add the new values to the NewValues collections.\n      e.NewValues.Add(&quot;FirstName&quot;, firstNameTextBox.Text)\n      e.NewValues.Add(&quot;LastName&quot;, lastNameTextBox.Text)\n      \n    End If\n\n  End Sub\n\n  Sub EmployeeFormView_ItemUpdated(ByVal sender As Object, ByVal e As FormViewUpdatedEventArgs)\n  \n    &#39; Use the Exception property to determine whether an exception\n    &#39; occurred during the update operation.\n    If e.Exception Is Nothing Then\n    \n      &#39; Use the AffectedRows property to determine whether the\n      &#39; record was updated. Sometimes an error might occur that \n      &#39; does not raise an exception, but prevents the update\n      &#39; operation from completing.\n      If e.AffectedRows = 1 Then\n      \n        MessageLabel.Text = &quot;Record updated successfully.&quot;\n      \n      Else\n      \n        MessageLabel.Text = &quot;An error occurred during the update operation.&quot;\n        \n        &#39; Use the KeepInUpdateMode property to keep the control in edit mode\n        &#39; when an error occurs during the update operation.\n        e.KeepInEditMode = True\n        \n      End If\n    \n    Else\n    \n      &#39; Insert the code to handle the exception.\n      MessageLabel.Text = e.Exception.Message\n      \n      &#39; Use the ExceptionHandled property to indicate that the \n      &#39; exception has already been handled.\n      e.ExceptionHandled = True\n      e.KeepInEditMode = True\n      \n    End If\n    \n  End Sub\n\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;FormView Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n        \n      &lt;h3&gt;FormView Example&lt;/h3&gt;\n      \n      &lt;!-- Use a PlaceHolder control as the container for the --&gt;\n      &lt;!-- dynamically generated FormView control.            --&gt;       \n      &lt;asp:placeholder id=&quot;FormViewPlaceHolder&quot;\n        runat=&quot;server&quot;/&gt;\n      \n      &lt;br/&gt;&lt;br/&gt;\n      \n      &lt;asp:label id=&quot;MessageLabel&quot;\n        forecolor=&quot;Red&quot;\n        runat=&quot;server&quot;/&gt;\n\n      &lt;!-- This example uses Microsoft SQL Server and connects  --&gt;\n      &lt;!-- to the Northwind sample database. Use an ASP.NET     --&gt;\n      &lt;!-- expression to retrieve the connection string value   --&gt;\n      &lt;!-- from the Web.config file.                            --&gt;\n      &lt;asp:sqldatasource id=&quot;EmployeeSource&quot;\n        selectcommand=&quot;Select [EmployeeID], [LastName], [FirstName] From [Employees]&quot;\n        updatecommand=&quot;Update [Employees] Set [LastName]=@LastName, [FirstName]=@FirstName Where [EmployeeID]=@EmployeeID&quot;\n        connectionstring=&quot;&lt;%$ ConnectionStrings:NorthWindConnectionString%&gt;&quot; \n        runat=&quot;server&quot;/&gt;\n            \n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"FormViewUpdatedEventHandler#1\">\n&lt;%@ Page language=&quot;C#&quot; %&gt;\n&lt;%@ import namespace=&quot;System.Data&quot;%&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  // To dynamically create a template for a FormView control,\n  // you must create a custom template class to represent \n  // the template. This template class represents the item\n  // template for a FormView control.\n  private sealed class EmployeeItemTemplate : ITemplate\n  {\n\n    // When implementing the ITemplate interface, you must\n    // implement the InstantiateIn method. The FormView\n    // control calls this method to create the template&#39;s \n    // content. \n    void ITemplate.InstantiateIn(Control container)\n    {\n      // Create the child controls contained in the template.\n      // For this example, the item template displays the\n      // FirstName and LastName fields from the data source.\n      // To support data binding, create event handlers \n      // for the DataBinding event of each child control.\n      // The event handlers must bind the appropriate value \n      // to each control.\n      Label firstNameLabel = new Label();\n      firstNameLabel.ID = &quot;FirstNameLabel&quot;;\n      firstNameLabel.DataBinding += new EventHandler(FirstNameLabel_DataBinding);\n\n      LiteralControl nameLineBreak = new LiteralControl(&quot;&lt;br/&gt;&quot;);\n      LiteralControl buttonLineBreak = new LiteralControl(&quot;&lt;br/&gt;&quot;);\n\n      Label lastNameLabel = new Label();\n      lastNameLabel.ID = &quot;LastNameLabel&quot;;\n      lastNameLabel.DataBinding += new EventHandler(LastNameLabel_DataBinding);\n\n      Button editButton = new Button();\n      editButton.ID = &quot;EditButton&quot;;\n      editButton.CommandName = &quot;Edit&quot;;\n      editButton.Text = &quot;Edit&quot;;\n\n      // Add the controls to the Controls collection of the \n      // container control.\n      container.Controls.Add(firstNameLabel);\n      container.Controls.Add(nameLineBreak);\n      container.Controls.Add(lastNameLabel);\n      container.Controls.Add(buttonLineBreak);\n      container.Controls.Add(editButton);\n\n    }\n\n    // This event handler binds the value of the FirstName field\n    // to the FirstNameLabel Label control displayed in the template.\n    private void FirstNameLabel_DataBinding(Object sender, EventArgs e)\n    {\n      // Use the sender parameter to retrieve the Label control\n      // being bound to data.\n      Label firstNameLabelControl = (Label)sender;\n\n      // Retrieve the value to bind to the Label control. First,\n      // use the NamingContainer property to retrieve the parent \n      // control of the Label control. In this example, the parent \n      // control is the FormView control.\n      FormView formViewContainer = (FormView)firstNameLabelControl.NamingContainer;\n\n      // Get the data item bound to the FormView control.\n      DataRowView rowView = (DataRowView)formViewContainer.DataItem;\n\n      // Use the data item to retrieve the value of the FirstName field.\n      // Set the Text property of the Label control to this value.        \n      firstNameLabelControl.Text = rowView[&quot;FirstName&quot;].ToString();\n    }\n\n    // This event handler binds the value of the LastName field\n    // to the LastNameLabel Label control displayed in the template.\n    private void LastNameLabel_DataBinding(Object sender, EventArgs e)\n    {\n      // Use the sender parameter to retrieve the Label control\n      // being bound to data.\n      Label lastNameLabelControl = (Label)sender;\n\n      // Retrieve the value to bind to the Label control. First,\n      // use the NamingContainer property to retrieve the parent \n      // control of the Label control. In this example, the parent \n      // control is the FormView control.\n      FormView formViewContainer = (FormView)lastNameLabelControl.NamingContainer;\n\n      // Get the data item bound to the FormView control.\n      DataRowView rowView = (DataRowView)formViewContainer.DataItem;\n\n      // Use the data item to retrieve the value of the LastName field.\n      // Set the Text property of the Label control to this value.         \n      lastNameLabelControl.Text = rowView[&quot;LastName&quot;].ToString();\n    }\n\n  }\n  \n  // This template class represents the edit item\n  // template for a FormView control.\n  private sealed class EmployeeEditItemTemplate : ITemplate\n  {\n\n    void ITemplate.InstantiateIn(Control container)\n    {\n      // Create the child controls contained in the template.\n      // The edit item template should contain the input \n      // controls for the user to edit a record.\n      TextBox firstNameTextBox = new TextBox();\n      firstNameTextBox.ID = &quot;FirstNameTextBox&quot;;\n\n      LiteralControl nameLineBreak = new LiteralControl(&quot;&lt;br/&gt;&quot;);\n      LiteralControl buttonLineBreak = new LiteralControl(&quot;&lt;br/&gt;&quot;);\n\n      TextBox lastNameTextBox = new TextBox();\n      lastNameTextBox.ID = &quot;LastNameTextBox&quot;;\n\n      Button updateButton = new Button();\n      updateButton.ID = &quot;UpdateButton&quot;;\n      updateButton.CommandName = &quot;Update&quot;;\n      updateButton.Text = &quot;Update&quot;;\n\n      Button cancelButton = new Button();\n      cancelButton.ID = &quot;CancelButton&quot;;\n      cancelButton.CommandName = &quot;Cancel&quot;;\n      cancelButton.Text = &quot;Cancel&quot;;\n\n      // Add the controls to the Controls collection of the \n      // container control.\n      container.Controls.Add(firstNameTextBox);\n      container.Controls.Add(nameLineBreak);\n      container.Controls.Add(lastNameTextBox);\n      container.Controls.Add(buttonLineBreak);\n      container.Controls.Add(updateButton);\n      container.Controls.Add(cancelButton);\n\n    }\n  }\n\n  void Page_Load(Object sender, EventArgs e)\n  {\n\n    // Create a new FormView object.\n    FormView employeesFormView = new FormView();\n\n    // Set the FormView object&#39;s properties.\n    employeesFormView.ID = &quot;EmployeesFormView&quot;;\n    employeesFormView.DataSourceID = &quot;EmployeeSource&quot;;\n    employeesFormView.AllowPaging = true;\n    employeesFormView.HeaderText = &quot;Employee Name&quot;;\n    employeesFormView.DataKeyNames = new String[1] { &quot;EmployeeID&quot; };\n\n    // Programmatically register the event handlers for the \n    // FormView control.\n    employeesFormView.ItemUpdated += new FormViewUpdatedEventHandler(EmployeeFormView_ItemUpdated);\n    employeesFormView.ItemUpdating += new FormViewUpdateEventHandler(EmployeeFormView_ItemUpdating);\n\n    // Create the dynamic templates using the custom template classes.\n    employeesFormView.ItemTemplate = new EmployeeItemTemplate();\n    employeesFormView.EditItemTemplate = new EmployeeEditItemTemplate();\n    \n    // Add the FormView object to the Controls collection\n    // of the PlaceHolder control.\n    FormViewPlaceHolder.Controls.Add(employeesFormView);\n\n  }\n\n  void EmployeeFormView_ItemUpdating(Object sender, FormViewUpdateEventArgs e)\n  {\n    \n    // Because the FormView control is dynamically generated, \n    // the NewValues collection must be programmatically populated\n    // with the values for the record to update.\n\n    // Use the sender argument to retrieve the FormView\n    // control that raised the event.\n    FormView employeeFormView = (FormView)sender;\n    \n    // Retrieve the data row from the FormView control.\n    FormViewRow row = employeeFormView.Row;\n\n    // Retrieve the TextBox controls that contain the updated values \n    // entered by the user. \n    TextBox firstNameTextBox = (TextBox)row.FindControl(&quot;FirstNameTextBox&quot;);\n    TextBox lastNameTextBox = (TextBox)row.FindControl(&quot;LastNameTextBox&quot;);\n\n    if (firstNameTextBox != null &amp;&amp; lastNameTextBox != null)\n    {\n      // Add the new values to the NewValues collections.\n      e.NewValues.Add(&quot;FirstName&quot;, firstNameTextBox.Text);\n      e.NewValues.Add(&quot;LastName&quot;, lastNameTextBox.Text);\n    }\n\n  }\n\n  void EmployeeFormView_ItemUpdated(Object sender, FormViewUpdatedEventArgs e)\n  {\n    // Use the Exception property to determine whether an exception\n    // occurred during the update operation.\n    if (e.Exception == null)\n    {\n      // Use the AffectedRows property to determine whether the\n      // record was updated. Sometimes an error might occur that \n      // does not raise an exception, but prevents the update\n      // operation from completing.\n      if (e.AffectedRows == 1)\n      {\n        MessageLabel.Text = &quot;Record updated successfully.&quot;;\n      }\n      else\n      {\n        MessageLabel.Text = &quot;An error occurred during the update operation.&quot;;\n        \n        // Use the KeepInUpdateMode property to keep the control in edit mode\n        // when an error occurs during the update operation.\n        e.KeepInEditMode = true;\n      }\n    }\n    else\n    {\n      // Insert the code to handle the exception.\n      MessageLabel.Text = e.Exception.Message;\n      \n      // Use the ExceptionHandled property to indicate that the \n      // exception has already been handled.\n      e.ExceptionHandled = true;\n      e.KeepInEditMode = true;\n    }\n  }\n\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;FormView Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n        \n      &lt;h3&gt;FormView Example&lt;/h3&gt;\n      \n      &lt;!-- Use a PlaceHolder control as the container for the --&gt;\n      &lt;!-- dynamically generated FormView control.            --&gt;       \n      &lt;asp:placeholder id=&quot;FormViewPlaceHolder&quot;\n        runat=&quot;server&quot;/&gt;\n      \n      &lt;br/&gt;&lt;br/&gt;\n      \n      &lt;asp:label id=&quot;MessageLabel&quot;\n        forecolor=&quot;Red&quot;\n        runat=&quot;server&quot;/&gt;\n\n      &lt;!-- This example uses Microsoft SQL Server and connects  --&gt;\n      &lt;!-- to the Northwind sample database. Use an ASP.NET     --&gt;\n      &lt;!-- expression to retrieve the connection string value   --&gt;\n      &lt;!-- from the Web.config file.                            --&gt;\n      &lt;asp:sqldatasource id=&quot;EmployeeSource&quot;\n        selectcommand=&quot;Select [EmployeeID], [LastName], [FirstName] From [Employees]&quot;\n        updatecommand=&quot;Update [Employees] Set [LastName]=@LastName, [FirstName]=@FirstName Where [EmployeeID]=@EmployeeID&quot;\n        connectionstring=&quot;&lt;%$ ConnectionStrings:NorthWindConnectionString%&gt;&quot; \n        runat=&quot;server&quot;/&gt;\n            \n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p> The following example demonstrates how to declaratively add a FormViewUpdatedEventHandler delegate to the <a class=\"xref\" href=\"system.web.ui.webcontrols.formview#System_Web_UI_WebControls_FormView_ItemUpdated\" data-linktype=\"relative-path\">ItemUpdated</a> event of a <a class=\"xref\" href=\"system.web.ui.webcontrols.formview\" data-linktype=\"relative-path\">FormView</a> control.  </p>\n<pre><code class=\"lang-vb\" name=\"FormViewUpdatedEventArgs#1\">\n&lt;%@ Page language=&quot;VB&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  Sub EmployeeFormView_ItemUpdated(ByVal sender As Object, ByVal e As FormViewUpdatedEventArgs) Handles EmployeeFormView.ItemUpdated\n\n    &#39; Use the Exception property to determine whether an exception\n    &#39; occurred during the update operation.\n    If e.Exception Is Nothing Then\n    \n      &#39; Sometimes an error might occur that does not raise an \n      &#39; exception, but prevents the update operation from \n      &#39; completing. Use the AffectedRows property to determine \n      &#39; whether the record was actually updated. \n      If e.AffectedRows = 1 Then\n      \n        &#39; Use the Keys property to get the value of the key field.\n        Dim keyFieldValue As String = e.Keys(&quot;EmployeeID&quot;).ToString()\n\n        &#39; Display a confirmation message.\n        MessageLabel.Text = &quot;Record &quot; &amp; keyFieldValue &amp; _\n          &quot; updated successfully. &quot;\n\n        &#39; Display the new and original values.\n        DisplayValues(CType(e.NewValues, OrderedDictionary), CType(e.OldValues, OrderedDictionary))\n      \n      Else\n      \n        &#39; Display an error message.\n        MessageLabel.Text = &quot;An error occurred during the update operation.&quot;\n\n        &#39; When an error occurs, keep the FormView\n        &#39; control in edit mode.\n        e.KeepInEditMode = True\n        \n      End If\n    \n    Else\n          \n      &#39; Insert the code to handle the exception.\n      MessageLabel.Text = e.Exception.Message\n\n      &#39; Use the ExceptionHandled property to indicate that the \n      &#39; exception has already been handled.\n      e.ExceptionHandled = True\n\n      e.KeepInEditMode = True\n    \n    End If\n    \n  End Sub\n\n  Sub DisplayValues(ByVal newValues As OrderedDictionary, ByVal oldValues As OrderedDictionary)\n\n    MessageLabel.Text &amp;= &quot;&lt;br/&gt;&lt;/br&gt;&quot;\n\n    &#39; Iterate through the new and old values. Display the\n    &#39; values on the page.\n    Dim i As Integer\n    For i = 0 To oldValues.Count - 1\n    \n      MessageLabel.Text &amp;= &quot;Old Value=&quot; &amp; oldValues(i).ToString() &amp; _\n        &quot;, New Value=&quot; &amp; newValues(i).ToString() &amp; &quot;&lt;br/&gt;&quot;\n    Next\n\n    MessageLabel.Text &amp;= &quot;&lt;/br&gt;&quot;\n\n  End Sub\n\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;FormViewUpdatedEventArgs Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n        \n      &lt;h3&gt;FormViewUpdatedEventArgs Example&lt;/h3&gt;\n                       \n      &lt;asp:formview id=&quot;EmployeeFormView&quot;\n        datasourceid=&quot;EmployeeSource&quot;\n        allowpaging=&quot;true&quot;\n        datakeynames=&quot;EmployeeID&quot;\n        emptydatatext=&quot;No employees found.&quot;\n        runat=&quot;server&quot;&gt;\n        \n        &lt;itemtemplate&gt;\n          &lt;table&gt;\n            &lt;tr&gt;\n              &lt;td rowspan=&quot;6&quot;&gt;\n                &lt;asp:image id=&quot;EmployeeImage&quot;\n                  imageurl=&#39;&lt;%# Eval(&quot;PhotoPath&quot;) %&gt;&#39;\n                  alternatetext=&#39;&lt;%# Eval(&quot;LastName&quot;) %&gt;&#39; \n                  runat=&quot;server&quot;/&gt;\n              &lt;/td&gt;\n              &lt;td colspan=&quot;2&quot;&gt;\n                  &amp;nbsp; \n              &lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n              &lt;td&gt;\n                &lt;b&gt;Name:&lt;/b&gt;\n              &lt;/td&gt;\n              &lt;td&gt;\n                &lt;%# Eval(&quot;FirstName&quot;) %&gt; &lt;%# Eval(&quot;LastName&quot;) %&gt;\n              &lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n              &lt;td&gt;\n                &lt;b&gt;Title:&lt;/b&gt;\n              &lt;/td&gt;\n              &lt;td&gt;\n                &lt;%# Eval(&quot;Title&quot;) %&gt;\n              &lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n              &lt;td&gt;\n                &lt;b&gt;Hire Date:&lt;/b&gt;                 \n              &lt;/td&gt;\n              &lt;td&gt;\n                &lt;%# Eval(&quot;HireDate&quot;,&quot;{0:d}&quot;) %&gt;\n              &lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr style=&quot;height:150&quot; valign=&quot;top&quot;&gt;\n              &lt;td&gt;\n                &lt;b&gt;Address:&lt;/b&gt;\n              &lt;/td&gt;\n              &lt;td&gt;\n                &lt;%# Eval(&quot;Address&quot;) %&gt;&lt;br/&gt;\n                &lt;%# Eval(&quot;City&quot;) %&gt; &lt;%# Eval(&quot;Region&quot;) %&gt;\n                &lt;%# Eval(&quot;PostalCode&quot;) %&gt;&lt;br/&gt;\n                &lt;%# Eval(&quot;Country&quot;) %&gt;   \n              &lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n              &lt;td colspan=&quot;2&quot;&gt;\n                &lt;asp:linkbutton id=&quot;Edit&quot;\n                  text=&quot;Edit&quot;\n                  commandname=&quot;Edit&quot;\n                  runat=&quot;server&quot;/&gt; \n              &lt;/td&gt;\n            &lt;/tr&gt;\n          &lt;/table&gt;       \n        &lt;/itemtemplate&gt;\n        &lt;edititemtemplate&gt;\n          &lt;table&gt;\n            &lt;tr&gt;\n              &lt;td rowspan=&quot;6&quot;&gt;\n                &lt;asp:image id=&quot;EmployeeEditImage&quot;\n                  imageurl=&#39;&lt;%# Eval(&quot;PhotoPath&quot;) %&gt;&#39;\n                  alternatetext=&#39;&lt;%# Eval(&quot;LastName&quot;) %&gt;&#39; \n                  runat=&quot;server&quot;/&gt;\n              &lt;/td&gt;\n              &lt;td colspan=&quot;2&quot;&gt;\n                  &amp;nbsp; \n              &lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n              &lt;td&gt;\n                &lt;b&gt;&lt;asp:Label runat=&quot;server&quot; \n                  AssociatedControlID=&quot;FirstNameUpdateTextBox&quot; \n                  Text=&quot;Name&quot; /&gt;:&lt;/b&gt;\n              &lt;/td&gt;\n              &lt;td&gt;\n                &lt;asp:textbox id=&quot;FirstNameUpdateTextBox&quot;\n                  text=&#39;&lt;%# Bind(&quot;FirstName&quot;) %&gt;&#39;\n                  accesskey=&quot;n&quot; tabindex=&quot;1&quot; runat=&quot;server&quot;/&gt;\n                &lt;asp:textbox id=&quot;LastNameUpdateTextBox&quot;\n                  text=&#39;&lt;%# Bind(&quot;LastName&quot;) %&gt;&#39;\n                  accesskey=&quot;l&quot; tabindex=&quot;2&quot; runat=&quot;server&quot;/&gt;\n              &lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n              &lt;td&gt;\n                &lt;b&gt;&lt;asp:Label runat=&quot;server&quot; \n                  AssociatedControlID=&quot;TitleUpdateTextBox&quot; \n                  Text=&quot;Title&quot; /&gt;:&lt;/b&gt;\n              &lt;/td&gt;\n              &lt;td&gt;\n                &lt;asp:textbox id=&quot;TitleUpdateTextBox&quot;\n                  text=&#39;&lt;%# Bind(&quot;Title&quot;) %&gt;&#39;\n                  accesskey=&quot;t&quot; tabindex=&quot;3&quot; runat=&quot;server&quot;/&gt; \n              &lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;b&gt;&lt;asp:Label runat=&quot;server&quot; \n                  AssociatedControlID=&quot;HireDateUpdateTextBox&quot; \n                  Text=&quot;Hire Date&quot; /&gt;:&lt;/b&gt;\n              &lt;td&gt;\n                &lt;asp:textbox id=&quot;HireDateUpdateTextBox&quot;\n                  text=&#39;&lt;%# Bind(&quot;HireDate&quot;, &quot;{0:d}&quot;) %&gt;&#39;\n                  accesskey=&quot;h&quot; tabindex=&quot;4&quot; runat=&quot;server&quot; /&gt;\n              &lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr style=&quot;height:150&quot; valign=&quot;top&quot;&gt;\n              &lt;td&gt;\n                &lt;b&gt;&lt;asp:Label runat=&quot;server&quot; \n                  AssociatedControlID=&quot;AddressUpdateTextBox&quot; \n                  Text=&quot;Address&quot; /&gt;:&lt;/b&gt;\n              &lt;/td&gt;\n              &lt;td&gt;\n                &lt;asp:textbox id=&quot;AddressUpdateTextBox&quot;\n                  text=&#39;&lt;%# Bind(&quot;Address&quot;) %&gt;&#39;\n                  accesskey=&quot;a&quot; tabindex=&quot;5&quot; runat=&quot;server&quot;/&gt;\n                &lt;br/&gt;\n                &lt;asp:textbox id=&quot;CityUpdateTextBox&quot;\n                  text=&#39;&lt;%# Bind(&quot;City&quot;) %&gt;&#39;\n                  accesskey=&quot;c&quot; tabindex=&quot;6&quot; runat=&quot;server&quot;/&gt; \n                &lt;asp:textbox id=&quot;RegionUpdateTextBox&quot;\n                  text=&#39;&lt;%# Bind(&quot;Region&quot;) %&gt;&#39;\n                  width=&quot;40&quot;\n                  accesskey=&quot;r&quot; tabindex=&quot;7&quot; runat=&quot;server&quot;/&gt;\n                &lt;asp:textbox id=&quot;PostalCodeUpdateTextBox&quot;\n                  text=&#39;&lt;%# Bind(&quot;PostalCode&quot;) %&gt;&#39;\n                  width=&quot;60&quot;\n                  accesskey=&quot;p&quot; tabindex=&quot;8&quot; runat=&quot;server&quot;/&gt;\n                &lt;br/&gt;\n                &lt;asp:textbox id=&quot;CountryUpdateTextBox&quot;\n                  text=&#39;&lt;%# Bind(&quot;Country&quot;) %&gt;&#39;\n                  accesskey=&quot;u&quot; tabindex=&quot;9&quot; runat=&quot;server&quot;/&gt; \n              &lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n              &lt;td colspan=&quot;2&quot;&gt;\n                &lt;asp:linkbutton id=&quot;UpdateButton&quot;\n                  text=&quot;Update&quot; tabindex=&quot;10&quot; \n                  commandname=&quot;Update&quot;\n                  runat=&quot;server&quot;/&gt;\n                &lt;asp:linkbutton id=&quot;CancelButton&quot;\n                  text=&quot;Cancel&quot; tabindex=&quot;11&quot; \n                  commandname=&quot;Cancel&quot;\n                  runat=&quot;server&quot;/&gt; \n              &lt;/td&gt;\n            &lt;/tr&gt;\n          &lt;/table&gt;       \n        &lt;/edititemtemplate&gt;\n                  \n      &lt;/asp:formview&gt;\n      \n      &lt;br/&gt;&lt;br/&gt;\n      \n      &lt;asp:label id=&quot;MessageLabel&quot;\n          forecolor=&quot;Red&quot;\n          runat=&quot;server&quot;/&gt;\n          \n      &lt;!-- This example uses Microsoft SQL Server and connects  --&gt;\n      &lt;!-- to the Northwind sample database. Use an ASP.NET     --&gt;\n      &lt;!-- expression to retrieve the connection string value   --&gt;\n      &lt;!-- from the Web.config file.                            --&gt;\n      &lt;asp:sqldatasource id=&quot;EmployeeSource&quot;\n        selectcommand=&quot;Select [EmployeeID], [LastName], [FirstName], [Title], [Address], [City], [Region], [PostalCode], [Country], [HireDate], [PhotoPath] From [Employees]&quot;\n        updatecommand=&quot;Update [Employees] Set [LastName]=@LastName, [FirstName]=@FirstName, [Title]=@Title, [Address]=@Address, [City]=@City, [Region]=@Region, [PostalCode]=@PostalCode, [Country]=@Country Where [EmployeeID]=@EmployeeID&quot;\n        connectionstring=&quot;&lt;%$ ConnectionStrings:NorthWindConnectionString%&gt;&quot; \n        runat=&quot;server&quot;/&gt;\n            \n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"FormViewUpdatedEventArgs#1\">\n&lt;%@ Page language=&quot;C#&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  void EmployeeFormView_ItemUpdated(Object sender, FormViewUpdatedEventArgs e)\n  {\n    // Use the Exception property to determine whether an exception\n    // occurred during the update operation.\n    if (e.Exception == null)\n    {\n      // Sometimes an error might occur that does not raise an \n      // exception, but prevents the update operation from \n      // completing. Use the AffectedRows property to determine \n      // whether the record was actually updated. \n      if (e.AffectedRows == 1)\n      {\n        // Use the Keys property to get the value of the key field.\n        String keyFieldValue = e.Keys[&quot;EmployeeID&quot;].ToString();\n\n        // Display a confirmation message.\n        MessageLabel.Text = &quot;Record &quot; + keyFieldValue +\n          &quot; updated successfully. &quot;;\n\n        // Display the new and original values.\n        DisplayValues((OrderedDictionary)e.NewValues, (OrderedDictionary)e.OldValues);\n      }\n      else\n      {\n        // Display an error message.\n        MessageLabel.Text = &quot;An error occurred during the update operation.&quot;;\n\n        // When an error occurs, keep the FormView\n        // control in edit mode.\n        e.KeepInEditMode = true;\n      }\n    }\n    else\n    {\n      // Insert the code to handle the exception.\n      MessageLabel.Text = e.Exception.Message;\n\n      // Use the ExceptionHandled property to indicate that the \n      // exception has already been handled.\n      e.ExceptionHandled = true;\n\n      e.KeepInEditMode = true;\n    }\n  }\n\n  void DisplayValues(OrderedDictionary newValues, OrderedDictionary oldValues)\n  {\n\n    MessageLabel.Text += &quot;&lt;br/&gt;&lt;/br&gt;&quot;;\n\n    // Iterate through the new and old values. Display the\n    // values on the page.\n    for (int i = 0; i &lt; oldValues.Count; i++)\n    {\n      MessageLabel.Text += &quot;Old Value=&quot; + oldValues[i].ToString() +\n        &quot;, New Value=&quot; + newValues[i].ToString() + &quot;&lt;br/&gt;&quot;;\n    }\n\n    MessageLabel.Text += &quot;&lt;/br&gt;&quot;;\n\n  }\n\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;FormViewUpdatedEventArgs Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n        \n      &lt;h3&gt;FormViewUpdatedEventArgs Example&lt;/h3&gt;\n                       \n      &lt;asp:formview id=&quot;EmployeeFormView&quot;\n        datasourceid=&quot;EmployeeSource&quot;\n        allowpaging=&quot;true&quot;\n        datakeynames=&quot;EmployeeID&quot;\n        emptydatatext=&quot;No employees found.&quot;\n        onitemupdated=&quot;EmployeeFormView_ItemUpdated&quot;   \n        runat=&quot;server&quot;&gt;\n        \n        &lt;itemtemplate&gt;\n          &lt;table&gt;\n            &lt;tr&gt;\n              &lt;td rowspan=&quot;6&quot;&gt;\n                &lt;asp:image id=&quot;EmployeeImage&quot;\n                  imageurl=&#39;&lt;%# Eval(&quot;PhotoPath&quot;) %&gt;&#39;\n                  alternatetext=&#39;&lt;%# Eval(&quot;LastName&quot;) %&gt;&#39; \n                  runat=&quot;server&quot;/&gt;\n              &lt;/td&gt;\n              &lt;td colspan=&quot;2&quot;&gt;\n                  &amp;nbsp; \n              &lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n              &lt;td&gt;\n                &lt;b&gt;Name:&lt;/b&gt;\n              &lt;/td&gt;\n              &lt;td&gt;\n                &lt;%# Eval(&quot;FirstName&quot;) %&gt; &lt;%# Eval(&quot;LastName&quot;) %&gt;\n              &lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n              &lt;td&gt;\n                &lt;b&gt;Title:&lt;/b&gt;\n              &lt;/td&gt;\n              &lt;td&gt;\n                &lt;%# Eval(&quot;Title&quot;) %&gt;\n              &lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n              &lt;td&gt;\n                &lt;b&gt;Hire Date:&lt;/b&gt;                 \n              &lt;/td&gt;\n              &lt;td&gt;\n                &lt;%# Eval(&quot;HireDate&quot;,&quot;{0:d}&quot;) %&gt;\n              &lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr style=&quot;height:150&quot; valign=&quot;top&quot;&gt;\n              &lt;td&gt;\n                &lt;b&gt;Address:&lt;/b&gt;\n              &lt;/td&gt;\n              &lt;td&gt;\n                &lt;%# Eval(&quot;Address&quot;) %&gt;&lt;br/&gt;\n                &lt;%# Eval(&quot;City&quot;) %&gt; &lt;%# Eval(&quot;Region&quot;) %&gt;\n                &lt;%# Eval(&quot;PostalCode&quot;) %&gt;&lt;br/&gt;\n                &lt;%# Eval(&quot;Country&quot;) %&gt;   \n              &lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n              &lt;td colspan=&quot;2&quot;&gt;\n                &lt;asp:linkbutton id=&quot;Edit&quot;\n                  text=&quot;Edit&quot;\n                  commandname=&quot;Edit&quot;\n                  runat=&quot;server&quot;/&gt; \n              &lt;/td&gt;\n            &lt;/tr&gt;\n          &lt;/table&gt;       \n        &lt;/itemtemplate&gt;\n        &lt;edititemtemplate&gt;\n          &lt;table&gt;\n            &lt;tr&gt;\n              &lt;td rowspan=&quot;6&quot;&gt;\n                &lt;asp:image id=&quot;EmployeeEditImage&quot;\n                  imageurl=&#39;&lt;%# Eval(&quot;PhotoPath&quot;) %&gt;&#39;\n                  alternatetext=&#39;&lt;%# Eval(&quot;LastName&quot;) %&gt;&#39; \n                  runat=&quot;server&quot;/&gt;\n              &lt;/td&gt;\n              &lt;td colspan=&quot;2&quot;&gt;\n                  &amp;nbsp; \n              &lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n              &lt;td&gt;\n                &lt;b&gt;&lt;asp:Label runat=&quot;server&quot; \n                  AssociatedControlID=&quot;FirstNameUpdateTextBox&quot; \n                  Text=&quot;Name&quot; /&gt;:&lt;/b&gt;\n              &lt;/td&gt;\n              &lt;td&gt;\n                &lt;asp:textbox id=&quot;FirstNameUpdateTextBox&quot;\n                  text=&#39;&lt;%# Bind(&quot;FirstName&quot;) %&gt;&#39;\n                  accesskey=&quot;n&quot; tabindex=&quot;1&quot; runat=&quot;server&quot;/&gt;\n                &lt;asp:textbox id=&quot;LastNameUpdateTextBox&quot;\n                  text=&#39;&lt;%# Bind(&quot;LastName&quot;) %&gt;&#39;\n                  accesskey=&quot;l&quot; tabindex=&quot;2&quot; runat=&quot;server&quot;/&gt;\n              &lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n              &lt;td&gt;\n                &lt;b&gt;&lt;asp:Label runat=&quot;server&quot; \n                  AssociatedControlID=&quot;TitleUpdateTextBox&quot; \n                  Text=&quot;Title&quot; /&gt;:&lt;/b&gt;\n              &lt;/td&gt;\n              &lt;td&gt;\n                &lt;asp:textbox id=&quot;TitleUpdateTextBox&quot;\n                  text=&#39;&lt;%# Bind(&quot;Title&quot;) %&gt;&#39;\n                  accesskey=&quot;t&quot; tabindex=&quot;3&quot; runat=&quot;server&quot;/&gt; \n              &lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;b&gt;&lt;asp:Label runat=&quot;server&quot; \n                  AssociatedControlID=&quot;HireDateUpdateTextBox&quot; \n                  Text=&quot;Hire Date&quot; /&gt;:&lt;/b&gt;\n              &lt;td&gt;\n                &lt;asp:textbox id=&quot;HireDateUpdateTextBox&quot;\n                  text=&#39;&lt;%# Bind(&quot;HireDate&quot;, &quot;{0:d}&quot;) %&gt;&#39;\n                  accesskey=&quot;h&quot; tabindex=&quot;4&quot; runat=&quot;server&quot; /&gt;\n              &lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr style=&quot;height:150&quot; valign=&quot;top&quot;&gt;\n              &lt;td&gt;\n                &lt;b&gt;&lt;asp:Label runat=&quot;server&quot; \n                  AssociatedControlID=&quot;AddressUpdateTextBox&quot; \n                  Text=&quot;Address&quot; /&gt;:&lt;/b&gt;\n              &lt;/td&gt;\n              &lt;td&gt;\n                &lt;asp:textbox id=&quot;AddressUpdateTextBox&quot;\n                  text=&#39;&lt;%# Bind(&quot;Address&quot;) %&gt;&#39;\n                  accesskey=&quot;a&quot; tabindex=&quot;5&quot; runat=&quot;server&quot;/&gt;\n                &lt;br/&gt;\n                &lt;asp:textbox id=&quot;CityUpdateTextBox&quot;\n                  text=&#39;&lt;%# Bind(&quot;City&quot;) %&gt;&#39;\n                  accesskey=&quot;c&quot; tabindex=&quot;6&quot; runat=&quot;server&quot;/&gt; \n                &lt;asp:textbox id=&quot;RegionUpdateTextBox&quot;\n                  text=&#39;&lt;%# Bind(&quot;Region&quot;) %&gt;&#39;\n                  width=&quot;40&quot;\n                  accesskey=&quot;r&quot; tabindex=&quot;7&quot; runat=&quot;server&quot;/&gt;\n                &lt;asp:textbox id=&quot;PostalCodeUpdateTextBox&quot;\n                  text=&#39;&lt;%# Bind(&quot;PostalCode&quot;) %&gt;&#39;\n                  width=&quot;60&quot;\n                  accesskey=&quot;p&quot; tabindex=&quot;8&quot; runat=&quot;server&quot;/&gt;\n                &lt;br/&gt;\n                &lt;asp:textbox id=&quot;CountryUpdateTextBox&quot;\n                  text=&#39;&lt;%# Bind(&quot;Country&quot;) %&gt;&#39;\n                  accesskey=&quot;u&quot; tabindex=&quot;9&quot; runat=&quot;server&quot;/&gt; \n              &lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n              &lt;td colspan=&quot;2&quot;&gt;\n                &lt;asp:linkbutton id=&quot;UpdateButton&quot;\n                  text=&quot;Update&quot; tabindex=&quot;10&quot; \n                  commandname=&quot;Update&quot;\n                  runat=&quot;server&quot;/&gt;\n                &lt;asp:linkbutton id=&quot;CancelButton&quot;\n                  text=&quot;Cancel&quot; tabindex=&quot;11&quot; \n                  commandname=&quot;Cancel&quot;\n                  runat=&quot;server&quot;/&gt; \n              &lt;/td&gt;\n            &lt;/tr&gt;\n          &lt;/table&gt;       \n        &lt;/edititemtemplate&gt;\n                  \n      &lt;/asp:formview&gt;\n      \n      &lt;br/&gt;&lt;br/&gt;\n      \n      &lt;asp:label id=&quot;MessageLabel&quot;\n          forecolor=&quot;Red&quot;\n          runat=&quot;server&quot;/&gt;\n          \n      &lt;!-- This example uses Microsoft SQL Server and connects  --&gt;\n      &lt;!-- to the Northwind sample database. Use an ASP.NET     --&gt;\n      &lt;!-- expression to retrieve the connection string value   --&gt;\n      &lt;!-- from the Web.config file.                            --&gt;\n      &lt;asp:sqldatasource id=&quot;EmployeeSource&quot;\n        selectcommand=&quot;Select [EmployeeID], [LastName], [FirstName], [Title], [Address], [City], [Region], [PostalCode], [Country], [HireDate], [PhotoPath] From [Employees]&quot;\n        updatecommand=&quot;Update [Employees] Set [LastName]=@LastName, [FirstName]=@FirstName, [Title]=@Title, [Address]=@Address, [City]=@City, [Region]=@Region, [PostalCode]=@PostalCode, [Country]=@Country Where [EmployeeID]=@EmployeeID&quot;\n        connectionstring=&quot;&lt;%$ ConnectionStrings:NorthWindConnectionString%&gt;&quot; \n        runat=&quot;server&quot;/&gt;\n            \n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The <a class=\"xref\" href=\"system.web.ui.webcontrols.formview\" data-linktype=\"relative-path\">FormView</a> control raises the <a class=\"xref\" href=\"system.web.ui.webcontrols.formview#System_Web_UI_WebControls_FormView_ItemUpdated\" data-linktype=\"relative-path\">ItemUpdated</a> event when an Update button (a button with its <code>CommandName</code> property set to &quot;Update&quot;) within the control is clicked, but after the <a class=\"xref\" href=\"system.web.ui.webcontrols.formview\" data-linktype=\"relative-path\">FormView</a> control updates the record. This allows you to provide an event-handling method that performs a custom routine, such as checking the results of an update operation, whenever this event occurs.  </p>\n<p> When you create a FormViewUpdatedEventHandler delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see <a href=\"http://msdn.microsoft.com/en-us/d98fd58b-fa4f-4598-8378-addf4355a115\" data-linktype=\"external\">NIB: Events and Delegates</a>.</p>\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.UI.WebControls.FormViewUpdatedEventHandler.yml\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.FormViewUpdatedEventHandler\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.FormViewUpdatedEventHandler..ctor\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.FormViewUpdatedEventHandler.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.FormViewUpdatedEventHandler.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.FormViewUpdatedEventHandler.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-29 05:54 AM\">\r\n<meta name=\"document_id\" content=\"5280c36e-14bc-29d9-ba1d-2ce58faae01e\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the method that handles the  event of a  control.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.web.ui.webcontrols/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Web.UI.WebControls.FormViewUpdatedEventHandler\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.UI.WebControls.FormViewUpdatedEventHandler.yml","open_to_public_contributors":false,"api_name":["System.Web.UI.WebControls.FormViewUpdatedEventHandler","System.Web.UI.WebControls.FormViewUpdatedEventHandler..ctor","System.Web.UI.WebControls.FormViewUpdatedEventHandler.Invoke","System.Web.UI.WebControls.FormViewUpdatedEventHandler.BeginInvoke","System.Web.UI.WebControls.FormViewUpdatedEventHandler.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Web.UI.WebControls.FormViewUpdatedEventHandler","System::Web::UI::WebControls::FormViewUpdatedEventHandler"],"dev_langs":["csharp"],"updated_at":"2017-03-29 05:54 AM","document_id":"5280c36e-14bc-29d9-ba1d-2ce58faae01e","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Web.UI.WebControls/FormViewUpdatedEventHandler.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"FormViewUpdatedEventHandler delegate | Microsoft Docs","_op_ogTitle":"FormViewUpdatedEventHandler delegate","description":"Represents the method that handles the  event of a  control.\n","toc_asset_id":"api/_splitted/System.Web.UI.WebControls/toc.json","toc_rel":"_splitted/System.Web.UI.WebControls/toc.json","source_url":"","ms.assetid":"System.Web.UI.WebControls.FormViewUpdatedEventHandler","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.webcontrols.formviewupdatedeventhandler","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.webcontrols.formviewupdatedeventhandler","fileRelativePath":"api/System.Web.UI.WebControls.FormViewUpdatedEventHandler.html"},"themesRelativePathToOutputRoot":"_themes/"}