{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">Comparer&lt;T&gt;</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Provides a base class for implementations of the <span class=\"xref\">stem.Collections.Generic.IComparer`1</span> generic interface.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public abstract class Comparer&lt;T&gt; : System.Collections.Generic.IComparer&lt;T&gt;, System.Collections.IComparer</code></pre>\r\n  \r\n  \r\n  \r\n  \t\t<h3 class=\"accented\">Type Parameters</h3>\r\n  \t\t<table class=\"nameValue stack\">\r\n  \t\t\t<tr>\r\n  \t\t\t<td>T</td>\r\n  \t\t\t<td><p>The type of objects to compare.</p>\n</td>\r\n  \t\t\t</tr>\r\n  \t\t</table>\r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><span class=\"lang-csharp\">Comparer&lt;T&gt;</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example derives a class, <code>BoxLengthFirst</code>, from the Comparer(T) class. This comparer compares two objects of type <code>Box</code>. It sorts them first by length, then by height, and then by width. The <code>Box</code> class implements the <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> interface to control the default comparison between two <code>Box</code> objects. This default implementation sorts first by height, then by length, and then by width. The example shows the differences between the two comparisons by sorting a list of <code>Box</code> objects first by using the <code>BoxLengthFirst</code> comparer and then by using the default comparer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.Generic.BoxCompare#1\">using System;\nusing System.Collections;\nusing System.Collections.Generic;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        List&lt;Box&gt; Boxes = new List&lt;Box&gt;();\n        Boxes.Add(new Box(4, 20, 14));\n        Boxes.Add(new Box(12, 12, 12));\n        Boxes.Add(new Box(8, 20, 10));\n        Boxes.Add(new Box(6, 10, 2));\n        Boxes.Add(new Box(2, 8, 4));\n        Boxes.Add(new Box(2, 6, 8));\n        Boxes.Add(new Box(4, 12, 20));\n        Boxes.Add(new Box(18, 10, 4));\n        Boxes.Add(new Box(24, 4, 18));\n        Boxes.Add(new Box(10, 4, 16));\n        Boxes.Add(new Box(10, 2, 10));\n        Boxes.Add(new Box(6, 18, 2));\n        Boxes.Add(new Box(8, 12, 4));\n        Boxes.Add(new Box(12, 10, 8));\n        Boxes.Add(new Box(14, 6, 6));\n        Boxes.Add(new Box(16, 6, 16));\n        Boxes.Add(new Box(2, 8, 12));\n        Boxes.Add(new Box(4, 24, 8));\n        Boxes.Add(new Box(8, 6, 20));\n        Boxes.Add(new Box(18, 18, 12));\n\n        // Sort by an Comparer&lt;T&gt; implementation that sorts\n        // first by the length.\n        Boxes.Sort(new BoxLengthFirst());\n\n        Console.WriteLine(&quot;H - L - W&quot;);\n        Console.WriteLine(&quot;==========&quot;);\n        foreach (Box bx in Boxes)\n        {\n            Console.WriteLine(&quot;{0}\\t{1}\\t{2}&quot;,\n                bx.Height.ToString(), bx.Length.ToString(), \n                bx.Width.ToString());\n        }\n\n        Console.WriteLine();\n        Console.WriteLine(&quot;H - L - W&quot;); \n        Console.WriteLine(&quot;==========&quot;);\n\n        // Get the default comparer that \n        // sorts first by the height.\n        Comparer&lt;Box&gt; defComp = Comparer&lt;Box&gt;.Default;\n\n        // Calling Boxes.Sort() with no parameter\n        // is the same as calling Boxs.Sort(defComp)\n        // because they are both using the default comparer.\n        Boxes.Sort();\n\n        foreach (Box bx in Boxes)\n        {\n            Console.WriteLine(&quot;{0}\\t{1}\\t{2}&quot;,\n                bx.Height.ToString(), bx.Length.ToString(), \n                bx.Width.ToString());\n        }\n\n\n        // This explicit interface implementation\n        // compares first by the length.\n        // Returns -1 because the length of BoxA\n        // is less than the length of BoxB.\n        BoxLengthFirst LengthFirst = new BoxLengthFirst(); \n\n        Comparer&lt;Box&gt; bc = (Comparer&lt;Box&gt;) LengthFirst;\n\n        Box BoxA = new Box(2, 6, 8);\n        Box BoxB = new Box(10, 12, 14);\n        int x = LengthFirst.Compare(BoxA, BoxB);\n        Console.WriteLine();\n        Console.WriteLine(x.ToString());\n\n    \n\n    }\n\n}\n\npublic class BoxLengthFirst : Comparer&lt;Box&gt; \n{\n    // Compares by Length, Height, and Width.\n    public override int Compare(Box x, Box y)\n    {\n        if (x.Length.CompareTo(y.Length) != 0)\n        {\n            return x.Length.CompareTo(y.Length);\n        }\n        else if (x.Height.CompareTo(y.Height) != 0)\n        {\n            return x.Height.CompareTo(y.Height);\n        }\n        else if (x.Width.CompareTo(y.Width) != 0)\n        {\n            return x.Width.CompareTo(y.Width);\n        }\n        else\n        {\n            return 0;\n        }\n    }\n\n}\n\n// This class is not demonstrated in the Main method\n// and is provided only to show how to implement\n// the interface. It is recommended to derive\n// from Comparer&lt;T&gt; instead of implementing IComparer&lt;T&gt;.\npublic class BoxComp : IComparer&lt;Box&gt;\n{\n    // Compares by Height, Length, and Width.\n    public int Compare(Box x, Box y)\n    {\n        if (x.Height.CompareTo(y.Height) != 0)\n        {\n            return x.Height.CompareTo(y.Height);\n        }\n        else if (x.Length.CompareTo(y.Length) != 0)\n        {\n            return x.Length.CompareTo(y.Length);\n        }\n        else if (x.Width.CompareTo(y.Width) != 0)\n        {\n            return x.Width.CompareTo(y.Width);\n        }\n        else\n        {\n            return 0;\n        }\n    }\n}\n\npublic class Box : IComparable&lt;Box&gt;\n{\n\n    public Box(int h, int l, int w)\n    {\n        this.Height = h;\n        this.Length = l;\n        this.Width = w;\n    }\n    public int Height { get; private set; }\n    public int Length { get; private set; }\n    public int Width { get; private set; }\n\n    public int CompareTo(Box other)\n    {\n        // Compares Height, Length, and Width.\n        if (this.Height.CompareTo(other.Height) != 0)\n        {\n            return this.Height.CompareTo(other.Height);\n        }\n        else if (this.Length.CompareTo(other.Length) != 0)\n        {\n            return this.Length.CompareTo(other.Length);\n        }\n        else if (this.Width.CompareTo(other.Width) != 0)\n        {\n            return this.Width.CompareTo(other.Width);\n        }\n        else\n        {\n            return 0;\n        }\n    }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Generic.BoxCompare#1\">Imports System.Collections.Generic\n\nFriend Class Program\n\tShared Sub Main(ByVal args() As String)\n\t\tDim Boxes As New List(Of Box)()\n\t\tBoxes.Add(New Box(4, 20, 14))\n\t\tBoxes.Add(New Box(12, 12, 12))\n\t\tBoxes.Add(New Box(8, 20, 10))\n\t\tBoxes.Add(New Box(6, 10, 2))\n\t\tBoxes.Add(New Box(2, 8, 4))\n\t\tBoxes.Add(New Box(2, 6, 8))\n\t\tBoxes.Add(New Box(4, 12, 20))\n\t\tBoxes.Add(New Box(18, 10, 4))\n\t\tBoxes.Add(New Box(24, 4, 18))\n\t\tBoxes.Add(New Box(10, 4, 16))\n\t\tBoxes.Add(New Box(10, 2, 10))\n\t\tBoxes.Add(New Box(6, 18, 2))\n\t\tBoxes.Add(New Box(8, 12, 4))\n\t\tBoxes.Add(New Box(12, 10, 8))\n\t\tBoxes.Add(New Box(14, 6, 6))\n\t\tBoxes.Add(New Box(16, 6, 16))\n\t\tBoxes.Add(New Box(2, 8, 12))\n\t\tBoxes.Add(New Box(4, 24, 8))\n\t\tBoxes.Add(New Box(8, 6, 20))\n\t\tBoxes.Add(New Box(18, 18, 12))\n\n\t\t&#39; Sort by an Comparer&lt;T&gt; implementation that sorts\n\t\t&#39; first by the length.\n\t\tBoxes.Sort(New BoxLengthFirst())\n\n\t\tConsole.WriteLine(&quot;H - L - W&quot;)\n\t\tConsole.WriteLine(&quot;==========&quot;)\n\t\tFor Each bx As Box In Boxes\n            Console.WriteLine(&quot;{0}&quot; &amp; vbTab &amp; &quot;{1}&quot; &amp; vbTab &amp; &quot;{2}&quot;, _\n                              bx.Height.ToString(), bx.Length.ToString(), _\n                              bx.Width.ToString())\n\t\tNext bx\n\n\t\tConsole.WriteLine()\n\t\tConsole.WriteLine(&quot;H - L - W&quot;)\n\t\tConsole.WriteLine(&quot;==========&quot;)\n\n\t\t&#39; Get the default comparer that \n\t\t&#39; sorts first by the height.\n\t\tDim defComp As Comparer(Of Box) = Comparer(Of Box).Default\n\n\t\t&#39; Calling Boxes.Sort() with no parameter\n\t\t&#39; is the same as calling Boxs.Sort(defComp)\n\t\t&#39; because they are both using the default comparer.\n\t\tBoxes.Sort()\n\n\t\tFor Each bx As Box In Boxes\n            Console.WriteLine(&quot;{0}&quot; &amp; vbTab &amp; &quot;{1}&quot; &amp; vbTab &amp; &quot;{2}&quot;, _\n                              bx.Height.ToString(), _\n                              bx.Length.ToString(), _\n                              bx.Width.ToString())\n\t\tNext bx\n\n\n\t\t&#39; This explicit interface implementation\n\t\t&#39; compares first by the length.\n\t\t&#39; Returns -1 because the length of BoxA\n\t\t&#39; is less than the length of BoxB.\n\t\tDim LengthFirst As New BoxLengthFirst()\n\n\t\tDim bc As Comparer(Of Box) = CType(LengthFirst, Comparer(Of Box))\n\n\t\tDim BoxA As New Box(2, 6, 8)\n\t\tDim BoxB As New Box(10, 12, 14)\n\t\tDim x As Integer = LengthFirst.Compare(BoxA, BoxB)\n\t\tConsole.WriteLine()\n\t\tConsole.WriteLine(x.ToString())\n\n\n\n\tEnd Sub\n\nEnd Class\n\nPublic Class BoxLengthFirst\n\tInherits Comparer(Of Box)\n\t&#39; Compares by Length, Height, and Width.\n\tPublic Overrides Function Compare(ByVal x As Box, ByVal y As Box) As Integer\n\t\tIf x.Length.CompareTo(y.Length) &lt;&gt; 0 Then\n\t\t\tReturn x.Length.CompareTo(y.Length)\n\t\tElseIf x.Height.CompareTo(y.Height) &lt;&gt; 0 Then\n\t\t\tReturn x.Height.CompareTo(y.Height)\n\t\tElseIf x.Width.CompareTo(y.Width) &lt;&gt; 0 Then\n\t\t\tReturn x.Width.CompareTo(y.Width)\n\t\tElse\n\t\t\tReturn 0\n\t\tEnd If\n\tEnd Function\n\nEnd Class\n\n&#39; This class is not demonstrated in the Main method\n&#39; and is provided only to show how to implement\n&#39; the interface. It is recommended to derive\n&#39; from Comparer&lt;T&gt; instead of implementing IComparer&lt;T&gt;.\nPublic Class BoxComp\n\tImplements IComparer(Of Box)\n\t&#39; Compares by Height, Length, and Width.\n    Public Function Compare(ByVal x As Box, ByVal y As Box) As Integer Implements _\n                                                IComparer(Of Box).Compare\n        If x.Height.CompareTo(y.Height) &lt;&gt; 0 Then\n            Return x.Height.CompareTo(y.Height)\n        ElseIf x.Length.CompareTo(y.Length) &lt;&gt; 0 Then\n            Return x.Length.CompareTo(y.Length)\n        ElseIf x.Width.CompareTo(y.Width) &lt;&gt; 0 Then\n            Return x.Width.CompareTo(y.Width)\n        Else\n            Return 0\n        End If\n    End Function\nEnd Class\n\nPublic Class Box\n\tImplements IComparable(Of Box)\n\n\tPublic Sub New(ByVal h As Integer, ByVal l As Integer, ByVal w As Integer)\n\t\tMe.Height = h\n\t\tMe.Length = l\n\t\tMe.Width = w\n\tEnd Sub\n\tPrivate privateHeight As Integer\n\tPublic Property Height() As Integer\n\t\tGet\n\t\t\tReturn privateHeight\n\t\tEnd Get\n\t\tPrivate Set(ByVal value As Integer)\n\t\t\tprivateHeight = value\n\t\tEnd Set\n\tEnd Property\n\tPrivate privateLength As Integer\n\tPublic Property Length() As Integer\n\t\tGet\n\t\t\tReturn privateLength\n\t\tEnd Get\n\t\tPrivate Set(ByVal value As Integer)\n\t\t\tprivateLength = value\n\t\tEnd Set\n\tEnd Property\n\tPrivate privateWidth As Integer\n\tPublic Property Width() As Integer\n\t\tGet\n\t\t\tReturn privateWidth\n\t\tEnd Get\n\t\tPrivate Set(ByVal value As Integer)\n\t\t\tprivateWidth = value\n\t\tEnd Set\n\tEnd Property\n\n    Public Function CompareTo(ByVal other As Box) As Integer _\n                        Implements IComparable(Of Box).CompareTo\n        &#39; Compares Height, Length, and Width.\n        If Me.Height.CompareTo(other.Height) &lt;&gt; 0 Then\n            Return Me.Height.CompareTo(other.Height)\n        ElseIf Me.Length.CompareTo(other.Length) &lt;&gt; 0 Then\n            Return Me.Length.CompareTo(other.Length)\n        ElseIf Me.Width.CompareTo(other.Width) &lt;&gt; 0 Then\n            Return Me.Width.CompareTo(other.Width)\n        Else\n            Return 0\n        End If\n    End Function\n\nEnd Class\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>Derive from this class to provide a custom implementation of the <a class=\"xref\" href=\"system.collections.generic.icomparer-1\" data-linktype=\"relative-path\">IComparer&lt;T&gt;</a> interface for use with collection classes such as the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a> and <a class=\"xref\" href=\"system.collections.generic.sorteddictionary-2\" data-linktype=\"relative-path\">SortedDictionary&lt;TKey,TValue&gt;</a> generic classes.  </p>\n<p> The difference between deriving from the Comparer(T) class and implementing the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">System.IComparable</a> interface is as follows:  </p>\n<ul>\n<li><p>To specify how two objects should be compared by default, implement the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">System.IComparable</a> interface in your class. This ensures that sort operations will use the default comparison code that you provided.  </p>\n</li>\n<li><p>To define a comparer to use instead of the default comparer, derive from the Comparer(T) class. You can then use this comparer in sort operations that take a comparer as a parameter.  </p>\n</li>\n</ul>\n<p> The object returned by the <a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a> property uses the <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">System.IComparable&lt;T&gt;</a> generic interface (<code>IComparable&lt;T&gt;</code> in C#, <code>IComparable(Of T)</code> in Visual Basic) to compare two objects. If type <code>T</code> does not implement the <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">System.IComparable&lt;T&gt;</a> generic interface, the <a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a> property returns a Comparer(T) that uses the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">System.IComparable</a> interface.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Collections_Generic_Comparer_1__ctor\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Comparer&lt;T&gt;()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <span class=\"xref\">stem.Collections.Generic.Comparer`1</span> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected Comparer ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Collections_Generic_Comparer_1_Default\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Default</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a default sort order comparer for the type specified by the generic argument.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Collections.Generic.Comparer&lt;T&gt; Default { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.comparer-1\" data-linktype=\"relative-path\">Comparer&lt;T&gt;</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object that inherits <span class=\"xref\">stem.Collections.Generic.Comparer`1</span> and serves as a sort order comparer for type <code>T</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.collections.generic.comparer-1\" data-linktype=\"relative-path\">Comparer&lt;T&gt;</a> returned by this property uses the <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">System.IComparable&lt;T&gt;</a> generic interface (<code>IComparable&lt;T&gt;</code> in C#, <code>IComparable(Of T)</code> in Visual Basic) to compare two objects. If type <code>T</code> does not implement the <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">System.IComparable&lt;T&gt;</a> generic interface, this property returns a <a class=\"xref\" href=\"system.collections.generic.comparer-1\" data-linktype=\"relative-path\">Comparer&lt;T&gt;</a> that uses the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">System.IComparable</a> interface.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Collections_Generic_Comparer_1_Compare__0__0_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Compare(T, T)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>When overridden in a derived class, performs a comparison of two objects of the same type and returns a value indicating whether one object is less than, equal to, or greater than the other.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public abstract int Compare (T x, T y);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>x</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><span class=\"xref\">T</span></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first object to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>y</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><span class=\"xref\">T</span></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second object to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A signed integer that indicates the relative values of <code>x</code> and <code>y</code>, as shown in the following table.  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Meaning<br>\n </th></tr></thead><tbody><tr><td> Less than zero<br>\n </td><td><code>x</code> is less than <code>y</code>.<br>\n </td></tr><tr><td> Zero<br>\n </td><td><code>x</code> equals <code>y</code>.<br>\n </td></tr><tr><td> Greater than zero<br>\n </td><td><code>x</code> is greater than <code>y</code>.<br>\n </td></tr></tbody></table>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Type <code>T</code> does not implement either the <span class=\"xref\">stem.IComparable`1</span> generic interface or the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Implement this method to provide a customized sort order comparison for type <code>T</code>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Collections_Generic_Comparer_1_Create_System_Comparison__0__\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Create(Comparison&lt;T&gt;)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Creates a comparer by using the specified comparison.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Collections.Generic.Comparer&lt;T&gt; Create (Comparison&lt;T&gt; comparison);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>comparison</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.comparison-1\" data-linktype=\"relative-path\">Comparison&lt;T&gt;</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The comparison to use.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.comparer-1\" data-linktype=\"relative-path\">Comparer&lt;T&gt;</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The new comparer.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Explicit Interface Implementations\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Collections_Generic_Comparer_1_System_Collections_IComparer_Compare_System_Object_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IComparer.Compare(Object, Object)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">int IComparer.Compare (object x, object y);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>x</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first object to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>y</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second object to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A signed integer that indicates the relative values of <code>x</code> and <code>y</code>, as shown in the following table.  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Meaning<br>\n </th></tr></thead><tbody><tr><td> Less than zero<br>\n </td><td><code>x</code> is less than <code>y</code>.<br>\n </td></tr><tr><td> Zero<br>\n </td><td><code>x</code> equals <code>y</code>.<br>\n </td></tr><tr><td> Greater than zero<br>\n </td><td><code>x</code> is greater than <code>y</code>.<br>\n </td></tr></tbody></table>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>x</code> or <code>y</code> is of a type that cannot be cast to type <code>T</code>.  </p>\n<p> -or-  </p>\n<p> <code>x</code> and <code>y</code> do not implement either the <span class=\"xref\">stem.IComparable`1</span> generic interface or the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method is a wrapper for the <a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Compare__0__0_\" data-linktype=\"relative-path\">Compare(T, T)</a> method, so <code>obj</code> must be cast to the type specified by the generic argument <code>T</code> of the current instance. If it cannot be cast to <code>T</code>, an <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a> is thrown.  </p>\n<p> Comparing <code>null</code> with any reference type is allowed and does not generate an exception. When sorting, <code>null</code> is considered to be less than any other object.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Collections.Generic.Comparer-1.yml\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.Comparer&lt;T&gt;\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.Comparer&lt;T&gt;..ctor\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.Comparer&lt;T&gt;.Compare\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.Comparer&lt;T&gt;.Create\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.Comparer&lt;T&gt;.Default\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.Comparer&lt;T&gt;.IComparer.Compare\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-28 03:03 AM\">\r\n<meta name=\"document_id\" content=\"37d98ebf-4bbc-88d7-c163-8ad28d3818b5\">\r\n<meta name=\"internalonly\" content=\"false\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides a base class for implementations of the  generic interface.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.collections.generic/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Collections.Generic.Comparer`1\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Collections.Generic.Comparer-1.yml","open_to_public_contributors":false,"api_name":["System.Collections.Generic.Comparer<T>","System.Collections.Generic.Comparer<T>..ctor","System.Collections.Generic.Comparer<T>.Compare","System.Collections.Generic.Comparer<T>.Create","System.Collections.Generic.Comparer<T>.Default","System.Collections.Generic.Comparer<T>.IComparer.Compare"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Collections.Generic.Comparer`1","System::Collections::Generic::Comparer`1","System.Collections.Generic.Comparer`1.#ctor","System::Collections::Generic::Comparer`1::#ctor","System.Collections.Generic.Comparer`1.Compare","System::Collections::Generic::Comparer`1::Compare","System.Collections.Generic.Comparer`1.Create","System::Collections::Generic::Comparer`1::Create","System.Collections.Generic.Comparer`1.Default","System::Collections::Generic::Comparer`1::Default","System.Collections.Generic.Comparer`1.System#Collections#IComparer#Compare","System::Collections::Generic::Comparer`1::System#Collections#IComparer#Compare"],"dev_langs":["csharp"],"updated_at":"2017-03-28 03:03 AM","document_id":"37d98ebf-4bbc-88d7-c163-8ad28d3818b5","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/Comparer`1.xml","internalonly":false,"layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Comparer<T> class | Microsoft Docs","_op_ogTitle":"Comparer<T> class","description":"Provides a base class for implementations of the  generic interface.\n","toc_asset_id":"api/_splitted/System.Collections.Generic/toc.json","toc_rel":"_splitted/System.Collections.Generic/toc.json","source_url":"","ms.assetid":"System.Collections.Generic.Comparer`1","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.comparer-1","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.comparer-1","fileRelativePath":"api/System.Collections.Generic.Comparer-1.html"},"themesRelativePathToOutputRoot":"_themes/"}