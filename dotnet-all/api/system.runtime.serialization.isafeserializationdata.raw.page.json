{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">ISafeSerializationData</span>\r\n      Interface\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Enables serialization of custom exception data in security-transparent code.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public interface ISafeSerializationData</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example contains an implementation of the ISafeSerializationData interface that is used to store custom data that is serialized.  </p>\n<pre><code class=\"lang-vb\" name=\"ISafeSerializationData#1\">Imports System\nImports System.Runtime.Serialization.Formatters.Binary\nImports System.Runtime.Serialization\nImports System.IO\nImports System.Runtime.Serialization.Formatters.Soap\nImports System.Security\n&#39; Imports System.Security.Permissions\n\n&#39;[assembly: SecurityCritical(SecurityCriticalScope.Everything)] \n&#39; Using the SecurityCriticalAttribute prohibits usage of the \n&#39; ISafeSerializationData interface.\n&lt;Assembly: AllowPartiallyTrustedCallers()&gt; \nNamespace ISafeSerializationDataExample\n\n    Class SerializationDemo\n\n        Shared Sub Main()\n            &#39; This code forces a division by 0 and catches the \n            &#39; resulting exception.\n            Try\n\n                Dim zero As Integer = 0\n                Dim ecks As Integer = 1 / zero\n\n            Catch ex As Exception\n\n                &#39; Create a new exception to throw again.\n                Dim newExcept As New NewException(&quot;Divided by.&quot;, 0)\n\n                Console.WriteLine(\n                    &quot;Forced a division by 0, caught the resulting exception, \\n&quot; &amp; _\n                    &quot;and created a derived exception with custom data:\\n&quot;)\n                Console.WriteLine(&quot;StringData: {0}&quot;, newExcept.StringData)\n                Console.WriteLine(&quot;intData:   {0}&quot;, newExcept.IntData)\n\n                &#39; This FileStream is used for the serialization.\n                Dim fs As New FileStream(&quot;NewException.dat&quot;, _\n                                         FileMode.Create)\n\n                Try\n                    &#39; Serialize the derived exception.\n                    Dim Formatter As New BinaryFormatter()\n                    Formatter.Serialize(fs, newExcept)\n\n                    &#39; Rewind the stream and deserialize the exception.\n                    fs.Position = 0\n                    Dim deserExcept As NewException = _\n                    CType(Formatter.Deserialize(fs), NewException)\n\n                Catch se As SerializationException\n                    Console.WriteLine(&quot;Failed to serialize: {0}&quot;, _\n                                      se.ToString())\n\n                Catch NewEx As NewException\n                    Console.WriteLine(&quot;StringData: {0}&quot;, _\n                                      NewEx.StringData)\n                    Console.WriteLine(&quot;IntData:   {0}&quot;, _\n                                      NewEx.IntData)\n\n                Finally\n                    fs.Close()\n                    Console.ReadLine()\n\n                End Try\n            End Try\n        End Sub\n    End Class\n\n    &lt;Serializable()&gt; Public Class NewException\n        Inherits Exception\n        &lt;NonSerialized()&gt; Private m_state As NewExceptionState = New NewExceptionState()\n\n\n        Public Sub New(ByVal stringData As String, ByVal intData As Integer)\n\n            &#39; Instance data is stored directly in the exception \n            &#39; state(Object.\n            m_state.StringData = stringData\n            m_state.IntData = intData\n\n            &#39; In response to SerializeObjectState, we need to provide \n            &#39; any state to serialize with the exception. In this \n            &#39; case, since our state is already stored in an\n            &#39; ISafeSerializationData implementation, we can\n            &#39; just provide that.\n\n            &#39; An alternate implementation would be to store the state \n            &#39; as local member variables, and in response to this \n            &#39; method create a new instance of an ISafeSerializationData\n            &#39; object and populate it with the local state here before \n            &#39; passing it through to AddSerializedState.\n\n            AddHandler SerializeObjectState, _\n                Sub(exception As Object, _\n                    eventArgs As SafeSerializationEventArgs)\n                    eventArgs.AddSerializedState(m_state)\n                End Sub\n        End Sub\n\n        &#39; Because we don&#39;t want the exception state to be serialized \n        &#39; normally, we take care of that in the constructor.\n\n        &#39; Data access is through the state object, rather than locally.\n        Public Property StringData As String\n\n            Get\n                Return m_state.StringData\n            End Get\n            Set(ByVal value As String)\n                m_state.StringData = value\n            End Set\n        End Property\n\n\n        Public Property IntData As Integer\n\n            Get\n                Return m_state.IntData\n            End Get\n            Set(ByVal value As Integer)\n                m_state.IntData = value\n            End Set\n        End Property\n\n\n        &#39;There is no need to supply a deserialization constructor \n        &#39;(with SerializationInfo and StreamingContext parameters), \n        &#39;and no need to supply a GetObjectData implementation.\n        &#39;Implement the ISafeSerializationData interface to serialize\n        &#39;custom exception data in a partially trusted assembly. \n        &#39;Use this interface to replace the Exception.GetObjectData \n        &#39;method, which is now marked with the SecurityCriticalAttribute.\n\n        &lt;Serializable()&gt; Private Structure NewExceptionState\n            Implements ISafeSerializationData\n            Private m_stringData As String\n            Private m_intData As Integer\n            &#39; This method is called when deserialization of the \n            &#39; exception is complete.\n            Sub CompleteDeserialization(ByVal obj As Object) _\n                Implements ISafeSerializationData.CompleteDeserialization\n\n                &#39; Since the exception simply contains an instance \n                &#39; of the exception state object, we can repopulate it \n                &#39; here by just setting its instance field\n                &#39; to be equal to this deserialized state instance.\n                Dim exception As NewException = _\n                    CType(obj, NewException)\n                exception.m_state = Me\n            End Sub\n\n            Public Property StringData As String\n                Get\n                    Return m_stringData\n                End Get\n                Set(ByVal value As String)\n                    m_stringData = value\n                End Set\n            End Property\n\n            Public Property IntData As Integer\n                Get\n                    Return m_intData\n                End Get\n\n                Set(ByVal value As Integer)\n                    m_intData = value\n                End Set\n            End Property\n        End Structure\n    End Class\nEnd Namespace\n</code></pre><pre><code class=\"lang-cs\" name=\"ISafeSerializationData#1\">using System;\nusing System.Runtime.Serialization.Formatters.Binary;\nusing System.Runtime.Serialization;\nusing System.IO;\nusing System.Runtime.Serialization.Formatters.Soap;\nusing System.Security;\n\n// [assembly: SecurityCritical(SecurityCriticalScope.Everything)] \n// Using the SecurityCriticalAttribute prohibits usage of the \n// ISafeSerializationData interface.\n[assembly: AllowPartiallyTrustedCallers]\nnamespace ISafeSerializationDataExample\n{\n    class Test\n    {\n        public static void Main()\n        {\n            try\n            {\n                // This code forces a division by 0 and catches the \n                // resulting exception.\n                try\n                {\n                    int zero = 0;\n                    int ecks = 1 / zero;\n                }\n                catch (Exception ex)\n                {\n                    // Create a new exception to throw.\n                    NewException newExcept = new NewException(&quot;Divided by&quot;, 0);\n\n                    // This FileStream is used for the serialization.\n                    FileStream fs =\n                        new FileStream(&quot;NewException.dat&quot;,\n                            FileMode.Create);\n\n                    try\n                    {\n                        // Serialize the exception.\n                        BinaryFormatter formatter = new BinaryFormatter();\n                        formatter.Serialize(fs, newExcept);\n\n                        // Rewind the stream and deserialize the exception.\n                        fs.Position = 0;\n                        NewException deserExcept =\n                            (NewException)formatter.Deserialize(fs);\n                        Console.WriteLine(\n                        &quot;Forced a division by 0, caught the resulting exception, \\n&quot; +\n                        &quot;and created a derived exception with custom data. \\n&quot; +\n                        &quot;Serialized the exception and deserialized it:\\n&quot;);\n                        Console.WriteLine(&quot;StringData: {0}&quot;, deserExcept.StringData);\n                        Console.WriteLine(&quot;intData:   {0}&quot;, deserExcept.IntData);\n                    }\n                    catch (SerializationException se)\n                    {\n                        Console.WriteLine(&quot;Failed to serialize: {0}&quot;,\n                            se.ToString());\n                    }\n                    finally\n                    {\n                        fs.Close();\n                        Console.ReadLine();\n                    }\n                }\n            }\n            catch (NewException ex)\n            {\n                Console.WriteLine(&quot;StringData: {0}&quot;, ex.StringData);\n                Console.WriteLine(&quot;IntData:   {0}&quot;, ex.IntData);\n            }\n        }\n    }\n\n    [Serializable]\n    public class NewException : Exception\n    {\n        // Because we don&#39;t want the exception state to be serialized normally, \n        // we take care of that in the constructor.\n        [NonSerialized]\n        private NewExceptionState m_state = new NewExceptionState();\n\n        public NewException(string stringData, int intData)\n        {\n            // Instance data is stored directly in the exception state object.\n            m_state.StringData = stringData;\n            m_state.IntData = intData;\n\n            // In response to SerializeObjectState, we need to provide \n            // any state to serialize with the exception.  In this \n            // case, since our state is already stored in an\n            // ISafeSerializationData implementation, we can \n            // just provide that.\n\n            SerializeObjectState += delegate(object exception,\n                SafeSerializationEventArgs eventArgs)\n            {\n                eventArgs.AddSerializedState(m_state);\n            };\n            // An alternate implementation would be to store the state \n            // as local member variables, and in response to this \n            // method create a new instance of an ISafeSerializationData\n            // object and populate it with the local state here before \n            // passing it through to AddSerializedState.        \n\n        }\n        // There is no need to supply a deserialization constructor \n        // (with SerializationInfo and StreamingContext parameters), \n        // and no need to supply a GetObjectData implementation.\n\n\n        // Data access is through the state object (m_State).\n        public string StringData\n        {\n            get { return m_state.StringData; }\n        }\n\n        public int IntData\n        {\n            get { return m_state.IntData; }\n        }\n\n        // Implement the ISafeSerializationData interface \n        // to contain custom  exception data in a partially trusted \n       // assembly. Use this interface to replace the \n       // Exception.GetObjectData method, \n        // which is now marked with the SecurityCriticalAttribute.\n        [Serializable]\n        private struct NewExceptionState : ISafeSerializationData\n        {\n            private string m_stringData;\n            private int m_intData;\n\n            public string StringData\n            {\n                get { return m_stringData; }\n                set { m_stringData = value; }\n            }\n\n            public int IntData\n            {\n                get { return m_intData; }\n                set { m_intData = value; }\n            }\n\n            // This method is called when deserialization of the \n            // exception is complete.\n            void ISafeSerializationData.CompleteDeserialization\n                (object obj)\n            {\n                // Since the exception simply contains an instance of \n                // the exception state object, we can repopulate it \n                // here by just setting its instance field to be equal \n                // to this deserialized state instance.\n                NewException exception = obj as NewException;\n                exception.m_state = this;\n            }\n        }\n    }\n}\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>In versions previous to.NET Framework 4.0, serialization of custom user data in a security transparent code was accomplished using the <a class=\"xref\" href=\"system.exception#System_Exception_GetObjectData_\" data-linktype=\"relative-path\">GetObjectData</a> method. Starting with .NET Framework 4.0, that method is marked with the <a class=\"xref\" href=\"system.security.securitycriticalattribute\" data-linktype=\"relative-path\">SecurityCriticalAttribute</a> attribute which prevents execution in security-transparent code. To work around this condition, implement the ISafeSerializationData interface and add custom data as shown in the example below.  </p>\n<p> The <a class=\"xref\" href=\"system.runtime.serialization.isafeserializationdata#System_Runtime_Serialization_ISafeSerializationData_CompleteDeserialization_\" data-linktype=\"relative-path\">CompleteDeserialization</a> method is called after serialization, and uses the <a class=\"xref\" href=\"system.runtime.serialization.safeserializationeventargs\" data-linktype=\"relative-path\">SafeSerializationEventArgs</a> to restore the custom data.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Runtime_Serialization_ISafeSerializationData_CompleteDeserialization_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Runtime_Serialization_ISafeSerializationData_CompleteDeserialization_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CompleteDeserialization(Object)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>This method is called when the instance is deserialized.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void CompleteDeserialization (object deserialized);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>deserialized</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object that contains the state of the instance.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The state object is stored in a private variable defined in the implementation of the <a class=\"xref\" href=\"system.runtime.serialization.isafeserializationdata\" data-linktype=\"relative-path\">ISafeSerializationData</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc1.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Runtime.Serialization.ISafeSerializationData.yml\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Serialization.ISafeSerializationData\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 02:21 PM\">\r\n<meta name=\"document_id\" content=\"ecddd660-6368-070e-a7cc-122d5b3ee059\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Enables serialization of custom exception data in security-transparent code.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.runtime.serialization/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Runtime.Serialization.ISafeSerializationData\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Runtime.Serialization.ISafeSerializationData.yml","open_to_public_contributors":false,"api_name":["System.Runtime.Serialization.ISafeSerializationData","System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Runtime.Serialization.ISafeSerializationData","System::Runtime::Serialization::ISafeSerializationData","System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization","System::Runtime::Serialization::ISafeSerializationData::CompleteDeserialization"],"dev_langs":["csharp"],"updated_at":"2017-03-31 02:21 PM","document_id":"ecddd660-6368-070e-a7cc-122d5b3ee059","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Runtime.Serialization/ISafeSerializationData.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ISafeSerializationData interface | Microsoft Docs","_op_ogTitle":"ISafeSerializationData interface","description":"Enables serialization of custom exception data in security-transparent code.\n","toc_asset_id":"api/_splitted/System.Runtime.Serialization/toc.json","toc_rel":"_splitted/System.Runtime.Serialization/toc.json","source_url":"","ms.assetid":"System.Runtime.Serialization.ISafeSerializationData","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.isafeserializationdata","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.isafeserializationdata","fileRelativePath":"api/System.Runtime.Serialization.ISafeSerializationData.html"},"themesRelativePathToOutputRoot":"_themes/"}