{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">AssemblyCopyrightAttribute</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Defines a copyright custom attribute for an assembly manifest.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.AttributeUsage(System.AttributeTargets.Assembly, Inherited=false)]\n[System.Runtime.InteropServices.ComVisible(true)]\npublic sealed class AssemblyCopyrightAttribute : Attribute</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a></span></div><span class=\"lang-csharp\">AssemblyCopyrightAttribute</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_Assembly_System_Type_\" data-linktype=\"relative-path\">GetCustomAttribute(Assembly, Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_Assembly_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttribute(Assembly, Type, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_MemberInfo_System_Type_\" data-linktype=\"relative-path\">GetCustomAttribute(MemberInfo, Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_MemberInfo_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttribute(MemberInfo, Type, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_Module_System_Type_\" data-linktype=\"relative-path\">GetCustomAttribute(Module, Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_Module_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttribute(Module, Type, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_ParameterInfo_System_Type_\" data-linktype=\"relative-path\">GetCustomAttribute(ParameterInfo, Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_ParameterInfo_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttribute(ParameterInfo, Type, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Assembly_\" data-linktype=\"relative-path\">GetCustomAttributes(Assembly)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Assembly_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(Assembly, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Assembly_System_Type_\" data-linktype=\"relative-path\">GetCustomAttributes(Assembly, Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Assembly_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(Assembly, Type, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_MemberInfo_\" data-linktype=\"relative-path\">GetCustomAttributes(MemberInfo)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_MemberInfo_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(MemberInfo, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_MemberInfo_System_Type_\" data-linktype=\"relative-path\">GetCustomAttributes(MemberInfo, Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_MemberInfo_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(MemberInfo, Type, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Module_\" data-linktype=\"relative-path\">GetCustomAttributes(Module)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Module_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(Module, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Module_System_Type_\" data-linktype=\"relative-path\">GetCustomAttributes(Module, Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Module_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(Module, Type, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_ParameterInfo_\" data-linktype=\"relative-path\">GetCustomAttributes(ParameterInfo)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_ParameterInfo_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(ParameterInfo, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_ParameterInfo_System_Type_\" data-linktype=\"relative-path\">GetCustomAttributes(ParameterInfo, Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_ParameterInfo_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(ParameterInfo, Type, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefaultAttribute\" data-linktype=\"relative-path\">IsDefaultAttribute()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_Assembly_System_Type_\" data-linktype=\"relative-path\">IsDefined(Assembly, Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_Assembly_System_Type_System_Boolean_\" data-linktype=\"relative-path\">IsDefined(Assembly, Type, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_MemberInfo_System_Type_\" data-linktype=\"relative-path\">IsDefined(MemberInfo, Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_MemberInfo_System_Type_System_Boolean_\" data-linktype=\"relative-path\">IsDefined(MemberInfo, Type, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_Module_System_Type_\" data-linktype=\"relative-path\">IsDefined(Module, Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_Module_System_Type_System_Boolean_\" data-linktype=\"relative-path\">IsDefined(Module, Type, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_ParameterInfo_System_Type_\" data-linktype=\"relative-path\">IsDefined(ParameterInfo, Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_ParameterInfo_System_Type_System_Boolean_\" data-linktype=\"relative-path\">IsDefined(ParameterInfo, Type, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_Match_System_Object_\" data-linktype=\"relative-path\">Match(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_System_Runtime_InteropServices__Attribute_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"relative-path\">_Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_System_Runtime_InteropServices__Attribute_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"relative-path\">_Attribute.GetTypeInfo(UInt32, UInt32, IntPtr)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_System_Runtime_InteropServices__Attribute_GetTypeInfoCount_System_UInt32__\" data-linktype=\"relative-path\">_Attribute.GetTypeInfoCount(UInt32)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_System_Runtime_InteropServices__Attribute_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\" data-linktype=\"relative-path\">_Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_TypeId\" data-linktype=\"relative-path\">TypeId</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example shows how to apply attributes, including the AssemblyCopyrightAttribute attribute, to a dynamic assembly. The example saves the assembly to disk, and the attribute value can be viewed by using the <strong>Windows File Properties</strong> dialog.  </p>\n<pre><code class=\"lang-cs\" name=\"AssemblyBuilder_DefineVersionInfoResource#1\">using System;\nusing System.Reflection;\nusing System.Reflection.Emit;\n\nclass Example\n{\n   public static void Main()\n   {\n      AssemblyName assemName = new AssemblyName();\n      assemName.Name = &quot;EmittedAssembly&quot;;\n\n      // Create a dynamic assembly in the current application domain,\n      // specifying that the assembly is to be saved.\n      //\n      AssemblyBuilder myAssembly = \n         AppDomain.CurrentDomain.DefineDynamicAssembly(assemName, \n            AssemblyBuilderAccess.Save);\n\n\n      // To apply an attribute to a dynamic assembly, first get the \n      // attribute type. The AssemblyFileVersionAttribute sets the \n      // File Version field on the Version tab of the Windows file\n      // properties dialog.\n      //\n      Type attributeType = typeof(AssemblyFileVersionAttribute);\n\n      // To identify the constructor, use an array of types representing\n      // the constructor&#39;s parameter types. This ctor takes a string.\n      //\n      Type[] ctorParameters = { typeof(string) };\n\n      // Get the constructor for the attribute.\n      //\n      ConstructorInfo ctor = attributeType.GetConstructor(ctorParameters);\n\n      // Pass the constructor and an array of arguments (in this case,\n      // an array containing a single string) to the \n      // CustomAttributeBuilder constructor.\n      //\n      object[] ctorArgs = { &quot;2.0.3033.0&quot; };\n      CustomAttributeBuilder attribute = \n         new CustomAttributeBuilder(ctor, ctorArgs);\n\n      // Finally, apply the attribute to the assembly.\n      //\n      myAssembly.SetCustomAttribute(attribute);\n\n\n      // The pattern described above is used to create and apply\n      // several more attributes. As it happens, all these attributes\n      // have a constructor that takes a string, so the same ctorArgs\n      // variable works for all of them.\n      \n\n      // The AssemblyTitleAttribute sets the Description field on\n      // the General tab and the Version tab of the Windows file \n      // properties dialog.\n      //\n      attributeType = typeof(AssemblyTitleAttribute);\n      ctor = attributeType.GetConstructor(ctorParameters);\n      ctorArgs = new object[] { &quot;The Application Title&quot; };\n      attribute = new CustomAttributeBuilder(ctor, ctorArgs);\n      myAssembly.SetCustomAttribute(attribute);\n\n      // The AssemblyCopyrightAttribute sets the Copyright field on\n      // the Version tab.\n      //\n      attributeType = typeof(AssemblyCopyrightAttribute);\n      ctor = attributeType.GetConstructor(ctorParameters);\n      ctorArgs = new object[] { &quot;� My Example Company 1991-2005&quot; };\n      attribute = new CustomAttributeBuilder(ctor, ctorArgs);\n      myAssembly.SetCustomAttribute(attribute);\n\n      // The AssemblyDescriptionAttribute sets the Comment item.\n      //\n      attributeType = typeof(AssemblyDescriptionAttribute);\n      ctor = attributeType.GetConstructor(ctorParameters);\n      attribute = new CustomAttributeBuilder(ctor, \n         new object[] { &quot;This is a comment.&quot; });\n      myAssembly.SetCustomAttribute(attribute);\n\n      // The AssemblyCompanyAttribute sets the Company item.\n      //\n      attributeType = typeof(AssemblyCompanyAttribute);\n      ctor = attributeType.GetConstructor(ctorParameters);\n      attribute = new CustomAttributeBuilder(ctor, \n         new object[] { &quot;My Example Company&quot; });\n      myAssembly.SetCustomAttribute(attribute);\n\n      // The AssemblyProductAttribute sets the Product Name item.\n      //\n      attributeType = typeof(AssemblyProductAttribute);\n      ctor = attributeType.GetConstructor(ctorParameters);\n      attribute = new CustomAttributeBuilder(ctor, \n         new object[] { &quot;My Product Name&quot; });\n      myAssembly.SetCustomAttribute(attribute);\n\n\n      // Define the assembly&#39;s only module. For a single-file assembly,\n      // the module name is the assembly name.\n      //\n      ModuleBuilder myModule = \n         myAssembly.DefineDynamicModule(assemName.Name, \n            assemName.Name + &quot;.exe&quot;);\n\n      // No types or methods are created for this example.\n\n\n      // Define the unmanaged version information resource, which\n      // contains the attribute informaion applied earlier, and save\n      // the assembly. Use the Windows Explorer to examine the properties\n      // of the .exe file.\n      //\n      myAssembly.DefineVersionInfoResource();\n      myAssembly.Save(assemName.Name + &quot;.exe&quot;);\n\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"AssemblyBuilder_DefineVersionInfoResource#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\n\n\n/*\n// Create the callee transient dynamic assembly.\nstatic Type^ CreateAssembly( AppDomain^ myDomain )\n{\n   AssemblyName^ myAssemblyName = gcnew AssemblyName;\n   myAssemblyName-&gt;Name = &quot;MyEmittedAssembly&quot;;\n   AssemblyBuilder^ myAssembly = myDomain-&gt;DefineDynamicAssembly( myAssemblyName, AssemblyBuilderAccess::Save );\n   \n   // Set Company Attribute to the assembly.\n   Type^ companyAttribute = AssemblyCompanyAttribute::typeid;\n   array&lt;Type^&gt;^types1 = {String::typeid};\n   ConstructorInfo^ myConstructorInfo1 = companyAttribute-&gt;GetConstructor( types1 );\n   array&lt;Object^&gt;^obj1 = {&quot;Microsoft Corporation&quot;};\n   CustomAttributeBuilder^ attributeBuilder1 = gcnew CustomAttributeBuilder( myConstructorInfo1,obj1 );\n   myAssembly-&gt;SetCustomAttribute( attributeBuilder1 );\n   \n   // Set Copyright Attribute to the assembly.\n   Type^ copyrightAttribute = AssemblyCopyrightAttribute::typeid;\n   array&lt;Type^&gt;^types2 = {String::typeid};\n   ConstructorInfo^ myConstructorInfo2 = copyrightAttribute-&gt;GetConstructor( types2 );\n   array&lt;Object^&gt;^obj2 = {&quot;@Copyright Microsoft Corp. 1990-2001&quot;};\n   CustomAttributeBuilder^ attributeBuilder2 = gcnew CustomAttributeBuilder( myConstructorInfo2,obj2 );\n   myAssembly-&gt;SetCustomAttribute( attributeBuilder2 );\n   ModuleBuilder^ myModule = myAssembly-&gt;DefineDynamicModule( &quot;EmittedModule&quot;, &quot;EmittedModule.mod&quot; );\n   \n   // Define a public class named S&quot;HelloWorld&quot; in the assembly.\n   TypeBuilder^ helloWorldClass = myModule-&gt;DefineType( &quot;HelloWorld&quot;, TypeAttributes::Public );\n   \n   // Define the Display method.\n   MethodBuilder^ myMethod = helloWorldClass-&gt;DefineMethod( &quot;Display&quot;, MethodAttributes::Public, String::typeid, nullptr );\n   \n   // Generate IL for GetGreeting.\n   ILGenerator^ methodIL = myMethod-&gt;GetILGenerator();\n   methodIL-&gt;Emit( OpCodes::Ldstr, &quot;Display method get called.&quot; );\n   methodIL-&gt;Emit( OpCodes::Ret );\n   \n   // Returns the type HelloWorld.\n   return (helloWorldClass-&gt;CreateType());\n}\n*/\n\nint main()\n{\n   AssemblyName^ assemName = gcnew AssemblyName();\n   assemName-&gt;Name = &quot;EmittedAssembly&quot;;\n\n   // Create a dynamic assembly in the current application domain,\n   // specifying that the assembly is to be saved.\n   //\n   AssemblyBuilder^ myAssembly = \n      AppDomain::CurrentDomain-&gt;DefineDynamicAssembly(assemName, \n         AssemblyBuilderAccess::Save);\n\n\n   // To apply an attribute to a dynamic assembly, first get the \n   // attribute type. The AssemblyFileVersionAttribute sets the \n   // File Version field on the Version tab of the Windows file\n   // properties dialog.\n   //\n   Type^ attributeType = AssemblyFileVersionAttribute::typeid;\n\n   // To identify the constructor, use an array of types representing\n   // the constructor&#39;s parameter types. This ctor takes a string.\n   //\n   array&lt;Type^&gt;^ ctorParameters = { String::typeid };\n\n   // Get the constructor for the attribute.\n   //\n   ConstructorInfo^ ctor = attributeType-&gt;GetConstructor(ctorParameters);\n\n   // Pass the constructor and an array of arguments (in this case,\n   // an array containing a single string) to the \n   // CustomAttributeBuilder constructor.\n   //\n   array&lt;Object^&gt;^ ctorArgs = { &quot;2.0.3033.0&quot; };\n   CustomAttributeBuilder^ attribute = \n      gcnew CustomAttributeBuilder(ctor, ctorArgs);\n\n   // Finally, apply the attribute to the assembly.\n   //\n   myAssembly-&gt;SetCustomAttribute(attribute);\n\n\n   // The pattern described above is used to create and apply\n   // several more attributes. As it happens, all these attributes\n   // have a constructor that takes a string, so the same ctorArgs\n   // variable works for all of them.\n    \n\n   // The AssemblyTitleAttribute sets the Description field on\n   // the General tab and the Version tab of the Windows file \n   // properties dialog.\n   //\n   attributeType = AssemblyTitleAttribute::typeid;\n   ctor = attributeType-&gt;GetConstructor(ctorParameters);\n   ctorArgs = gcnew array&lt;Object^&gt; { &quot;The Application Title&quot; };\n   attribute = gcnew CustomAttributeBuilder(ctor, ctorArgs);\n   myAssembly-&gt;SetCustomAttribute(attribute);\n\n   // The AssemblyCopyrightAttribute sets the Copyright field on\n   // the Version tab.\n   //\n   attributeType = AssemblyCopyrightAttribute::typeid;\n   ctor = attributeType-&gt;GetConstructor(ctorParameters);\n   ctorArgs = gcnew array&lt;Object^&gt; { &quot;� My Example Company 1991-2005&quot; };\n   attribute = gcnew CustomAttributeBuilder(ctor, ctorArgs);\n   myAssembly-&gt;SetCustomAttribute(attribute);\n\n   // The AssemblyDescriptionAttribute sets the Comment item.\n   //\n   attributeType = AssemblyDescriptionAttribute::typeid;\n   ctor = attributeType-&gt;GetConstructor(ctorParameters);\n   attribute = gcnew CustomAttributeBuilder(ctor, \n      gcnew array&lt;Object^&gt; { &quot;This is a comment.&quot; });\n   myAssembly-&gt;SetCustomAttribute(attribute);\n\n   // The AssemblyCompanyAttribute sets the Company item.\n   //\n   attributeType = AssemblyCompanyAttribute::typeid;\n   ctor = attributeType-&gt;GetConstructor(ctorParameters);\n   attribute = gcnew CustomAttributeBuilder(ctor, \n      gcnew array&lt;Object^&gt; { &quot;My Example Company&quot; });\n   myAssembly-&gt;SetCustomAttribute(attribute);\n\n   // The AssemblyProductAttribute sets the Product Name item.\n   //\n   attributeType = AssemblyProductAttribute::typeid;\n   ctor = attributeType-&gt;GetConstructor(ctorParameters);\n   attribute = gcnew CustomAttributeBuilder(ctor, \n      gcnew array&lt;Object^&gt; { &quot;My Product Name&quot; });\n   myAssembly-&gt;SetCustomAttribute(attribute);\n\n\n   // Define the assembly&#39;s only module. For a single-file assembly,\n   // the module name is the assembly name.\n   //\n   ModuleBuilder^ myModule = \n      myAssembly-&gt;DefineDynamicModule(assemName-&gt;Name, \n         assemName-&gt;Name + &quot;.exe&quot;);\n\n   // No types or methods are created for this example.\n\n\n   // Define the unmanaged version information resource, which\n   // contains the attribute informaion applied earlier, and save\n   // the assembly. Use the Windows Explorer to examine the properties\n   // of the .exe file.\n   //\n   myAssembly-&gt;DefineVersionInfoResource();\n   myAssembly-&gt;Save(assemName-&gt;Name + &quot;.exe&quot;);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"AssemblyBuilder_DefineVersionInfoResource#1\">Imports System\nImports System.Reflection\nImports System.Reflection.Emit\n\nModule Example\n\n   Sub Main()\n\n      Dim assemName As New AssemblyName()\n      assemName.Name = &quot;EmittedAssembly&quot;\n\n      &#39; Create a dynamic assembly in the current application domain,\n      &#39; specifying that the assembly is to be saved.\n      &#39;\n      Dim myAssembly As AssemblyBuilder = _\n         AppDomain.CurrentDomain.DefineDynamicAssembly(assemName, _\n            AssemblyBuilderAccess.Save)\n\n\n      &#39; To apply an attribute to a dynamic assembly, first get the \n      &#39; attribute type. The AssemblyFileVersionAttribute sets the \n      &#39; File Version field on the Version tab of the Windows file\n      &#39; properties dialog.\n      &#39;\n      Dim attributeType As Type = GetType(AssemblyFileVersionAttribute)\n\n      &#39; To identify the constructor, use an array of types representing\n      &#39; the constructor&#39;s parameter types. This ctor takes a string.\n      &#39;\n      Dim ctorParameters() As Type = { GetType(String) }\n\n      &#39; Get the constructor for the attribute.\n      &#39;\n      Dim ctor As ConstructorInfo = _\n                         attributeType.GetConstructor(ctorParameters)\n\n      &#39; Pass the constructor and an array of arguments (in this case,\n      &#39; an array containing a single string) to the \n      &#39; CustomAttributeBuilder constructor.\n      &#39;\n      Dim ctorArgs() As Object = { &quot;2.0.3033.0&quot; }\n      Dim attribute As New CustomAttributeBuilder(ctor, ctorArgs)\n\n      &#39; Finally, apply the attribute to the assembly.\n      &#39;\n      myAssembly.SetCustomAttribute(attribute)\n\n\n      &#39; The pattern described above is used to create and apply\n      &#39; several more attributes. As it happens, all these attributes\n      &#39; have a constructor that takes a string, so the same ctorArgs\n      &#39; variable works for all of them.\n      \n\n      &#39; The AssemblyTitleAttribute sets the Description field on\n      &#39; the General tab and the Version tab of the Windows file \n      &#39; properties dialog.\n      &#39;\n      attributeType = GetType(AssemblyTitleAttribute)\n      ctor = attributeType.GetConstructor(ctorParameters)\n      ctorArgs = New Object() { &quot;The Application Title&quot; }\n      attribute = New CustomAttributeBuilder(ctor, ctorArgs)\n      myAssembly.SetCustomAttribute(attribute)\n\n      &#39; The AssemblyCopyrightAttribute sets the Copyright field on\n      &#39; the Version tab.\n      &#39;\n      attributeType = GetType(AssemblyCopyrightAttribute)\n      ctor = attributeType.GetConstructor(ctorParameters)\n      ctorArgs = New Object() { &quot;� My Example Company 1991-2005&quot; }\n      attribute = New CustomAttributeBuilder(ctor, ctorArgs)\n      myAssembly.SetCustomAttribute(attribute)\n\n      &#39; The AssemblyDescriptionAttribute sets the Comment item.\n      &#39;\n      attributeType = GetType(AssemblyDescriptionAttribute)\n      ctor = attributeType.GetConstructor(ctorParameters)\n      attribute = New CustomAttributeBuilder(ctor, _\n         New Object() { &quot;This is a comment.&quot; })\n      myAssembly.SetCustomAttribute(attribute)\n\n      &#39; The AssemblyCompanyAttribute sets the Company item.\n      &#39;\n      attributeType = GetType(AssemblyCompanyAttribute)\n      ctor = attributeType.GetConstructor(ctorParameters)\n      attribute = New CustomAttributeBuilder(ctor, _\n         New Object() { &quot;My Example Company&quot; })\n      myAssembly.SetCustomAttribute(attribute)\n\n      &#39; The AssemblyProductAttribute sets the Product Name item.\n      &#39;\n      attributeType = GetType(AssemblyProductAttribute)\n      ctor = attributeType.GetConstructor(ctorParameters)\n      attribute = New CustomAttributeBuilder(ctor, _\n         New Object() { &quot;My Product Name&quot; })\n      myAssembly.SetCustomAttribute(attribute)\n\n\n      &#39; Define the assembly&#39;s only module. For a single-file assembly,\n      &#39; the module name is the assembly name.\n      &#39;\n      Dim myModule As ModuleBuilder = _\n         myAssembly.DefineDynamicModule(assemName.Name, _\n            assemName.Name &amp; &quot;.exe&quot;)\n\n      &#39; No types or methods are created for this example.\n\n\n      &#39; Define the unmanaged version information resource, which\n      &#39; contains the attribute informaion applied earlier, and save\n      &#39; the assembly. Use the Windows Explorer to examine the properties\n      &#39; of the .exe file.\n      &#39;\n      myAssembly.DefineVersionInfoResource()\n      myAssembly.Save(assemName.Name &amp; &quot;.exe&quot;)\n\n   End Sub \nEnd Module\n</code></pre>\r\n  \r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Reflection_AssemblyCopyrightAttribute__ctor_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">AssemblyCopyrightAttribute(String)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.reflection.assemblycopyrightattribute\" data-linktype=\"relative-path\">AssemblyCopyrightAttribute</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public AssemblyCopyrightAttribute (string copyright);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>copyright</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The copyright information.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Reflection_AssemblyCopyrightAttribute_Copyright\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Copyright</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets copyright information.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string Copyright { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A string containing the copyright information.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Reflection.AssemblyCopyrightAttribute.yml\">\r\n<meta name=\"APIName\" content=\"System.Reflection.AssemblyCopyrightAttribute\">\r\n<meta name=\"APIName\" content=\"System.Reflection.AssemblyCopyrightAttribute..ctor\">\r\n<meta name=\"APIName\" content=\"System.Reflection.AssemblyCopyrightAttribute.Copyright\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-28 03:03 AM\">\r\n<meta name=\"document_id\" content=\"491f9089-580c-a1e0-ebf4-bf63772caf0f\">\r\n<meta name=\"internalonly\" content=\"false\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Defines a copyright custom attribute for an assembly manifest.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.reflection/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Reflection.AssemblyCopyrightAttribute\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Reflection.AssemblyCopyrightAttribute.yml","open_to_public_contributors":false,"api_name":["System.Reflection.AssemblyCopyrightAttribute","System.Reflection.AssemblyCopyrightAttribute..ctor","System.Reflection.AssemblyCopyrightAttribute.Copyright"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Reflection.AssemblyCopyrightAttribute","System::Reflection::AssemblyCopyrightAttribute","System.Reflection.AssemblyCopyrightAttribute.#ctor","System::Reflection::AssemblyCopyrightAttribute::#ctor","System.Reflection.AssemblyCopyrightAttribute.Copyright","System::Reflection::AssemblyCopyrightAttribute::Copyright"],"dev_langs":["csharp"],"updated_at":"2017-03-28 03:03 AM","document_id":"491f9089-580c-a1e0-ebf4-bf63772caf0f","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.Reflection/AssemblyCopyrightAttribute.xml","internalonly":false,"layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"AssemblyCopyrightAttribute class | Microsoft Docs","_op_ogTitle":"AssemblyCopyrightAttribute class","description":"Defines a copyright custom attribute for an assembly manifest.\n","toc_asset_id":"api/_splitted/System.Reflection/toc.json","toc_rel":"_splitted/System.Reflection/toc.json","source_url":"","ms.assetid":"System.Reflection.AssemblyCopyrightAttribute","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.reflection.assemblycopyrightattribute","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.reflection.assemblycopyrightattribute","fileRelativePath":"api/System.Reflection.AssemblyCopyrightAttribute.html"},"themesRelativePathToOutputRoot":"_themes/"}