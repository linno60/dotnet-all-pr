{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">MidpointRounding</span>\r\n      Enum\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Specifies how mathematical rounding methods should process a number that is midway between two numbers.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\r\n  \t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic enum MidpointRounding</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a></span></div><span class=\"lang-csharp\">MidpointRounding</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example demonstrates the <a class=\"xref\" href=\"system.math#System_Math_Round_\" data-linktype=\"relative-path\">Round</a> method in conjunction with the MidpointRounding enumeration.  </p>\n<pre><code class=\"lang-cs\" name=\"math.midpointrounding#1\">// This example demonstrates the Math.Round() method in conjunction \n// with the MidpointRounding enumeration.\nusing System;\n\nclass Sample \n{\n    public static void Main() \n    {\n    decimal result = 0.0m;\n    decimal posValue =  3.45m;\n    decimal negValue = -3.45m;\n\n// By default, round a positive and a negative value to the nearest even number. \n// The precision of the result is 1 decimal place.\n\n    result = Math.Round(posValue, 1);\n    Console.WriteLine(&quot;{0,4} = Math.Round({1,5}, 1)&quot;, result, posValue);\n    result = Math.Round(negValue, 1);\n    Console.WriteLine(&quot;{0,4} = Math.Round({1,5}, 1)&quot;, result, negValue);\n    Console.WriteLine();\n\n// Round a positive value to the nearest even number, then to the nearest number away from zero. \n// The precision of the result is 1 decimal place.\n\n    result = Math.Round(posValue, 1, MidpointRounding.ToEven);\n    Console.WriteLine(&quot;{0,4} = Math.Round({1,5}, 1, MidpointRounding.ToEven)&quot;, result, posValue);\n    result = Math.Round(posValue, 1, MidpointRounding.AwayFromZero);\n    Console.WriteLine(&quot;{0,4} = Math.Round({1,5}, 1, MidpointRounding.AwayFromZero)&quot;, result, posValue);\n    Console.WriteLine();\n\n// Round a negative value to the nearest even number, then to the nearest number away from zero. \n// The precision of the result is 1 decimal place.\n\n    result = Math.Round(negValue, 1, MidpointRounding.ToEven);\n    Console.WriteLine(&quot;{0,4} = Math.Round({1,5}, 1, MidpointRounding.ToEven)&quot;, result, negValue);\n    result = Math.Round(negValue, 1, MidpointRounding.AwayFromZero);\n    Console.WriteLine(&quot;{0,4} = Math.Round({1,5}, 1, MidpointRounding.AwayFromZero)&quot;, result, negValue);\n    Console.WriteLine();\n    }\n}\n/*\nThis code example produces the following results:\n\n 3.4 = Math.Round( 3.45, 1)\n-3.4 = Math.Round(-3.45, 1)\n\n 3.4 = Math.Round( 3.45, 1, MidpointRounding.ToEven)\n 3.5 = Math.Round( 3.45, 1, MidpointRounding.AwayFromZero)\n\n-3.4 = Math.Round(-3.45, 1, MidpointRounding.ToEven)\n-3.5 = Math.Round(-3.45, 1, MidpointRounding.AwayFromZero)\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"math.midpointrounding#1\">// This example demonstrates the Math.Round() method in conjunction \n// with the MidpointRounding enumeration.\nusing namespace System;\n\nvoid main()\n{\n    Decimal result = (Decimal) 0.0;\n    Decimal posValue = (Decimal) 3.45;\n    Decimal negValue = (Decimal) -3.45;\n\n    // By default, round a positive and a negative value to the nearest\n    // even number. The precision of the result is 1 decimal place.\n    result = Math::Round(posValue, 1);\n    Console::WriteLine(&quot;{0,4} = Math.Round({1,5}, 1)&quot;, result, posValue);\n    result = Math::Round(negValue, 1);\n    Console::WriteLine(&quot;{0,4} = Math.Round({1,5}, 1)&quot;, result, negValue);\n    Console::WriteLine();\n\n    // Round a positive value to the nearest even number, then to the\n    // nearest number away from zero. The precision of the result is 1\n    // decimal place.\n    result = Math::Round(posValue, 1, MidpointRounding::ToEven);\n    Console::WriteLine(\n        &quot;{0,4} = Math.Round({1,5}, 1, MidpointRounding.ToEven)&quot;,\n        result, posValue);\n    result = Math::Round(posValue, 1, MidpointRounding::AwayFromZero);\n    Console::WriteLine(\n        &quot;{0,4} = Math.Round({1,5}, 1, MidpointRounding.AwayFromZero)&quot;,\n        result, posValue);\n    Console::WriteLine();\n\n    // Round a negative value to the nearest even number, then to the\n    // nearest number away from zero. The precision of the result is 1\n    // decimal place.\n    result = Math::Round(negValue, 1, MidpointRounding::ToEven);\n    Console::WriteLine(\n        &quot;{0,4} = Math.Round({1,5}, 1, MidpointRounding.ToEven)&quot;,\n        result, negValue);\n    result = Math::Round(negValue, 1, MidpointRounding::AwayFromZero);\n    Console::WriteLine(\n        &quot;{0,4} = Math.Round({1,5}, 1, MidpointRounding.AwayFromZero)&quot;,\n        result, negValue);\n    Console::WriteLine();\n}\n\n/*\nThis code example produces the following results:\n\n3.4 = Math.Round( 3.45, 1)\n-3.4 = Math.Round(-3.45, 1)\n\n3.4 = Math.Round( 3.45, 1, MidpointRounding.ToEven)\n3.5 = Math.Round( 3.45, 1, MidpointRounding.AwayFromZero)\n\n-3.4 = Math.Round(-3.45, 1, MidpointRounding.ToEven)\n-3.5 = Math.Round(-3.45, 1, MidpointRounding.AwayFromZero)\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"math.midpointrounding#1\">&#39; This example demonstrates the Math.Round() method in conjunction \n&#39; with the MidpointRounding enumeration.\nImports System\n\nClass Sample\n    Public Shared Sub Main() \n        Dim result As Decimal = 0D\n        Dim posValue As Decimal = 3.45D\n        Dim negValue As Decimal = -3.45D\n        \n        &#39; By default, round a positive and a negative value to the nearest even number. \n        &#39; The precision of the result is 1 decimal place.\n        result = Math.Round(posValue, 1)\n        Console.WriteLine(&quot;{0,4} = Math.Round({1,5}, 1)&quot;, result, posValue)\n        result = Math.Round(negValue, 1)\n        Console.WriteLine(&quot;{0,4} = Math.Round({1,5}, 1)&quot;, result, negValue)\n        Console.WriteLine()\n        \n        &#39; Round a positive value to the nearest even number, then to the nearest number \n        &#39; away from zero. The precision of the result is 1 decimal place.\n        result = Math.Round(posValue, 1, MidpointRounding.ToEven)\n        Console.WriteLine(&quot;{0,4} = Math.Round({1,5}, 1, MidpointRounding.ToEven)&quot;, _\n                           result, posValue)\n        result = Math.Round(posValue, 1, MidpointRounding.AwayFromZero)\n        Console.WriteLine(&quot;{0,4} = Math.Round({1,5}, 1, MidpointRounding.AwayFromZero)&quot;, _\n                           result, posValue)\n        Console.WriteLine()\n        \n        &#39; Round a negative value to the nearest even number, then to the nearest number \n        &#39; away from zero. The precision of the result is 1 decimal place.\n        result = Math.Round(negValue, 1, MidpointRounding.ToEven)\n        Console.WriteLine(&quot;{0,4} = Math.Round({1,5}, 1, MidpointRounding.ToEven)&quot;, _\n                            result, negValue)\n        result = Math.Round(negValue, 1, MidpointRounding.AwayFromZero)\n        Console.WriteLine(&quot;{0,4} = Math.Round({1,5}, 1, MidpointRounding.AwayFromZero)&quot;, _\n                           result, negValue)\n        Console.WriteLine()\n    \n    End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This code example produces the following results:\n&#39;\n&#39; 3.4 = Math.Round( 3.45, 1)\n&#39;-3.4 = Math.Round(-3.45, 1)\n&#39;\n&#39; 3.4 = Math.Round( 3.45, 1, MidpointRounding.ToEven)\n&#39; 3.5 = Math.Round( 3.45, 1, MidpointRounding.AwayFromZero)\n&#39;\n&#39;-3.4 = Math.Round(-3.45, 1, MidpointRounding.ToEven)\n&#39;-3.5 = Math.Round(-3.45, 1, MidpointRounding.AwayFromZero)\n&#39;\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>Use MidpointRounding with appropriate overloads of <a class=\"xref\" href=\"system.math#System_Math_Round_\" data-linktype=\"relative-path\">Round</a> to provide more control of the rounding process.  </p>\n<p> A rounding operation takes an original number with an implicit or specified precision; examines the next digit, which is at that precision plus one; and returns the nearest number with the same precision as the original number. For positive numbers, if the next digit is from 0 through 4, the nearest number is toward negative infinity. If the next digit is from 6 through 9, the nearest number is toward positive infinity. For negative numbers, if the next digit is from 0 through 4, the nearest number is toward positive infinity. If the next digit is from 6 through 9, the nearest number is toward negative infinity.  </p>\n<p> In the previous cases, the MidpointRounding enumeration does not affect the result of the rounding operation. However, if the next digit is 5, which is the midpoint between two possible results, and all remaining digits are zero or there are no remaining digits, the nearest number is ambiguous. In this case, the MidpointRounding enumeration enables you to specify whether the rounding operation returns the nearest number away from zero or the nearest even number.  </p>\n<p> The following table demonstrates the results of rounding some negative and positive numbers in conjunction with the values of MidpointRounding. The precision used to round the numbers is zero, which means the number after the decimal point affects the rounding operation. For example, for the number -2.5, the digit after the decimal point is 5. Because that digit is the midpoint, you can use a MidpointRounding value to determine the result of rounding. If AwayFromZero is specified, -3 is returned because it is the nearest number away from zero with a precision of zero. If ToEven is specified, -2 is returned because it is the nearest even number with a precision of zero.  </p>\n<table>\n<thead>\n<tr>\n<th>Original number</th>\n<th>AwayFromZero</th>\n<th>ToEven</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>3.5</td>\n<td>4</td>\n<td>4</td>\n</tr>\n<tr>\n<td>2.8</td>\n<td>3</td>\n<td>3</td>\n</tr>\n<tr>\n<td>2.5</td>\n<td>3</td>\n<td>2</td>\n</tr>\n<tr>\n<td>2.1</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>-2.1</td>\n<td>-2</td>\n<td>-2</td>\n</tr>\n<tr>\n<td>-2.5</td>\n<td>-3</td>\n<td>-2</td>\n</tr>\n<tr>\n<td>-2.8</td>\n<td>-3</td>\n<td>-3</td>\n</tr>\n<tr>\n<td>-3.5</td>\n<td>-4</td>\n<td>-4</td>\n</tr>\n</tbody>\n</table>\n\r\n  \r\n      \t<h2 class=\"accented\">Fields\r\n      </h2>\r\n      <table class=\"nameValue\">\r\n      \t<tr><td id=\"System_MidpointRounding_AwayFromZero\">\r\n      \t\t\t<span class=\"lang-csharp\">AwayFromZero</span>\r\n      \t</td>\r\n      \t<td><p>When a number is halfway between two others, it is rounded toward the nearest number that is away from zero.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_MidpointRounding_ToEven\">\r\n      \t\t\t<span class=\"lang-csharp\">ToEven</span>\r\n      \t</td>\r\n      \t<td><p>When a number is halfway between two others, it is rounded toward the nearest even number.</p>\n</td>\r\n      \t</tr>\r\n      </table>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.MidpointRounding.yml\">\r\n<meta name=\"APIName\" content=\"System.MidpointRounding\">\r\n<meta name=\"APIName\" content=\"System.MidpointRounding.AwayFromZero\">\r\n<meta name=\"APIName\" content=\"System.MidpointRounding.ToEven\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-29 05:54 AM\">\r\n<meta name=\"document_id\" content=\"a018ea8b-e5e1-3ccc-7555-e66cf34c9b18\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Specifies how mathematical rounding methods should process a number that is midway between two numbers.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.MidpointRounding\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.MidpointRounding.yml","open_to_public_contributors":false,"api_name":["System.MidpointRounding","System.MidpointRounding.AwayFromZero","System.MidpointRounding.ToEven"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.MidpointRounding","System::MidpointRounding","System.MidpointRounding.AwayFromZero","System::MidpointRounding::AwayFromZero","System.MidpointRounding.ToEven","System::MidpointRounding::ToEven"],"dev_langs":["csharp"],"updated_at":"2017-03-29 05:54 AM","document_id":"a018ea8b-e5e1-3ccc-7555-e66cf34c9b18","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System/MidpointRounding.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"MidpointRounding enum | Microsoft Docs","_op_ogTitle":"MidpointRounding enum","description":"Specifies how mathematical rounding methods should process a number that is midway between two numbers.\n","toc_asset_id":"api/_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.MidpointRounding","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.midpointrounding","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.midpointrounding","fileRelativePath":"api/System.MidpointRounding.html"},"themesRelativePathToOutputRoot":"_themes/"}