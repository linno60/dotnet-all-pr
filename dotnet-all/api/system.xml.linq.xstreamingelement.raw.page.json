{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">XStreamingElement</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents elements in an XML tree that supports deferred streaming output.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public class XStreamingElement</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><span class=\"lang-csharp\">XStreamingElement</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example first creates a source XML tree. It then creates a transform of the source XML tree using <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>. This transform creates a new tree in memory. It then creates a transform of the source XML tree using XStreamingElement. This transform doesn&#39;t execute the query until the transformed tree is serialized to the console. Its memory usage is less.  </p>\n<pre><code class=\"lang-c#\">\n                XElement srcTree = new XElement(&quot;Root&quot;,  \n                       new XElement(&quot;Child&quot;, 1),  \n                       new XElement(&quot;Child&quot;, 2),  \n                       new XElement(&quot;Child&quot;, 3),  \n                       new XElement(&quot;Child&quot;, 4),  \n                       new XElement(&quot;Child&quot;, 5)  \n                   );  \n\nXElement dstTree1 = new XElement(&quot;NewRoot&quot;,  \n                        from el in srcTree.Elements()  \n                        where (int)el &gt;= 3  \n                        select new XElement(&quot;DifferentChild&quot;, (int)el)  \n                    );  \n\nXStreamingElement dstTree2 = new XStreamingElement(&quot;NewRoot&quot;,  \n                        from el in srcTree.Elements()  \n                        where (int)el &gt;= 3  \n                        select new XElement(&quot;DifferentChild&quot;, (int)el)  \n                    );  \n\nConsole.WriteLine(dstTree1);  \nConsole.WriteLine(&quot;------&quot;);  \nConsole.WriteLine(dstTree2);  \n</code></pre><pre><code class=\"lang-vb\">\n                Dim srcTree As XElement = _  \n        &lt;Root&gt;  \n            &lt;Child&gt;1&lt;/Child&gt;  \n            &lt;Child&gt;2&lt;/Child&gt;  \n            &lt;Child&gt;3&lt;/Child&gt;  \n            &lt;Child&gt;4&lt;/Child&gt;  \n            &lt;Child&gt;5&lt;/Child&gt;  \n        &lt;/Root&gt;  \n\nDim dstTree1 As XElement = _  \n    &lt;NewRoot&gt;  \n        &lt;%= From el In srcTree.Elements _  \n            Where (el.Value &gt;= 3) _  \n            Select &lt;DifferentChild&gt;&lt;%= el.Value %&gt;&lt;/DifferentChild&gt; %&gt;  \n    &lt;/NewRoot&gt;  \n\nDim dstTree2 As XStreamingElement = New XStreamingElement(&quot;NewRoot&quot;, _  \n                From el In srcTree.Elements _  \n                Where el.Value &gt;= 3 _  \n                Select &lt;DifferentChild&gt;&lt;%= el.Value %&gt;&lt;/DifferentChild&gt; _  \n            )  \n\nConsole.WriteLine(dstTree1)  \nConsole.WriteLine(&quot;------&quot;)  \nConsole.WriteLine(dstTree2)  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code>\n                &lt;NewRoot&gt;  \n  &lt;DifferentChild&gt;3&lt;/DifferentChild&gt;  \n  &lt;DifferentChild&gt;4&lt;/DifferentChild&gt;  \n  &lt;DifferentChild&gt;5&lt;/DifferentChild&gt;  \n&lt;/NewRoot&gt;  \n------  \n&lt;NewRoot&gt;  \n  &lt;DifferentChild&gt;3&lt;/DifferentChild&gt;  \n  &lt;DifferentChild&gt;4&lt;/DifferentChild&gt;  \n  &lt;DifferentChild&gt;5&lt;/DifferentChild&gt;  \n&lt;/NewRoot&gt;  \n</code></pre><p> One approach to processing a text file is to write an extension method that streams the text file a line at a time using the <code>yield return</code> construct. You then can write a LINQ query that processes the text file in a lazy deferred fashion. If you then use the XStreamingElement to stream output, you then can create a transform from the text file to XML that uses a minimal amount of memory, regardless of the size of the source text file.  </p>\n<p> The following text file, People.txt, is the source for this example.  </p>\n<pre><code>\n                #This is a comment  \n1,Tai,Yee,Writer  \n2,Nikolay,Grachev,Programmer  \n3,David,Wright,Inventor  \n</code></pre><p> The following code contains an extension method that streams the lines of the text file in a deferred fashion.  </p>\n<pre><code class=\"lang-c#\">\n                public static class StreamReaderSequence  \n{  \n    public static IEnumerable&lt;string&gt; Lines(this StreamReader source)  \n    {  \n        String line;  \n\n        if (source == null)  \n            throw new ArgumentNullException(&quot;source&quot;);  \n        while ((line = source.ReadLine()) != null)  \n        {  \n            yield return line;  \n        }  \n    }  \n}  \n\nclass Program  \n{  \n    static void Main(string[] args)  \n    {  \n        StreamReader sr = new StreamReader(&quot;People.txt&quot;);  \n        XStreamingElement xmlTree = new XStreamingElement(&quot;Root&quot;,  \n            from line in sr.Lines()  \n            let items = line.Split(&#39;,&#39;)  \n            where !line.StartsWith(&quot;#&quot;)  \n            select new XElement(&quot;Person&quot;,  \n                       new XAttribute(&quot;ID&quot;, items[0]),  \n                       new XElement(&quot;First&quot;, items[1]),  \n                       new XElement(&quot;Last&quot;, items[2]),  \n                       new XElement(&quot;Occupation&quot;, items[3])  \n                   )  \n        );  \n        Console.WriteLine(xmlTree);  \n        sr.Close();  \n    }  \n}  \n</code></pre><pre><code class=\"lang-vb\">Module StreamReaderSequence  \n\n    &lt;Runtime.CompilerServices.Extension&gt;  \n    Public Iterator Function Lines(source As IO.StreamReader) As IEnumerable(Of String)  \n        If source Is Nothing Then Throw New ArgumentNullException(&quot;source&quot;)  \n        Dim line As String = source.ReadLine()  \n        While (line &lt;&gt; Nothing)  \n            Yield line  \n            line = source.ReadLine()  \n        End While  \n    End Function  \n\nEnd Module  \n\nModule Module1  \n    Sub Main()  \n        Dim sr As New IO.StreamReader(&quot;People.txt&quot;)  \n        Dim xmlTree As New XStreamingElement(&quot;Root&quot;,  \n            From line In sr.Lines()  \n            Let items = line.Split(&quot;,&quot;c)  \n            Where Not line.StartsWith(&quot;#&quot;)  \n            Select &lt;Person ID=&lt;%= items(0) %&gt;&gt;  \n                       &lt;First&gt;&lt;%= items(1) %&gt;&lt;/First&gt;  \n                       &lt;Last&gt;&lt;%= items(2) %&gt;&lt;/Last&gt;  \n                       &lt;Occupation&gt;&lt;%= items(3) %&gt;&lt;/Occupation&gt;  \n                   &lt;/Person&gt;)  \n        Console.WriteLine(xmlTree)  \n        sr.Close()  \n    End Sub  \nEnd Module  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code class=\"lang-xml\">\n                &lt;Root&gt;  \n  &lt;Person ID=&quot;1&quot;&gt;  \n    &lt;First&gt;Tai&lt;/First&gt;  \n    &lt;Last&gt;Yee&lt;/Last&gt;  \n    &lt;Occupation&gt;Writer&lt;/Occupation&gt;  \n  &lt;/Person&gt;  \n  &lt;Person ID=&quot;2&quot;&gt;  \n    &lt;First&gt;Nikolay&lt;/First&gt;  \n    &lt;Last&gt;Grachev&lt;/Last&gt;  \n    &lt;Occupation&gt;Programmer&lt;/Occupation&gt;  \n  &lt;/Person&gt;  \n  &lt;Person ID=&quot;3&quot;&gt;  \n    &lt;First&gt;David&lt;/First&gt;  \n    &lt;Last&gt;Wright&lt;/Last&gt;  \n    &lt;Occupation&gt;Inventor&lt;/Occupation&gt;  \n  &lt;/Person&gt;  \n&lt;/Root&gt;  \n</code></pre><p> Sometimes you have to transform large XML files, and write your application so that the memory footprint of the application is predictable. If you try to populate an XML tree with a very large XML file, your memory usage will be proportional to the size of the file (that is, excessive). Therefore, you should use a streaming technique instead.  </p>\n<p> Certain standard query operators, such as <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb343617(v=vs.110).aspx\" data-linktype=\"external\">OrderBy</a>, iterate their source, collect all of the data, sort it, and then finally yield the first item in the sequence. Note that if you use a query operator that materializes its source before yielding the first item, you will not retain a small memory footprint for your application.  </p>\n<p> Even if you use the technique described in , if you try to assemble an XML tree that contains the transformed document, memory usage may be too great.  </p>\n<p> The following example builds on the example in <a href=\"../Topic/How%20to:%20Stream%20XML%20Fragments%20with%20Access%20to%20Header%20Information.md\" data-linktype=\"relative-path\">How to: Stream XML Fragments with Access to Header Information</a>.  </p>\n<p> This example uses the deferred execution capabilities of XStreamingElement to stream the output.  </p>\n<p> Note that the custom axis (<code>StreamCustomerItem</code>) is specifically written so that it expects a document that has <code>Customer</code>, <code>Name</code>, and <code>Item</code> elements, and that those elements will be arranged as in the following Source.xml document. A more robust implementation, however, would either validate the source document with an XSD, or would be prepared to parse an invalid document.  </p>\n<p> The following is the source document, Source.xml:  </p>\n<pre><code class=\"lang-xml\">\n                &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;   \n&lt;Root&gt;  \n  &lt;Customer&gt;  \n    &lt;Name&gt;A. Datum Corporation&lt;/Name&gt;  \n    &lt;Item&gt;  \n      &lt;Key&gt;0001&lt;/Key&gt;  \n    &lt;/Item&gt;  \n    &lt;Item&gt;  \n      &lt;Key&gt;0002&lt;/Key&gt;  \n    &lt;/Item&gt;  \n    &lt;Item&gt;  \n      &lt;Key&gt;0003&lt;/Key&gt;  \n    &lt;/Item&gt;  \n    &lt;Item&gt;  \n      &lt;Key&gt;0004&lt;/Key&gt;  \n    &lt;/Item&gt;  \n  &lt;/Customer&gt;  \n  &lt;Customer&gt;  \n    &lt;Name&gt;Fabrikam, Inc.&lt;/Name&gt;  \n    &lt;Item&gt;  \n      &lt;Key&gt;0005&lt;/Key&gt;  \n    &lt;/Item&gt;  \n    &lt;Item&gt;  \n      &lt;Key&gt;0006&lt;/Key&gt;  \n    &lt;/Item&gt;  \n    &lt;Item&gt;  \n      &lt;Key&gt;0007&lt;/Key&gt;  \n    &lt;/Item&gt;  \n    &lt;Item&gt;  \n      &lt;Key&gt;0008&lt;/Key&gt;  \n    &lt;/Item&gt;  \n  &lt;/Customer&gt;  \n  &lt;Customer&gt;  \n    &lt;Name&gt;Southridge Video&lt;/Name&gt;  \n    &lt;Item&gt;  \n      &lt;Key&gt;0009&lt;/Key&gt;  \n    &lt;/Item&gt;  \n    &lt;Item&gt;  \n      &lt;Key&gt;0010&lt;/Key&gt;  \n    &lt;/Item&gt;  \n  &lt;/Customer&gt;  \n&lt;/Root&gt;  \n</code></pre><p> The following code contains a method that uses an <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> to stream the source XML. It uses XStreamingElement to stream the new XML.  </p>\n<pre><code class=\"lang-c#\">\n                static IEnumerable&lt;XElement&gt; StreamCustomerItem(string uri)  \n{  \n    using (XmlReader reader = XmlReader.Create(uri))  \n    {  \n        XElement name = null;  \n        XElement item = null;  \n\n        reader.MoveToContent();  \n\n        // Parse the file, save header information when encountered, and yield the  \n        // Item XElement objects as they are created.  \n\n        // loop through Customer elements  \n        while (reader.Read())  \n        {  \n            if (reader.NodeType == XmlNodeType.Element  \n                &amp;&amp; reader.Name == &quot;Customer&quot;)  \n            {  \n                // move to Name element  \n                while (reader.Read())  \n                {  \n                    if (reader.NodeType == XmlNodeType.Element &amp;&amp;  \n                        reader.Name == &quot;Name&quot;)  \n                    {  \n                        name = XElement.ReadFrom(reader) as XElement;  \n                        break;  \n                    }  \n                }  \n\n                // loop through Item elements  \n                while (reader.Read())  \n                {  \n                    if (reader.NodeType == XmlNodeType.EndElement)  \n                        break;  \n                    if (reader.NodeType == XmlNodeType.Element  \n                        &amp;&amp; reader.Name == &quot;Item&quot;)  \n                    {  \n                        item = XElement.ReadFrom(reader) as XElement;  \n                        if (item != null)  \n                        {  \n                            XElement tempRoot = new XElement(&quot;Root&quot;,  \n                                new XElement(name)  \n                            );  \n                            tempRoot.Add(item);  \n                            yield return item;  \n                        }  \n                    }  \n                }  \n            }  \n        }  \n    }  \n}  \n\nstatic void Main(string[] args)  \n{  \n    XStreamingElement root = new XStreamingElement(&quot;Root&quot;,  \n        from el in StreamCustomerItem(&quot;Source.xml&quot;)  \n        select new XElement(&quot;Item&quot;,  \n            new XElement(&quot;Customer&quot;, (string)el.Parent.Element(&quot;Name&quot;)),  \n            new XElement(el.Element(&quot;Key&quot;))  \n        )  \n    );  \n    root.Save(&quot;Test.xml&quot;);  \n    Console.WriteLine(File.ReadAllText(&quot;Test.xml&quot;));  \n}  \n</code></pre><pre><code class=\"lang-vb\">Iterator Function StreamCustomerItem(uri As String) As IEnumerable(Of XElement)  \n\n    Dim name As XElement = Nothing  \n    Dim item As XElement = Nothing  \n\n    Dim reader As XmlReader = XmlReader.Create(uri)  \n    reader.MoveToContent()  \n\n    &#39; Parse the file, save header information when encountered, and yield the  \n    &#39; Item XElement objects as they are created.  \n\n    &#39; Loop through Customer elements.  \n    While (reader.Read())  \n        If (reader.NodeType = XmlNodeType.Element And reader.Name = &quot;Customer&quot;) Then  \n            While (reader.Read())  \n                &#39; Move to Name element  \n                If (reader.NodeType = XmlNodeType.Element And reader.Name = &quot;Name&quot;) Then  \n                    name = CType(XElement.ReadFrom(reader), XElement)  \n                    Exit While  \n                End If  \n            End While  \n\n            &#39; Loop through Item elements  \n            While (reader.Read())  \n                If (reader.NodeType = XmlNodeType.EndElement) Then  \n                    Exit While  \n                End If  \n\n                If (reader.NodeType = XmlNodeType.Element And reader.Name = &quot;Item&quot;) Then  \n                    item = CType(XElement.ReadFrom(reader), XElement)  \n                    If (Not (item Is Nothing)) Then  \n                        Dim tempRoot = New XElement(&quot;Root&quot;,  \n                            New XElement(name)  \n                        )  \n                        tempRoot.Add(item)  \n                        Yield item  \n                     End If  \n                End If  \n            End While  \n        End If  \n     End While  \n    reader.Close()  \nEnd Function  \n\nSub Main()  \n    Dim root As New XStreamingElement(&quot;Root&quot;,  \n        From el In StreamCustomerItem(&quot;c:\\trash\\Source.xml&quot;)  \n        Select New XElement(&quot;Item&quot;,  \n            New XElement(&quot;Customer&quot;, CStr(el.Parent.Element(&quot;Name&quot;))),  \n            New XElement(el.Element(&quot;Key&quot;))))  \n    root.Save(&quot;c:\\trash\\Test.xml&quot;)  \n    Console.WriteLine(System.IO.File.ReadAllText(&quot;c:\\trash\\Test.xml&quot;))  \nEnd Sub  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code class=\"lang-xml\">\n                &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;  \n&lt;Root&gt;  \n  &lt;Item&gt;  \n    &lt;Customer&gt;A. Datum Corporation&lt;/Customer&gt;  \n    &lt;Key&gt;0001&lt;/Key&gt;  \n  &lt;/Item&gt;  \n  &lt;Item&gt;  \n    &lt;Customer&gt;A. Datum Corporation&lt;/Customer&gt;  \n    &lt;Key&gt;0002&lt;/Key&gt;  \n  &lt;/Item&gt;  \n  &lt;Item&gt;  \n    &lt;Customer&gt;A. Datum Corporation&lt;/Customer&gt;  \n    &lt;Key&gt;0003&lt;/Key&gt;  \n  &lt;/Item&gt;  \n  &lt;Item&gt;  \n    &lt;Customer&gt;A. Datum Corporation&lt;/Customer&gt;  \n    &lt;Key&gt;0004&lt;/Key&gt;  \n  &lt;/Item&gt;  \n  &lt;Item&gt;  \n    &lt;Customer&gt;Fabrikam, Inc.&lt;/Customer&gt;  \n    &lt;Key&gt;0005&lt;/Key&gt;  \n  &lt;/Item&gt;  \n  &lt;Item&gt;  \n    &lt;Customer&gt;Fabrikam, Inc.&lt;/Customer&gt;  \n    &lt;Key&gt;0006&lt;/Key&gt;  \n  &lt;/Item&gt;  \n  &lt;Item&gt;  \n    &lt;Customer&gt;Fabrikam, Inc.&lt;/Customer&gt;  \n    &lt;Key&gt;0007&lt;/Key&gt;  \n  &lt;/Item&gt;  \n  &lt;Item&gt;  \n    &lt;Customer&gt;Fabrikam, Inc.&lt;/Customer&gt;  \n    &lt;Key&gt;0008&lt;/Key&gt;  \n  &lt;/Item&gt;  \n  &lt;Item&gt;  \n    &lt;Customer&gt;Southridge Video&lt;/Customer&gt;  \n    &lt;Key&gt;0009&lt;/Key&gt;  \n  &lt;/Item&gt;  \n  &lt;Item&gt;  \n    &lt;Customer&gt;Southridge Video&lt;/Customer&gt;  \n    &lt;Key&gt;0010&lt;/Key&gt;  \n  &lt;/Item&gt;  \n&lt;/Root&gt;  \n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>This class allows you to create an XML tree that supports deferred streaming output. You use this class to create an XML tree in a very similar fashion to creating an XML tree using <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>. However, there is a fundamental difference. When you use a LINQ query to specify content when creating an XML tree using <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>, the query variable is iterated at the time of construction of the XML tree, and the results of the query are added to the XML tree. In contrast, when you create an XML tree using XStreamingElement, a reference to the query variable is stored in the XML tree without being iterated. Queries are iterated only upon serialization. This allows you to create larger XML trees while maintaining a smaller memory footprint.  </p>\n<p> If you are streaming from an input source, such as a text file, then you can read a very large text file, and generate a very large XML document while maintaining a small memory footprint.  </p>\n<p> Another scenario is that you have a large XML tree that has been loaded into memory, and you want to create a transformed version of the document. If you create a new document using <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>, then you will have two large XML trees in memory upon completion of the transformation. However, if you create the new XML tree using XStreamingElement, then your working set will be effectively cut in half.  </p>\n<p> Note that when debugging a program that uses XStreamingElement, displaying the value of an object causes its <a class=\"xref\" href=\"system.xml.linq.xstreamingelement#System_Xml_Linq_XStreamingElement_ToString_\" data-linktype=\"relative-path\">ToString</a> method to be called. This causes the XML to be serialized. If the semantics of your streaming element query are such that the streaming element can only be streamed once, this may cause undesirable behavior in your debugging experience.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xml_Linq_XStreamingElement__ctor_System_Xml_Linq_XName_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">XStreamingElement(XName)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> class from the specified <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public XStreamingElement (System.Xml.Linq.XName name);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>name</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> that contains the name of the element.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This constructor creates a streaming element with no content and no attributes.  </p>\n<p> There is an implicit conversion from string to <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>. Typical use of this constructor is to specify a string as the parameter instead of creating a new <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xml_Linq_XStreamingElement__ctor_System_Xml_Linq_XName_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">XStreamingElement(XName, Object)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a> class with the specified name and content.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public XStreamingElement (System.Xml.Linq.XName name, object content);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>name</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> that contains the element name.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>content</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The contents of the element.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This constructor creates a streaming element with the specified content and attributes.  </p>\n<p> There is an implicit conversion from string to <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>. Typical use of this constructor is to specify a string as the parameter instead of creating a new <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>.  </p>\n<p> Queries are not iterated until the <a class=\"xref\" href=\"system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a> is serialized. This is in contrast to using queries for content for an <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>, where queries are iterated at the time of construction of the new <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>.  </p>\n<p> For details about the valid content that can be passed to this constructor, see <a href=\"../topic/valid%20content%20of%20xelement%20and%20xdocument%20objects1\" data-linktype=\"relative-path\">Valid Content of XElement and XDocument Objects</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xml_Linq_XStreamingElement__ctor_System_Xml_Linq_XName_System_Object___\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">XStreamingElement(XName, Object[])</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a> class with the specified name and content.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public XStreamingElement (System.Xml.Linq.XName name, object[] content);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>name</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> that contains the element name.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>content</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The contents of the element.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This constructor creates a streaming element with the specified content and attributes.  </p>\n<p> There is an implicit conversion from string to <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>. Typical use of this constructor is to specify a string as the parameter instead of creating a new <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>.  </p>\n<p> Queries are not iterated until the <a class=\"xref\" href=\"system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a> is serialized. This is in contrast to using queries for content for an <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>, where queries are iterated at the time of construction of the new <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>.  </p>\n<p> For details about the valid content that can be passed to this function, see <a href=\"../topic/valid%20content%20of%20xelement%20and%20xdocument%20objects1\" data-linktype=\"relative-path\">Valid Content of XElement and XDocument Objects</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xml_Linq_XStreamingElement_Name\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Name</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets the name of this streaming element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Xml.Linq.XName Name { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> that contains the name of this streaming element.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xml_Linq_XStreamingElement_Add_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Add(Object)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Adds the specified content as children to this <a class=\"xref\" href=\"system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void Add (object content);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>content</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Content to be added to the streaming element.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This constructor adds the specified content and attributes to the <a class=\"xref\" href=\"system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a>. While it is often possible to construct the <a class=\"xref\" href=\"system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a> in a single statement, it is sometimes more convenient to add content to the streaming element incrementally.  </p>\n<p> Queries are not iterated until the <a class=\"xref\" href=\"system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a> is serialized. This is in contrast to using queries for content for an <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>, where queries are iterated at the time of construction of the new <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>.  </p>\n<p> For details about the valid content that can be passed to this function, see <a href=\"../topic/valid%20content%20of%20xelement%20and%20xdocument%20objects1\" data-linktype=\"relative-path\">Valid Content of XElement and XDocument Objects</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xml_Linq_XStreamingElement_Add_System_Object___\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Add(Object[])</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Adds the specified content as children to this <a class=\"xref\" href=\"system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void Add (object[] content);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>content</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Content to be added to the streaming element.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This constructor adds the specified content and attributes to the <a class=\"xref\" href=\"system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a>. While it is often possible to construct the <a class=\"xref\" href=\"system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a> in a single statement, it is sometimes more convenient to add content to the streaming element incrementally.  </p>\n<p> Queries are not iterated until the <a class=\"xref\" href=\"system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a> is serialized. This is in contrast to using queries for content for an <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>, where queries are iterated at the time of construction of the new <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>.  </p>\n<p> For details about the valid content that can be passed to this function, see <a href=\"../topic/valid%20content%20of%20xelement%20and%20xdocument%20objects1\" data-linktype=\"relative-path\">Valid Content of XElement and XDocument Objects</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xml_Linq_XStreamingElement_Save_System_IO_Stream_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Save(Stream)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Outputs this <a class=\"xref\" href=\"system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a> to the specified <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void Save (System.IO.Stream stream);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>stream</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The stream to output this <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> to.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The serialized XML will be indented. All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented. The behavior of this method is that insignificant white space will not be preserved.  </p>\n<p> If you want to control white space, use the overload of <a class=\"xref\" href=\"system.xml.linq.xstreamingelement#System_Xml_Linq_XStreamingElement_Save_\" data-linktype=\"relative-path\">Save</a> that takes <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a> as a parameter. Use the <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a> option to save unindented XML. This will cause the writer to write all white spaces exactly as represented in the XML tree.  </p>\n<p> Use <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a> option if you want to remove duplicate namespace declarations.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xml_Linq_XStreamingElement_Save_System_IO_TextWriter_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Save(TextWriter)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Serialize this streaming element to a <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void Save (System.IO.TextWriter textWriter);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>textWriter</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> that the <a class=\"xref\" href=\"system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a> will be written to.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The serialized XML will be indented. All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented. The behavior of this method is that insignificant white space nodes in the XML tree will not be preserved.  </p>\n<p> If you want to control white space, use one of the overloads of <a class=\"xref\" href=\"system.xml.linq.xstreamingelement#System_Xml_Linq_XStreamingElement_Save_\" data-linktype=\"relative-path\">Save</a> that take <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a> as a parameter. For more information, see <a href=\"../topic/preserving%20white%20space%20while%20loading%20or%20parsing%20xml3\" data-linktype=\"relative-path\">Preserving White Space while Loading or Parsing XML</a> and <a href=\"../topic/preserving%20white%20space%20while%20serializing1\" data-linktype=\"relative-path\">Preserving White Space While Serializing</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xml_Linq_XStreamingElement_Save_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Save(String)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Serialize this streaming element to a file.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void Save (string fileName);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>fileName</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that contains the name of the file.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The serialized XML will be indented. All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented. The behavior of this method is that insignificant white space nodes in the XML tree will not be preserved.  </p>\n<p> If you want to control white space, use one of the overloads of <a class=\"xref\" href=\"system.xml.linq.xstreamingelement#System_Xml_Linq_XStreamingElement_Save_\" data-linktype=\"relative-path\">Save</a> that take <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a> as a parameter. For more information, see <a href=\"../topic/preserving%20white%20space%20while%20loading%20or%20parsing%20xml3\" data-linktype=\"relative-path\">Preserving White Space while Loading or Parsing XML</a> and <a href=\"../topic/preserving%20white%20space%20while%20serializing1\" data-linktype=\"relative-path\">Preserving White Space While Serializing</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xml_Linq_XStreamingElement_Save_System_Xml_XmlWriter_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Save(XmlWriter)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Serialize this streaming element to an <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void Save (System.Xml.XmlWriter writer);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>writer</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> that the <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> will be written to.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xml_Linq_XStreamingElement_Save_System_IO_Stream_System_Xml_Linq_SaveOptions_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Save(Stream, SaveOptions)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Outputs this <a class=\"xref\" href=\"system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a> to the specified <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>, optionally specifying formatting behavior.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void Save (System.IO.Stream stream, System.Xml.Linq.SaveOptions options);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>stream</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The stream to output this <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> to.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>options</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a> object that specifies formatting behavior.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>By default the <code>options</code> are set to <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a>. This option will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.  </p>\n<p> If you want to save unindented XML, specify the <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a> flag for <code>options</code>. This will cause the writer to write all white spaces exactly as represented in the XML tree.  </p>\n<p> Use <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a> option if you want to remove duplicate namespace declarations.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xml_Linq_XStreamingElement_Save_System_IO_TextWriter_System_Xml_Linq_SaveOptions_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Save(TextWriter, SaveOptions)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Serialize this streaming element to a <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a>, optionally disabling formatting.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void Save (System.IO.TextWriter textWriter, System.Xml.Linq.SaveOptions options);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>textWriter</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> to output the XML to.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>options</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a> that specifies formatting behavior.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If you want to save unindented XML, specify the <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a> flag for <code>options</code>. This will cause the writer to write all white space exactly as represented in the XML tree.  </p>\n<p> If you want to save indented XML, do not specify the <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a> flag for <code>options</code>. This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented. This is the default behavior, and the behavior of the overloads of the <a class=\"xref\" href=\"system.xml.linq.xelement#System_Xml_Linq_XElement_Save_\" data-linktype=\"relative-path\">Save</a> methods that do not take <code>options</code> as a parameter.  </p>\n<p> For more information, see <a href=\"../topic/preserving%20white%20space%20while%20loading%20or%20parsing%20xml3\" data-linktype=\"relative-path\">Preserving White Space while Loading or Parsing XML</a> and <a href=\"../topic/preserving%20white%20space%20while%20serializing1\" data-linktype=\"relative-path\">Preserving White Space While Serializing</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xml_Linq_XStreamingElement_Save_System_String_System_Xml_Linq_SaveOptions_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Save(String, SaveOptions)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Serialize this streaming element to a file, optionally disabling formatting.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void Save (string fileName, System.Xml.Linq.SaveOptions options);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>fileName</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that contains the name of the file.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>options</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a> object that specifies formatting behavior.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If you want to save unindented XML, specify the <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a> flag for <code>options</code>. This will cause the writer to write all white space exactly as represented in the XML tree.  </p>\n<p> If you want to save indented XML, do not specify the <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a> flag for <code>options</code>. This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented. This is the default behavior, and the behavior of the overloads of the <a class=\"xref\" href=\"system.xml.linq.xelement#System_Xml_Linq_XElement_Save_\" data-linktype=\"relative-path\">Save</a> methods that do not take <code>options</code> as a parameter.  </p>\n<p> For more information, see <a href=\"../topic/preserving%20white%20space%20while%20loading%20or%20parsing%20xml3\" data-linktype=\"relative-path\">Preserving White Space while Loading or Parsing XML</a> and <a href=\"../topic/preserving%20white%20space%20while%20serializing1\" data-linktype=\"relative-path\">Preserving White Space While Serializing</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xml_Linq_XStreamingElement_ToString\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ToString()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns the formatted (indented) XML for this streaming element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override string ToString ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> containing the indented XML.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Note that when debugging a program that uses <a class=\"xref\" href=\"system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a>, displaying the value of an object causes its <a class=\"xref\" href=\"system.xml.linq.xstreamingelement#System_Xml_Linq_XStreamingElement_ToString_\" data-linktype=\"relative-path\">ToString</a> method to be called. This causes the XML to be serialized. If the semantics of your streaming element query are such that the streaming element can only be streamed once, this may cause undesirable behavior in your debugging experience.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xml_Linq_XStreamingElement_ToString_System_Xml_Linq_SaveOptions_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ToString(SaveOptions)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns the XML for this streaming element, optionally disabling formatting.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string ToString (System.Xml.Linq.SaveOptions options);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>options</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a> that specifies formatting behavior.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> containing the XML.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Note that when debugging a program that uses <a class=\"xref\" href=\"system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a>, displaying the value of an object causes its <a class=\"xref\" href=\"system.xml.linq.xstreamingelement#System_Xml_Linq_XStreamingElement_ToString_\" data-linktype=\"relative-path\">ToString</a> method to be called. This causes the XML to be serialized. If the semantics of your streaming element query are such that the streaming element can only be streamed once, this may cause undesirable behavior in your debugging experience.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xml_Linq_XStreamingElement_WriteTo_System_Xml_XmlWriter_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">WriteTo(XmlWriter)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Writes this streaming element to an <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void WriteTo (System.Xml.XmlWriter writer);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>writer</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> into which this method will write.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Xml.Linq.XStreamingElement.yml\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XStreamingElement\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XStreamingElement..ctor\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XStreamingElement.Add\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XStreamingElement.Name\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XStreamingElement.Save\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XStreamingElement.ToString\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XStreamingElement.WriteTo\">\r\n<meta name=\"APILocation\" content=\"System.Xml.Linq.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-29 05:54 AM\">\r\n<meta name=\"document_id\" content=\"38fffee0-cf62-a54a-3bd1-f8863e661b66\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents elements in an XML tree that supports deferred streaming output.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.xml.linq/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Xml.Linq.XStreamingElement\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Xml.Linq.XStreamingElement.yml","open_to_public_contributors":false,"api_name":["System.Xml.Linq.XStreamingElement","System.Xml.Linq.XStreamingElement..ctor","System.Xml.Linq.XStreamingElement.Add","System.Xml.Linq.XStreamingElement.Name","System.Xml.Linq.XStreamingElement.Save","System.Xml.Linq.XStreamingElement.ToString","System.Xml.Linq.XStreamingElement.WriteTo"],"api_location":["System.Xml.Linq.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Xml.Linq.XStreamingElement","System::Xml::Linq::XStreamingElement","System.Xml.Linq.XStreamingElement.#ctor","System::Xml::Linq::XStreamingElement::#ctor","System.Xml.Linq.XStreamingElement.Add","System::Xml::Linq::XStreamingElement::Add","System.Xml.Linq.XStreamingElement.Name","System::Xml::Linq::XStreamingElement::Name","System.Xml.Linq.XStreamingElement.Save","System::Xml::Linq::XStreamingElement::Save","System.Xml.Linq.XStreamingElement.ToString","System::Xml::Linq::XStreamingElement::ToString","System.Xml.Linq.XStreamingElement.WriteTo","System::Xml::Linq::XStreamingElement::WriteTo"],"dev_langs":["csharp"],"updated_at":"2017-03-29 05:54 AM","document_id":"38fffee0-cf62-a54a-3bd1-f8863e661b66","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Xml.Linq/XStreamingElement.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"XStreamingElement class | Microsoft Docs","_op_ogTitle":"XStreamingElement class","description":"Represents elements in an XML tree that supports deferred streaming output.\n","toc_asset_id":"api/_splitted/System.Xml.Linq/toc.json","toc_rel":"_splitted/System.Xml.Linq/toc.json","source_url":"","ms.assetid":"System.Xml.Linq.XStreamingElement","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.xml.linq.xstreamingelement","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.xml.linq.xstreamingelement","fileRelativePath":"api/System.Xml.Linq.XStreamingElement.html"},"themesRelativePathToOutputRoot":"_themes/"}