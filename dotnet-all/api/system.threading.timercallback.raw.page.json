{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">TimerCallback</span>\r\n      Delegate\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the method that handles calls from a <a class=\"xref\" href=\"system.threading.timer\" data-linktype=\"relative-path\">Timer</a>.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic delegate void TimerCallback(object state);</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></span></div><span class=\"lang-csharp\">TimerCallback</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example shows how to create the delegate used with the <code>Timer</code> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Threading.Timer#1\">using namespace System;\nusing namespace System::Threading;\n\nref class StatusChecker\n{\nprivate:\n    int invokeCount, maxCount;\n\npublic:\n    StatusChecker(int count)\n    {\n        invokeCount  = 0;\n        maxCount = count;\n    }\n\n    // This method is called by the timer delegate.\n    void CheckStatus(Object^ stateInfo)\n    {\n        AutoResetEvent^ autoEvent = dynamic_cast&lt;AutoResetEvent^&gt;(stateInfo);\n        Console::WriteLine(&quot;{0:h:mm:ss.fff} Checking status {1,2}.&quot;,\n                           DateTime::Now, ++invokeCount);\n\n        if (invokeCount == maxCount) {\n            // Reset the counter and signal the waiting thread.\n            invokeCount  = 0;\n            autoEvent-&gt;Set();\n        }\n    }\n};\n\nref class TimerExample\n{\npublic:\n    static void Main()\n    {\n        // Create an AutoResetEvent to signal the timeout threshold in the\n        // timer callback has been reached.\n        AutoResetEvent^ autoEvent = gcnew AutoResetEvent(false);\n\n        StatusChecker^ statusChecker = gcnew StatusChecker(10);\n\n        // Create a delegate that invokes methods for the timer.\n        TimerCallback^ tcb =\n           gcnew TimerCallback(statusChecker, &amp;StatusChecker::CheckStatus);\n\n        // Create a timer that invokes CheckStatus after one second, \n        // and every 1/4 second thereafter.\n        Console::WriteLine(&quot;{0:h:mm:ss.fff} Creating timer.\\n&quot;,\n                           DateTime::Now);\n        Timer^ stateTimer = gcnew Timer(tcb, autoEvent, 1000, 250);\n\n        // When autoEvent signals, change the period to every half second.\n        autoEvent-&gt;WaitOne(5000, false);\n        stateTimer-&gt;Change(0, 500);\n        Console::WriteLine(&quot;\\nChanging period to .5 seconds.\\n&quot;);\n\n        // When autoEvent signals the second time, dispose of the timer.\n        autoEvent-&gt;WaitOne(5000, false);\n        stateTimer-&gt;~Timer();\n        Console::WriteLine(&quot;\\nDestroying timer.&quot;);\n    }\n};\n\nint main()\n{\n    TimerExample::Main();\n}\n// The example displays output like the following:\n//       11:59:54.202 Creating timer.\n//       \n//       11:59:55.217 Checking status  1.\n//       11:59:55.466 Checking status  2.\n//       11:59:55.716 Checking status  3.\n//       11:59:55.968 Checking status  4.\n//       11:59:56.218 Checking status  5.\n//       11:59:56.470 Checking status  6.\n//       11:59:56.722 Checking status  7.\n//       11:59:56.972 Checking status  8.\n//       11:59:57.223 Checking status  9.\n//       11:59:57.473 Checking status 10.\n//       \n//       Changing period to .5 seconds.\n//       \n//       11:59:57.474 Checking status  1.\n//       11:59:57.976 Checking status  2.\n//       11:59:58.476 Checking status  3.\n//       11:59:58.977 Checking status  4.\n//       11:59:59.477 Checking status  5.\n//       11:59:59.977 Checking status  6.\n//       12:00:00.478 Checking status  7.\n//       12:00:00.980 Checking status  8.\n//       12:00:01.481 Checking status  9.\n//       12:00:01.981 Checking status 10.\n//       \n//       Destroying timer.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.Timer#1\">using System;\nusing System.Threading;\n\nclass TimerExample\n{\n    static void Main()\n    {\n        // Create an AutoResetEvent to signal the timeout threshold in the\n        // timer callback has been reached.\n        var autoEvent = new AutoResetEvent(false);\n        \n        var statusChecker = new StatusChecker(10);\n\n        // Create a timer that invokes CheckStatus after one second, \n        // and every 1/4 second thereafter.\n        Console.WriteLine(&quot;{0:h:mm:ss.fff} Creating timer.\\n&quot;, \n                          DateTime.Now);\n        var stateTimer = new Timer(statusChecker.CheckStatus, \n                                   autoEvent, 1000, 250);\n\n        // When autoEvent signals, change the period to every half second.\n        autoEvent.WaitOne();\n        stateTimer.Change(0, 500);\n        Console.WriteLine(&quot;\\nChanging period to .5 seconds.\\n&quot;);\n\n        // When autoEvent signals the second time, dispose of the timer.\n        autoEvent.WaitOne();\n        stateTimer.Dispose();\n        Console.WriteLine(&quot;\\nDestroying timer.&quot;);\n    }\n}\n\nclass StatusChecker\n{\n    private int invokeCount;\n    private int  maxCount;\n\n    public StatusChecker(int count)\n    {\n        invokeCount  = 0;\n        maxCount = count;\n    }\n\n    // This method is called by the timer delegate.\n    public void CheckStatus(Object stateInfo)\n    {\n        AutoResetEvent autoEvent = (AutoResetEvent)stateInfo;\n        Console.WriteLine(&quot;{0} Checking status {1,2}.&quot;, \n            DateTime.Now.ToString(&quot;h:mm:ss.fff&quot;), \n            (++invokeCount).ToString());\n\n        if(invokeCount == maxCount)\n        {\n            // Reset the counter and signal the waiting thread.\n            invokeCount = 0;\n            autoEvent.Set();\n        }\n    }\n}\n// The example displays output like the following:\n//       11:59:54.202 Creating timer.\n//       \n//       11:59:55.217 Checking status  1.\n//       11:59:55.466 Checking status  2.\n//       11:59:55.716 Checking status  3.\n//       11:59:55.968 Checking status  4.\n//       11:59:56.218 Checking status  5.\n//       11:59:56.470 Checking status  6.\n//       11:59:56.722 Checking status  7.\n//       11:59:56.972 Checking status  8.\n//       11:59:57.223 Checking status  9.\n//       11:59:57.473 Checking status 10.\n//       \n//       Changing period to .5 seconds.\n//       \n//       11:59:57.474 Checking status  1.\n//       11:59:57.976 Checking status  2.\n//       11:59:58.476 Checking status  3.\n//       11:59:58.977 Checking status  4.\n//       11:59:59.477 Checking status  5.\n//       11:59:59.977 Checking status  6.\n//       12:00:00.478 Checking status  7.\n//       12:00:00.980 Checking status  8.\n//       12:00:01.481 Checking status  9.\n//       12:00:01.981 Checking status 10.\n//       \n//       Destroying timer.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Timer#1\">Imports System.Threading\n\nPublic Module Example\n    Public Sub Main()\n        &#39; Use an AutoResetEvent to signal the timeout threshold in the\n        &#39; timer callback has been reached.\n        Dim autoEvent As New AutoResetEvent(False)\n\n        Dim statusChecker As New StatusChecker(10)\n\n        &#39; Create a timer that invokes CheckStatus after one second, \n        &#39; and every 1/4 second thereafter.\n        Console.WriteLine(&quot;{0:h:mm:ss.fff} Creating timer.&quot; &amp; vbCrLf, \n                          DateTime.Now)\n        Dim stateTimer As New Timer(AddressOf statusChecker.CheckStatus, \n                                    autoEvent, 1000, 250)\n\n        &#39; When autoEvent signals, change the period to every half second.\n        autoEvent.WaitOne()\n        stateTimer.Change(0, 500)\n        Console.WriteLine(vbCrLf &amp; &quot;Changing period to .5 seconds.&quot; &amp; vbCrLf)\n\n        &#39; When autoEvent signals the second time, dispose of the timer.\n        autoEvent.WaitOne()\n        stateTimer.Dispose()\n        Console.WriteLine(vbCrLf &amp; &quot;Destroying timer.&quot;)\n    End Sub\nEnd Module\n\nPublic Class StatusChecker\n    Dim invokeCount, maxCount As Integer \n\n    Sub New(count As Integer)\n        invokeCount  = 0\n        maxCount = count\n    End Sub\n\n    &#39; The timer callback method.\n    Sub CheckStatus(stateInfo As Object)\n        Dim autoEvent As AutoResetEvent = DirectCast(stateInfo, AutoResetEvent)\n        invokeCount += 1\n        Console.WriteLine(&quot;{0:h:mm:ss.fff} Checking status {1,2}.&quot;, \n                          DateTime.Now, invokeCount)\n        If invokeCount = maxCount Then\n            &#39; Reset the counter and signal the waiting thread.\n            invokeCount = 0\n            autoEvent.Set()\n        End If\n    End Sub\nEnd Class\n&#39; The example displays output like the following:\n&#39;       11:59:54.202 Creating timer.\n&#39;       \n&#39;       11:59:55.217 Checking status  1.\n&#39;       11:59:55.466 Checking status  2.\n&#39;       11:59:55.716 Checking status  3.\n&#39;       11:59:55.968 Checking status  4.\n&#39;       11:59:56.218 Checking status  5.\n&#39;       11:59:56.470 Checking status  6.\n&#39;       11:59:56.722 Checking status  7.\n&#39;       11:59:56.972 Checking status  8.\n&#39;       11:59:57.223 Checking status  9.\n&#39;       11:59:57.473 Checking status 10.\n&#39;       \n&#39;       Changing period to .5 seconds.\n&#39;       \n&#39;       11:59:57.474 Checking status  1.\n&#39;       11:59:57.976 Checking status  2.\n&#39;       11:59:58.476 Checking status  3.\n&#39;       11:59:58.977 Checking status  4.\n&#39;       11:59:59.477 Checking status  5.\n&#39;       11:59:59.977 Checking status  6.\n&#39;       12:00:00.478 Checking status  7.\n&#39;       12:00:00.980 Checking status  8.\n&#39;       12:00:01.481 Checking status  9.\n&#39;       12:00:01.981 Checking status 10.\n&#39;       \n&#39;       Destroying timer.\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>Use a <code>TimerCallback</code> delegate to specify the method that is called by a <a class=\"xref\" href=\"system.threading.timer\" data-linktype=\"relative-path\">Timer</a>. This method does not execute in the thread that created the timer; it executes in a separate thread pool thread that is provided by the system. The <code>TimerCallback</code> delegate invokes the method once after the start time elapses, and continues to invoke it once per timer interval until the <a class=\"xref\" href=\"system.threading.timer#System_Threading_Timer_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method is called, or until the <a class=\"xref\" href=\"system.threading.timer#System_Threading_Timer_Change_\" data-linktype=\"relative-path\">Change</a> method is called with the interval value <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">Infinite</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Callbacks can occur after the <a class=\"xref\" href=\"system.threading.timer#System_Threading_Timer_Dispose\" data-linktype=\"relative-path\">Dispose()</a> method overload has been called, because the timer queues callbacks for execution by thread pool threads. You can use the <a class=\"xref\" href=\"system.threading.timer#System_Threading_Timer_Dispose_System_Threading_WaitHandle_\" data-linktype=\"relative-path\">Dispose(WaitHandle)</a> method overload to wait until all callbacks have completed.  </p>\n</div>\n<p> The timer delegate is specified when the timer is constructed, and cannot be changed. The start time for a <code>Timer</code> is passed in the <code>dueTime</code> parameter of the <code>Timer</code> constructors, and the period is passed in the <code>period</code> parameter. For an example that demonstrates creating and using a <code>TimerCallback</code> delegate, see <a class=\"xref\" href=\"system.threading.timer\" data-linktype=\"relative-path\">System.Threading.Timer</a>.</p>\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Threading.TimerCallback.yml\">\r\n<meta name=\"APIName\" content=\"System.Threading.TimerCallback\">\r\n<meta name=\"APIName\" content=\"System.Threading.TimerCallback..ctor\">\r\n<meta name=\"APIName\" content=\"System.Threading.TimerCallback.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Threading.TimerCallback.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.Threading.TimerCallback.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-28 03:03 AM\">\r\n<meta name=\"document_id\" content=\"6dd87010-ace1-d5d4-beaa-2611316cb790\">\r\n<meta name=\"internalonly\" content=\"false\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the method that handles calls from a .\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.threading/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Threading.TimerCallback\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Threading.TimerCallback.yml","open_to_public_contributors":false,"api_name":["System.Threading.TimerCallback","System.Threading.TimerCallback..ctor","System.Threading.TimerCallback.Invoke","System.Threading.TimerCallback.BeginInvoke","System.Threading.TimerCallback.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Threading.TimerCallback","System::Threading::TimerCallback"],"dev_langs":["csharp"],"updated_at":"2017-03-28 03:03 AM","document_id":"6dd87010-ace1-d5d4-beaa-2611316cb790","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.Threading/TimerCallback.xml","internalonly":false,"layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"TimerCallback delegate | Microsoft Docs","_op_ogTitle":"TimerCallback delegate","description":"Represents the method that handles calls from a .\n","toc_asset_id":"api/_splitted/System.Threading/toc.json","toc_rel":"_splitted/System.Threading/toc.json","source_url":"","ms.assetid":"System.Threading.TimerCallback","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.threading.timercallback","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.threading.timercallback","fileRelativePath":"api/System.Threading.TimerCallback.html"},"themesRelativePathToOutputRoot":"_themes/"}