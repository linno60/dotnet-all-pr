{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">DragEventArgs</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Provides data for the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragDrop\" data-linktype=\"relative-path\">DragDrop</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragEnter\" data-linktype=\"relative-path\">DragEnter</a>, or <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragOver\" data-linktype=\"relative-path\">DragOver</a> event.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic class DragEventArgs : EventArgs</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></span></div><span class=\"lang-csharp\">DragEventArgs</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Derived</dt><dd>\r\n  \t\t<div class=\"cdlHolder\">\r\n        \t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.workflow.componentmodel.design.activitydrageventargs\" data-linktype=\"relative-path\">ActivityDragEventArgs</a></span></div>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Attributes</dt><dd>\r\n  \t\t<div class=\"cdlHolder\">\r\n  \t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs#System_EventArgs_Empty\" data-linktype=\"relative-path\">Empty</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example demonstrates a drag-and-drop operation between two <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> controls. The example calls the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DoDragDrop_\" data-linktype=\"relative-path\">DoDragDrop</a> method when the drag action starts. The drag action starts if the mouse has moved more than <a class=\"xref\" href=\"system.windows.forms.systeminformation#System_Windows_Forms_SystemInformation_DragSize_\" data-linktype=\"relative-path\">DragSize</a> from the mouse location during the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseDown\" data-linktype=\"relative-path\">MouseDown</a> event. The <a class=\"xref\" href=\"system.windows.forms.listbox#System_Windows_Forms_ListBox_IndexFromPoint_\" data-linktype=\"relative-path\">IndexFromPoint</a> method is used to determine the index of the item to drag during the <code>MouseDown</code> event.  </p>\n<p> The example also demonstrates using custom cursors for the drag-and-drop operation. The example assumes that two cursor files, <code>3dwarro.cur</code> and <code>3dwno.cur</code>, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the <code>UseCustomCursorsCheck</code><a class=\"xref\" href=\"system.windows.forms.checkbox\" data-linktype=\"relative-path\">CheckBox</a> is checked. The custom cursors are set in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GiveFeedback\" data-linktype=\"relative-path\">GiveFeedback</a> event handler.  </p>\n<p> The keyboard state is evaluated in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragOver\" data-linktype=\"relative-path\">DragOver</a> event handler for the right <code>ListBox</code>, to determine what the drag operation will be based upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the <code>ListBox</code> where the drop would occur is also determined during the <code>DragOver</code> event. If the data to drop is not a <code>String</code>, then the <a class=\"xref\" href=\"system.windows.forms.drageventargs#System_Windows_Forms_DragEventArgs_Effect_\" data-linktype=\"relative-path\">Effect</a> is set to <a class=\"xref\" href=\"system.windows.forms.dragdropeffects\" data-linktype=\"relative-path\">System.Windows.Forms.DragDropEffects</a>. Finally, the status of the drop is displayed in the <code>DropLocationLabel</code><a class=\"xref\" href=\"system.windows.forms.label\" data-linktype=\"relative-path\">Label</a>.  </p>\n<p> The data to drop for the right <code>ListBox</code> is determined in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragDrop\" data-linktype=\"relative-path\">DragDrop</a> event handler and the <code>String</code> value is added at the appropriate place in the <code>ListBox</code>. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_QueryContinueDrag\" data-linktype=\"relative-path\">QueryContinueDrag</a> event handler.  </p>\n<p> This code excerpt demonstrates using the DragEventArgs class. See the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DoDragDrop_\" data-linktype=\"relative-path\">DoDragDrop</a> method for the complete code example.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.Control.DoDragDrop#4\">void ListDragTarget_DragOver( Object^ /*sender*/, System::Windows::Forms::DragEventArgs^ e )\n{\n   // Determine whether string data exists in the drop data. If not, then\n   // the drop effect reflects that the drop cannot occur.\n   if (  !e-&gt;Data-&gt;GetDataPresent( System::String::typeid ) )\n   {\n      e-&gt;Effect = DragDropEffects::None;\n      DropLocationLabel-&gt;Text = &quot;None - no string data.&quot;;\n      return;\n   }\n\n   // Set the effect based upon the KeyState.\n   if ( (e-&gt;KeyState &amp; (8 + 32)) == (8 + 32) &amp;&amp; ((e-&gt;AllowedEffect &amp; DragDropEffects::Link) == DragDropEffects::Link) )\n   {\n      // KeyState 8 + 32 = CTL + ALT\n      // Link drag-and-drop effect.\n      e-&gt;Effect = DragDropEffects::Link;\n   }\n   else\n   if ( (e-&gt;KeyState &amp; 32) == 32 &amp;&amp; ((e-&gt;AllowedEffect &amp; DragDropEffects::Link) == DragDropEffects::Link) )\n   {\n      // ALT KeyState for link.\n      e-&gt;Effect = DragDropEffects::Link;\n   }\n   else\n   if ( (e-&gt;KeyState &amp; 4) == 4 &amp;&amp; ((e-&gt;AllowedEffect &amp; DragDropEffects::Move) == DragDropEffects::Move) )\n   {\n      // SHIFT KeyState for move.\n      e-&gt;Effect = DragDropEffects::Move;\n   }\n   else\n   if ( (e-&gt;KeyState &amp; 8) == 8 &amp;&amp; ((e-&gt;AllowedEffect &amp; DragDropEffects::Copy) == DragDropEffects::Copy) )\n   {\n      // CTL KeyState for copy.\n      e-&gt;Effect = DragDropEffects::Copy;\n   }\n   else\n   if ( (e-&gt;AllowedEffect &amp; DragDropEffects::Move) == DragDropEffects::Move )\n   {\n      // By default, the drop action should be move, if allowed.\n      e-&gt;Effect = DragDropEffects::Move;\n   }\n   else\n            e-&gt;Effect = DragDropEffects::None;\n\n\n\n\n\n   \n   // Get the index of the item the mouse is below.\n   // The mouse locations are relative to the screen, so they must be\n   // converted to client coordinates.\n   indexOfItemUnderMouseToDrop = ListDragTarget-&gt;IndexFromPoint( ListDragTarget-&gt;PointToClient( Point(e-&gt;X,e-&gt;Y) ) );\n   \n   // Updates the label text.\n   if ( indexOfItemUnderMouseToDrop != ListBox::NoMatches )\n   {\n      DropLocationLabel-&gt;Text = String::Concat( &quot;Drops before item # &quot;, (indexOfItemUnderMouseToDrop + 1) );\n   }\n   else\n            DropLocationLabel-&gt;Text = &quot;Drops at the end.&quot;;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.Control.DoDragDrop#4\">Private Sub ListDragTarget_DragOver(ByVal sender As Object, ByVal e As DragEventArgs) Handles ListDragTarget.DragOver\n    &#39; Determine whether string data exists in the drop data. If not, then\n    &#39; the drop effect reflects that the drop cannot occur.\n    If Not (e.Data.GetDataPresent(GetType(System.String))) Then\n\n        e.Effect = DragDropEffects.None\n        DropLocationLabel.Text = &quot;None - no string data.&quot;\n        Return\n    End If\n\n    &#39; Set the effect based upon the KeyState.\n    If ((e.KeyState And (8 + 32)) = (8 + 32) And _\n        (e.AllowedEffect And DragDropEffects.Link) = DragDropEffects.Link) Then\n        &#39; KeyState 8 + 32 = CTL + ALT\n\n        &#39; Link drag-and-drop effect.\n        e.Effect = DragDropEffects.Link\n\n    ElseIf ((e.KeyState And 32) = 32 And _\n        (e.AllowedEffect And DragDropEffects.Link) = DragDropEffects.Link) Then\n\n        &#39; ALT KeyState for link.\n        e.Effect = DragDropEffects.Link\n\n    ElseIf ((e.KeyState And 4) = 4 And _\n        (e.AllowedEffect And DragDropEffects.Move) = DragDropEffects.Move) Then\n\n        &#39; SHIFT KeyState for move.\n        e.Effect = DragDropEffects.Move\n\n    ElseIf ((e.KeyState And 8) = 8 And _\n        (e.AllowedEffect And DragDropEffects.Copy) = DragDropEffects.Copy) Then\n\n        &#39; CTL KeyState for copy.\n        e.Effect = DragDropEffects.Copy\n\n    ElseIf ((e.AllowedEffect And DragDropEffects.Move) = DragDropEffects.Move) Then\n\n        &#39; By default, the drop action should be move, if allowed.\n        e.Effect = DragDropEffects.Move\n\n    Else\n        e.Effect = DragDropEffects.None\n    End If\n\n    &#39; Gets the index of the item the mouse is below. \n\n    &#39; The mouse locations are relative to the screen, so they must be \n    &#39; converted to client coordinates.\n\n    indexOfItemUnderMouseToDrop = _\n        ListDragTarget.IndexFromPoint(ListDragTarget.PointToClient(New Point(e.X, e.Y)))\n\n    &#39; Updates the label text.\n    If (indexOfItemUnderMouseToDrop &lt;&gt; ListBox.NoMatches) Then\n\n        DropLocationLabel.Text = &quot;Drops before item #&quot; &amp; (indexOfItemUnderMouseToDrop + 1)\n    Else\n        DropLocationLabel.Text = &quot;Drops at the end.&quot;\n    End If\n\nEnd Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.Control.DoDragDrop#4\">private void ListDragTarget_DragOver(object sender, System.Windows.Forms.DragEventArgs e) \n{\n\n    // Determine whether string data exists in the drop data. If not, then\n    // the drop effect reflects that the drop cannot occur.\n    if (!e.Data.GetDataPresent(typeof(System.String))) {\n\n        e.Effect = DragDropEffects.None;\n        DropLocationLabel.Text = &quot;None - no string data.&quot;;\n        return;\n    }\n\n    // Set the effect based upon the KeyState.\n    if ((e.KeyState &amp; (8+32)) == (8+32) &amp;&amp; \n        (e.AllowedEffect &amp; DragDropEffects.Link) == DragDropEffects.Link) {\n        // KeyState 8 + 32 = CTL + ALT\n\n        // Link drag-and-drop effect.\n        e.Effect = DragDropEffects.Link;\n\n    } else if ((e.KeyState &amp; 32) == 32 &amp;&amp; \n        (e.AllowedEffect &amp; DragDropEffects.Link) == DragDropEffects.Link) {\n\n        // ALT KeyState for link.\n        e.Effect = DragDropEffects.Link;\n\n    } else if ((e.KeyState &amp; 4) == 4 &amp;&amp; \n        (e.AllowedEffect &amp; DragDropEffects.Move) == DragDropEffects.Move) {\n\n        // SHIFT KeyState for move.\n        e.Effect = DragDropEffects.Move;\n\n    } else if ((e.KeyState &amp; 8) == 8 &amp;&amp; \n        (e.AllowedEffect &amp; DragDropEffects.Copy) == DragDropEffects.Copy) {\n\n        // CTL KeyState for copy.\n        e.Effect = DragDropEffects.Copy;\n\n    } else if ((e.AllowedEffect &amp; DragDropEffects.Move) == DragDropEffects.Move)  {\n\n        // By default, the drop action should be move, if allowed.\n        e.Effect = DragDropEffects.Move;\n\n    } else\n        e.Effect = DragDropEffects.None;\n        \n    // Get the index of the item the mouse is below. \n\n    // The mouse locations are relative to the screen, so they must be \n    // converted to client coordinates.\n\n    indexOfItemUnderMouseToDrop = \n        ListDragTarget.IndexFromPoint(ListDragTarget.PointToClient(new Point(e.X, e.Y)));\n\n    // Updates the label text.\n    if (indexOfItemUnderMouseToDrop != ListBox.NoMatches){\n\n        DropLocationLabel.Text = &quot;Drops before item #&quot; + (indexOfItemUnderMouseToDrop + 1);\n    } else\n        DropLocationLabel.Text = &quot;Drops at the end.&quot;;\n\n}\n</code></pre><p> The following example illustrates how DragEventArgs are passed between the source and target of a drag-and-drop operation. In this example, a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> control is the source of the data, and the <a class=\"xref\" href=\"system.windows.forms.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> control is the target. The example assumes that the <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> control has been populated with a list of valid filenames. When the user drags one of the displayed filenames from the <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> control onto the <a class=\"xref\" href=\"system.windows.forms.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> control, the file referenced in the filename is opened.  </p>\n<p> The operation is initiated in the <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> control&#39;s MouseDown event. In the <a class=\"xref\" href=\"system.windows.forms.richtextbox#System_Windows_Forms_RichTextBox_DragEnter\" data-linktype=\"relative-path\">DragEnter</a> event handler, the example uses the <a class=\"xref\" href=\"system.windows.forms.idataobject#System_Windows_Forms_IDataObject_GetDataPresent_\" data-linktype=\"relative-path\">GetDataPresent</a> method to verify that the data is in a format that the <a class=\"xref\" href=\"system.windows.forms.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> control can display and then sets the <a class=\"xref\" href=\"system.windows.forms.dragdropeffects\" data-linktype=\"relative-path\">DragDropEffects</a> property to specify that data should be copied from the source control to the target control. Finally, the <a class=\"xref\" href=\"system.windows.forms.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> control&#39;s DragDrop event handler uses the <a class=\"xref\" href=\"system.windows.forms.idataobject#System_Windows_Forms_IDataObject_GetData_\" data-linktype=\"relative-path\">GetData</a> method to retrieve the filename to open.  </p>\n<pre><code class=\"lang-cs\" name=\"RichTextDragDrop#1\">private void Form1_Load(object sender, EventArgs e) \n{\n   // Sets the AllowDrop property so that data can be dragged onto the control.\n   richTextBox1.AllowDrop = true;\n\n   // Add code here to populate the ListBox1 with paths to text files.\n\n}\n\nprivate void listBox1_MouseDown(object sender, System.Windows.Forms.MouseEventArgs e)\n{\n   // Determines which item was selected.\n   ListBox lb =( (ListBox)sender);\n   Point pt = new Point(e.X,e.Y);\n   int index = lb.IndexFromPoint(pt);\n\n   // Starts a drag-and-drop operation with that item.\n   if(index&gt;=0) \n   {\n      lb.DoDragDrop(lb.Items[index].ToString(), DragDropEffects.Link);\n   }\n}\n\nprivate void richTextBox1_DragEnter(object sender, DragEventArgs e) \n{\n   // If the data is text, copy the data to the RichTextBox control.\n   if(e.Data.GetDataPresent(&quot;Text&quot;))\n      e.Effect = DragDropEffects.Copy;\n}\n\nprivate void richTextBox1_DragDrop(object sender, DragEventArgs e) \n{\n   // Loads the file into the control. \n   richTextBox1.LoadFile((String)e.Data.GetData(&quot;Text&quot;), System.Windows.Forms.RichTextBoxStreamType.RichText);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"RichTextDragDrop#1\">Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load\n   &#39; Sets the AllowDrop property so that data can be dragged onto the control.\n   RichTextBox1.AllowDrop = True\n\n   &#39; Add code here to populate the ListBox1 with paths to text files.\n\nEnd Sub\n\nPrivate Sub RichTextBox1_DragEnter(ByVal sender As Object, ByVal e As System.Windows.Forms.DragEventArgs) Handles RichTextBox1.DragEnter\n   &#39; If the data is text, copy the data to the RichTextBox control.\n   If (e.Data.GetDataPresent(&quot;Text&quot;)) Then\n      e.Effect = DragDropEffects.Copy\n   End If\nEnd Sub\n\n\nPrivate Overloads Sub RichTextBox1_DragDrop(ByVal sender As Object, ByVal e As System.Windows.Forms.DragEventArgs) Handles RichTextBox1.DragDrop\n   &#39; Loads the file into the control. \n   RichTextBox1.LoadFile(e.Data.GetData(&quot;Text&quot;), System.Windows.Forms.RichTextBoxStreamType.RichText)\nEnd Sub\n\nPrivate Sub ListBox1_MouseDown(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles ListBox1.MouseDown\n   Dim Lb As ListBox\n   Dim Pt As New Point(e.X, e.Y)\n   Dim Index As Integer\n\n   &#39; Determines which item was selected.\n   Lb = sender\n   Index = Lb.IndexFromPoint(Pt)\n\n   &#39; Starts a drag-and-drop operation with that item.\n   If Index &gt;= 0 Then\n      Lb.DoDragDrop(Lb.Items(Index), DragDropEffects.Link)\n   End If\nEnd Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"RichTextDragDrop#1\">private:\n   void Form1_Load( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      // Sets the AllowDrop property so that data can be dragged onto the control.\n      richTextBox1-&gt;AllowDrop = true;\n\n      // Add code here to populate the ListBox1 with paths to text files.\n   }\n\n   void listBox1_MouseDown( Object^ sender, System::Windows::Forms::MouseEventArgs^ e )\n   {\n      // Determines which item was selected.\n      ListBox^ lb = (dynamic_cast&lt;ListBox^&gt;(sender));\n      Point pt = Point(e-&gt;X,e-&gt;Y);\n      int index = lb-&gt;IndexFromPoint( pt );\n\n      // Starts a drag-and-drop operation with that item.\n      if ( index &gt;= 0 )\n      {\n         lb-&gt;DoDragDrop( lb-&gt;Items[ index ], DragDropEffects::Link );\n      }\n   }\n\n   void richTextBox1_DragEnter( Object^ /*sender*/, DragEventArgs^ e )\n   {\n      // If the data is text, copy the data to the RichTextBox control.\n      if ( e-&gt;Data-&gt;GetDataPresent( &quot;Text&quot; ) )\n            e-&gt;Effect = DragDropEffects::Copy;\n   }\n\n   void richTextBox1_DragDrop( Object^ /*sender*/, DragEventArgs^ e )\n   {\n      // Loads the file into the control.\n      richTextBox1-&gt;LoadFile( dynamic_cast&lt;String^&gt;(e-&gt;Data-&gt;GetData( &quot;Text&quot; )), System::Windows::Forms::RichTextBoxStreamType::RichText );\n   }\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragDrop\" data-linktype=\"relative-path\">DragDrop</a> event occurs when the user completes a drag-and-drop operation by dragging an object over the control and then dropping it onto the control by releasing the mouse button. The <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragEnter\" data-linktype=\"relative-path\">DragEnter</a> event occurs when the user moves the mouse pointer onto the control while dragging an object with the mouse. The <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragOver\" data-linktype=\"relative-path\">DragOver</a> event occurs when the user moves the mouse pointer over the control while dragging an object with the mouse.  </p>\n<p> A DragEventArgs object specifies any data associated with this event; the current state of the SHIFT, CTRL, and ALT keys; the location of the mouse pointer; and the drag-and-drop effects allowed by the source and target of the drag event.  </p>\n<p> For information about the event model, see <a href=\"../topic/handling%20and%20raising%20events\" data-linktype=\"relative-path\">Events</a>.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Windows_Forms_DragEventArgs__ctor_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_Forms_DragEventArgs__ctor_System_Windows_Forms_IDataObject_System_Int32_System_Int32_System_Int32_System_Windows_Forms_DragDropEffects_System_Windows_Forms_DragDropEffects_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">DragEventArgs(IDataObject, Int32, Int32, Int32, DragDropEffects, DragDropEffects)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.forms.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public DragEventArgs (System.Windows.Forms.IDataObject data, int keyState, int x, int y, System.Windows.Forms.DragDropEffects allowedEffect, System.Windows.Forms.DragDropEffects effect);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>data</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.idataobject\" data-linktype=\"relative-path\">IDataObject</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The data associated with this event.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>keyState</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The current state of the SHIFT, CTRL, and ALT keys.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>x</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The x-coordinate of the mouse cursor in pixels.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>y</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The y-coordinate of the mouse cursor in pixels.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>allowedEffect</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.dragdropeffects\" data-linktype=\"relative-path\">DragDropEffects</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>One of the <a class=\"xref\" href=\"system.windows.forms.dragdropeffects\" data-linktype=\"relative-path\">DragDropEffects</a> values.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>effect</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.dragdropeffects\" data-linktype=\"relative-path\">DragDropEffects</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>One of the <a class=\"xref\" href=\"system.windows.forms.dragdropeffects\" data-linktype=\"relative-path\">DragDropEffects</a> values.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Windows_Forms_DragEventArgs_AllowedEffect_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_Forms_DragEventArgs_AllowedEffect\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">AllowedEffect</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets which drag-and-drop operations are allowed by the originator (or source) of the drag event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Windows.Forms.DragDropEffects AllowedEffect { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.dragdropeffects\" data-linktype=\"relative-path\">DragDropEffects</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>One of the <a class=\"xref\" href=\"system.windows.forms.dragdropeffects\" data-linktype=\"relative-path\">DragDropEffects</a> values.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>When a control initiates a drag-and-drop operation by calling the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DoDragDrop_\" data-linktype=\"relative-path\">DoDragDrop</a> method, it specifies the permissible effects of the operation. For example, when you drag a file from a source, if the file is read-only (or from a read-only storage medium such as a CD), the source will indicate that the file can be copied, but not transferred, to the target.  </p>\n<p> Before attempting to perform an operation on the dragged data, you should examine this property to ensure that the operation is allowed.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Windows_Forms_DragEventArgs_Data_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_Forms_DragEventArgs_Data\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Data</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the <a class=\"xref\" href=\"system.windows.forms.idataobject\" data-linktype=\"relative-path\">IDataObject</a> that contains the data associated with this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Windows.Forms.IDataObject Data { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.idataobject\" data-linktype=\"relative-path\">IDataObject</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The data associated with this event.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>In the body of your event handler, you can use the <a class=\"xref\" href=\"system.windows.forms.idataobject#System_Windows_Forms_IDataObject_GetDataPresent_\" data-linktype=\"relative-path\">GetDataPresent</a> method to determine whether the data matches the format requirements of the control onto which the data is being dragged. You also can specify whether you want to attempt to convert the data to meet your format requirements. If the dragged data meets your format requirements, use the <a class=\"xref\" href=\"system.windows.forms.idataobject#System_Windows_Forms_IDataObject_GetData_\" data-linktype=\"relative-path\">GetData</a> method to retrieve the data.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Windows_Forms_DragEventArgs_Effect_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_Forms_DragEventArgs_Effect\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Effect</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets the target drop effect in a drag-and-drop operation.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Windows.Forms.DragDropEffects Effect { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.dragdropeffects\" data-linktype=\"relative-path\">DragDropEffects</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>One of the <a class=\"xref\" href=\"system.windows.forms.dragdropeffects\" data-linktype=\"relative-path\">DragDropEffects</a> values.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>By default, the effect applied determines the mouse cursor for the target of a drag-and-drop operation. This is useful to provide feedback to the user on the operation that will occur. For example, if you press the CTRL key when you drag a file from a source, specify <a class=\"xref\" href=\"system.windows.forms.dragdropeffects\" data-linktype=\"relative-path\">System.Windows.Forms.DragDropEffects</a> to indicate the target will try to perform a copy operation.  </p>\n<p> To use custom cursors for a drag operation, see <a class=\"xref\" href=\"system.windows.forms.givefeedbackeventargs#System_Windows_Forms_GiveFeedbackEventArgs_UseDefaultCursors_\" data-linktype=\"relative-path\">UseDefaultCursors</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Windows_Forms_DragEventArgs_KeyState_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_Forms_DragEventArgs_KeyState\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">KeyState</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the current state of the SHIFT, CTRL, and ALT keys, as well as the state of the mouse buttons.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int KeyState { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The current state of the SHIFT, CTRL, and ALT keys and of the mouse buttons.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>You can make the effect of a drag-and-drop operation to depend on the state of a particular key. For example, you may decide to copy or move data depending on whether the CTRL or SHIFT keys are pressed during the drag-and-drop operation.  </p>\n<p> The bits that are set in the KeyState property identify the keys or mouse buttons that were pressed during the operation. For example, if the left mouse button is pressed, the first bit in the KeyState property is set. You can use the bitwise AND operator to test for a given key state.  </p>\n<p> The following table lists the values that are used for a specified event.  </p>\n<table>\n<thead>\n<tr>\n<th>Value</th>\n<th>Key</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1 (bit 0)</td>\n<td>The left mouse button.</td>\n</tr>\n<tr>\n<td>2 (bit 1)</td>\n<td>The right mouse button.</td>\n</tr>\n<tr>\n<td>4 (bit 2)</td>\n<td>The SHIFT key.</td>\n</tr>\n<tr>\n<td>8 (bit 3)</td>\n<td>The CTRL key.</td>\n</tr>\n<tr>\n<td>16 (bit 4)</td>\n<td>The middle mouse button.</td>\n</tr>\n<tr>\n<td>32 (bit 5)</td>\n<td>The ALT key.</td>\n</tr>\n</tbody>\n</table>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Windows_Forms_DragEventArgs_X_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_Forms_DragEventArgs_X\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">X</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the x-coordinate of the mouse pointer, in screen coordinates.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int X { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The x-coordinate of the mouse pointer in pixels.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Windows_Forms_DragEventArgs_Y_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_Forms_DragEventArgs_Y\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Y</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the y-coordinate of the mouse pointer, in screen coordinates.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int Y { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The y-coordinate of the mouse pointer in pixels.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Windows.Forms.DragEventArgs.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DragEventArgs\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DragEventArgs..ctor\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DragEventArgs.AllowedEffect\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DragEventArgs.Data\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DragEventArgs.Effect\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DragEventArgs.KeyState\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DragEventArgs.X\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DragEventArgs.Y\">\r\n<meta name=\"APILocation\" content=\"System.Windows.Forms.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 05:47 AM\">\r\n<meta name=\"document_id\" content=\"5dd6ca1f-314b-c6f3-ac8e-ed81e99c8e6e\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides data for the , , or  event.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.windows.forms/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Forms.DragEventArgs\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Windows.Forms.DragEventArgs.yml","open_to_public_contributors":false,"api_name":["System.Windows.Forms.DragEventArgs","System.Windows.Forms.DragEventArgs..ctor","System.Windows.Forms.DragEventArgs.AllowedEffect","System.Windows.Forms.DragEventArgs.Data","System.Windows.Forms.DragEventArgs.Effect","System.Windows.Forms.DragEventArgs.KeyState","System.Windows.Forms.DragEventArgs.X","System.Windows.Forms.DragEventArgs.Y"],"api_location":["System.Windows.Forms.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Forms.DragEventArgs","System::Windows::Forms::DragEventArgs","System.Windows.Forms.DragEventArgs.#ctor","System::Windows::Forms::DragEventArgs::#ctor","System.Windows.Forms.DragEventArgs.AllowedEffect","System::Windows::Forms::DragEventArgs::AllowedEffect","System.Windows.Forms.DragEventArgs.Data","System::Windows::Forms::DragEventArgs::Data","System.Windows.Forms.DragEventArgs.Effect","System::Windows::Forms::DragEventArgs::Effect","System.Windows.Forms.DragEventArgs.KeyState","System::Windows::Forms::DragEventArgs::KeyState","System.Windows.Forms.DragEventArgs.X","System::Windows::Forms::DragEventArgs::X","System.Windows.Forms.DragEventArgs.Y","System::Windows::Forms::DragEventArgs::Y"],"dev_langs":["csharp"],"updated_at":"2017-03-31 05:47 AM","document_id":"5dd6ca1f-314b-c6f3-ac8e-ed81e99c8e6e","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Windows.Forms/DragEventArgs.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"DragEventArgs class | Microsoft Docs","_op_ogTitle":"DragEventArgs class","description":"Provides data for the , , or  event.\n","toc_asset_id":"api/_splitted/System.Windows.Forms/toc.json","toc_rel":"_splitted/System.Windows.Forms/toc.json","source_url":"","ms.assetid":"System.Windows.Forms.DragEventArgs","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.drageventargs","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.drageventargs","fileRelativePath":"api/System.Windows.Forms.DragEventArgs.html"},"themesRelativePathToOutputRoot":"_themes/"}