{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">AddressFamily</span>\r\n      Enum\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Specifies the addressing scheme that an instance of the <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> class can use.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\r\n  \t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public enum AddressFamily</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a></span></div><span class=\"lang-csharp\">AddressFamily</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example creates a <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> using the InterNetworkAddressFamily.  </p>\n<pre><code class=\"lang-vb\" name=\"Socket_Send_Recieve#1\">Imports System\nImports System.Text\nImports System.IO\nImports System.Net\nImports System.Net.Sockets\n\n _\n\nPublic Class Sample\n   \n   \n   Public Shared Function DoSocketGet(server As String) As String\n      &#39;Set up variables and String to write to the server.\n    Dim ASCII As Encoding = Encoding.ASCII\n    Dim [Get] As String = &quot;GET / HTTP/1.1&quot; + ControlChars.Lf + ControlChars.NewLine + &quot;Host: &quot; + server + ControlChars.Lf + ControlChars.NewLine + &quot;Connection: Close&quot; + ControlChars.Lf + ControlChars.NewLine + ControlChars.Lf + ControlChars.NewLine\n    Dim ByteGet As [Byte]() = ASCII.GetBytes([Get])\n    Dim RecvBytes(256) As [Byte]\n    Dim strRetPage As [String] = Nothing\n\n\n      \n      &#39; IPAddress and IPEndPoint represent the endpoint that will\n      &#39;   receive the request.\n      &#39; Get first IPAddress in list return by DNS.\n      Try\n\n \n\n         &#39; Define those variables to be evaluated in the next for loop and \n         &#39; then used to connect to the server. These variables are defined\n         &#39; outside the for loop to make them accessible there after.\n         Dim s As Socket = Nothing\n         Dim hostEndPoint As IPEndPoint\n         Dim hostAddress As IPAddress = Nothing\n         Dim conPort As Integer = 80\n         \n         &#39; Get DNS host information.\n         Dim hostInfo As IPHostEntry = Dns.Resolve(server)\n         &#39; Get the DNS IP addresses associated with the host.\n         Dim IPaddresses As IPAddress() = hostInfo.AddressList\n         \n         &#39; Evaluate the socket and receiving host IPAddress and IPEndPoint. \n      Dim index As Integer = 0\n      For index = 0 To IPaddresses.Length - 1\n        hostAddress = IPaddresses(index)\n        hostEndPoint = New IPEndPoint(hostAddress, conPort)\n\n\n        &#39; Creates the Socket to send data over a TCP connection.\n        s = New Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp)\n\n\n        &#39; Connect to the host using its IPEndPoint.\n        s.Connect(hostEndPoint)\n\n        If Not s.Connected Then\n          &#39; Connection failed, try next IPaddress.\n          strRetPage = &quot;Unable to connect to host&quot;\n          s = Nothing\n          GoTo ContinueFor1\n        End If\n\n\n        &#39; Sent the GET request to the host.\n        s.Send(ByteGet, ByteGet.Length, 0)\n\n\nContinueFor1:\n      Next index  &#39; End of the for loop.\n      \n\n\n\n      &#39; Receive the host home page content and loop until all the data is received.\n\n      &#39;Dim bytes As Int32 = s.Receive(RecvBytes, RecvBytes.Length, 0)\n      Dim bytes As Int32 = s.Receive(RecvBytes, RecvBytes.Length, 0)\n\n      strRetPage = &quot;Default HTML page on &quot; + server + &quot;:\\r\\n&quot;\n      strRetPage = &quot;Default HTML page on &quot; + server + &quot;:&quot; + ControlChars.Lf + ControlChars.NewLine\n\n      Dim i As Integer\n\n      While bytes &gt; 0\n\n        bytes = s.Receive(RecvBytes, RecvBytes.Length, 0)\n\n        strRetPage = strRetPage + ASCII.GetString(RecvBytes, 0, bytes)\n\n      End While\n\n\n      &#39; End of the try block.\n    Catch e As SocketException\n         Console.WriteLine(&quot;SocketException caught!!!&quot;)\n         Console.WriteLine((&quot;Source : &quot; + e.Source))\n         Console.WriteLine((&quot;Message : &quot; + e.Message))\n      Catch e As ArgumentNullException\n         Console.WriteLine(&quot;ArgumentNullException caught!!!&quot;)\n         Console.WriteLine((&quot;Source : &quot; + e.Source))\n         Console.WriteLine((&quot;Message : &quot; + e.Message))\n      Catch e As NullReferenceException\n         Console.WriteLine(&quot;NullReferenceException caught!!!&quot;)\n         Console.WriteLine((&quot;Source : &quot; + e.Source))\n         Console.WriteLine((&quot;Message : &quot; + e.Message))\n      Catch e As Exception\n         Console.WriteLine(&quot;Exception caught!!!&quot;)\n         Console.WriteLine((&quot;Source : &quot; + e.Source))\n         Console.WriteLine((&quot;Message : &quot; + e.Message))\n      End Try\n      \n      Return strRetPage\n   End Function &#39;DoSocketGet\n    \n   Public Shared Sub Main()\n    Console.WriteLine(DoSocketGet(&quot;localhost&quot;))\n   End Sub &#39;Main\nEnd Class &#39;Sample\n</code></pre><pre><code class=\"lang-cpp\" name=\"Socket_Send_Recieve#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Text;\nusing namespace System::IO;\nusing namespace System::Net;\nusing namespace System::Net::Sockets;\nString^ DoSocketGet( String^ server )\n{\n   \n   //Set up variables and String to write to the server.\n   Encoding^ ASCII = Encoding::ASCII;\n   String^ Get =  &quot;GET / HTTP/1.1\\r\\nHost: &quot;;\n   Get-&gt;Concat( server,  &quot;\\r\\nConnection: Close\\r\\n\\r\\n&quot; );\n   array&lt;Byte&gt;^ByteGet = ASCII-&gt;GetBytes( Get );\n   array&lt;Byte&gt;^RecvBytes = gcnew array&lt;Byte&gt;(256);\n   String^ strRetPage = nullptr;\n   \n   // IPAddress and IPEndPoint represent the endpoint that will\n   //   receive the request.\n   // Get first IPAddress in list return by DNS.\n   try\n   {\n      \n      // Define those variables to be evaluated in the next for loop and \n      // then used to connect to the server. These variables are defined\n      // outside the for loop to make them accessible there after.\n      Socket^ s = nullptr;\n      IPEndPoint^ hostEndPoint;\n      IPAddress^ hostAddress = nullptr;\n      int conPort = 80;\n      \n      // Get DNS host information.\n      IPHostEntry^ hostInfo = Dns::Resolve( server );\n      \n      // Get the DNS IP addresses associated with the host.\n      array&lt;IPAddress^&gt;^IPaddresses = hostInfo-&gt;AddressList;\n      \n      // Evaluate the socket and receiving host IPAddress and IPEndPoint. \n      for ( int index = 0; index &lt; IPaddresses-&gt;Length; index++ )\n      {\n         hostAddress = IPaddresses[ index ];\n         hostEndPoint = gcnew IPEndPoint( hostAddress,conPort );\n         \n         // Creates the Socket to send data over a TCP connection.\n         s = gcnew Socket( AddressFamily::InterNetwork,SocketType::Stream,ProtocolType::Tcp );\n         \n         // Connect to the host using its IPEndPoint.\n         s-&gt;Connect( hostEndPoint );\n         if (  !s-&gt;Connected )\n         {\n            \n            // Connection failed, try next IPaddress.\n            strRetPage =  &quot;Unable to connect to host&quot;;\n            s = nullptr;\n            continue;\n         }\n\n         \n         // Sent the GET request to the host.\n         s-&gt;Send( ByteGet, ByteGet-&gt;Length, SocketFlags::None );\n         \n\n      }\n      \n      // Receive the host home page content and loop until all the data is received.\n      Int32 bytes = s-&gt;Receive( RecvBytes, RecvBytes-&gt;Length, SocketFlags::None );\n      strRetPage =  &quot;Default HTML page on &quot;;\n      strRetPage-&gt;Concat( server,  &quot;:\\r\\n&quot;, ASCII-&gt;GetString( RecvBytes, 0, bytes ) );\n      while ( bytes &gt; 0 )\n      {\n         bytes = s-&gt;Receive( RecvBytes, RecvBytes-&gt;Length, SocketFlags::None );\n         strRetPage-&gt;Concat( ASCII-&gt;GetString( RecvBytes, 0, bytes ) );\n      }\n\n      \n   }\n   catch ( SocketException^ e ) \n   {\n      Console::WriteLine(  &quot;SocketException caught!!!&quot; );\n      Console::Write(  &quot;Source : &quot; );\n      Console::WriteLine( e-&gt;Source );\n      Console::Write(  &quot;Message : &quot; );\n      Console::WriteLine( e-&gt;Message );\n   }\n   catch ( ArgumentNullException^ e ) \n   {\n      Console::WriteLine(  &quot;ArgumentNULLException caught!!!&quot; );\n      Console::Write(  &quot;Source : &quot; );\n      Console::WriteLine( e-&gt;Source );\n      Console::Write(  &quot;Message : &quot; );\n      Console::WriteLine( e-&gt;Message );\n   }\n   catch ( NullReferenceException^ e ) \n   {\n      Console::WriteLine(  &quot;NULLReferenceException caught!!!&quot; );\n      Console::Write(  &quot;Source : &quot; );\n      Console::WriteLine( e-&gt;Source );\n      Console::Write(  &quot;Message : &quot; );\n      Console::WriteLine( e-&gt;Message );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine(  &quot;Exception caught!!!&quot; );\n      Console::Write(  &quot;Source : &quot; );\n      Console::WriteLine( e-&gt;Source );\n      Console::Write(  &quot;Message : &quot; );\n      Console::WriteLine( e-&gt;Message );\n   }\n\n   return strRetPage;\n}\n\nint main()\n{\n   Console::WriteLine( DoSocketGet(  &quot;localhost&quot; ) );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Socket_Send_Recieve#1\">using System;\nusing System.Text;\nusing System.IO;\nusing System.Net;\nusing System.Net.Sockets;\n\npublic class Sample\n{\n\n  public static string DoSocketGet(string server) \n  {\n    //Set up variables and String to write to the server.\n    Encoding ASCII = Encoding.ASCII;\n    string Get = &quot;GET / HTTP/1.1\\r\\nHost: &quot; + server + \n                 &quot;\\r\\nConnection: Close\\r\\n\\r\\n&quot;;\n    Byte[] ByteGet = ASCII.GetBytes(Get);\n    Byte[] RecvBytes = new Byte[256];\n    String strRetPage = null;\n\n\n    // IPAddress and IPEndPoint represent the endpoint that will\n    //   receive the request.\n    // Get first IPAddress in list return by DNS.\n\n\n    try\n    {\n\n\n      // Define those variables to be evaluated in the next for loop and \n      // then used to connect to the server. These variables are defined\n      // outside the for loop to make them accessible there after.\n      Socket s = null;\n      IPEndPoint hostEndPoint;\n      IPAddress hostAddress = null;\n      int conPort = 80;\n\n      // Get DNS host information.\n      IPHostEntry hostInfo = Dns.GetHostEntry(server);\n      // Get the DNS IP addresses associated with the host.\n      IPAddress[] IPaddresses = hostInfo.AddressList;\n\n      // Evaluate the socket and receiving host IPAddress and IPEndPoint. \n      for (int index=0; index&lt;IPaddresses.Length; index++)\n      {\n        hostAddress = IPaddresses[index];\n        hostEndPoint = new IPEndPoint(hostAddress, conPort);\n\n\n        // Creates the Socket to send data over a TCP connection.\n        s = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp );\n\n\n \n        // Connect to the host using its IPEndPoint.\n        s.Connect(hostEndPoint);\n\n        if (!s.Connected)\n        {\n          // Connection failed, try next IPaddress.\n          strRetPage = &quot;Unable to connect to host&quot;;\n          s = null;\n          continue;\n        }\n\n        // Sent the GET request to the host.\n        s.Send(ByteGet, ByteGet.Length, 0);\n\n\n      } // End of the for loop.      \n\n\n \n      // Receive the host home page content and loop until all the data is received.\n      Int32 bytes = s.Receive(RecvBytes, RecvBytes.Length, 0);\n      strRetPage = &quot;Default HTML page on &quot; + server + &quot;:\\r\\n&quot;;\n      strRetPage = strRetPage + ASCII.GetString(RecvBytes, 0, bytes);\n \n      while (bytes &gt; 0)\n      {\n        bytes = s.Receive(RecvBytes, RecvBytes.Length, 0);\n        strRetPage = strRetPage + ASCII.GetString(RecvBytes, 0, bytes);\n      }\n\n    \n    } // End of the try block.\n    \n    catch(SocketException e) \n    {\n      Console.WriteLine(&quot;SocketException caught!!!&quot;);\n      Console.WriteLine(&quot;Source : &quot; + e.Source);\n      Console.WriteLine(&quot;Message : &quot; + e.Message);\n    }\n    catch(ArgumentNullException e)\n    {\n      Console.WriteLine(&quot;ArgumentNullException caught!!!&quot;);\n      Console.WriteLine(&quot;Source : &quot; + e.Source);\n      Console.WriteLine(&quot;Message : &quot; + e.Message);\n    }\n    catch(NullReferenceException e)\n    {\n      Console.WriteLine(&quot;NullReferenceException caught!!!&quot;);\n      Console.WriteLine(&quot;Source : &quot; + e.Source);\n      Console.WriteLine(&quot;Message : &quot; + e.Message);\n    }\n    catch(Exception e)\n    {\n      Console.WriteLine(&quot;Exception caught!!!&quot;);\n      Console.WriteLine(&quot;Source : &quot; + e.Source);\n      Console.WriteLine(&quot;Message : &quot; + e.Message);\n    }\n    \n    return strRetPage;\n\n}\n   public static void Main()\n   {\n      Console.WriteLine(DoSocketGet(&quot;localhost&quot;));\n   }\n }\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>An AddressFamily member specifies the addressing scheme that a <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> will use to resolve an address. For example, InterNetwork indicates that an IP version 4 address is expected when a <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> connects to an endpoint.</p>\n\r\n  \r\n      \t<h2 class=\"accented\">Fields\r\n      </h2>\r\n      <table class=\"nameValue\">\r\n      \t<tr><td id=\"System_Net_Sockets_AddressFamily_AppleTalk\">\r\n      \t\t\t<span class=\"lang-csharp\">AppleTalk</span>\r\n      \t</td>\r\n      \t<td><p>AppleTalk address.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Net_Sockets_AddressFamily_Atm\">\r\n      \t\t\t<span class=\"lang-csharp\">Atm</span>\r\n      \t</td>\r\n      \t<td><p>Native ATM services address.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Net_Sockets_AddressFamily_Banyan\">\r\n      \t\t\t<span class=\"lang-csharp\">Banyan</span>\r\n      \t</td>\r\n      \t<td><p>Banyan address.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Net_Sockets_AddressFamily_Ccitt\">\r\n      \t\t\t<span class=\"lang-csharp\">Ccitt</span>\r\n      \t</td>\r\n      \t<td><p>Addresses for CCITT protocols, such as X.25.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Net_Sockets_AddressFamily_Chaos\">\r\n      \t\t\t<span class=\"lang-csharp\">Chaos</span>\r\n      \t</td>\r\n      \t<td><p>Address for MIT CHAOS protocols.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Net_Sockets_AddressFamily_Cluster\">\r\n      \t\t\t<span class=\"lang-csharp\">Cluster</span>\r\n      \t</td>\r\n      \t<td><p>Address for Microsoft cluster products.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Net_Sockets_AddressFamily_DataKit\">\r\n      \t\t\t<span class=\"lang-csharp\">DataKit</span>\r\n      \t</td>\r\n      \t<td><p>Address for Datakit protocols.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Net_Sockets_AddressFamily_DataLink\">\r\n      \t\t\t<span class=\"lang-csharp\">DataLink</span>\r\n      \t</td>\r\n      \t<td><p>Direct data-link interface address.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Net_Sockets_AddressFamily_DecNet\">\r\n      \t\t\t<span class=\"lang-csharp\">DecNet</span>\r\n      \t</td>\r\n      \t<td><p>DECnet address.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Net_Sockets_AddressFamily_Ecma\">\r\n      \t\t\t<span class=\"lang-csharp\">Ecma</span>\r\n      \t</td>\r\n      \t<td><p>European Computer Manufacturers Association (ECMA) address.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Net_Sockets_AddressFamily_FireFox\">\r\n      \t\t\t<span class=\"lang-csharp\">FireFox</span>\r\n      \t</td>\r\n      \t<td><p>FireFox address.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Net_Sockets_AddressFamily_HyperChannel\">\r\n      \t\t\t<span class=\"lang-csharp\">HyperChannel</span>\r\n      \t</td>\r\n      \t<td><p>NSC Hyperchannel address.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Net_Sockets_AddressFamily_Ieee12844\">\r\n      \t\t\t<span class=\"lang-csharp\">Ieee12844</span>\r\n      \t</td>\r\n      \t<td><p>IEEE 1284.4 workgroup address.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Net_Sockets_AddressFamily_ImpLink\">\r\n      \t\t\t<span class=\"lang-csharp\">ImpLink</span>\r\n      \t</td>\r\n      \t<td><p>ARPANET IMP address.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Net_Sockets_AddressFamily_InterNetwork\">\r\n      \t\t\t<span class=\"lang-csharp\">InterNetwork</span>\r\n      \t</td>\r\n      \t<td><p>Address for IP version 4.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Net_Sockets_AddressFamily_InterNetworkV6\">\r\n      \t\t\t<span class=\"lang-csharp\">InterNetworkV6</span>\r\n      \t</td>\r\n      \t<td><p>Address for IP version 6.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Net_Sockets_AddressFamily_Ipx\">\r\n      \t\t\t<span class=\"lang-csharp\">Ipx</span>\r\n      \t</td>\r\n      \t<td><p>IPX or SPX address.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Net_Sockets_AddressFamily_Irda\">\r\n      \t\t\t<span class=\"lang-csharp\">Irda</span>\r\n      \t</td>\r\n      \t<td><p>IrDA address.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Net_Sockets_AddressFamily_Iso\">\r\n      \t\t\t<span class=\"lang-csharp\">Iso</span>\r\n      \t</td>\r\n      \t<td><p>Address for ISO protocols.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Net_Sockets_AddressFamily_Lat\">\r\n      \t\t\t<span class=\"lang-csharp\">Lat</span>\r\n      \t</td>\r\n      \t<td><p>LAT address.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Net_Sockets_AddressFamily_Max\">\r\n      \t\t\t<span class=\"lang-csharp\">Max</span>\r\n      \t</td>\r\n      \t<td><p>MAX address.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Net_Sockets_AddressFamily_NetBios\">\r\n      \t\t\t<span class=\"lang-csharp\">NetBios</span>\r\n      \t</td>\r\n      \t<td><p>NetBios address.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Net_Sockets_AddressFamily_NetworkDesigners\">\r\n      \t\t\t<span class=\"lang-csharp\">NetworkDesigners</span>\r\n      \t</td>\r\n      \t<td><p>Address for Network Designers OSI gateway-enabled protocols.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Net_Sockets_AddressFamily_NS\">\r\n      \t\t\t<span class=\"lang-csharp\">NS</span>\r\n      \t</td>\r\n      \t<td><p>Address for Xerox NS protocols.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Net_Sockets_AddressFamily_Osi\">\r\n      \t\t\t<span class=\"lang-csharp\">Osi</span>\r\n      \t</td>\r\n      \t<td><p>Address for OSI protocols.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Net_Sockets_AddressFamily_Pup\">\r\n      \t\t\t<span class=\"lang-csharp\">Pup</span>\r\n      \t</td>\r\n      \t<td><p>Address for PUP protocols.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Net_Sockets_AddressFamily_Sna\">\r\n      \t\t\t<span class=\"lang-csharp\">Sna</span>\r\n      \t</td>\r\n      \t<td><p>IBM SNA address.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Net_Sockets_AddressFamily_Unix\">\r\n      \t\t\t<span class=\"lang-csharp\">Unix</span>\r\n      \t</td>\r\n      \t<td><p>Unix local to host address.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Net_Sockets_AddressFamily_Unknown\">\r\n      \t\t\t<span class=\"lang-csharp\">Unknown</span>\r\n      \t</td>\r\n      \t<td><p>Unknown address family.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Net_Sockets_AddressFamily_Unspecified\">\r\n      \t\t\t<span class=\"lang-csharp\">Unspecified</span>\r\n      \t</td>\r\n      \t<td><p>Unspecified address family.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Net_Sockets_AddressFamily_VoiceView\">\r\n      \t\t\t<span class=\"lang-csharp\">VoiceView</span>\r\n      \t</td>\r\n      \t<td><p>VoiceView address.</p>\n</td>\r\n      \t</tr>\r\n      </table>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Net.Sockets.AddressFamily.yml\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.AddressFamily\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.AddressFamily.AppleTalk\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.AddressFamily.Atm\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.AddressFamily.Banyan\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.AddressFamily.Ccitt\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.AddressFamily.Chaos\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.AddressFamily.Cluster\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.AddressFamily.DataKit\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.AddressFamily.DataLink\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.AddressFamily.DecNet\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.AddressFamily.Ecma\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.AddressFamily.FireFox\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.AddressFamily.HyperChannel\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.AddressFamily.Ieee12844\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.AddressFamily.ImpLink\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.AddressFamily.InterNetwork\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.AddressFamily.InterNetworkV6\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.AddressFamily.Ipx\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.AddressFamily.Irda\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.AddressFamily.Iso\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.AddressFamily.Lat\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.AddressFamily.Max\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.AddressFamily.NetBios\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.AddressFamily.NetworkDesigners\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.AddressFamily.NS\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.AddressFamily.Osi\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.AddressFamily.Pup\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.AddressFamily.Sna\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.AddressFamily.Unix\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.AddressFamily.Unknown\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.AddressFamily.Unspecified\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.AddressFamily.VoiceView\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 02:21 PM\">\r\n<meta name=\"document_id\" content=\"64d0d9e5-f0a8-0537-c567-cb4f091dc5b2\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Specifies the addressing scheme that an instance of the  class can use.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.net.sockets/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Net.Sockets.AddressFamily\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Net.Sockets.AddressFamily.yml","open_to_public_contributors":false,"api_name":["System.Net.Sockets.AddressFamily","System.Net.Sockets.AddressFamily.AppleTalk","System.Net.Sockets.AddressFamily.Atm","System.Net.Sockets.AddressFamily.Banyan","System.Net.Sockets.AddressFamily.Ccitt","System.Net.Sockets.AddressFamily.Chaos","System.Net.Sockets.AddressFamily.Cluster","System.Net.Sockets.AddressFamily.DataKit","System.Net.Sockets.AddressFamily.DataLink","System.Net.Sockets.AddressFamily.DecNet","System.Net.Sockets.AddressFamily.Ecma","System.Net.Sockets.AddressFamily.FireFox","System.Net.Sockets.AddressFamily.HyperChannel","System.Net.Sockets.AddressFamily.Ieee12844","System.Net.Sockets.AddressFamily.ImpLink","System.Net.Sockets.AddressFamily.InterNetwork","System.Net.Sockets.AddressFamily.InterNetworkV6","System.Net.Sockets.AddressFamily.Ipx","System.Net.Sockets.AddressFamily.Irda","System.Net.Sockets.AddressFamily.Iso","System.Net.Sockets.AddressFamily.Lat","System.Net.Sockets.AddressFamily.Max","System.Net.Sockets.AddressFamily.NetBios","System.Net.Sockets.AddressFamily.NetworkDesigners","System.Net.Sockets.AddressFamily.NS","System.Net.Sockets.AddressFamily.Osi","System.Net.Sockets.AddressFamily.Pup","System.Net.Sockets.AddressFamily.Sna","System.Net.Sockets.AddressFamily.Unix","System.Net.Sockets.AddressFamily.Unknown","System.Net.Sockets.AddressFamily.Unspecified","System.Net.Sockets.AddressFamily.VoiceView"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Net.Sockets.AddressFamily","System::Net::Sockets::AddressFamily","System.Net.Sockets.AddressFamily.AppleTalk","System::Net::Sockets::AddressFamily::AppleTalk","System.Net.Sockets.AddressFamily.Atm","System::Net::Sockets::AddressFamily::Atm","System.Net.Sockets.AddressFamily.Banyan","System::Net::Sockets::AddressFamily::Banyan","System.Net.Sockets.AddressFamily.Ccitt","System::Net::Sockets::AddressFamily::Ccitt","System.Net.Sockets.AddressFamily.Chaos","System::Net::Sockets::AddressFamily::Chaos","System.Net.Sockets.AddressFamily.Cluster","System::Net::Sockets::AddressFamily::Cluster","System.Net.Sockets.AddressFamily.DataKit","System::Net::Sockets::AddressFamily::DataKit","System.Net.Sockets.AddressFamily.DataLink","System::Net::Sockets::AddressFamily::DataLink","System.Net.Sockets.AddressFamily.DecNet","System::Net::Sockets::AddressFamily::DecNet","System.Net.Sockets.AddressFamily.Ecma","System::Net::Sockets::AddressFamily::Ecma","System.Net.Sockets.AddressFamily.FireFox","System::Net::Sockets::AddressFamily::FireFox","System.Net.Sockets.AddressFamily.HyperChannel","System::Net::Sockets::AddressFamily::HyperChannel","System.Net.Sockets.AddressFamily.Ieee12844","System::Net::Sockets::AddressFamily::Ieee12844","System.Net.Sockets.AddressFamily.ImpLink","System::Net::Sockets::AddressFamily::ImpLink","System.Net.Sockets.AddressFamily.InterNetwork","System::Net::Sockets::AddressFamily::InterNetwork","System.Net.Sockets.AddressFamily.InterNetworkV6","System::Net::Sockets::AddressFamily::InterNetworkV6","System.Net.Sockets.AddressFamily.Ipx","System::Net::Sockets::AddressFamily::Ipx","System.Net.Sockets.AddressFamily.Irda","System::Net::Sockets::AddressFamily::Irda","System.Net.Sockets.AddressFamily.Iso","System::Net::Sockets::AddressFamily::Iso","System.Net.Sockets.AddressFamily.Lat","System::Net::Sockets::AddressFamily::Lat","System.Net.Sockets.AddressFamily.Max","System::Net::Sockets::AddressFamily::Max","System.Net.Sockets.AddressFamily.NetBios","System::Net::Sockets::AddressFamily::NetBios","System.Net.Sockets.AddressFamily.NetworkDesigners","System::Net::Sockets::AddressFamily::NetworkDesigners","System.Net.Sockets.AddressFamily.NS","System::Net::Sockets::AddressFamily::NS","System.Net.Sockets.AddressFamily.Osi","System::Net::Sockets::AddressFamily::Osi","System.Net.Sockets.AddressFamily.Pup","System::Net::Sockets::AddressFamily::Pup","System.Net.Sockets.AddressFamily.Sna","System::Net::Sockets::AddressFamily::Sna","System.Net.Sockets.AddressFamily.Unix","System::Net::Sockets::AddressFamily::Unix","System.Net.Sockets.AddressFamily.Unknown","System::Net::Sockets::AddressFamily::Unknown","System.Net.Sockets.AddressFamily.Unspecified","System::Net::Sockets::AddressFamily::Unspecified","System.Net.Sockets.AddressFamily.VoiceView","System::Net::Sockets::AddressFamily::VoiceView"],"dev_langs":["csharp"],"updated_at":"2017-03-31 02:21 PM","document_id":"64d0d9e5-f0a8-0537-c567-cb4f091dc5b2","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Net.Sockets/AddressFamily.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"AddressFamily enum | Microsoft Docs","_op_ogTitle":"AddressFamily enum","description":"Specifies the addressing scheme that an instance of the  class can use.\n","toc_asset_id":"api/_splitted/System.Net.Sockets/toc.json","toc_rel":"_splitted/System.Net.Sockets/toc.json","source_url":"","ms.assetid":"System.Net.Sockets.AddressFamily","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.net.sockets.addressfamily","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.net.sockets.addressfamily","fileRelativePath":"api/System.Net.Sockets.AddressFamily.html"},"themesRelativePathToOutputRoot":"_themes/"}