{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">IFormattable</span>\r\n      Interface\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Provides functionality to format the value of an object into a string representation.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic interface IFormattable</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example defines a <code>Temperature</code> class that implements the IFormattable interface. The class supports four format specifiers: &quot;G&quot; and &quot;C&quot;, which indicate that the temperature is to be displayed in Celsius; &quot;F&quot;, which indicates that the temperature is to be displayed in Fahrenheit; and &quot;K&quot;, which indicates that the temperature is to be displayed in Kelvin. In addition, the <a class=\"xref\" href=\"system.iformattable#System_IFormattable_ToString_\" data-linktype=\"relative-path\">ToString</a> implementation also can handle a format string that is <code>null</code> or empty. The other two <code>ToString</code> methods defined by the <code>Temperature</code> class simply wrap a call to the <a class=\"xref\" href=\"system.iformattable#System_IFormattable_ToString_\" data-linktype=\"relative-path\">ToString</a> implementation.  </p>\n<pre><code class=\"lang-vb\" name=\"System.IFormattable#1\">Imports System.Globalization\n\nPublic Class Temperature : Implements IFormattable\n   Private temp As Decimal\n   \n   Public Sub New(temperature As Decimal)\n      If temperature &lt; -273.15 Then _ \n        Throw New ArgumentOutOfRangeException(String.Format(&quot;{0} is less than absolute zero.&quot;, _\n                                              temperature))\n      Me.temp = temperature\n   End Sub\n   \n   Public ReadOnly Property Celsius As Decimal\n      Get\n         Return temp\n      End Get\n   End Property\n   \n   Public ReadOnly Property Fahrenheit As Decimal\n      Get\n         Return temp * 9 / 5 + 32\n      End Get\n   End Property\n   \n   Public ReadOnly Property Kelvin As Decimal\n      Get\n         Return temp + 273.15d\n      End Get\n   End Property\n\n   Public Overrides Function ToString() As String\n      Return Me.ToString(&quot;G&quot;, CultureInfo.CurrentCulture)\n   End Function\n      \n   Public Overloads Function ToString(fmt As String) As String\n      Return Me.ToString(fmt, CultureInfo.CurrentCulture)\n   End Function\n   \n   Public Overloads Function ToString(fmt As String, provider As IFormatProvider) _\n                   As String _\n                   Implements IFormattable.ToString\n      If String.IsNullOrEmpty(fmt) Then fmt = &quot;G&quot;\n      If provider Is Nothing Then provider = CultureInfo.CurrentCulture\n      \n      Select Case fmt.ToUpperInvariant()\n         Case &quot;G&quot;, &quot;C&quot;\n            Return temp.ToString(&quot;F2&quot;, provider) + &quot; &#176;C&quot; \n         Case &quot;F&quot;\n            Return Fahrenheit.ToString(&quot;F2&quot;, provider) + &quot; &#176;F&quot;\n         Case &quot;K&quot;\n            Return Kelvin.ToString(&quot;F2&quot;, provider) + &quot; K&quot;\n         Case Else\n            Throw New FormatException(String.Format(&quot;The {0} format string is not supported.&quot;, fmt))\n      End Select\n   End Function\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"System.IFormattable#1\">using System;\nusing System.Globalization;\n\npublic class Temperature : IFormattable\n{\n   private decimal temp;\n   \n   public Temperature(decimal temperature)\n   {\n      if (temperature &lt; -273.15m) \n        throw new ArgumentOutOfRangeException(String.Format(&quot;{0} is less than absolute zero.&quot;, \n                                              temperature));\n      this.temp = temperature;\n   }\n   \n   public decimal Celsius\n   {\n      get { return temp; }\n   }\n   \n   public decimal Fahrenheit\n   {\n      get { return temp * 9 / 5 + 32; }\n   }\n   \n   public decimal Kelvin\n   {\n      get { return temp + 273.15m; }\n   }\n\n   public override string ToString()\n   {\n      return this.ToString(&quot;G&quot;, CultureInfo.CurrentCulture);\n   }\n      \n   public string ToString(string format)\n   {\n      return this.ToString(format, CultureInfo.CurrentCulture);\n   }\n   \n   public string ToString(string format, IFormatProvider provider) \n   {\n      if (String.IsNullOrEmpty(format)) format = &quot;G&quot;;\n      if (provider == null) provider = CultureInfo.CurrentCulture;\n      \n      switch (format.ToUpperInvariant())\n      {\n         case &quot;G&quot;:\n         case &quot;C&quot;:\n            return temp.ToString(&quot;F2&quot;, provider) + &quot; &#176;C&quot;; \n         case &quot;F&quot;:\n            return Fahrenheit.ToString(&quot;F2&quot;, provider) + &quot; &#176;F&quot;;\n         case &quot;K&quot;:\n            return Kelvin.ToString(&quot;F2&quot;, provider) + &quot; K&quot;;\n         default:\n            throw new FormatException(String.Format(&quot;The {0} format string is not supported.&quot;, format));\n      }\n   }\n}\n</code></pre><p> The following example then calls the <a class=\"xref\" href=\"system.iformattable#System_IFormattable_ToString_\" data-linktype=\"relative-path\">ToString</a> implementation either directly or by using a composite format string.  </p>\n<pre><code class=\"lang-vb\" name=\"System.IFormattable#2\">Module Example\n   Public Sub Main()\n      &#39; Use composite formatting with format string in the format item.\n      Dim temp1 As New Temperature(0)\n      Console.WriteLine(&quot;{0:C} (Celsius) = {0:K} (Kelvin) = {0:F} (Fahrenheit)&quot;, temp1)\n      Console.WriteLine()\n      \n      &#39; Use composite formatting with a format provider.\n      temp1 = New Temperature(-40)\n      Console.WriteLine(String.Format(CultureInfo.CurrentCulture, &quot;{0:C} (Celsius) = {0:K} (Kelvin) = {0:F} (Fahrenheit)&quot;, temp1))\n      Console.WriteLine(String.Format(New CultureInfo(&quot;fr-FR&quot;), &quot;{0:C} (Celsius) = {0:K} (Kelvin) = {0:F} (Fahrenheit)&quot;, temp1))\n      Console.WriteLine()\n      \n      &#39; Call ToString method with format string.\n      temp1 = New Temperature(32)\n      Console.WriteLine(&quot;{0} (Celsius) = {1} (Kelvin) = {2} (Fahrenheit)&quot;, _\n                        temp1.ToString(&quot;C&quot;), temp1.ToString(&quot;K&quot;), temp1.ToString(&quot;F&quot;))\n      Console.WriteLine()\n\n      &#39; Call ToString with format string and format provider\n      temp1 = New Temperature(100)      \n      Dim current As NumberFormatInfo = NumberFormatInfo.CurrentInfo\n      Dim nl As New CultureInfo(&quot;nl-NL&quot;) \n      Console.WriteLine(&quot;{0} (Celsius) = {1} (Kelvin) = {2} (Fahrenheit)&quot;, _\n                        temp1.ToString(&quot;C&quot;, current), temp1.ToString(&quot;K&quot;, current), temp1.ToString(&quot;F&quot;, current))\n      Console.WriteLine(&quot;{0} (Celsius) = {1} (Kelvin) = {2} (Fahrenheit)&quot;, _\n                        temp1.ToString(&quot;C&quot;, nl), temp1.ToString(&quot;K&quot;, nl), temp1.ToString(&quot;F&quot;, nl))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       0.00 &#176;C (Celsius) = 273.15 K (Kelvin) = 32.00 &#176;F (Fahrenheit)\n&#39;       \n&#39;       -40.00 &#176;C (Celsius) = 233.15 K (Kelvin) = -40.00 &#176;F (Fahrenheit)\n&#39;       -40,00 &#176;C (Celsius) = 233,15 K (Kelvin) = -40,00 &#176;F (Fahrenheit)\n&#39;       \n&#39;       32.00 &#176;C (Celsius) = 305.15 K (Kelvin) = 89.60 &#176;F (Fahrenheit)\n&#39;       \n&#39;       100.00 &#176;C (Celsius) = 373.15 K (Kelvin) = 212.00 &#176;F (Fahrenheit)\n&#39;       100,00 &#176;C (Celsius) = 373,15 K (Kelvin) = 212,00 &#176;F (Fahrenheit)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.IFormattable#2\">public class Example\n{\n   public static void Main()\n   {\n      // Use composite formatting with format string in the format item.\n      Temperature temp1 = new Temperature(0);\n      Console.WriteLine(&quot;{0:C} (Celsius) = {0:K} (Kelvin) = {0:F} (Fahrenheit)\\n&quot;, temp1);\n      \n      // Use composite formatting with a format provider.\n      temp1 = new Temperature(-40);\n      Console.WriteLine(String.Format(CultureInfo.CurrentCulture, &quot;{0:C} (Celsius) = {0:K} (Kelvin) = {0:F} (Fahrenheit)&quot;, temp1));\n      Console.WriteLine(String.Format(new CultureInfo(&quot;fr-FR&quot;), &quot;{0:C} (Celsius) = {0:K} (Kelvin) = {0:F} (Fahrenheit)\\n&quot;, temp1));\n      \n      // Call ToString method with format string.\n      temp1 = new Temperature(32);\n      Console.WriteLine(&quot;{0} (Celsius) = {1} (Kelvin) = {2} (Fahrenheit)\\n&quot;, \n                        temp1.ToString(&quot;C&quot;), temp1.ToString(&quot;K&quot;), temp1.ToString(&quot;F&quot;));\n\n      // Call ToString with format string and format provider\n      temp1 = new Temperature(100)      ;\n      NumberFormatInfo current = NumberFormatInfo.CurrentInfo;\n      CultureInfo nl = new CultureInfo(&quot;nl-NL&quot;); \n      Console.WriteLine(&quot;{0} (Celsius) = {1} (Kelvin) = {2} (Fahrenheit)&quot;, \n                        temp1.ToString(&quot;C&quot;, current), temp1.ToString(&quot;K&quot;, current), temp1.ToString(&quot;F&quot;, current));\n      Console.WriteLine(&quot;{0} (Celsius) = {1} (Kelvin) = {2} (Fahrenheit)&quot;, \n                        temp1.ToString(&quot;C&quot;, nl), temp1.ToString(&quot;K&quot;, nl), temp1.ToString(&quot;F&quot;, nl));\n   }\n}\n// The example displays the following output:\n//    0.00 &#176;C (Celsius) = 273.15 K (Kelvin) = 32.00 &#176;F (Fahrenheit)\n//    \n//    -40.00 &#176;C (Celsius) = 233.15 K (Kelvin) = -40.00 &#176;F (Fahrenheit)\n//    -40,00 &#176;C (Celsius) = 233,15 K (Kelvin) = -40,00 &#176;F (Fahrenheit)\n//    \n//    32.00 &#176;C (Celsius) = 305.15 K (Kelvin) = 89.60 &#176;F (Fahrenheit)\n//    \n//    100.00 &#176;C (Celsius) = 373.15 K (Kelvin) = 212.00 &#176;F (Fahrenheit)\n//    100,00 &#176;C (Celsius) = 373,15 K (Kelvin) = 212,00 &#176;F (Fahrenheit)\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The IFormattable interface converts an object to its string representation based on a format string and a format provider.  </p>\n<p> A format string typically defines the general appearance of an object. For example, the .NET Framework supports the following:  </p>\n<ul>\n<li><p>Standard format strings for formatting enumeration values (see <a href=\"../topic/enumeration%20format%20strings\" data-linktype=\"relative-path\">Enumeration Format Strings</a>).  </p>\n</li>\n<li><p>Standard and custom format strings for formatting numeric values (see <a href=\"../topic/standard%20numeric%20format%20strings\" data-linktype=\"relative-path\">Standard Numeric Format Strings</a> and <a href=\"../topic/custom%20numeric%20format%20strings\" data-linktype=\"relative-path\">Custom Numeric Format Strings</a>).  </p>\n</li>\n<li><p>Standard and custom format strings for formatting date and time values (see <a href=\"../topic/standard%20date%20and%20time%20format%20strings\" data-linktype=\"relative-path\">Standard Date and Time Format Strings</a> and <a href=\"../topic/custom%20date%20and%20time%20format%20strings\" data-linktype=\"relative-path\">Custom Date and Time Format Strings</a>).  </p>\n</li>\n<li><p>Standard and custom format strings for formatting time intervals (see <a href=\"../topic/standard%20timespan%20format%20strings\" data-linktype=\"relative-path\">Standard TimeSpan Format Strings</a> and <a href=\"../topic/custom%20timespan%20format%20strings\" data-linktype=\"relative-path\">Custom TimeSpan Format Strings</a>).  </p>\n</li>\n</ul>\n<p> You can also define your own format strings to support formatting of your application-defined types.  </p>\n<p> A format provider returns a formatting object that typically defines the symbols used in converting an object to its string representation. For example, when you convert a number to a currency value, a format provider defines the currency symbol that appears in the result string. The .NET Framework defines three format providers:  </p>\n<ul>\n<li><p>The <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">System.Globalization.CultureInfo</a> class, which returns either a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object for formatting numeric values, or a <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object for formatting date and time values.  </p>\n</li>\n<li><p>The <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">System.Globalization.NumberFormatInfo</a> class, which returns an instance of itself for formatting numeric values.  </p>\n</li>\n<li><p>The <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">System.Globalization.DateTimeFormatInfo</a> class, which returns an instance of itself for formatting date and time values.  </p>\n</li>\n</ul>\n<p> In addition, you can define your own custom format providers to supply culture-specific, profession-specific, or industry-specific information used in formatting. For more information about implementing custom formatting by using a custom format provider, see <a class=\"xref\" href=\"system.icustomformatter\" data-linktype=\"relative-path\">ICustomFormatter</a>.  </p>\n<p> The IFormattable interface defines a single method, <a class=\"xref\" href=\"system.iformattable#System_IFormattable_ToString_\" data-linktype=\"relative-path\">ToString</a>, that supplies formatting services for the implementing type. The <a class=\"xref\" href=\"system.iformattable#System_IFormattable_ToString_\" data-linktype=\"relative-path\">ToString</a> method can be called directly. In addition, it is called automatically by the <a class=\"xref\" href=\"system.convert#System_Convert_ToString_System_Object_\" data-linktype=\"relative-path\">System.Convert.ToString(Object)</a> and <a class=\"xref\" href=\"system.convert#System_Convert_ToString_System_Object_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Convert.ToString(Object, IFormatProvider)</a> methods, and by methods that use the <a href=\"../topic/composite%20formatting\" data-linktype=\"relative-path\">composite formatting feature</a> in the .NET Framework. Such methods include <a class=\"xref\" href=\"system.console#System_Console_WriteLine_System_String_System_Object_\" data-linktype=\"relative-path\">System.Console.WriteLine(String, Object)</a>, <a class=\"xref\" href=\"system.string#System_String_Format_\" data-linktype=\"relative-path\">Format</a>, and <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_AppendFormat_System_String_System_Object_\" data-linktype=\"relative-path\">System.Text.StringBuilder.AppendFormat(String, Object)</a>, among others. The <a class=\"xref\" href=\"system.iformattable#System_IFormattable_ToString_\" data-linktype=\"relative-path\">ToString</a> method is called for each format item in the method&#39;s format string.  </p>\n<p> The IFormattable interface is implemented by the base data types.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_IFormattable_ToString_System_String_System_IFormatProvider_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ToString(String, IFormatProvider)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Formats the value of the current instance using the specified format.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string ToString (string format, IFormatProvider formatProvider);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>format</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The format to use.  </p>\n<p> -or-  </p>\n<p> A null reference (<code>Nothing</code> in Visual Basic) to use the default format defined for the type of the <a class=\"xref\" href=\"system.iformattable\" data-linktype=\"relative-path\">IFormattable</a> implementation.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>formatProvider</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The provider to use to format the value.  </p>\n<p> -or-  </p>\n<p> A null reference (<code>Nothing</code> in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The value of the current instance in the specified format.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The ToString method converts a value to a string representation that can be expressed in multiple ways. Its precise format depends on specific symbols or a specified order defined by specific cultures, professions, or industries. You can call the method directly. It is also called automatically by the <a class=\"xref\" href=\"system.convert#System_Convert_ToString_System_Object_\" data-linktype=\"relative-path\">System.Convert.ToString(Object)</a> and <a class=\"xref\" href=\"system.convert#System_Convert_ToString_System_Object_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Convert.ToString(Object, IFormatProvider)</a> methods, and by methods that use the composite formatting feature in the .NET Framework, such as [String.Format(String, Object&lt;xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29?displayProperty=fullName&gt;, [Console.WriteLine(String, Object&lt;xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=fullName&gt;, and [StringBuilder.AppendFormat(String, Object&lt;xref:System.Text.StringBuilder.AppendFormat%28System.String%2CSystem.Object%5B%5D%29?displayProperty=fullName&gt;. (For more information, see <a href=\"../topic/composite%20formatting\" data-linktype=\"relative-path\">Composite Formatting</a>.)  </p>\n<p> Composite formatting methods call the ToString method once for each format item in a format string. The parameters passed to the method depend on the specific formatting method that is called and on the content of the format item, as follows:  </p>\n<ul>\n<li><p>If the format item does not include a format string (for example, if the format item is simply <code>{0}</code>), it is passed <code>null</code> as the value of the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">System.String</a> parameter.  </p>\n</li>\n<li><p>If the format item includes a format string (for example, <code>{0:G}</code>), that format string is passed as the value of the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">System.String</a> parameter.  </p>\n</li>\n<li><p>If the original method call does not include an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">System.IFormatProvider</a> parameter, <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_CurrentCulture_\" data-linktype=\"relative-path\">CurrentCulture</a> is passed as the value of the <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">System.IFormatProvider</a> parameter.  </p>\n</li>\n<li><p>If the original method call includes an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">System.IFormatProvider</a> parameter, the provider that is supplied in the method call is passed as the value of the <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">System.IFormatProvider</a> parameter.  </p>\n</li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p> An object&#39;s ToString implementation is called by composite formatting methods only if they are not passed an <a class=\"xref\" href=\"system.icustomformatter\" data-linktype=\"relative-path\">ICustomFormatter</a> format provider, or if the <a class=\"xref\" href=\"system.icustomformatter#System_ICustomFormatter_Format_\" data-linktype=\"relative-path\">Format</a> method of the custom format provider returns <code>null</code>.  </p>\n</div>\n<p> The .NET Framework includes three format providers, all of which implement the <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> interface:  </p>\n<ul>\n<li><p><a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> supplies numeric formatting information, such as the characters to use for decimal and group separators, and the spelling and placement of currency symbols in monetary values.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> supplies date-related and time-related formatting information, such as the position of the month, the day, and the year in a date pattern.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> contains the default formatting information in a specific culture, including the numeric format information, and date-related and time-related formatting information.  </p>\n</li>\n</ul>\n<p> In addition, you can define your own custom format provider.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.IFormattable.yml\">\r\n<meta name=\"APIName\" content=\"System.IFormattable\">\r\n<meta name=\"APIName\" content=\"System.IFormattable.ToString\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-29 05:54 AM\">\r\n<meta name=\"document_id\" content=\"337601da-25e2-d008-226c-a9ea746bd2fb\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides functionality to format the value of an object into a string representation.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.IFormattable\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.IFormattable.yml","open_to_public_contributors":false,"api_name":["System.IFormattable","System.IFormattable.ToString"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.IFormattable","System::IFormattable","System.IFormattable.ToString","System::IFormattable::ToString"],"dev_langs":["csharp"],"updated_at":"2017-03-29 05:54 AM","document_id":"337601da-25e2-d008-226c-a9ea746bd2fb","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System/IFormattable.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IFormattable interface | Microsoft Docs","_op_ogTitle":"IFormattable interface","description":"Provides functionality to format the value of an object into a string representation.\n","toc_asset_id":"api/_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.IFormattable","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.iformattable","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.iformattable","fileRelativePath":"api/System.IFormattable.html"},"themesRelativePathToOutputRoot":"_themes/"}