{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">TableLayoutPanelCellPosition</span>\r\n      Struct\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents a cell in a <a class=\"xref\" href=\"system.windows.forms.tablelayoutpanel\" data-linktype=\"relative-path\">TableLayoutPanel</a>.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.TableLayoutPanelCellPositionTypeConverter))]\npublic struct TableLayoutPanelCellPosition</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a></span></div><span class=\"lang-csharp\">TableLayoutPanelCellPosition</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example shows how to use TableLayoutPanelCellPosition to set the position of a child control in a <a class=\"xref\" href=\"system.windows.forms.tablelayoutpanel\" data-linktype=\"relative-path\">TableLayoutPanel</a> control. For a full code listing, see <a href=\"../Topic/How%20to:%20Implement%20a%20Custom%20ToolStripRenderer.md\" data-linktype=\"relative-path\">How to: Implement a Custom ToolStripRenderer</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Windows.Forms.ToolStrip.GridStrip#2\">&#39; The following class implements a sliding-tile puzzle.\n&#39; The GridStrip control is a custom ToolStrip that arranges\n&#39; its ToolStripButton controls in a grid layout. There is \n&#39; one empty cell, into which the user can slide an adjacent\n&#39; tile with a drag-and-drop operation. Tiles that are eligible \n&#39; for moving are highlighted.\nPublic Class GridStrip\n    Inherits ToolStrip\n\n   &#39; The button that is the drag source.\n   Private dragButton As ToolStripButton = Nothing\n   \n   &#39; Settings for the ToolStrip control&#39;s TableLayoutPanel.\n   &#39; This provides access to the cell position of each\n   &#39; ToolStripButton.\n   Private tableSettings As TableLayoutSettings = Nothing\n   \n   &#39; The empty cell. ToolStripButton controls that are\n   &#39; adjacent to this button can be moved to this button&#39;s\n   &#39; cell position.\n   Private emptyCellButton As ToolStripButton = Nothing\n   \n   &#39; The dimensions of each tile. A tile is represented\n   &#39; by a ToolStripButton controls.\n   Private tileSize As New Size(128, 128)\n   \n   &#39; The number of rows in the GridStrip control.\n   Private rows As Integer = 5\n   \n   &#39; The number of columns in the GridStrip control.\n   Private columns As Integer = 5\n   \n   &#39; The one-time initialzation behavior is enforced\n   &#39; with this field. For more information, see the \n   &#39; OnPaint method.\n   Private firstTime As Boolean = False\n   \n   &#39; This is a required by the Windows Forms designer.\n   Private components As System.ComponentModel.IContainer\n   \n   \n   &#39; The default constructor.  \n    Public Sub New()\n        MyBase.New()\n\n        Me.InitializeComponent()\n\n        Me.InitializeTableLayoutSettings()\n    End Sub\n   \n   &#39; This property exposes the empty cell to the \n   &#39; GridStripRenderer class.\n   Friend ReadOnly Property EmptyCell() As ToolStripButton\n      Get\n         Return Me.emptyCellButton\n      End Get\n   End Property\n   \n   \n   &#39; This utility method initializes the TableLayoutPanel \n   &#39; which contains the ToolStripButton controls.\n    Private Sub InitializeTableLayoutSettings()\n\n        &#39; Specify the numbers of rows and columns in the GridStrip control.\n        Me.tableSettings = CType(MyBase.LayoutSettings, TableLayoutSettings)\n        Me.tableSettings.ColumnCount = Me.rows\n        Me.tableSettings.RowCount = Me.columns\n\n        &#39; Create a dummy bitmap with the dimensions of each tile.\n        &#39; The GridStrip control sizes itself based on these dimensions.\n        Dim b As New Bitmap(tileSize.Width, tileSize.Height)\n\n        &#39; Populate the GridStrip control with ToolStripButton controls.\n        Dim i As Integer\n        For i = 0 To (Me.tableSettings.ColumnCount) - 1\n            Dim j As Integer\n            For j = 0 To (Me.tableSettings.RowCount) - 1\n                &#39; Create a new ToolStripButton control.\n                Dim btn As New ToolStripButton()\n                btn.DisplayStyle = ToolStripItemDisplayStyle.Image\n                btn.Image = b\n                btn.ImageAlign = ContentAlignment.MiddleCenter\n                btn.ImageScaling = ToolStripItemImageScaling.None\n                btn.Margin = System.Windows.Forms.Padding.Empty\n                btn.Padding = System.Windows.Forms.Padding.Empty\n\n                &#39; Add the new ToolStripButton control to the GridStrip.\n                Me.Items.Add(btn)\n\n                &#39; Set the cell position of the ToolStripButton control.\n                Dim cellPos As New TableLayoutPanelCellPosition(i, j)\n                Me.tableSettings.SetCellPosition(btn, cellPos)\n\n                &#39; If this is the ToolStripButton control at cell (0,0),\n                &#39; assign it as the empty cell button.\n                If i = 0 AndAlso j = 0 Then\n                    btn.Text = &quot;Empty Cell&quot;\n                    btn.Image = b\n                    Me.emptyCellButton = btn\n                End If\n            Next j\n        Next i\n    End Sub\n   \n   \n   &#39; This method defines the Paint event behavior.\n   &#39; The GridStripRenderer requires that the GridStrip\n   &#39; be fully layed out when it is renders, so this\n   &#39; initialization code cannot be placed in the\n   &#39; GridStrip constructor. By the time the Paint\n   &#39; event is raised, the control layout has been \n   &#39; completed, so the GridStripRenderer can paint\n   &#39; correctly. This one-time initialization is\n   &#39; implemented with the firstTime field.\n   Protected Overrides Sub OnPaint(e As PaintEventArgs)\n      MyBase.OnPaint(e)\n      \n      If Not Me.firstTime Then\n         Me.Renderer = New GridStripRenderer()\n         \n         &#39; Comment this line to see the unscrambled image.\n         Me.ScrambleButtons()\n         Me.firstTime = True\n      End If\n    End Sub\n   \n   \n   &#39; This utility method changes the ToolStripButton control \n   &#39; positions in the TableLayoutPanel. This scrambles the \n   &#39; buttons to initialize the puzzle.\n   Private Sub ScrambleButtons()\n      Dim i As Integer = 0\n      Dim lastElement As Integer = Me.Items.Count - 1\n      \n      While i &lt;&gt; lastElement AndAlso lastElement - i &gt; 1\n            Dim pos1 As TableLayoutPanelCellPosition = _\n            Me.tableSettings.GetCellPosition(Me.Items(i))\n         \n            Dim pos2 As TableLayoutPanelCellPosition = _\n            Me.tableSettings.GetCellPosition(Me.Items(lastElement))\n         \n            Me.tableSettings.SetCellPosition(Me.Items(i), pos2)\n            i += 1\n         \n            Me.tableSettings.SetCellPosition(Me.Items(lastElement), pos1)\n            lastElement -= 1\n      End While\n    End Sub\n   \n   \n   &#39; This method defines the MouseDown event behavior. \n   &#39; If the user has clicked on a valid drag source, \n   &#39; the drag operation starts.\n   Protected Overrides Sub OnMouseDown(mea As MouseEventArgs)\n      MyBase.OnMouseDown(mea)\n      \n        Dim btn As ToolStripButton = CType(Me.GetItemAt(mea.Location), ToolStripButton)\n      \n      If (btn IsNot Nothing) Then\n         If Me.IsValidDragSource(btn) Then\n            Me.dragButton = btn\n         End If\n      End If\n    End Sub\n   \n   \n   &#39; This method defines the MouseMove event behavior. \n   Protected Overrides Sub OnMouseMove(mea As MouseEventArgs)\n      MyBase.OnMouseMove(mea)\n      \n      &#39; Is a drag operation pending?\n      If (Me.dragButton IsNot Nothing) Then\n         &#39; A drag operation is pending. Call DoDragDrop to \n         &#39; determine the disposition of the operation.\n         Dim dropEffect As DragDropEffects = Me.DoDragDrop(New DataObject(Me.dragButton), DragDropEffects.Move)\n      End If\n    End Sub\n   \n   &#39; This method defines the DragOver event behavior. \n   Protected Overrides Sub OnDragOver(dea As DragEventArgs)\n      MyBase.OnDragOver(dea)\n      \n      &#39; Get the ToolStripButton control \n      &#39; at the given mouse position.\n      Dim p As New Point(dea.X, dea.Y)\n      Dim item As ToolStripButton = CType(Me.GetItemAt(Me.PointToClient(p)), ToolStripButton)\n      \n      \n      &#39; If the ToolStripButton control is the empty cell,\n      &#39; indicate that the move operation is valid.\n        If item Is Me.emptyCellButton Then\n            &#39; Set the drag operation to indicate a valid move.\n            dea.Effect = DragDropEffects.Move\n        End If\n    End Sub\n   \n   \n   &#39; This method defines the DragDrop event behavior. \n   Protected Overrides Sub OnDragDrop(dea As DragEventArgs)\n      MyBase.OnDragDrop(dea)\n      \n      &#39; Did a valid move operation occur?\n      If dea.Effect = DragDropEffects.Move Then\n         &#39; The move operation is valid. Adjust the state\n         &#39; of the GridStrip control&#39;s TableLayoutPanel,\n         &#39; by swapping the positions of the source button\n         &#39; and the empty cell button.\n         &#39; Get the cell of the control to move.\n         Dim sourcePos As TableLayoutPanelCellPosition = tableSettings.GetCellPosition(Me.dragButton)\n         \n         &#39; Get the cell of the emptyCellButton.\n         Dim dropPos As TableLayoutPanelCellPosition = tableSettings.GetCellPosition(Me.emptyCellButton)\n         \n         &#39; Move the control to the empty cell.\n         tableSettings.SetCellPosition(Me.dragButton, dropPos)\n         \n         &#39; Set the position of the empty cell to \n         &#39; that of the previously occupied cell.\n         tableSettings.SetCellPosition(Me.emptyCellButton, sourcePos)\n         \n         &#39; Reset the drag operation.\n         Me.dragButton = Nothing\n      End If\n    End Sub\n   \n   \n   &#39; This method defines the DragLeave event behavior. \n   &#39; If the mouse leaves the client area of the GridStrip\n   &#39; control, the drag operation is canceled.\n   Protected Overrides Sub OnDragLeave(e As EventArgs)\n      MyBase.OnDragLeave(e)\n      \n      &#39; Reset the drag operation.\n      Me.dragButton = Nothing\n    End Sub\n   \n   \n   &#39; This method defines the ueryContinueDrag event behavior. \n   &#39; If the mouse leaves the client area of the GridStrip\n   &#39; control, the drag operation is canceled.\n   Protected Overrides Sub OnQueryContinueDrag(qcdevent As QueryContinueDragEventArgs)\n      MyBase.OnQueryContinueDrag(qcdevent)\n      \n      &#39; Get the current mouse position, in screen coordinates.\n      Dim mousePos As Point = Me.PointToClient(Control.MousePosition)\n      \n      &#39; If the mouse position is outside the GridStrip control&#39;s\n      &#39; client area, cancel the drag operation. Be sure to\n      &#39; transform the mouse&#39;s screen coordinates to client coordinates. \n      If Not Me.ClientRectangle.Contains(mousePos) Then\n         qcdevent.Action = DragAction.Cancel\n      End If\n    End Sub\n   \n   \n   &#39; This utility method determines if a button\n   &#39; is positioned relative to the empty cell \n   &#39; such that it can be dragged into the empty cell.\n   Overloads Private Function IsValidDragSource(b As ToolStripButton) As Boolean\n      Dim sourcePos As TableLayoutPanelCellPosition = tableSettings.GetCellPosition(b)\n      \n      Dim emptyPos As TableLayoutPanelCellPosition = tableSettings.GetCellPosition(Me.emptyCellButton)\n      \n        Return IsValidDragSource(sourcePos, emptyPos)\n\n    End Function\n   \n   \n   &#39; This utility method determines if a cell position\n   &#39; is adjacent to the empty cell.\n    Friend Overloads Shared Function IsValidDragSource( _\n    ByVal sourcePos As TableLayoutPanelCellPosition, _\n    ByVal emptyPos As TableLayoutPanelCellPosition) As Boolean\n        Dim returnValue As Boolean = False\n\n        &#39; A cell is considered to be a valid drag source if it\n        &#39; is adjacent to the empty cell. Cells that are positioned\n        &#39; on a diagonal are not valid.\n        If sourcePos.Column = emptyPos.Column - 1 AndAlso sourcePos.Row = emptyPos.Row OrElse _\n        (sourcePos.Column = emptyPos.Column + 1 AndAlso sourcePos.Row = emptyPos.Row) OrElse _\n        (sourcePos.Column = emptyPos.Column AndAlso sourcePos.Row = emptyPos.Row - 1) OrElse _\n        (sourcePos.Column = emptyPos.Column AndAlso sourcePos.Row = emptyPos.Row + 1) Then\n            returnValue = True\n        End If\n\n        Return returnValue\n    End Function\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.ToolStrip.GridStrip#2\">// The following class implements a sliding-tile puzzle.\n// The GridStrip control is a custom ToolStrip that arranges\n// its ToolStripButton controls in a grid layout. There is \n// one empty cell, into which the user can slide an adjacent\n// tile with a drag-and-drop operation. Tiles that are eligible \n// for moving are highlighted.\npublic class GridStrip : ToolStrip\n{\n    // The button that is the drag source.\n    private ToolStripButton dragButton = null;\n\n    // Settings for the ToolStrip control&#39;s TableLayoutPanel.\n    // This provides access to the cell position of each\n    // ToolStripButton.\n    private TableLayoutSettings tableSettings = null;\n\n    // The empty cell. ToolStripButton controls that are\n    // adjacent to this button can be moved to this button&#39;s\n    // cell position.\n    private ToolStripButton emptyCellButton = null;\n\n    // The dimensions of each tile. A tile is represented\n    // by a ToolStripButton controls.\n    private Size tileSize = new Size(128, 128);\n\n    // The number of rows in the GridStrip control.\n    private readonly int rows = 5;\n\n    // The number of columns in the GridStrip control.\n    private readonly int columns = 5;\n\n    // The one-time initialzation behavior is enforced\n    // with this field. For more information, see the \n    // OnPaint method.\n    private bool firstTime = false;\n\n    // This is a required by the Windows Forms designer.\n    private System.ComponentModel.IContainer components;\n\n    // The default constructor.  \n    public GridStrip()\n    {\n        this.InitializeComponent();\n\n        this.InitializeTableLayoutSettings();\n    }\n\n    // This property exposes the empty cell to the \n    // GridStripRenderer class.\n    internal ToolStripButton EmptyCell\n    {\n        get\n        {\n            return this.emptyCellButton;\n        }\n    }\n\n    // This utility method initializes the TableLayoutPanel \n    // which contains the ToolStripButton controls.\n    private void InitializeTableLayoutSettings()\n    {\n        // Specify the numbers of rows and columns in the GridStrip control.\n        this.tableSettings = base.LayoutSettings as TableLayoutSettings;\n        this.tableSettings.ColumnCount = this.rows;\n        this.tableSettings.RowCount = this.columns;\n\n        // Create a dummy bitmap with the dimensions of each tile.\n        // The GridStrip control sizes itself based on these dimensions.\n        Bitmap b = new Bitmap(tileSize.Width, tileSize.Height);\n\n        // Populate the GridStrip control with ToolStripButton controls.\n        for (int i = 0; i &lt; this.tableSettings.ColumnCount; i++)\n        {\n            for (int j = 0; j &lt; this.tableSettings.RowCount; j++)\n            {\n                // Create a new ToolStripButton control.\n                ToolStripButton btn = new ToolStripButton();\n                btn.DisplayStyle = ToolStripItemDisplayStyle.Image;\n                btn.Image = b;\n                btn.ImageAlign = ContentAlignment.MiddleCenter;\n                btn.ImageScaling = ToolStripItemImageScaling.None;\n                btn.Margin = Padding.Empty;\n                btn.Padding = Padding.Empty;\n\n                // Add the new ToolStripButton control to the GridStrip.\n                this.Items.Add(btn);\n\n                // Set the cell position of the ToolStripButton control.\n                TableLayoutPanelCellPosition cellPos = new TableLayoutPanelCellPosition(i, j);\n                this.tableSettings.SetCellPosition(btn, cellPos);\n\n                // If this is the ToolStripButton control at cell (0,0),\n                // assign it as the empty cell button.\n                if( i == 0 &amp;&amp; j == 0 )\n                {\n                    btn.Text = &quot;Empty Cell&quot;;\n                    btn.Image = b;\n                    this.emptyCellButton = btn;\n                }\n            }\n        }\n    }\n\n    // This method defines the Paint event behavior.\n    // The GridStripRenderer requires that the GridStrip\n    // be fully layed out when it is renders, so this\n    // initialization code cannot be placed in the\n    // GridStrip constructor. By the time the Paint\n    // event is raised, the control layout has been \n    // completed, so the GridStripRenderer can paint\n    // correctly. This one-time initialization is\n    // implemented with the firstTime field.\n    protected override void OnPaint(PaintEventArgs e)\n    {\n        base.OnPaint(e);\n\n        if (!this.firstTime)\n        {\n            this.Renderer = new GridStripRenderer();\n\n            // Comment this line to see the unscrambled image.\n            this.ScrambleButtons();\n            this.firstTime = true;\n        }\n    }\n\n    // This utility method changes the ToolStripButton control \n    // positions in the TableLayoutPanel. This scrambles the \n    // buttons to initialize the puzzle.\n    private void ScrambleButtons()\n    {\n        int i = 0;\n        int lastElement = this.Items.Count - 1;\n\n        while ( (i != lastElement ) &amp;&amp;\n                (lastElement - i &gt; 1) )\n        {\n            TableLayoutPanelCellPosition pos1 = \n                this.tableSettings.GetCellPosition(this.Items[i]);\n\n            TableLayoutPanelCellPosition pos2 = \n                this.tableSettings.GetCellPosition(this.Items[lastElement]);\n\n            this.tableSettings.SetCellPosition(\n                this.Items[i++], \n                pos2);\n\n            this.tableSettings.SetCellPosition(\n                this.Items[lastElement--], \n                pos1);\n        }\n    }\n\n    // This method defines the MouseDown event behavior. \n    // If the user has clicked on a valid drag source, \n    // the drag operation starts.\n    protected override void OnMouseDown(MouseEventArgs mea)\n    {\n        base.OnMouseDown(mea);\n\n        ToolStripButton btn = this.GetItemAt(mea.Location) as ToolStripButton;\n\n        if (btn != null)\n        {\n            if (this.IsValidDragSource(btn))\n            {\n                this.dragButton = btn;\n            }\n        }\n    }\n\n    // This method defines the MouseMove event behavior. \n    protected override void OnMouseMove(MouseEventArgs mea)\n    {\n        base.OnMouseMove(mea);\n\n        // Is a drag operation pending?\n        if (this.dragButton != null)\n        {\n            // A drag operation is pending. Call DoDragDrop to \n            // determine the disposition of the operation.\n            DragDropEffects dropEffect = this.DoDragDrop(\n                new DataObject(this.dragButton), \n                DragDropEffects.Move);\n        }\n    }\n\n    // This method defines the DragOver event behavior. \n    protected override void OnDragOver(DragEventArgs dea)\n    {\n        base.OnDragOver(dea);\n\n        // Get the ToolStripButton control \n        // at the given mouse position.\n        Point p = new Point(dea.X, dea.Y);\n        ToolStripButton item = this.GetItemAt(\n            this.PointToClient(p)) as ToolStripButton;\n\n        // If the ToolStripButton control is the empty cell,\n        // indicate that the move operation is valid.\n        if( item == this.emptyCellButton )\n        {\n            // Set the drag operation to indicate a valid move.\n            dea.Effect = DragDropEffects.Move;\n        }\n    }\n\n    // This method defines the DragDrop event behavior. \n    protected override void OnDragDrop(DragEventArgs dea)\n    {\n        base.OnDragDrop(dea);\n\n        // Did a valid move operation occur?\n        if (dea.Effect == DragDropEffects.Move)\n        {\n            // The move operation is valid. Adjust the state\n            // of the GridStrip control&#39;s TableLayoutPanel,\n            // by swapping the positions of the source button\n            // and the empty cell button.\n\n            // Get the cell of the control to move.\n            TableLayoutPanelCellPosition sourcePos = \n                tableSettings.GetCellPosition(this.dragButton);\n\n            // Get the cell of the emptyCellButton.\n            TableLayoutPanelCellPosition dropPos = \n                tableSettings.GetCellPosition(this.emptyCellButton);\n\n            // Move the control to the empty cell.\n            tableSettings.SetCellPosition(this.dragButton, dropPos);\n\n            // Set the position of the empty cell to \n            // that of the previously occupied cell.\n            tableSettings.SetCellPosition(this.emptyCellButton, sourcePos);\n\n            // Reset the drag operation.\n            this.dragButton = null;\n        }\n    }\n\n    // This method defines the DragLeave event behavior. \n    // If the mouse leaves the client area of the GridStrip\n    // control, the drag operation is canceled.\n    protected override void OnDragLeave(EventArgs e)\n    {\n        base.OnDragLeave(e);\n\n        // Reset the drag operation.\n        this.dragButton = null;\n    }\n\n    // This method defines the ueryContinueDrag event behavior. \n    // If the mouse leaves the client area of the GridStrip\n    // control, the drag operation is canceled.\n    protected override void OnQueryContinueDrag(QueryContinueDragEventArgs qcdevent)\n    {\n        base.OnQueryContinueDrag(qcdevent);\n\n        // Get the current mouse position, in screen coordinates.\n        Point mousePos = this.PointToClient(Control.MousePosition);\n\n        // If the mouse position is outside the GridStrip control&#39;s\n        // client area, cancel the drag operation. Be sure to\n        // transform the mouse&#39;s screen coordinates to client coordinates. \n        if (!this.ClientRectangle.Contains(mousePos))\n        {\n            qcdevent.Action = DragAction.Cancel;\n        }\n    }\n\n    // This utility method determines if a button\n    // is positioned relative to the empty cell \n    // such that it can be dragged into the empty cell.\n    private bool IsValidDragSource(ToolStripButton b)\n    {\n        TableLayoutPanelCellPosition sourcePos = \n            tableSettings.GetCellPosition(b);\n\n        TableLayoutPanelCellPosition emptyPos = \n            tableSettings.GetCellPosition(this.emptyCellButton);\n\n        return (IsValidDragSource(sourcePos, emptyPos));\n    }\n\n    // This utility method determines if a cell position\n    // is adjacent to the empty cell.\n    internal static bool IsValidDragSource(\n        TableLayoutPanelCellPosition sourcePos, \n        TableLayoutPanelCellPosition emptyPos)\n    {\n        bool returnValue = false;\n\n        // A cell is considered to be a valid drag source if it\n        // is adjacent to the empty cell. Cells that are positioned\n        // on a diagonal are not valid.\n        if (((sourcePos.Column == emptyPos.Column - 1) &amp;&amp; (sourcePos.Row == emptyPos.Row)) ||\n            ((sourcePos.Column == emptyPos.Column + 1) &amp;&amp; (sourcePos.Row == emptyPos.Row)) ||\n            ((sourcePos.Column == emptyPos.Column) &amp;&amp; (sourcePos.Row == emptyPos.Row - 1)) ||\n            ((sourcePos.Column == emptyPos.Column) &amp;&amp; (sourcePos.Row == emptyPos.Row + 1)))\n        {\n            returnValue = true;\n        }\n\n        return returnValue;\n    }\n</code></pre>\r\n  \r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_Forms_TableLayoutPanelCellPosition__ctor_System_Int32_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">TableLayoutPanelCellPosition(Int32, Int32)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.forms.tablelayoutpanelcellposition\" data-linktype=\"relative-path\">TableLayoutPanelCellPosition</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public TableLayoutPanelCellPosition (int column, int row);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>column</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The column position of the cell.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>row</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The row position of the cell.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_Forms_TableLayoutPanelCellPosition_Column\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Column</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets the column number of the current <a class=\"xref\" href=\"system.windows.forms.tablelayoutpanelcellposition\" data-linktype=\"relative-path\">TableLayoutPanelCellPosition</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int Column { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The column number of the current <a class=\"xref\" href=\"system.windows.forms.tablelayoutpanelcellposition\" data-linktype=\"relative-path\">TableLayoutPanelCellPosition</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_Forms_TableLayoutPanelCellPosition_Row\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Row</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets the row number of the current <a class=\"xref\" href=\"system.windows.forms.tablelayoutpanelcellposition\" data-linktype=\"relative-path\">TableLayoutPanelCellPosition</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int Row { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The row number of the current <a class=\"xref\" href=\"system.windows.forms.tablelayoutpanelcellposition\" data-linktype=\"relative-path\">TableLayoutPanelCellPosition</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_Forms_TableLayoutPanelCellPosition_Equals_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Equals(Object)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Specifies whether this <a class=\"xref\" href=\"system.windows.forms.tablelayoutpanelcellposition\" data-linktype=\"relative-path\">TableLayoutPanelCellPosition</a> contains the same row and column as the specified <a class=\"xref\" href=\"system.windows.forms.tablelayoutpanelcellposition\" data-linktype=\"relative-path\">TableLayoutPanelCellPosition</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override bool Equals (object other);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>other</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.forms.tablelayoutpanelcellposition\" data-linktype=\"relative-path\">TableLayoutPanelCellPosition</a> to test.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if <code>other</code> is a <a class=\"xref\" href=\"system.windows.forms.tablelayoutpanelcellposition\" data-linktype=\"relative-path\">TableLayoutPanelCellPosition</a> and has the same row and column as the specified <a class=\"xref\" href=\"system.windows.forms.tablelayoutpanelcellposition\" data-linktype=\"relative-path\">TableLayoutPanelCellPosition</a>; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_Forms_TableLayoutPanelCellPosition_GetHashCode\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetHashCode()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a hash code for this <a class=\"xref\" href=\"system.windows.forms.tablelayoutpanelcellposition\" data-linktype=\"relative-path\">TableLayoutPanelCellPosition</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override int GetHashCode ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>An integer value that specifies a hash value for this <a class=\"xref\" href=\"system.windows.forms.tablelayoutpanelcellposition\" data-linktype=\"relative-path\">TableLayoutPanelCellPosition</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_Forms_TableLayoutPanelCellPosition_ToString\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ToString()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Converts this <a class=\"xref\" href=\"system.windows.forms.tablelayoutpanelcellposition\" data-linktype=\"relative-path\">TableLayoutPanelCellPosition</a> to a human readable string.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override string ToString ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A string that represents this <a class=\"xref\" href=\"system.windows.forms.tablelayoutpanelcellposition\" data-linktype=\"relative-path\">TableLayoutPanelCellPosition</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Operators\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_Forms_TableLayoutPanelCellPosition_op_Equality_System_Windows_Forms_TableLayoutPanelCellPosition_System_Windows_Forms_TableLayoutPanelCellPosition_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_Equality(TableLayoutPanelCellPosition, TableLayoutPanelCellPosition)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Compares two <a class=\"xref\" href=\"system.windows.forms.tablelayoutpanelcellposition\" data-linktype=\"relative-path\">TableLayoutPanelCellPosition</a> objects. The result specifies whether the values of the <span class=\"xref\">stem.Windows.Forms.TableLayoutPanelCellPosition.Row*</span> and <span class=\"xref\">stem.Windows.Forms.TableLayoutPanelCellPosition.Column*</span> properties of the two <a class=\"xref\" href=\"system.windows.forms.tablelayoutpanelcellposition\" data-linktype=\"relative-path\">TableLayoutPanelCellPosition</a> objects are equal.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool op_Equality (System.Windows.Forms.TableLayoutPanelCellPosition p1, System.Windows.Forms.TableLayoutPanelCellPosition p2);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>p1</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.tablelayoutpanelcellposition\" data-linktype=\"relative-path\">TableLayoutPanelCellPosition</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.windows.forms.tablelayoutpanelcellposition\" data-linktype=\"relative-path\">TableLayoutPanelCellPosition</a> to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>p2</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.tablelayoutpanelcellposition\" data-linktype=\"relative-path\">TableLayoutPanelCellPosition</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.windows.forms.tablelayoutpanelcellposition\" data-linktype=\"relative-path\">TableLayoutPanelCellPosition</a> to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if <code>p1</code> and <code>p2</code> are equal; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_Forms_TableLayoutPanelCellPosition_op_Inequality_System_Windows_Forms_TableLayoutPanelCellPosition_System_Windows_Forms_TableLayoutPanelCellPosition_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_Inequality(TableLayoutPanelCellPosition, TableLayoutPanelCellPosition)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Compares two <a class=\"xref\" href=\"system.windows.forms.tablelayoutpanelcellposition\" data-linktype=\"relative-path\">TableLayoutPanelCellPosition</a> objects. The result specifies whether the values of the <span class=\"xref\">stem.Windows.Forms.TableLayoutPanelCellPosition.Row*</span> and <span class=\"xref\">stem.Windows.Forms.TableLayoutPanelCellPosition.Column*</span> properties of the two <a class=\"xref\" href=\"system.windows.forms.tablelayoutpanelcellposition\" data-linktype=\"relative-path\">TableLayoutPanelCellPosition</a> objects are unequal.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool op_Inequality (System.Windows.Forms.TableLayoutPanelCellPosition p1, System.Windows.Forms.TableLayoutPanelCellPosition p2);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>p1</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.tablelayoutpanelcellposition\" data-linktype=\"relative-path\">TableLayoutPanelCellPosition</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.windows.forms.tablelayoutpanelcellposition\" data-linktype=\"relative-path\">TableLayoutPanelCellPosition</a> to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>p2</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.tablelayoutpanelcellposition\" data-linktype=\"relative-path\">TableLayoutPanelCellPosition</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.windows.forms.tablelayoutpanelcellposition\" data-linktype=\"relative-path\">TableLayoutPanelCellPosition</a> to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if <code>p1</code> and <code>p2</code> differ; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Windows.Forms.TableLayoutPanelCellPosition.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TableLayoutPanelCellPosition\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TableLayoutPanelCellPosition..ctor\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TableLayoutPanelCellPosition.Column\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TableLayoutPanelCellPosition.Equals\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TableLayoutPanelCellPosition.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TableLayoutPanelCellPosition.op_Equality\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TableLayoutPanelCellPosition.op_op_Equality\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TableLayoutPanelCellPosition.op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TableLayoutPanelCellPosition.op_op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TableLayoutPanelCellPosition.Row\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TableLayoutPanelCellPosition.ToString\">\r\n<meta name=\"APILocation\" content=\"System.Windows.Forms.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-29 05:54 AM\">\r\n<meta name=\"document_id\" content=\"d2187acb-33d1-261d-4f0b-f2b88e088e94\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a cell in a .\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.windows.forms/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Forms.TableLayoutPanelCellPosition\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Windows.Forms.TableLayoutPanelCellPosition.yml","open_to_public_contributors":false,"api_name":["System.Windows.Forms.TableLayoutPanelCellPosition","System.Windows.Forms.TableLayoutPanelCellPosition..ctor","System.Windows.Forms.TableLayoutPanelCellPosition.Column","System.Windows.Forms.TableLayoutPanelCellPosition.Equals","System.Windows.Forms.TableLayoutPanelCellPosition.GetHashCode","System.Windows.Forms.TableLayoutPanelCellPosition.op_Equality","System.Windows.Forms.TableLayoutPanelCellPosition.op_op_Equality","System.Windows.Forms.TableLayoutPanelCellPosition.op_Inequality","System.Windows.Forms.TableLayoutPanelCellPosition.op_op_Inequality","System.Windows.Forms.TableLayoutPanelCellPosition.Row","System.Windows.Forms.TableLayoutPanelCellPosition.ToString"],"api_location":["System.Windows.Forms.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Forms.TableLayoutPanelCellPosition","System::Windows::Forms::TableLayoutPanelCellPosition","System.Windows.Forms.TableLayoutPanelCellPosition.#ctor","System::Windows::Forms::TableLayoutPanelCellPosition::#ctor","System.Windows.Forms.TableLayoutPanelCellPosition.Column","System::Windows::Forms::TableLayoutPanelCellPosition::Column","System.Windows.Forms.TableLayoutPanelCellPosition.Equals","System::Windows::Forms::TableLayoutPanelCellPosition::Equals","System.Windows.Forms.TableLayoutPanelCellPosition.GetHashCode","System::Windows::Forms::TableLayoutPanelCellPosition::GetHashCode","System.Windows.Forms.TableLayoutPanelCellPosition.op_Equality","System::Windows::Forms::TableLayoutPanelCellPosition::op_Equality","System.Windows.Forms.TableLayoutPanelCellPosition.op_Inequality","System::Windows::Forms::TableLayoutPanelCellPosition::op_Inequality","System.Windows.Forms.TableLayoutPanelCellPosition.Row","System::Windows::Forms::TableLayoutPanelCellPosition::Row","System.Windows.Forms.TableLayoutPanelCellPosition.ToString","System::Windows::Forms::TableLayoutPanelCellPosition::ToString"],"dev_langs":["csharp"],"updated_at":"2017-03-29 05:54 AM","document_id":"d2187acb-33d1-261d-4f0b-f2b88e088e94","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Windows.Forms/TableLayoutPanelCellPosition.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"TableLayoutPanelCellPosition struct | Microsoft Docs","_op_ogTitle":"TableLayoutPanelCellPosition struct","description":"Represents a cell in a .\n","toc_asset_id":"api/_splitted/System.Windows.Forms/toc.json","toc_rel":"_splitted/System.Windows.Forms/toc.json","source_url":"","ms.assetid":"System.Windows.Forms.TableLayoutPanelCellPosition","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.tablelayoutpanelcellposition","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.tablelayoutpanelcellposition","fileRelativePath":"api/System.Windows.Forms.TableLayoutPanelCellPosition.html"},"themesRelativePathToOutputRoot":"_themes/"}