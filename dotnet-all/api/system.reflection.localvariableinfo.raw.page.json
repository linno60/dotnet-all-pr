{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">LocalVariableInfo</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Discovers the attributes of a local variable and provides access to local variable metadata.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic class LocalVariableInfo</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><span class=\"lang-csharp\">LocalVariableInfo</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example defines a test method named <code>MethodBodyExample</code>, and displays its local variable information. The <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_GetMethodBody_\" data-linktype=\"relative-path\">GetMethodBody</a> method is used to obtain a <a class=\"xref\" href=\"system.reflection.methodbody\" data-linktype=\"relative-path\">MethodBody</a> object for the test method. The <a class=\"xref\" href=\"system.reflection.methodbody#System_Reflection_MethodBody_LocalVariables_\" data-linktype=\"relative-path\">LocalVariables</a> property is then used to obtain a list of LocalVariableInfo objects and to display their types and index order.  </p>\n<p> This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.reflection.methodbody\" data-linktype=\"relative-path\">MethodBody</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"MethodBody#2\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Reflection;\n\npublic ref class Example\n{\n    // The Main method contains code to analyze this method, using\n    // the properties and methods of the MethodBody class.\npublic:\n    void MethodBodyExample(Object^ arg)\n    {\n        // Define some local variables. In addition to these variables,\n        // the local variable list includes the variables scoped to \n        // the catch clauses.\n        int var1 = 42;\n        String^ var2 = &quot;Forty-two&quot;;\n\n        try\n        {\n            // Depending on the input value, throw an ArgumentException or \n            // an ArgumentNullException to test the Catch clauses.\n            if (arg == nullptr)\n            {\n                throw gcnew ArgumentNullException(&quot;The argument cannot &quot; +\n                    &quot;be null.&quot;);\n            }\n            if (arg-&gt;GetType() == String::typeid)\n            {\n                throw gcnew ArgumentException(&quot;The argument cannot &quot; + \n                    &quot;be a string.&quot;);\n            }        \n        }\n\n        // There is no Filter clause in this code example. See the Visual \n        // Basic code for an example of a Filter clause.\n\n        // This catch clause handles the ArgumentException class, and\n        // any other class derived from Exception.\n        catch (ArgumentException^ ex)\n        {\n            Console::WriteLine(&quot;Ordinary exception-handling clause caught:&quot; +\n                &quot; {0}&quot;, ex-&gt;GetType());\n        }        \n        finally\n        {\n            var1 = 3033;\n            var2 = &quot;Another string.&quot;;\n        }\n    }\n};\n\nint main()\n{ \n    // Get method body information.\n    MethodInfo^ mi = \n        Example::typeid-&gt;GetMethod(&quot;MethodBodyExample&quot;);\n\n    MethodBody^ mb = mi-&gt;GetMethodBody();\n    Console::WriteLine(&quot;\\r\\nMethod: {0}&quot;, mi);\n\n    // Display the general information included in the \n    // MethodBody object.\n    Console::WriteLine(&quot;    Local variables are initialized: {0}&quot;, \n        mb-&gt;InitLocals);\n    Console::WriteLine(&quot;    Maximum number of items on the operand &quot; +\n        &quot;stack: {0}&quot;, mb-&gt;MaxStackSize);\n</code></pre><pre><code class=\"lang-vb\" name=\"MethodBody#2\">Imports System\nImports System.Reflection\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        &#39; Demonstrate the effect of the Visual Basic When keyword, which\n        &#39; generates a Filter clause in the Try block.\n        Dim e As New Example()\n        Console.WriteLine()\n        e.MethodBodyExample(&quot;String argument&quot;)\n        e.MethodBodyExample(Nothing)\n\n        &#39; Get method body information.\n        Dim mi As MethodInfo = _\n            GetType(Example).GetMethod(&quot;MethodBodyExample&quot;)\n        Dim mb As MethodBody = mi.GetMethodBody()\n        Console.WriteLine(vbCrLf &amp; &quot;Method: {0}&quot;, mi)\n\n        &#39; Display the general information included in the \n        &#39; MethodBody object.\n        Console.WriteLine(&quot;    Local variables are initialized: {0}&quot;, _\n            mb.InitLocals)\n        Console.WriteLine(&quot;    Maximum number of items on the operand stack: {0}&quot;, _\n            mb.MaxStackSize)\n</code></pre><pre><code class=\"lang-cs\" name=\"MethodBody#2\">using System;\nusing System.Reflection;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Get method body information.\n        MethodInfo mi = typeof(Example).GetMethod(&quot;MethodBodyExample&quot;);\n        MethodBody mb = mi.GetMethodBody();\n        Console.WriteLine(&quot;\\r\\nMethod: {0}&quot;, mi);\n\n        // Display the general information included in the \n        // MethodBody object.\n        Console.WriteLine(&quot;    Local variables are initialized: {0}&quot;, \n            mb.InitLocals);\n        Console.WriteLine(&quot;    Maximum number of items on the operand stack: {0}&quot;, \n            mb.MaxStackSize);\n</code></pre><pre><code class=\"lang-cpp\" name=\"MethodBody#3\">\n// Display information about the local variables in the\n// method body.\nConsole::WriteLine();\nfor each (LocalVariableInfo^ lvi in mb-&gt;LocalVariables)\n{\n    Console::WriteLine(&quot;Local variable: {0}&quot;, lvi);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"MethodBody#3\">\n&#39; Display information about the local variables in the\n&#39; method body.\nConsole.WriteLine()\nFor Each lvi As LocalVariableInfo In mb.LocalVariables\n    Console.WriteLine(&quot;Local variable: {0}&quot;, lvi)\nNext\n</code></pre><pre><code class=\"lang-cs\" name=\"MethodBody#3\">\n// Display information about the local variables in the\n// method body.\nConsole.WriteLine();\nforeach (LocalVariableInfo lvi in mb.LocalVariables)\n{\n    Console.WriteLine(&quot;Local variable: {0}&quot;, lvi);\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"MethodBody#5\">    // The Main method contains code to analyze this method, using\n    // the properties and methods of the MethodBody class.\npublic:\n    void MethodBodyExample(Object^ arg)\n    {\n        // Define some local variables. In addition to these variables,\n        // the local variable list includes the variables scoped to \n        // the catch clauses.\n        int var1 = 42;\n        String^ var2 = &quot;Forty-two&quot;;\n\n        try\n        {\n            // Depending on the input value, throw an ArgumentException or \n            // an ArgumentNullException to test the Catch clauses.\n            if (arg == nullptr)\n            {\n                throw gcnew ArgumentNullException(&quot;The argument cannot &quot; +\n                    &quot;be null.&quot;);\n            }\n            if (arg-&gt;GetType() == String::typeid)\n            {\n                throw gcnew ArgumentException(&quot;The argument cannot &quot; + \n                    &quot;be a string.&quot;);\n            }        \n        }\n\n        // There is no Filter clause in this code example. See the Visual \n        // Basic code for an example of a Filter clause.\n\n        // This catch clause handles the ArgumentException class, and\n        // any other class derived from Exception.\n        catch (ArgumentException^ ex)\n        {\n            Console::WriteLine(&quot;Ordinary exception-handling clause caught:&quot; +\n                &quot; {0}&quot;, ex-&gt;GetType());\n        }        \n        finally\n        {\n            var1 = 3033;\n            var2 = &quot;Another string.&quot;;\n        }\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"MethodBody#5\">    End Sub\n\n    &#39; This test method is executed at the beginning of Main, to show\n    &#39; how the Filter clause works. The Filter clause is generated by \n    &#39; a Visual Basic When expression. If arg is Nothing, this method\n    &#39; throws ArgumentNullException, which is caught by the filter\n    &#39; clause. If arg is a string, the method throws ArgumentException,\n    &#39; which does not match the filter clause.\n    &#39;\n    &#39; Sub Main also contains code to analyze this method, using \n    &#39; the properties and methods of the MethodBody class.\n    Public Sub MethodBodyExample(ByVal arg As Object)\n\n        &#39; Define some local variables. In addition to these variables,\n        &#39; the local variable list includes the variables scoped to \n        &#39; the catch clauses.\n        Dim var1 As Integer = 42\n        Dim var2 As String = &quot;Forty-two&quot;\n\n        Try\n            &#39; Depending on the input value, throw an ArgumentException or \n            &#39; an ArgumentNullException to test the Catch clauses.\n            &#39;\n            If arg Is Nothing Then\n                Throw New ArgumentNullException(&quot;The argument cannot be Nothing.&quot;)\n            End If\n            If arg.GetType() Is GetType(String) Then\n                Throw New ArgumentException(&quot;The argument cannot be a string.&quot;)\n            End If\n        \n        &#39; The When expression makes this a filter clause. The expression \n        &#39; selects only exceptions that derive from the ArgumentException\n        &#39; class. Other exceptions, including ArgumentException itself, \n        &#39; are not handled by this filter clause.\n        Catch ex As ArgumentException _\n            When ex.GetType().IsSubclassOf(GetType(ArgumentException))\n\n            Console.WriteLine(&quot;Filter clause caught: {0}&quot;, ex.GetType())\n        \n        &#39; This catch clause handles the ArgumentException class, and\n        &#39; any other class derived from Exception.\n        Catch ex As Exception\n            Console.WriteLine(&quot;Ordinary exception-handling clause caught: {0}&quot;, _\n                ex.GetType())\n\n        Finally\n            var1 = 3033\n            var2 = &quot;Another string.&quot;\n        End Try\n    End Sub\nEnd Class\n\n&#39; This code example produces output similar to the following:\n&#39;\n&#39;Ordinary exception-handling clause caught: System.ArgumentException\n&#39;Filter clause caught: System.ArgumentNullException\n&#39;\n&#39;Method: Void MethodBodyExample(System.Object)\n&#39;    Local variables are initialized: True\n&#39;    Maximum number of items on the operand stack: 3\n</code></pre><pre><code class=\"lang-cs\" name=\"MethodBody#5\">    }\n\n    // The Main method contains code to analyze this method, using\n    // the properties and methods of the MethodBody class.\n    public void MethodBodyExample(object arg)\n    {\n        // Define some local variables. In addition to these variables,\n        // the local variable list includes the variables scoped to \n        // the catch clauses.\n        int var1 = 42;\n        string var2 = &quot;Forty-two&quot;;\n\n        try\n        {\n            // Depending on the input value, throw an ArgumentException or \n            // an ArgumentNullException to test the Catch clauses.\n            if (arg == null)\n            {\n                throw new ArgumentNullException(&quot;The argument cannot be null.&quot;);\n            }\n            if (arg.GetType() == typeof(string))\n            {\n                throw new ArgumentException(&quot;The argument cannot be a string.&quot;);\n            }        \n        }\n\n        // There is no Filter clause in this code example. See the Visual \n        // Basic code for an example of a Filter clause.\n\n        // This catch clause handles the ArgumentException class, and\n        // any other class derived from Exception.\n        catch(Exception ex)\n        {\n            Console.WriteLine(&quot;Ordinary exception-handling clause caught: {0}&quot;, \n                ex.GetType());\n        }        \n        finally\n        {\n            var1 = 3033;\n            var2 = &quot;Another string.&quot;;\n        }\n    }\n}\n\n// This code example produces output similar to the following:\n//\n//Method: Void MethodBodyExample(System.Object)\n//    Local variables are initialized: True\n//    Maximum number of items on the operand stack: 2\n</code></pre><pre><code class=\"lang-cpp\" name=\"MethodBody#6\">//Local variable: System.ArgumentException (0)\n//Local variable: System.String (1)\n//Local variable: System.Int32 (2)\n</code></pre><pre><code class=\"lang-vb\" name=\"MethodBody#6\">&#39;\n&#39;Local variable: System.Int32 (0)\n&#39;Local variable: System.String (1)\n&#39;Local variable: System.ArgumentException (2)\n&#39;Local variable: System.Exception (3)\n</code></pre><pre><code class=\"lang-cs\" name=\"MethodBody#6\">//\n//Local variable: System.Int32 (0)\n//Local variable: System.String (1)\n//Local variable: System.Exception (2)\n//Local variable: System.Boolean (3)\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>To get a list of local variables in a method, use the <a class=\"xref\" href=\"system.reflection.methodbody#System_Reflection_MethodBody_LocalVariables_\" data-linktype=\"relative-path\">LocalVariables</a> property. Use the <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_GetMethodBody_\" data-linktype=\"relative-path\">GetMethodBody</a> method to obtain the <a class=\"xref\" href=\"system.reflection.methodbody\" data-linktype=\"relative-path\">MethodBody</a> for a <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> object.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Local variable names are not persisted in metadata. In Microsoft intermediate language (MSIL), local variables are accessed by their position in the local variable signature.</p>\n</div>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Reflection_LocalVariableInfo__ctor\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LocalVariableInfo()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.reflection.localvariableinfo\" data-linktype=\"relative-path\">LocalVariableInfo</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected LocalVariableInfo ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This constructor is invoked by derived classes during the construction of <a class=\"xref\" href=\"system.reflection.localvariableinfo\" data-linktype=\"relative-path\">LocalVariableInfo</a> objects.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Reflection_LocalVariableInfo_IsPinned\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsPinned</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the object referred to by the local variable is pinned in memory.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual bool IsPinned { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the object referred to by the variable is pinned in memory; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>In unsafe code, an object must be pinned before it can be referred to by an unmanaged pointer. While the referenced object is pinned, it cannot be moved by garbage collection.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Reflection_LocalVariableInfo_LocalIndex\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LocalIndex</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the index of the local variable within the method body.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual int LocalIndex { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An integer value that represents the order of declaration of the local variable within the method body.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Index numbers are assigned to local variables in the order in which they are declared.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Reflection_LocalVariableInfo_LocalType\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LocalType</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the type of the local variable.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual Type LocalType { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The type of the local variable.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Reflection_LocalVariableInfo_ToString\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ToString()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a user-readable string that describes the local variable.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override string ToString ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A string that displays information about the local variable, including the type name, index, and pinned status.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Reflection.LocalVariableInfo.yml\">\r\n<meta name=\"APIName\" content=\"System.Reflection.LocalVariableInfo\">\r\n<meta name=\"APIName\" content=\"System.Reflection.LocalVariableInfo..ctor\">\r\n<meta name=\"APIName\" content=\"System.Reflection.LocalVariableInfo.IsPinned\">\r\n<meta name=\"APIName\" content=\"System.Reflection.LocalVariableInfo.LocalIndex\">\r\n<meta name=\"APIName\" content=\"System.Reflection.LocalVariableInfo.LocalType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.LocalVariableInfo.ToString\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-28 03:03 AM\">\r\n<meta name=\"document_id\" content=\"baf4fa8b-e5ec-892f-fb59-85771454c3cd\">\r\n<meta name=\"internalonly\" content=\"false\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Discovers the attributes of a local variable and provides access to local variable metadata.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.reflection/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Reflection.LocalVariableInfo\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Reflection.LocalVariableInfo.yml","open_to_public_contributors":false,"api_name":["System.Reflection.LocalVariableInfo","System.Reflection.LocalVariableInfo..ctor","System.Reflection.LocalVariableInfo.IsPinned","System.Reflection.LocalVariableInfo.LocalIndex","System.Reflection.LocalVariableInfo.LocalType","System.Reflection.LocalVariableInfo.ToString"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Reflection.LocalVariableInfo","System::Reflection::LocalVariableInfo","System.Reflection.LocalVariableInfo.#ctor","System::Reflection::LocalVariableInfo::#ctor","System.Reflection.LocalVariableInfo.IsPinned","System::Reflection::LocalVariableInfo::IsPinned","System.Reflection.LocalVariableInfo.LocalIndex","System::Reflection::LocalVariableInfo::LocalIndex","System.Reflection.LocalVariableInfo.LocalType","System::Reflection::LocalVariableInfo::LocalType","System.Reflection.LocalVariableInfo.ToString","System::Reflection::LocalVariableInfo::ToString"],"dev_langs":["csharp"],"updated_at":"2017-03-28 03:03 AM","document_id":"baf4fa8b-e5ec-892f-fb59-85771454c3cd","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.Reflection/LocalVariableInfo.xml","internalonly":false,"layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"LocalVariableInfo class | Microsoft Docs","_op_ogTitle":"LocalVariableInfo class","description":"Discovers the attributes of a local variable and provides access to local variable metadata.\n","toc_asset_id":"api/_splitted/System.Reflection/toc.json","toc_rel":"_splitted/System.Reflection/toc.json","source_url":"","ms.assetid":"System.Reflection.LocalVariableInfo","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.reflection.localvariableinfo","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.reflection.localvariableinfo","fileRelativePath":"api/System.Reflection.LocalVariableInfo.html"},"themesRelativePathToOutputRoot":"_themes/"}