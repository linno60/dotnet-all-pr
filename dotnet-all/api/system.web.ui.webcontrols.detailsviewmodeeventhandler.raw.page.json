{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">DetailsViewModeEventHandler</span>\r\n      Delegate\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the method that handles the <a class=\"xref\" href=\"system.web.ui.webcontrols.detailsview#System_Web_UI_WebControls_DetailsView_ModeChanging\" data-linktype=\"relative-path\">ModeChanging</a> event of a <a class=\"xref\" href=\"system.web.ui.webcontrols.detailsview\" data-linktype=\"relative-path\">DetailsView</a> control.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public delegate void DetailsViewModeEventHandler(object sender, DetailsViewModeEventArgs e);</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></span></div><span class=\"lang-csharp\">DetailsViewModeEventHandler</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example demonstrates how to programmatically add a DetailsViewModeEventHandler delegate to the <a class=\"xref\" href=\"system.web.ui.webcontrols.detailsview#System_Web_UI_WebControls_DetailsView_ModeChanging\" data-linktype=\"relative-path\">ModeChanging</a> event of a <a class=\"xref\" href=\"system.web.ui.webcontrols.detailsview\" data-linktype=\"relative-path\">DetailsView</a> control.  </p>\n<pre><code class=\"lang-vb\" name=\"DetailsViewModeEventHandlerInline#1\">\n&lt;%@ Page language=&quot;VB&quot;%&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)\n\n    &#39; Create a new DetailsView object.\n    Dim customerDetailsView As New DetailsView()\n\n    &#39; Set the DetailsView object&#39;s properties.\n    customerDetailsView.ID = &quot;CustomerDetailsView&quot;\n    customerDetailsView.DataSourceID = &quot;DetailsViewSource&quot;\n    customerDetailsView.AutoGenerateRows = True\n    customerDetailsView.AutoGenerateEditButton = True\n    customerDetailsView.AllowPaging = True\n    \n    Dim keyArray() As String = {&quot;CustomerID&quot;}\n    customerDetailsView.DataKeyNames = keyArray\n    \n    &#39; Programmatically register the event-handling method\n    &#39; for the ItemInserted event of a DetailsView control.\n    AddHandler customerDetailsView.ModeChanging, AddressOf CustomerDetailsView_ModeChanging\n\n    &#39; Add the DetailsView object to the Controls collection\n    &#39; of the PlaceHolder control.\n    DetailsViewPlaceHolder.Controls.Add(customerDetailsView)\n\n  End Sub\n  \n  Sub CustomerDetailsView_ModeChanging(ByVal sender As Object, ByVal e As DetailsViewModeEventArgs)\n\n    &#39; Use the sender parameter to access the DetailsView\n    &#39; control that raised the event.\n    Dim customerDetailsView As DetailsView = CType(sender, DetailsView)\n\n    &#39; Use the NewMode property to determine the mode to which the \n    &#39; DetailsView control is transitioning.\n    Select Case e.NewMode\n    \n      Case DetailsViewMode.Edit\n        &#39; Hide the pager row and clear the Label control\n        &#39; when transitioning to edit mode.\n        customerDetailsView.AllowPaging = False\n        MessageLabel.Text = &quot;&quot;\n\n      Case DetailsViewMode.ReadOnly\n        &#39; Display the pager row and confirmation message\n        &#39; when transitioning to edit mode.\n        customerDetailsView.AllowPaging = True\n        If e.CancelingEdit Then\n        \n          MessageLabel.Text = &quot;Update canceled.&quot;\n        \n        Else\n        \n          MessageLabel.Text = &quot;Update completed.&quot;\n        \n        End If\n\n      Case DetailsViewMode.Insert\n        &#39; Cancel the mode change if the DetailsView\n        &#39; control attempts to transition to insert \n        &#39; mode.\n        e.Cancel = True\n\n      Case Else\n        MessageLabel.Text = &quot;Unsupported mode.&quot;\n          \n    End Select\n    \n  End Sub\n\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DetailsViewModeEventHandler Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n        \n      &lt;h3&gt;DetailsViewModeEventHandler Example&lt;/h3&gt;\n      \n      &lt;!-- Use a PlaceHolder control as the container for the --&gt;\n      &lt;!-- dynamically generated DetailsView control.         --&gt;       \n      &lt;asp:PlaceHolder id=&quot;DetailsViewPlaceHolder&quot;\n        runat=&quot;server&quot;/&gt;\n        \n      &lt;br/&gt;&lt;br/&gt;\n      \n      &lt;asp:label id=&quot;MessageLabel&quot;\n        forecolor=&quot;Red&quot;\n        runat=&quot;server&quot;/&gt;\n          \n      &lt;!-- This example uses Microsoft SQL Server and connects  --&gt;\n      &lt;!-- to the Northwind sample database. Use an ASP.NET     --&gt;\n      &lt;!-- expression to retrieve the connection string value   --&gt;\n      &lt;!-- from the web.config file.                            --&gt;\n      &lt;asp:sqldatasource id=&quot;DetailsViewSource&quot;\n        selectcommand=&quot;Select [CustomerID], [CompanyName], [Address], \n          [City], [PostalCode], [Country] From [Customers]&quot;\n        updatecommand=&quot;Update [Customers] Set \n          [CompanyName]=@CompanyName, [Address]=@Address, \n          [City]=@City, [PostalCode]=@PostalCode, \n          [Country]=@Country \n          Where [CustomerID]=@CustomerID&quot; \n        connectionstring=\n          &quot;&lt;%$ ConnectionStrings:NorthWindConnectionString%&gt;&quot; \n        runat=&quot;server&quot;/&gt;\n            \n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DetailsViewModeEventHandlerInline#1\">\n&lt;%@ Page language=&quot;C#&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  void Page_Load(Object sender, EventArgs e)\n  {\n\n    // Create a new DetailsView object.\n    DetailsView customerDetailsView = new DetailsView();\n\n    // Set the DetailsView object&#39;s properties.\n    customerDetailsView.ID = &quot;CustomerDetailsView&quot;;\n    customerDetailsView.DataSourceID = &quot;DetailsViewSource&quot;;\n    customerDetailsView.AutoGenerateRows = true;\n    customerDetailsView.AutoGenerateEditButton = true;\n    customerDetailsView.AllowPaging = true;\n    customerDetailsView.DataKeyNames = new String[1] { &quot;CustomerID&quot; };\n\n    // Programmatically register the event-handling method\n    // for the ItemInserted event of a DetailsView control.\n    customerDetailsView.ModeChanging += new DetailsViewModeEventHandler(this.CustomerDetailsView_ModeChanging);\n\n    // Add the DetailsView object to the Controls collection\n    // of the PlaceHolder control.\n    DetailsViewPlaceHolder.Controls.Add(customerDetailsView);\n\n  }\n  \n  void CustomerDetailsView_ModeChanging(Object sender, DetailsViewModeEventArgs e)\n  {\n\n    // Use the sender parameter to access the DetailsView\n    // control that raised the event.\n    DetailsView customerDetailsView = (DetailsView)sender;\n\n    // Use the NewMode property to determine the mode to which the \n    // DetailsView control is transitioning.\n    switch (e.NewMode)\n    {\n      case DetailsViewMode.Edit:\n        // Hide the pager row and clear the Label control\n        // when transitioning to edit mode.\n        customerDetailsView.AllowPaging = false;\n        MessageLabel.Text = &quot;&quot;;\n        break;\n      case DetailsViewMode.ReadOnly:\n        // Display the pager row and confirmation message\n        // when transitioning to edit mode.\n        customerDetailsView.AllowPaging = true;\n        if (e.CancelingEdit)\n        {\n          MessageLabel.Text = &quot;Update canceled.&quot;;\n        }\n        else\n        {\n          MessageLabel.Text = &quot;Update completed.&quot;;\n        }\n        break;\n      case DetailsViewMode.Insert:\n        // Cancel the mode change if the DetailsView\n        // control attempts to transition to insert \n        // mode.\n        e.Cancel = true;\n        break;\n      default:\n        MessageLabel.Text = &quot;Unsupported mode.&quot;;\n        break;\n    }\n    \n  }\n\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DetailsViewModeEventHandler Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n        \n      &lt;h3&gt;DetailsViewModeEventHandler Example&lt;/h3&gt;\n      \n      &lt;!-- Use a PlaceHolder control as the container for the --&gt;\n      &lt;!-- dynamically generated DetailsView control.         --&gt;       \n      &lt;asp:PlaceHolder id=&quot;DetailsViewPlaceHolder&quot;\n        runat=&quot;server&quot;/&gt;\n        \n      &lt;br/&gt;&lt;br/&gt;\n      \n      &lt;asp:label id=&quot;MessageLabel&quot;\n        forecolor=&quot;Red&quot;\n        runat=&quot;server&quot;/&gt;\n          \n      &lt;!-- This example uses Microsoft SQL Server and connects  --&gt;\n      &lt;!-- to the Northwind sample database. Use an ASP.NET     --&gt;\n      &lt;!-- expression to retrieve the connection string value   --&gt;\n      &lt;!-- from the web.config file.                            --&gt;\n      &lt;asp:sqldatasource id=&quot;DetailsViewSource&quot;\n        selectcommand=&quot;Select [CustomerID], [CompanyName], [Address], \n          [City], [PostalCode], [Country] From [Customers]&quot;\n        updatecommand=&quot;Update [Customers] Set \n          [CompanyName]=@CompanyName, [Address]=@Address, \n          [City]=@City, [PostalCode]=@PostalCode, \n          [Country]=@Country \n          Where [CustomerID]=@CustomerID&quot; \n        connectionstring=\n          &quot;&lt;%$ ConnectionStrings:NorthWindConnectionString%&gt;&quot; \n        runat=&quot;server&quot;/&gt;\n            \n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p> The following code example demonstrates how to declaratively add a DetailsViewModeEventHandler delegate to the <a class=\"xref\" href=\"system.web.ui.webcontrols.detailsview#System_Web_UI_WebControls_DetailsView_ModeChanging\" data-linktype=\"relative-path\">ModeChanging</a> event of a <a class=\"xref\" href=\"system.web.ui.webcontrols.detailsview\" data-linktype=\"relative-path\">DetailsView</a> control.  </p>\n<pre><code class=\"lang-vb\" name=\"DetailsViewModeEventHandler#1\">\n&lt;%@ Page language=&quot;VB&quot; autoeventwireup=&quot;false&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  Sub CustomerDetailsView_ModeChanging(ByVal sender As Object, ByVal e As DetailsViewModeEventArgs) Handles CustomerDetailsView.ModeChanging\n\n    &#39; Use the NewMode property to determine the mode to which the \n    &#39; DetailsView control is transitioning.\n    Select Case e.NewMode\n    \n      Case DetailsViewMode.Edit\n        &#39; Hide the pager row and clear the Label control\n        &#39; when transitioning to edit mode.\n        CustomerDetailsView.AllowPaging = False\n        MessageLabel.Text = &quot;&quot;\n\n      Case DetailsViewMode.ReadOnly\n        &#39; Display the pager row and confirmation message\n        &#39; when transitioning to edit mode.\n        CustomerDetailsView.AllowPaging = True\n        If e.CancelingEdit Then\n        \n          MessageLabel.Text = &quot;Update canceled.&quot;\n        \n        Else\n        \n          MessageLabel.Text = &quot;Update completed.&quot;\n        \n        End If\n\n      Case DetailsViewMode.Insert\n        &#39; Cancel the mode change if the DetailsView\n        &#39; control attempts to transition to insert \n        &#39; mode.\n        e.Cancel = True\n\n      Case Else\n        MessageLabel.Text = &quot;Unsupported mode.&quot;\n          \n    End Select\n    \n  End Sub\n\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DetailsViewModeEventHandler Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n        \n      &lt;h3&gt;DetailsViewModeEventHandler Example&lt;/h3&gt;\n                \n      &lt;asp:detailsview id=&quot;CustomerDetailsView&quot;\n        datasourceid=&quot;DetailsViewSource&quot;\n        datakeynames=&quot;CustomerID&quot;\n        autogeneraterows=&quot;true&quot;\n        autogenerateeditbutton=&quot;true&quot; \n        allowpaging=&quot;true&quot;\n        runat=&quot;server&quot;&gt;\n\n      &lt;/asp:detailsview&gt;\n      \n      &lt;br/&gt;&lt;br/&gt;\n      \n      &lt;asp:label id=&quot;MessageLabel&quot;\n        forecolor=&quot;Red&quot;\n        runat=&quot;server&quot;/&gt;\n          \n      &lt;!-- This example uses Microsoft SQL Server and connects  --&gt;\n      &lt;!-- to the Northwind sample database. Use an ASP.NET     --&gt;\n      &lt;!-- expression to retrieve the connection string value   --&gt;\n      &lt;!-- from the web.config file.                            --&gt;\n      &lt;asp:sqldatasource id=&quot;DetailsViewSource&quot;\n        selectcommand=&quot;Select [CustomerID], [CompanyName], [Address], \n          [City], [PostalCode], [Country] From [Customers]&quot;\n        updatecommand=&quot;Update [Customers] Set \n          [CompanyName]=@CompanyName, [Address]=@Address, \n          [City]=@City, [PostalCode]=@PostalCode, \n          [Country]=@Country \n          Where [CustomerID]=@CustomerID&quot; \n        connectionstring=\n          &quot;&lt;%$ ConnectionStrings:NorthWindConnectionString%&gt;&quot; \n        runat=&quot;server&quot;/&gt;\n            \n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DetailsViewModeEventHandler#1\">\n&lt;%@ Page language=&quot;C#&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  void CustomerDetailsView_ModeChanging(Object sender, DetailsViewModeEventArgs e)\n  {\n\n    // Use the NewMode property to determine the mode to which the \n    // DetailsView control is transitioning.\n    switch (e.NewMode)\n    {\n      case DetailsViewMode.Edit:\n        // Hide the pager row and clear the Label control\n        // when transitioning to edit mode.\n        CustomerDetailsView.AllowPaging = false;\n        MessageLabel.Text = &quot;&quot;;\n        break;\n      case DetailsViewMode.ReadOnly:\n        // Display the pager row and confirmation message\n        // when transitioning to edit mode.\n        CustomerDetailsView.AllowPaging = true;\n        if (e.CancelingEdit)\n        {\n          MessageLabel.Text = &quot;Update canceled.&quot;;\n        }\n        else\n        {\n          MessageLabel.Text = &quot;Update completed.&quot;;\n        }\n        break;\n      case DetailsViewMode.Insert:\n        // Cancel the mode change if the DetailsView\n        // control attempts to transition to insert \n        // mode.\n        e.Cancel = true;\n        break;\n      default:\n        MessageLabel.Text = &quot;Unsupported mode.&quot;;\n        break;\n    }\n    \n  }\n\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DetailsViewModeEventHandler Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n        \n      &lt;h3&gt;DetailsViewModeEventHandler Example&lt;/h3&gt;\n                \n      &lt;asp:detailsview id=&quot;CustomerDetailsView&quot;\n        datasourceid=&quot;DetailsViewSource&quot;\n        datakeynames=&quot;CustomerID&quot;\n        autogeneraterows=&quot;true&quot;\n        autogenerateeditbutton=&quot;true&quot; \n        allowpaging=&quot;true&quot;\n        onmodechanging=&quot;CustomerDetailsView_ModeChanging&quot; \n        runat=&quot;server&quot;&gt;\n\n      &lt;/asp:detailsview&gt;\n      \n      &lt;br/&gt;&lt;br/&gt;\n      \n      &lt;asp:label id=&quot;MessageLabel&quot;\n        forecolor=&quot;Red&quot;\n        runat=&quot;server&quot;/&gt;\n          \n      &lt;!-- This example uses Microsoft SQL Server and connects  --&gt;\n      &lt;!-- to the Northwind sample database. Use an ASP.NET     --&gt;\n      &lt;!-- expression to retrieve the connection string value   --&gt;\n      &lt;!-- from the web.config file.                            --&gt;\n      &lt;asp:sqldatasource id=&quot;DetailsViewSource&quot;\n        selectcommand=&quot;Select [CustomerID], [CompanyName], [Address], \n          [City], [PostalCode], [Country] From [Customers]&quot;\n        updatecommand=&quot;Update [Customers] Set \n          [CompanyName]=@CompanyName, [Address]=@Address, \n          [City]=@City, [PostalCode]=@PostalCode, \n          [Country]=@Country \n          Where [CustomerID]=@CustomerID&quot; \n        connectionstring=\n          &quot;&lt;%$ ConnectionStrings:NorthWindConnectionString%&gt;&quot; \n        runat=&quot;server&quot;/&gt;\n            \n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The <a class=\"xref\" href=\"system.web.ui.webcontrols.detailsview#System_Web_UI_WebControls_DetailsView_ModeChanging\" data-linktype=\"relative-path\">ModeChanging</a> event is raised when a <a class=\"xref\" href=\"system.web.ui.webcontrols.detailsview\" data-linktype=\"relative-path\">DetailsView</a> control attempts to change between edit, insert, and read-only mode, but before the mode actually changes. This allows you to provide an event handler that performs a custom routine, such as configuring the <a class=\"xref\" href=\"system.web.ui.webcontrols.detailsview\" data-linktype=\"relative-path\">DetailsView</a> control for a specific mode or canceling the mode change, whenever this event occurs.  </p>\n<p> When you create a DetailsViewModeEventHandler delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see <a href=\"http://msdn.microsoft.com/en-us/d98fd58b-fa4f-4598-8378-addf4355a115\" data-linktype=\"external\">NIB: Events and Delegates</a>.</p>\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.UI.WebControls.DetailsViewModeEventHandler.yml\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DetailsViewModeEventHandler\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DetailsViewModeEventHandler..ctor\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DetailsViewModeEventHandler.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DetailsViewModeEventHandler.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DetailsViewModeEventHandler.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 05:47 AM\">\r\n<meta name=\"document_id\" content=\"c8bd8ab1-3d79-0257-069b-c574f4590605\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the method that handles the  event of a  control.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.web.ui.webcontrols/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Web.UI.WebControls.DetailsViewModeEventHandler\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.UI.WebControls.DetailsViewModeEventHandler.yml","open_to_public_contributors":false,"api_name":["System.Web.UI.WebControls.DetailsViewModeEventHandler","System.Web.UI.WebControls.DetailsViewModeEventHandler..ctor","System.Web.UI.WebControls.DetailsViewModeEventHandler.Invoke","System.Web.UI.WebControls.DetailsViewModeEventHandler.BeginInvoke","System.Web.UI.WebControls.DetailsViewModeEventHandler.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Web.UI.WebControls.DetailsViewModeEventHandler","System::Web::UI::WebControls::DetailsViewModeEventHandler"],"dev_langs":["csharp"],"updated_at":"2017-03-31 05:47 AM","document_id":"c8bd8ab1-3d79-0257-069b-c574f4590605","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Web.UI.WebControls/DetailsViewModeEventHandler.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"DetailsViewModeEventHandler delegate | Microsoft Docs","_op_ogTitle":"DetailsViewModeEventHandler delegate","description":"Represents the method that handles the  event of a  control.\n","toc_asset_id":"api/_splitted/System.Web.UI.WebControls/toc.json","toc_rel":"_splitted/System.Web.UI.WebControls/toc.json","source_url":"","ms.assetid":"System.Web.UI.WebControls.DetailsViewModeEventHandler","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.webcontrols.detailsviewmodeeventhandler","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.webcontrols.detailsviewmodeeventhandler","fileRelativePath":"api/System.Web.UI.WebControls.DetailsViewModeEventHandler.html"},"themesRelativePathToOutputRoot":"_themes/"}