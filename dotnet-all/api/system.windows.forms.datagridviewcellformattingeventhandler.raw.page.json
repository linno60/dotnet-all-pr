{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">DataGridViewCellFormattingEventHandler</span>\r\n      Delegate\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the method that will handle the <a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_CellFormatting\" data-linktype=\"relative-path\">CellFormatting</a> event of a <a class=\"xref\" href=\"system.windows.forms.datagridview\" data-linktype=\"relative-path\">DataGridView</a>.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public delegate void DataGridViewCellFormattingEventHandler(object sender, DataGridViewCellFormattingEventArgs e);</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">System.Delegate</a></span></div><span class=\"lang-csharp\">DataGridViewCellFormattingEventHandler</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example demonstrates how to handle the <a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_CellFormatting\" data-linktype=\"relative-path\">CellFormatting</a> event.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Windows.Forms.GridViewUnbound#1\">    Private Sub dataGridView1_CellFormatting(ByVal sender As Object, _\n        ByVal e As DataGridViewCellFormattingEventArgs) _\n        Handles dataGridView1.CellFormatting\n        &#39; If the column is the Artist column, check the\n        &#39; value.\n        If Me.dataGridView1.Columns(e.ColumnIndex).Name _\n            = &quot;Artist&quot; Then\n            If e.Value IsNot Nothing Then\n\n                &#39; Check for the string &quot;pink&quot; in the cell.\n                Dim stringValue As String = _\n                CType(e.Value, String)\n                stringValue = stringValue.ToLower()\n                If ((stringValue.IndexOf(&quot;pink&quot;) &gt; -1)) Then\n                    e.CellStyle.BackColor = Color.Pink\n                End If\n\n            End If\n        ElseIf Me.dataGridView1.Columns(e.ColumnIndex).Name _\n            = &quot;Release Date&quot; Then\n            ShortFormDateFormat(e)\n        End If\n    End Sub\n\n    &#39;Even though the date internaly stores the year as YYYY, using formatting, the\n    &#39;UI can have the format in YY.  \n    Private Shared Sub ShortFormDateFormat(ByVal formatting As DataGridViewCellFormattingEventArgs)\n        If formatting.Value IsNot Nothing Then\n            Try\n                Dim dateString As System.Text.StringBuilder = New System.Text.StringBuilder()\n                Dim theDate As Date = DateTime.Parse(formatting.Value.ToString())\n\n                dateString.Append(theDate.Month)\n                dateString.Append(&quot;/&quot;)\n                dateString.Append(theDate.Day)\n                dateString.Append(&quot;/&quot;)\n                dateString.Append(theDate.Year.ToString().Substring(2))\n                formatting.Value = dateString.ToString()\n                formatting.FormattingApplied = True\n            Catch notInDateFormat As FormatException\n                &#39; Set to false in case there are other handlers interested trying to\n                &#39; format this DataGridViewCellFormattingEventArgs instance.\n                formatting.FormattingApplied = False\n            End Try\n        End If\n    End Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.GridViewUnbound#1\">   void dataGridView1_CellFormatting( Object^ /*sender*/, DataGridViewCellFormattingEventArgs^ e )\n   {\n      // If the column is the Artist column, check the\n      // value.\n      if ( this-&gt;dataGridView1-&gt;Columns[ e-&gt;ColumnIndex ]-&gt;Name-&gt;Equals( &quot;Artist&quot; ) )\n      {\n         if ( e-&gt;Value != nullptr )\n         {\n            // Check for the string &quot;pink&quot; in the cell.\n            String^ stringValue = dynamic_cast&lt;String^&gt;(e-&gt;Value);\n            stringValue = stringValue-&gt;ToLower();\n            if ( (stringValue-&gt;IndexOf( &quot;pink&quot; ) &gt; -1) )\n            {\n               DataGridViewCellStyle^ pinkStyle = gcnew DataGridViewCellStyle;\n\n               //Change the style of the cell.\n               pinkStyle-&gt;BackColor = Color::Pink;\n               pinkStyle-&gt;ForeColor = Color::Black;\n               pinkStyle-&gt;Font = gcnew System::Drawing::Font( &quot;Times New Roman&quot;,8,FontStyle::Bold );\n               e-&gt;CellStyle = pinkStyle;\n            }\n            \n         }\n      }\n      else\n      if ( this-&gt;dataGridView1-&gt;Columns[ e-&gt;ColumnIndex ]-&gt;Name-&gt;Equals( &quot;Release Date&quot; ) )\n      {\n         ShortFormDateFormat( e );\n      }\n   }\n\n\n   //Even though the date internaly stores the year as YYYY, using formatting, the\n   //UI can have the format in YY.  \n   void ShortFormDateFormat( DataGridViewCellFormattingEventArgs^ formatting )\n   {\n      if ( formatting-&gt;Value != nullptr )\n      {\n         try\n         {\n            System::Text::StringBuilder^ dateString = gcnew System::Text::StringBuilder;\n            DateTime theDate = DateTime::Parse( formatting-&gt;Value-&gt;ToString() );\n            dateString-&gt;Append( theDate.Month );\n            dateString-&gt;Append( &quot;/&quot; );\n            dateString-&gt;Append( theDate.Day );\n            dateString-&gt;Append( &quot;/&quot; );\n            dateString-&gt;Append( theDate.Year.ToString()-&gt;Substring( 2 ) );\n            formatting-&gt;Value = dateString-&gt;ToString();\n            formatting-&gt;FormattingApplied = true;\n         }\n         catch ( Exception^ /*notInDateFormat*/ ) \n         {\n            // Set to false in case there are other handlers interested trying to\n            // format this DataGridViewCellFormattingEventArgs instance.\n            formatting-&gt;FormattingApplied = false;\n         }\n\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.GridViewUnbound#1\">    private void dataGridView1_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)\n    {\n        // If the column is the Artist column, check the\n        // value.\n        if (this.dataGridView1.Columns[e.ColumnIndex].Name == &quot;Artist&quot;)\n        {\n            if (e.Value != null)\n            {\n                // Check for the string &quot;pink&quot; in the cell.\n                string stringValue = (string)e.Value;\n                stringValue = stringValue.ToLower();\n                if ((stringValue.IndexOf(&quot;pink&quot;) &gt; -1))\n                {\n                    e.CellStyle.BackColor = Color.Pink;\n                }\n\n            }\n        }\n        else if (this.dataGridView1.Columns[e.ColumnIndex].Name == &quot;Release Date&quot;)\n        {\n            ShortFormDateFormat(e);\n        }\n    }\n\n    //Even though the date internaly stores the year as YYYY, using formatting, the\n    //UI can have the format in YY.  \n    private static void ShortFormDateFormat(DataGridViewCellFormattingEventArgs formatting)\n    {\n        if (formatting.Value != null)\n        {\n            try\n            {\n                System.Text.StringBuilder dateString = new System.Text.StringBuilder();\n                DateTime theDate = DateTime.Parse(formatting.Value.ToString());\n\n                dateString.Append(theDate.Month);\n                dateString.Append(&quot;/&quot;);\n                dateString.Append(theDate.Day);\n                dateString.Append(&quot;/&quot;);\n                dateString.Append(theDate.Year.ToString().Substring(2));\n                formatting.Value = dateString.ToString();\n                formatting.FormattingApplied = true;\n            }\n            catch (FormatException)\n            {\n                // Set to false in case there are other handlers interested trying to\n                // format this DataGridViewCellFormattingEventArgs instance.\n                formatting.FormattingApplied = false;\n            }\n        }\n    }\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>Handle the <a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_CellFormatting\" data-linktype=\"relative-path\">CellFormatting</a> event to customize the conversion of a cell value into a format suitable for display or to customize the appearance of a cell depending on its state or value.  </p>\n<p> The <a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_CellFormatting\" data-linktype=\"relative-path\">CellFormatting</a> event occurs every time each cell is painted, so you should avoid lengthy processing when handling this event. This event also occurs when the cell <a class=\"xref\" href=\"system.windows.forms.datagridviewcell#System_Windows_Forms_DataGridViewCell_FormattedValue_\" data-linktype=\"relative-path\">FormattedValue</a> is retrieved or its <a class=\"xref\" href=\"system.windows.forms.datagridviewcell#System_Windows_Forms_DataGridViewCell_GetFormattedValue_\" data-linktype=\"relative-path\">GetFormattedValue</a> method is called.  </p>\n<p> When you handle the <a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_CellFormatting\" data-linktype=\"relative-path\">CellFormatting</a> event, the <a class=\"xref\" href=\"system.windows.forms.converteventargs#System_Windows_Forms_ConvertEventArgs_Value_\" data-linktype=\"relative-path\">Value</a> property is initialized with the cell value. If you provide custom conversion from the cell value to the display value, set the <a class=\"xref\" href=\"system.windows.forms.converteventargs#System_Windows_Forms_ConvertEventArgs_Value_\" data-linktype=\"relative-path\">Value</a> property to the converted value, ensuring that the new value is of the type specified by the cell <a class=\"xref\" href=\"system.windows.forms.datagridviewcell#System_Windows_Forms_DataGridViewCell_FormattedValueType_\" data-linktype=\"relative-path\">FormattedValueType</a> property. To indicate that no further value formatting is necessary, set the <a class=\"xref\" href=\"system.windows.forms.datagridviewcellformattingeventargs#System_Windows_Forms_DataGridViewCellFormattingEventArgs_FormattingApplied_\" data-linktype=\"relative-path\">FormattingApplied</a> property to <code>true</code>.  </p>\n<p> When the event handler completes, if the <a class=\"xref\" href=\"system.windows.forms.converteventargs#System_Windows_Forms_ConvertEventArgs_Value_\" data-linktype=\"relative-path\">Value</a> is <code>null</code> or is not of the correct type, or the <a class=\"xref\" href=\"system.windows.forms.datagridviewcellformattingeventargs#System_Windows_Forms_DataGridViewCellFormattingEventArgs_FormattingApplied_\" data-linktype=\"relative-path\">FormattingApplied</a> property is <code>false</code>, the <a class=\"xref\" href=\"system.windows.forms.converteventargs#System_Windows_Forms_ConvertEventArgs_Value_\" data-linktype=\"relative-path\">Value</a> is formatted using the <a class=\"xref\" href=\"system.windows.forms.datagridviewcellstyle#System_Windows_Forms_DataGridViewCellStyle_Format_\" data-linktype=\"relative-path\">Format</a>, <a class=\"xref\" href=\"system.windows.forms.datagridviewcellstyle#System_Windows_Forms_DataGridViewCellStyle_NullValue_\" data-linktype=\"relative-path\">NullValue</a>, <a class=\"xref\" href=\"system.windows.forms.datagridviewcellstyle#System_Windows_Forms_DataGridViewCellStyle_DataSourceNullValue_\" data-linktype=\"relative-path\">DataSourceNullValue</a>, and <a class=\"xref\" href=\"system.windows.forms.datagridviewcellstyle#System_Windows_Forms_DataGridViewCellStyle_FormatProvider_\" data-linktype=\"relative-path\">FormatProvider</a> properties of the cell style returned by the <a class=\"xref\" href=\"system.windows.forms.datagridviewcellformattingeventargs#System_Windows_Forms_DataGridViewCellFormattingEventArgs_CellStyle_\" data-linktype=\"relative-path\">CellStyle</a> property, which is initialized using the cell <a class=\"xref\" href=\"system.windows.forms.datagridviewcell#System_Windows_Forms_DataGridViewCell_InheritedStyle_\" data-linktype=\"relative-path\">InheritedStyle</a> property.  </p>\n<p> Regardless of the value of the <a class=\"xref\" href=\"system.windows.forms.datagridviewcellformattingeventargs#System_Windows_Forms_DataGridViewCellFormattingEventArgs_FormattingApplied_\" data-linktype=\"relative-path\">FormattingApplied</a> property, the display properties of the object returned by the <a class=\"xref\" href=\"system.windows.forms.datagridviewcellformattingeventargs#System_Windows_Forms_DataGridViewCellFormattingEventArgs_CellStyle_\" data-linktype=\"relative-path\">CellStyle</a> property are used to render the cell.  </p>\n<p> For more information about custom formatting using the <a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_CellFormatting\" data-linktype=\"relative-path\">CellFormatting</a> event, see <a href=\"../Topic/How%20to:%20Customize%20Data%20Formatting%20in%20the%20Windows%20Forms%20DataGridView%20Control.md\" data-linktype=\"relative-path\">How to: Customize Data Formatting in the Windows Forms DataGridView Control</a>.  </p>\n<p> To avoid performance penalties when handling this event, access the cell through the parameters of the event handler rather than accessing the cell directly.  </p>\n<p> To customize the conversion of a formatted, user-specified value into an actual cell value, handle the <a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_CellParsing\" data-linktype=\"relative-path\">CellParsing</a> event.  </p>\n<p> For more information about handling events, see <a href=\"http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67\" data-linktype=\"external\">NIB: Consuming Events</a>.  </p>\n<p> When you create a DataGridViewCellFormattingEventHandler delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see <a href=\"http://msdn.microsoft.com/en-us/d98fd58b-fa4f-4598-8378-addf4355a115\" data-linktype=\"external\">NIB: Events and Delegates</a>.</p>\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Windows.Forms.DataGridViewCellFormattingEventHandler.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DataGridViewCellFormattingEventHandler\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DataGridViewCellFormattingEventHandler..ctor\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DataGridViewCellFormattingEventHandler.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DataGridViewCellFormattingEventHandler.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DataGridViewCellFormattingEventHandler.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-24 01:41 AM\">\r\n<meta name=\"document_id\" content=\"d9cfa7fe-db17-8ada-2618-8d1df227e8d8\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the method that will handle the  event of a .\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.windows.forms/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Forms.DataGridViewCellFormattingEventHandler\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Windows.Forms.DataGridViewCellFormattingEventHandler.yml","open_to_public_contributors":false,"api_name":["System.Windows.Forms.DataGridViewCellFormattingEventHandler","System.Windows.Forms.DataGridViewCellFormattingEventHandler..ctor","System.Windows.Forms.DataGridViewCellFormattingEventHandler.Invoke","System.Windows.Forms.DataGridViewCellFormattingEventHandler.BeginInvoke","System.Windows.Forms.DataGridViewCellFormattingEventHandler.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Forms.DataGridViewCellFormattingEventHandler","System::Windows::Forms::DataGridViewCellFormattingEventHandler"],"dev_langs":["csharp"],"updated_at":"2017-03-24 01:41 AM","document_id":"d9cfa7fe-db17-8ada-2618-8d1df227e8d8","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/DataGridViewCellFormattingEventHandler.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"DataGridViewCellFormattingEventHandler delegate | Microsoft Docs","_op_ogTitle":"DataGridViewCellFormattingEventHandler delegate","description":"Represents the method that will handle the  event of a .\n","toc_asset_id":"api/_splitted/System.Windows.Forms/toc.json","toc_rel":"_splitted/System.Windows.Forms/toc.json","source_url":"","ms.assetid":"System.Windows.Forms.DataGridViewCellFormattingEventHandler","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.datagridviewcellformattingeventhandler","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.datagridviewcellformattingeventhandler","fileRelativePath":"api/System.Windows.Forms.DataGridViewCellFormattingEventHandler.html"},"themesRelativePathToOutputRoot":"_themes/"}