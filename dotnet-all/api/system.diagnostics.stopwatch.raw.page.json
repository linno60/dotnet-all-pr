{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">Stopwatch</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Provides a set of methods and properties that you can use to accurately measure elapsed time.  </p>\n<p> To browse the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#System/services/monitoring/system/diagnosticts/Stopwatch.cs#ceb0ba9cc88de82e\" data-linktype=\"external\">Reference Source</a>.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public class Stopwatch</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><span class=\"lang-csharp\">Stopwatch</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example demonstrates how to use the Stopwatch class to determine the execution time for an application.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Diagnostics.Stopwatch#1\">Imports System\nImports System.Diagnostics\nImports System.Threading\n\n\nClass Program\n\n    Shared Sub Main(ByVal args() As String)\n        Dim stopWatch As New Stopwatch()\n        stopWatch.Start()\n        Thread.Sleep(10000)\n        stopWatch.Stop()\n        &#39; Get the elapsed time as a TimeSpan value.\n        Dim ts As TimeSpan = stopWatch.Elapsed\n\n        &#39; Format and display the TimeSpan value.\n        Dim elapsedTime As String = String.Format(&quot;{0:00}:{1:00}:{2:00}.{3:00}&quot;, ts.Hours, ts.Minutes, ts.Seconds, ts.Milliseconds / 10)\n        Console.WriteLine( &quot;RunTime &quot; + elapsedTime)\n\n    End Sub &#39;Main\nEnd Class &#39;Program\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Diagnostics.Stopwatch#1\">using System;\nusing System.Diagnostics;\nusing System.Threading;\nclass Program\n{\n    static void Main(string[] args)\n    {\n        Stopwatch stopWatch = new Stopwatch();\n        stopWatch.Start();\n        Thread.Sleep(10000);\n        stopWatch.Stop();\n        // Get the elapsed time as a TimeSpan value.\n        TimeSpan ts = stopWatch.Elapsed;\n\n        // Format and display the TimeSpan value.\n        string elapsedTime = String.Format(&quot;{0:00}:{1:00}:{2:00}.{3:00}&quot;,\n            ts.Hours, ts.Minutes, ts.Seconds,\n            ts.Milliseconds / 10);\n        Console.WriteLine(&quot;RunTime &quot; + elapsedTime);\n    }\n}\n</code></pre><p> The following example demonstrates the use of the Stopwatch class to calculate performance data.  </p>\n<pre><code class=\"lang-cs\" name=\"StopWatchPerfSample#1\">using System;\nusing System.Diagnostics;\n\nnamespace StopWatchSample\n{\n    class OperationsTimer\n    {\n        public static void Main()\n        {\n            DisplayTimerProperties();\n\n            Console.WriteLine();\n            Console.WriteLine(&quot;Press the Enter key to begin:&quot;);\n            Console.ReadLine();\n            Console.WriteLine();\n\n            TimeOperations();\n        }\n\n        public static void DisplayTimerProperties()\n        {\n            // Display the timer frequency and resolution.\n            if (Stopwatch.IsHighResolution)\n            {\n                Console.WriteLine(&quot;Operations timed using the system&#39;s high-resolution performance counter.&quot;);\n            }\n            else \n            {\n                Console.WriteLine(&quot;Operations timed using the DateTime class.&quot;);\n            }\n\n            long frequency = Stopwatch.Frequency;\n            Console.WriteLine(&quot;  Timer frequency in ticks per second = {0}&quot;,\n                frequency);\n            long nanosecPerTick = (1000L*1000L*1000L) / frequency;\n            Console.WriteLine(&quot;  Timer is accurate within {0} nanoseconds&quot;, \n                nanosecPerTick);\n        }\n        \n        private static void TimeOperations()\n        {\n            long nanosecPerTick = (1000L*1000L*1000L) / Stopwatch.Frequency;\n            const long numIterations = 10000;\n\n            // Define the operation title names.\n            String [] operationNames = {&quot;Operation: Int32.Parse(\\&quot;0\\&quot;)&quot;,\n                                           &quot;Operation: Int32.TryParse(\\&quot;0\\&quot;)&quot;,\n                                           &quot;Operation: Int32.Parse(\\&quot;a\\&quot;)&quot;,\n                                           &quot;Operation: Int32.TryParse(\\&quot;a\\&quot;)&quot;};\n         \n\n            // Time four different implementations for parsing \n            // an integer from a string. \n\n            for (int operation = 0; operation &lt;= 3; operation++)\n            {\n                // Define variables for operation statistics.\n                long numTicks = 0;\n                long numRollovers = 0;\n                long maxTicks = 0;\n                long minTicks = Int64.MaxValue;\n                int indexFastest = -1;\n                int indexSlowest = -1;\n                long milliSec = 0;\n\n                Stopwatch time10kOperations = Stopwatch.StartNew();\n\n                // Run the current operation 10001 times.\n                // The first execution time will be tossed\n                // out, since it can skew the average time.\n\n                for (int i=0; i&lt;=numIterations; i++) \n                {\n                    long ticksThisTime = 0;\n                    int inputNum;\n                    Stopwatch timePerParse;\n\n                    switch (operation)\n                    {\n                        case 0:\n                            // Parse a valid integer using\n                            // a try-catch statement.\n\n                            // Start a new stopwatch timer.\n                            timePerParse = Stopwatch.StartNew();\n\n                            try \n                            {\n                                inputNum = Int32.Parse(&quot;0&quot;);\n                            }\n                            catch (FormatException)\n                            {\n                                inputNum = 0;\n                            }\n\n                            // Stop the timer, and save the\n                            // elapsed ticks for the operation.\n\n                            timePerParse.Stop();\n                            ticksThisTime = timePerParse.ElapsedTicks;\n                            break;\n                        case 1:\n                            // Parse a valid integer using\n                            // the TryParse statement.\n\n                            // Start a new stopwatch timer.\n                            timePerParse = Stopwatch.StartNew();\n\n                            if (!Int32.TryParse(&quot;0&quot;, out inputNum))\n                            { \n                                inputNum = 0;\n                            }\n\n                            // Stop the timer, and save the\n                            // elapsed ticks for the operation.\n                            timePerParse.Stop();\n                            ticksThisTime = timePerParse.ElapsedTicks;\n                            break;\n                        case 2:\n                            // Parse an invalid value using\n                            // a try-catch statement.\n\n                            // Start a new stopwatch timer.\n                            timePerParse = Stopwatch.StartNew();\n\n                            try \n                            {\n                                inputNum = Int32.Parse(&quot;a&quot;);\n                            }\n                            catch (FormatException)\n                            {\n                                inputNum = 0;\n                            }\n\n                            // Stop the timer, and save the\n                            // elapsed ticks for the operation.\n                            timePerParse.Stop();\n                            ticksThisTime = timePerParse.ElapsedTicks;\n                            break;\n                        case 3:\n                            // Parse an invalid value using\n                            // the TryParse statement.\n\n                            // Start a new stopwatch timer.\n                            timePerParse = Stopwatch.StartNew();\n\n                            if (!Int32.TryParse(&quot;a&quot;, out inputNum))\n                            { \n                                inputNum = 0;\n                            }\n\n                            // Stop the timer, and save the\n                            // elapsed ticks for the operation.\n                            timePerParse.Stop();\n                            ticksThisTime = timePerParse.ElapsedTicks;\n                            break;\n\n                        default:\n                            break;\n                    }\n\n                    // Skip over the time for the first operation,\n                    // just in case it caused a one-time\n                    // performance hit.\n                    if (i == 0)\n                    {\n                        time10kOperations.Reset();\n                        time10kOperations.Start();\n                    }\n                    else \n                    {\n\n                        // Update operation statistics\n                        // for iterations 1-10001.\n                        if (maxTicks &lt; ticksThisTime)\n                        {\n                            indexSlowest = i;\n                            maxTicks = ticksThisTime;\n                        }\n                        if (minTicks &gt; ticksThisTime)\n                        {\n                            indexFastest = i;\n                            minTicks = ticksThisTime;\n                        }\n                        numTicks += ticksThisTime;\n                        if (numTicks &lt; ticksThisTime)\n                        {\n                            // Keep track of rollovers.\n                            numRollovers ++;\n                        }\n                    }\n                }  \n                \n                // Display the statistics for 10000 iterations.\n\n                time10kOperations.Stop();\n                milliSec = time10kOperations.ElapsedMilliseconds;\n\n                Console.WriteLine();\n                Console.WriteLine(&quot;{0} Summary:&quot;, operationNames[operation]);\n                Console.WriteLine(&quot;  Slowest time:  #{0}/{1} = {2} ticks&quot;,\n                    indexSlowest, numIterations, maxTicks);\n                Console.WriteLine(&quot;  Fastest time:  #{0}/{1} = {2} ticks&quot;,\n                    indexFastest, numIterations, minTicks);\n                Console.WriteLine(&quot;  Average time:  {0} ticks = {1} nanoseconds&quot;, \n                    numTicks / numIterations, \n                    (numTicks * nanosecPerTick) / numIterations );\n                Console.WriteLine(&quot;  Total time looping through {0} operations: {1} milliseconds&quot;, \n                    numIterations, milliSec);\n            }\n        }\n     }\n}\n \n</code></pre><pre><code class=\"lang-cpp\" name=\"StopWatchPerfSample#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Diagnostics;\n\nvoid DisplayTimerProperties()\n{\n   // Display the timer frequency and resolution.\n   if ( Stopwatch::IsHighResolution )\n   {\n      Console::WriteLine( &quot;Operations timed using the system&#39;s high-resolution performance counter.&quot; );\n   }\n   else\n   {\n      Console::WriteLine( &quot;Operations timed using the DateTime class.&quot; );\n   }\n\n   Int64 frequency = Stopwatch::Frequency;\n   Console::WriteLine( &quot;  Timer frequency in ticks per second = {0}&quot;, frequency );\n   Int64 nanosecPerTick = (1000L * 1000L * 1000L) / frequency;\n   Console::WriteLine( &quot;  Timer is accurate within {0} nanoseconds&quot;, nanosecPerTick );\n}\n\nvoid TimeOperations()\n{\n   Int64 nanosecPerTick = (1000L * 1000L * 1000L) / Stopwatch::Frequency;\n   const long numIterations = 10000;\n   \n   // Define the operation title names.\n   array&lt;String^&gt;^operationNames = {&quot;Operation: Int32.Parse(\\&quot;0\\&quot;)&quot;,&quot;Operation: Int32.TryParse(\\&quot;0\\&quot;)&quot;,&quot;Operation: Int32.Parse(\\&quot;a\\&quot;)&quot;,&quot;Operation: Int32.TryParse(\\&quot;a\\&quot;)&quot;};\n   \n   // Time four different implementations for parsing \n   // an integer from a string. \n   for ( int operation = 0; operation &lt;= 3; operation++ )\n   {\n      // Define variables for operation statistics.\n      Int64 numTicks = 0;\n      Int64 numRollovers = 0;\n      Int64 maxTicks = 0;\n      Int64 minTicks = Int64::MaxValue;\n      int indexFastest = -1;\n      int indexSlowest = -1;\n      Int64 milliSec = 0;\n      Stopwatch ^ time10kOperations = Stopwatch::StartNew();\n      \n      // Run the current operation 10001 times.\n      // The first execution time will be tossed\n      // out, since it can skew the average time.\n      for ( int i = 0; i &lt;= numIterations; i++ )\n      {\n         Int64 ticksThisTime = 0;\n         int inputNum;\n         Stopwatch ^ timePerParse;\n         switch ( operation )\n         {\n            case 0:\n               \n               // Parse a valid integer using\n               // a try-catch statement.\n               // Start a new stopwatch timer.\n               timePerParse = Stopwatch::StartNew();\n               try\n               {\n                  inputNum = Int32::Parse( &quot;0&quot; );\n               }\n               catch ( FormatException^ ) \n               {\n                  inputNum = 0;\n               }\n\n               // Stop the timer, and save the\n               // elapsed ticks for the operation.\n               timePerParse-&gt;Stop();\n               ticksThisTime = timePerParse-&gt;ElapsedTicks;\n               break;\n\n            case 1:\n               \n               // Parse a valid integer using\n               // the TryParse statement.\n               // Start a new stopwatch timer.\n               timePerParse = Stopwatch::StartNew();\n               if (  !Int32::TryParse( &quot;0&quot;, inputNum ) )\n               {\n                  inputNum = 0;\n               }\n               \n               // Stop the timer, and save the\n               // elapsed ticks for the operation.\n               timePerParse-&gt;Stop();\n               ticksThisTime = timePerParse-&gt;ElapsedTicks;\n               break;\n\n            case 2:\n               \n               // Parse an invalid value using\n               // a try-catch statement.\n               // Start a new stopwatch timer.\n               timePerParse = Stopwatch::StartNew();\n               try\n               {\n                  inputNum = Int32::Parse( &quot;a&quot; );\n               }\n               catch ( FormatException^ ) \n               {\n                  inputNum = 0;\n               }\n\n               // Stop the timer, and save the\n               // elapsed ticks for the operation.\n               timePerParse-&gt;Stop();\n               ticksThisTime = timePerParse-&gt;ElapsedTicks;\n               break;\n\n            case 3:\n               \n               // Parse an invalid value using\n               // the TryParse statement.\n               // Start a new stopwatch timer.\n               timePerParse = Stopwatch::StartNew();\n               if (  !Int32::TryParse( &quot;a&quot;, inputNum ) )\n               {\n                  inputNum = 0;\n               }\n               \n               // Stop the timer, and save the\n               // elapsed ticks for the operation.\n               timePerParse-&gt;Stop();\n               ticksThisTime = timePerParse-&gt;ElapsedTicks;\n               break;\n\n            default:\n               break;\n         }\n\n         // Skip over the time for the first operation,\n         // just in case it caused a one-time\n         // performance hit.\n         if ( i == 0 )\n         {\n            time10kOperations-&gt;Reset();\n            time10kOperations-&gt;Start();\n         }\n         else\n         {\n            // Update operation statistics\n            // for iterations 1-10001.\n            if ( maxTicks &lt; ticksThisTime )\n            {\n               indexSlowest = i;\n               maxTicks = ticksThisTime;\n            }\n            if ( minTicks &gt; ticksThisTime )\n            {\n               indexFastest = i;\n               minTicks = ticksThisTime;\n            }\n            numTicks += ticksThisTime;\n            if ( numTicks &lt; ticksThisTime )\n            {\n               // Keep track of rollovers.\n               numRollovers++;\n            }\n         }\n      }\n      \n      // Display the statistics for 10000 iterations.\n      time10kOperations-&gt;Stop();\n      milliSec = time10kOperations-&gt;ElapsedMilliseconds;\n      Console::WriteLine();\n      Console::WriteLine( &quot;{0} Summary:&quot;, operationNames[ operation ] );\n      Console::WriteLine( &quot;  Slowest time:  #{0}/{1} = {2} ticks&quot;, indexSlowest, numIterations, maxTicks );\n      Console::WriteLine( &quot;  Fastest time:  #{0}/{1} = {2} ticks&quot;, indexFastest, numIterations, minTicks );\n      Console::WriteLine( &quot;  Average time:  {0} ticks = {1} nanoseconds&quot;, numTicks / numIterations, (numTicks * nanosecPerTick) / numIterations );\n      Console::WriteLine( &quot;  Total time looping through {0} operations: {1} milliseconds&quot;, numIterations, milliSec );\n\n   }\n}\n\nint main()\n{\n   DisplayTimerProperties();\n   Console::WriteLine();\n   Console::WriteLine( &quot;Press the Enter key to begin:&quot; );\n   Console::ReadLine();\n   Console::WriteLine();\n   TimeOperations();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"StopWatchPerfSample#1\">Imports System\nImports System.Diagnostics\n\nClass OperationsTimer\n   \n   Public Shared Sub Main()\n      DisplayTimerProperties()\n      \n      Console.WriteLine()\n      Console.WriteLine(&quot;Press the Enter key to begin:&quot;)\n      Console.ReadLine()\n      Console.WriteLine()\n      \n      TimeOperations()\n   End Sub\n   \n   \n   Public Shared Sub DisplayTimerProperties()\n\n      &#39; Display the timer frequency and resolution.\n      If Stopwatch.IsHighResolution Then\n         Console.WriteLine(&quot;Operations timed using the system&#39;s high-resolution performance counter.&quot;)\n      Else\n         Console.WriteLine(&quot;Operations timed using the DateTime class.&quot;)\n      End If\n      \n      Dim frequency As Long = Stopwatch.Frequency\n      Console.WriteLine(&quot;  Timer frequency in ticks per second = {0}&quot;, frequency)\n      Dim nanosecPerTick As Long = 1000000000 / frequency\n      Console.WriteLine(&quot;  Timer is accurate within {0} nanoseconds&quot;, nanosecPerTick)\n\n   End Sub\n   \n   Private Shared Sub TimeOperations()\n\n      Dim nanosecPerTick As Long = 1000000000 / Stopwatch.Frequency\n      Const numIterations As Long = 10000\n      \n      &#39; Define the operation title names.\n      Dim operationNames As String() =  _\n        {&quot;Operation: Int32.Parse(&quot;&quot;0&quot;&quot;)&quot;, _\n         &quot;Operation: Int32.TryParse(&quot;&quot;0&quot;&quot;)&quot;, _\n         &quot;Operation: Int32.Parse(&quot;&quot;a&quot;&quot;)&quot;, _\n         &quot;Operation: Int32.TryParse(&quot;&quot;a&quot;&quot;)&quot;}\n      \n      &#39; Time four different implementations for parsing \n      &#39; an integer from a string. \n\n      Dim operation As Integer\n      For operation = 0 To 3\n         &#39; Define variables for operation statistics.\n         Dim numTicks As Long = 0\n         Dim numRollovers As Long = 0\n         Dim maxTicks As Long = 0\n         Dim minTicks As Long = Int64.MaxValue\n         Dim indexFastest As Integer = - 1\n         Dim indexSlowest As Integer = - 1\n         Dim milliSec As Long = 0\n         \n         Dim time10kOperations As Stopwatch = Stopwatch.StartNew()\n         \n         &#39; Run the current operation 10001 times.\n         &#39; The first execution time will be tossed\n         &#39; out, since it can skew the average time.\n         Dim i As Integer\n         For i = 0 To numIterations\n            Dim ticksThisTime As Long = 0\n            Dim inputNum As Integer\n            Dim timePerParse As Stopwatch\n            \n            Select Case operation\n               Case 0\n                  &#39; Parse a valid integer using\n                  &#39; a try-catch statement.\n                  &#39; Start a new stopwatch timer.\n                  timePerParse = Stopwatch.StartNew()\n                  \n                  Try\n                     inputNum = Int32.Parse(&quot;0&quot;)\n                  Catch e As FormatException\n                     inputNum = 0\n                  End Try\n                  \n                  &#39; Stop the timer, and save the\n                  &#39; elapsed ticks for the operation.\n                  timePerParse.Stop()\n                  ticksThisTime = timePerParse.ElapsedTicks\n               Case 1\n                  &#39; Parse a valid integer using\n                  &#39; the TryParse statement.\n                  &#39; Start a new stopwatch timer.\n                  timePerParse = Stopwatch.StartNew()\n                  \n                  If Not Int32.TryParse(&quot;0&quot;, inputNum) Then\n                     inputNum = 0\n                  End If\n                  \n                  &#39; Stop the timer, and save the\n                  &#39; elapsed ticks for the operation.\n                  timePerParse.Stop()\n                  ticksThisTime = timePerParse.ElapsedTicks\n               Case 2\n                  &#39; Parse an invalid value using\n                  &#39; a try-catch statement.\n                  &#39; Start a new stopwatch timer.\n                  timePerParse = Stopwatch.StartNew()\n                  \n                  Try\n                     inputNum = Int32.Parse(&quot;a&quot;)\n                  Catch e As FormatException\n                     inputNum = 0\n                  End Try\n                  \n                  &#39; Stop the timer, and save the\n                  &#39; elapsed ticks for the operation.\n                  timePerParse.Stop()\n                  ticksThisTime = timePerParse.ElapsedTicks\n               Case 3\n                  &#39; Parse an invalid value using\n                  &#39; the TryParse statement.\n                  &#39; Start a new stopwatch timer.\n                  timePerParse = Stopwatch.StartNew()\n                  \n                  If Not Int32.TryParse(&quot;a&quot;, inputNum) Then\n                     inputNum = 0\n                  End If\n                  \n                  &#39; Stop the timer, and save the\n                  &#39; elapsed ticks for the operation.\n                  timePerParse.Stop()\n                  ticksThisTime = timePerParse.ElapsedTicks\n               \n               Case Else\n            End Select\n            \n            &#39; Skip over the time for the first operation,\n            &#39; just in case it caused a one-time\n            &#39; performance hit.\n            If i = 0 Then\n               time10kOperations.Reset()\n               time10kOperations.Start()\n            Else\n               \n               &#39; Update operation statistics\n               &#39; for iterations 1-10001.\n               If maxTicks &lt; ticksThisTime Then\n                  indexSlowest = i\n                  maxTicks = ticksThisTime\n               End If\n               If minTicks &gt; ticksThisTime Then\n                  indexFastest = i\n                  minTicks = ticksThisTime\n               End If\n               numTicks += ticksThisTime\n               If numTicks &lt; ticksThisTime Then\n                  &#39; Keep track of rollovers.\n                  numRollovers += 1\n               End If\n            End If\n         Next i\n         \n         &#39; Display the statistics for 10000 iterations.\n         time10kOperations.Stop()\n         milliSec = time10kOperations.ElapsedMilliseconds\n         \n         Console.WriteLine()\n         Console.WriteLine(&quot;{0} Summary:&quot;, operationNames(operation))\n         Console.WriteLine(&quot;  Slowest time:  #{0}/{1} = {2} ticks&quot;, _\n            indexSlowest, numIterations, maxTicks)\n         Console.WriteLine(&quot;  Fastest time:  #{0}/{1} = {2} ticks&quot;, _\n            indexFastest, numIterations, minTicks)\n         Console.WriteLine(&quot;  Average time:  {0} ticks = {1} nanoseconds&quot;, _\n            numTicks / numIterations, numTicks * nanosecPerTick / numIterations)\n         Console.WriteLine(&quot;  Total time looping through {0} operations: {1} milliseconds&quot;, _\n            numIterations, milliSec)\n      Next operation\n\n   End Sub\nEnd Class\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<div class=\"NOTE\"><h5>Note</h5><p> To view the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#System/services/monitoring/system/diagnosticts/Stopwatch.cs#ceb0ba9cc88de82e\" data-linktype=\"external\">Reference Source</a>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <a href=\"http://referencesource.microsoft.com/\" data-linktype=\"external\">instructions</a>.  </p>\n</div>\n<p> A Stopwatch instance can measure elapsed time for one interval, or the total of elapsed time across multiple intervals. In a typical Stopwatch scenario, you call the <a class=\"xref\" href=\"system.diagnostics.stopwatch#System_Diagnostics_Stopwatch_Start_\" data-linktype=\"relative-path\">Start</a> method, then eventually call the <a class=\"xref\" href=\"system.diagnostics.stopwatch#System_Diagnostics_Stopwatch_Stop_\" data-linktype=\"relative-path\">Stop</a> method, and then you check elapsed time using the <a class=\"xref\" href=\"system.diagnostics.stopwatch#System_Diagnostics_Stopwatch_Elapsed_\" data-linktype=\"relative-path\">Elapsed</a> property.  </p>\n<p> A Stopwatch instance is either running or stopped; use <a class=\"xref\" href=\"system.diagnostics.stopwatch#System_Diagnostics_Stopwatch_IsRunning_\" data-linktype=\"relative-path\">IsRunning</a> to determine the current state of a Stopwatch. Use <a class=\"xref\" href=\"system.diagnostics.stopwatch#System_Diagnostics_Stopwatch_Start_\" data-linktype=\"relative-path\">Start</a> to begin measuring elapsed time; use <a class=\"xref\" href=\"system.diagnostics.stopwatch#System_Diagnostics_Stopwatch_Stop_\" data-linktype=\"relative-path\">Stop</a> to stop measuring elapsed time. Query the elapsed time value through the properties <a class=\"xref\" href=\"system.diagnostics.stopwatch#System_Diagnostics_Stopwatch_Elapsed_\" data-linktype=\"relative-path\">Elapsed</a>, <a class=\"xref\" href=\"system.diagnostics.stopwatch#System_Diagnostics_Stopwatch_ElapsedMilliseconds_\" data-linktype=\"relative-path\">ElapsedMilliseconds</a>, or <a class=\"xref\" href=\"system.diagnostics.stopwatch#System_Diagnostics_Stopwatch_ElapsedTicks_\" data-linktype=\"relative-path\">ElapsedTicks</a>. You can query the elapsed time properties while the instance is running or stopped. The elapsed time properties steadily increase while the Stopwatch is running; they remain constant when the instance is stopped.  </p>\n<p> By default, the elapsed time value of a Stopwatch instance equals the total of all measured time intervals. Each call to <a class=\"xref\" href=\"system.diagnostics.stopwatch#System_Diagnostics_Stopwatch_Start_\" data-linktype=\"relative-path\">Start</a> begins counting at the cumulative elapsed time; each call to <a class=\"xref\" href=\"system.diagnostics.stopwatch#System_Diagnostics_Stopwatch_Stop_\" data-linktype=\"relative-path\">Stop</a> ends the current interval measurement and freezes the cumulative elapsed time value. Use the <a class=\"xref\" href=\"system.diagnostics.stopwatch#System_Diagnostics_Stopwatch_Reset_\" data-linktype=\"relative-path\">Reset</a> method to clear the cumulative elapsed time in an existing Stopwatch instance.  </p>\n<p> The Stopwatch measures elapsed time by counting timer ticks in the underlying timer mechanism. If the installed hardware and operating system support a high-resolution performance counter, then the Stopwatch class uses that counter to measure elapsed time. Otherwise, the Stopwatch class uses the system timer to measure elapsed time. Use the <a class=\"xref\" href=\"system.diagnostics.stopwatch#System_Diagnostics_Stopwatch_Frequency\" data-linktype=\"relative-path\">Frequency</a> and <a class=\"xref\" href=\"system.diagnostics.stopwatch#System_Diagnostics_Stopwatch_IsHighResolution\" data-linktype=\"relative-path\">IsHighResolution</a> fields to determine the precision and resolution of the Stopwatch timing implementation.  </p>\n<p> The Stopwatch class assists the manipulation of timing-related performance counters within managed code. Specifically, the <a class=\"xref\" href=\"system.diagnostics.stopwatch#System_Diagnostics_Stopwatch_Frequency\" data-linktype=\"relative-path\">Frequency</a> field and <a class=\"xref\" href=\"system.diagnostics.stopwatch#System_Diagnostics_Stopwatch_GetTimestamp_\" data-linktype=\"relative-path\">GetTimestamp</a> method can be used in place of the unmanaged Win32 APIs <code>QueryPerformanceFrequency</code> and <code>QueryPerformanceCounter</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> On a multiprocessor computer, it does not matter which processor the thread runs on. However, because of bugs in the BIOS or the Hardware Abstraction Layer (HAL), you can get different timing results on different processors. To specify processor affinity for a thread, use the <a class=\"xref\" href=\"system.diagnostics.processthread#System_Diagnostics_ProcessThread_ProcessorAffinity_\" data-linktype=\"relative-path\">ProcessorAffinity</a> method.</p>\n</div>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Diagnostics_Stopwatch__ctor_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Diagnostics_Stopwatch__ctor\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Stopwatch()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.stopwatch\" data-linktype=\"relative-path\">Stopwatch</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public Stopwatch ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The returned <a class=\"xref\" href=\"system.diagnostics.stopwatch\" data-linktype=\"relative-path\">Stopwatch</a> instance is stopped, and the elapsed time property of the instance is zero.  </p>\n<p> Use the <a class=\"xref\" href=\"system.diagnostics.stopwatch#System_Diagnostics_Stopwatch_Start_\" data-linktype=\"relative-path\">Start</a> method to begin measuring elapsed time with the new <a class=\"xref\" href=\"system.diagnostics.stopwatch\" data-linktype=\"relative-path\">Stopwatch</a> instance. Use the <a class=\"xref\" href=\"system.diagnostics.stopwatch#System_Diagnostics_Stopwatch_StartNew_\" data-linktype=\"relative-path\">StartNew</a> method to initialize a new <a class=\"xref\" href=\"system.diagnostics.stopwatch\" data-linktype=\"relative-path\">Stopwatch</a> instance and immediately start it.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Fields\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Diagnostics_Stopwatch_Frequency\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Frequency</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the frequency of the timer as the number of ticks per second. This field is read-only.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly long Frequency;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The timer frequency indicates the timer precision and resolution. For example, a timer frequency of 2 million ticks per second equals a timer resolution of 500 nanoseconds per tick. In other words, because one second equals 1 billion nanoseconds, a timer frequency of 2 million ticks per second is equivalent to 2 million ticks per 1 billion nanoseconds, which can be further simplified to 1 tick per 500 nanoseconds.  </p>\n<p> The Frequency value depends on the resolution of the underlying timing mechanism. If the installed hardware and operating system support a high-resolution performance counter, then the Frequency value reflects the frequency of that counter. Otherwise, the Frequency value is based on the system timer frequency.  </p>\n<p> Because the <a class=\"xref\" href=\"system.diagnostics.stopwatch\" data-linktype=\"relative-path\">Stopwatch</a> frequency depends on the installed hardware and operating system, the Frequency value remains constant while the system is running.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Diagnostics_Stopwatch_IsHighResolution\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsHighResolution</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Indicates whether the timer is based on a high-resolution performance counter. This field is read-only.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly bool IsHighResolution;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The timer used by the <a class=\"xref\" href=\"system.diagnostics.stopwatch\" data-linktype=\"relative-path\">Stopwatch</a> class depends on the system hardware and operating system. IsHighResolution is <code>true</code> if the <a class=\"xref\" href=\"system.diagnostics.stopwatch\" data-linktype=\"relative-path\">Stopwatch</a> timer is based on a high-resolution performance counter. Otherwise, IsHighResolution is <code>false</code>, which indicates that the <a class=\"xref\" href=\"system.diagnostics.stopwatch\" data-linktype=\"relative-path\">Stopwatch</a> timer is based on the system timer.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Diagnostics_Stopwatch_Elapsed_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Diagnostics_Stopwatch_Elapsed\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Elapsed</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the total elapsed time measured by the current instance.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public TimeSpan Elapsed { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A read-only <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> representing the total elapsed time measured by the current instance.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>In a typical <a class=\"xref\" href=\"system.diagnostics.stopwatch\" data-linktype=\"relative-path\">Stopwatch</a> scenario, you call the <a class=\"xref\" href=\"system.diagnostics.stopwatch#System_Diagnostics_Stopwatch_Start_\" data-linktype=\"relative-path\">Start</a> method, then eventually call the <a class=\"xref\" href=\"system.diagnostics.stopwatch#System_Diagnostics_Stopwatch_Stop_\" data-linktype=\"relative-path\">Stop</a> method, and then you check elapsed time using the Elapsed property.  </p>\n<p> Use the Elapsed property to retrieve the elapsed time value using <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> methods and properties. For example, you can format the returned <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> instance into a text representation, or pass it to another class that requires a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> parameter.  </p>\n<p> You can query the properties Elapsed, <a class=\"xref\" href=\"system.diagnostics.stopwatch#System_Diagnostics_Stopwatch_ElapsedMilliseconds_\" data-linktype=\"relative-path\">ElapsedMilliseconds</a>, and <a class=\"xref\" href=\"system.diagnostics.stopwatch#System_Diagnostics_Stopwatch_ElapsedTicks_\" data-linktype=\"relative-path\">ElapsedTicks</a> while the <a class=\"xref\" href=\"system.diagnostics.stopwatch\" data-linktype=\"relative-path\">Stopwatch</a> instance is running or stopped. The elapsed time properties steadily increase while the <a class=\"xref\" href=\"system.diagnostics.stopwatch\" data-linktype=\"relative-path\">Stopwatch</a> is running; they remain constant when the instance is stopped.  </p>\n<p> By default, the elapsed time value of a <a class=\"xref\" href=\"system.diagnostics.stopwatch\" data-linktype=\"relative-path\">Stopwatch</a> instance equals the total of all measured time intervals. Each call to <a class=\"xref\" href=\"system.diagnostics.stopwatch#System_Diagnostics_Stopwatch_Start_\" data-linktype=\"relative-path\">Start</a> begins counting at the cumulative elapsed time; each call to <a class=\"xref\" href=\"system.diagnostics.stopwatch#System_Diagnostics_Stopwatch_Stop_\" data-linktype=\"relative-path\">Stop</a> ends the current interval measurement and freezes the cumulative elapsed time value. Use the <a class=\"xref\" href=\"system.diagnostics.stopwatch#System_Diagnostics_Stopwatch_Reset_\" data-linktype=\"relative-path\">Reset</a> method to clear the cumulative elapsed time in an existing <a class=\"xref\" href=\"system.diagnostics.stopwatch\" data-linktype=\"relative-path\">Stopwatch</a> instance.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Diagnostics_Stopwatch_ElapsedMilliseconds_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Diagnostics_Stopwatch_ElapsedMilliseconds\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ElapsedMilliseconds</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the total elapsed time measured by the current instance, in milliseconds.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public long ElapsedMilliseconds { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A read-only long integer representing the total number of milliseconds measured by the current instance.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This property represents elapsed time rounded down to the nearest whole millisecond value. For higher precision measurements, use the <a class=\"xref\" href=\"system.diagnostics.stopwatch#System_Diagnostics_Stopwatch_Elapsed_\" data-linktype=\"relative-path\">Elapsed</a> or <a class=\"xref\" href=\"system.diagnostics.stopwatch#System_Diagnostics_Stopwatch_ElapsedTicks_\" data-linktype=\"relative-path\">ElapsedTicks</a> properties.  </p>\n<p> You can query the properties <a class=\"xref\" href=\"system.diagnostics.stopwatch#System_Diagnostics_Stopwatch_Elapsed_\" data-linktype=\"relative-path\">Elapsed</a>, ElapsedMilliseconds, and <a class=\"xref\" href=\"system.diagnostics.stopwatch#System_Diagnostics_Stopwatch_ElapsedTicks_\" data-linktype=\"relative-path\">ElapsedTicks</a> while the <a class=\"xref\" href=\"system.diagnostics.stopwatch\" data-linktype=\"relative-path\">Stopwatch</a> instance is running or stopped. The elapsed time properties steadily increase while the <a class=\"xref\" href=\"system.diagnostics.stopwatch\" data-linktype=\"relative-path\">Stopwatch</a> is running; they remain constant when the instance is stopped.  </p>\n<p> By default, the elapsed time value of a <a class=\"xref\" href=\"system.diagnostics.stopwatch\" data-linktype=\"relative-path\">Stopwatch</a> instance equals the total of all measured time intervals. Each call to <a class=\"xref\" href=\"system.diagnostics.stopwatch#System_Diagnostics_Stopwatch_Start_\" data-linktype=\"relative-path\">Start</a> begins counting at the cumulative elapsed time; each call to <a class=\"xref\" href=\"system.diagnostics.stopwatch#System_Diagnostics_Stopwatch_Stop_\" data-linktype=\"relative-path\">Stop</a> ends the current interval measurement and freezes the cumulative elapsed time value. Use the <a class=\"xref\" href=\"system.diagnostics.stopwatch#System_Diagnostics_Stopwatch_Reset_\" data-linktype=\"relative-path\">Reset</a> method to clear the cumulative elapsed time in an existing <a class=\"xref\" href=\"system.diagnostics.stopwatch\" data-linktype=\"relative-path\">Stopwatch</a> instance.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Diagnostics_Stopwatch_ElapsedTicks_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Diagnostics_Stopwatch_ElapsedTicks\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ElapsedTicks</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the total elapsed time measured by the current instance, in timer ticks.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public long ElapsedTicks { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A read-only long integer representing the total number of timer ticks measured by the current instance.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This property represents the number of elapsed ticks in the underlying timer mechanism. A tick is the smallest unit of time that the <a class=\"xref\" href=\"system.diagnostics.stopwatch\" data-linktype=\"relative-path\">Stopwatch</a> timer can measure. Use the <a class=\"xref\" href=\"system.diagnostics.stopwatch#System_Diagnostics_Stopwatch_Frequency\" data-linktype=\"relative-path\">Frequency</a> field to convert the ElapsedTicks value into a number of seconds.  </p>\n<p> You can query the properties <a class=\"xref\" href=\"system.diagnostics.stopwatch#System_Diagnostics_Stopwatch_Elapsed_\" data-linktype=\"relative-path\">Elapsed</a>, <a class=\"xref\" href=\"system.diagnostics.stopwatch#System_Diagnostics_Stopwatch_ElapsedMilliseconds_\" data-linktype=\"relative-path\">ElapsedMilliseconds</a>, and ElapsedTicks while the <a class=\"xref\" href=\"system.diagnostics.stopwatch\" data-linktype=\"relative-path\">Stopwatch</a> instance is running or stopped. The elapsed time properties steadily increase while the <a class=\"xref\" href=\"system.diagnostics.stopwatch\" data-linktype=\"relative-path\">Stopwatch</a> is running; they remain constant when the instance is stopped.  </p>\n<p> By default, the elapsed time value of a <a class=\"xref\" href=\"system.diagnostics.stopwatch\" data-linktype=\"relative-path\">Stopwatch</a> instance equals the total of all measured time intervals. Each call to <a class=\"xref\" href=\"system.diagnostics.stopwatch#System_Diagnostics_Stopwatch_Start_\" data-linktype=\"relative-path\">Start</a> begins counting at the cumulative elapsed time; each call to <a class=\"xref\" href=\"system.diagnostics.stopwatch#System_Diagnostics_Stopwatch_Stop_\" data-linktype=\"relative-path\">Stop</a> ends the current interval measurement and freezes the cumulative elapsed time value. Use the <a class=\"xref\" href=\"system.diagnostics.stopwatch#System_Diagnostics_Stopwatch_Reset_\" data-linktype=\"relative-path\">Reset</a> method to clear the cumulative elapsed time in an existing <a class=\"xref\" href=\"system.diagnostics.stopwatch\" data-linktype=\"relative-path\">Stopwatch</a> instance.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> <a class=\"xref\" href=\"system.diagnostics.stopwatch\" data-linktype=\"relative-path\">Stopwatch</a> ticks are different from <a class=\"xref\" href=\"system.datetime#System_DateTime_Ticks_\" data-linktype=\"relative-path\">Ticks</a>. Each tick in the <a class=\"xref\" href=\"system.datetime#System_DateTime_Ticks_\" data-linktype=\"relative-path\">Ticks</a> value represents one 100-nanosecond interval. Each tick in the ElapsedTicks value represents the time interval equal to 1 second divided by the <a class=\"xref\" href=\"system.diagnostics.stopwatch#System_Diagnostics_Stopwatch_Frequency\" data-linktype=\"relative-path\">Frequency</a>.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Diagnostics_Stopwatch_IsRunning_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Diagnostics_Stopwatch_IsRunning\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsRunning</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value indicating whether the <a class=\"xref\" href=\"system.diagnostics.stopwatch\" data-linktype=\"relative-path\">Stopwatch</a> timer is running.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsRunning { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the <a class=\"xref\" href=\"system.diagnostics.stopwatch\" data-linktype=\"relative-path\">Stopwatch</a> instance is currently running and measuring elapsed time for an interval; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.diagnostics.stopwatch\" data-linktype=\"relative-path\">Stopwatch</a> instance begins running with a call to <a class=\"xref\" href=\"system.diagnostics.stopwatch#System_Diagnostics_Stopwatch_Start_\" data-linktype=\"relative-path\">Start</a> or <a class=\"xref\" href=\"system.diagnostics.stopwatch#System_Diagnostics_Stopwatch_StartNew_\" data-linktype=\"relative-path\">StartNew</a>. The instance stops running with a call to <a class=\"xref\" href=\"system.diagnostics.stopwatch#System_Diagnostics_Stopwatch_Stop_\" data-linktype=\"relative-path\">Stop</a> or <a class=\"xref\" href=\"system.diagnostics.stopwatch#System_Diagnostics_Stopwatch_Reset_\" data-linktype=\"relative-path\">Reset</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Diagnostics_Stopwatch_GetTimestamp_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Diagnostics_Stopwatch_GetTimestamp\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetTimestamp()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the current number of ticks in the timer mechanism.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static long GetTimestamp ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A long integer representing the tick counter value of the underlying timer mechanism.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If the <a class=\"xref\" href=\"system.diagnostics.stopwatch\" data-linktype=\"relative-path\">Stopwatch</a> class uses a high-resolution performance counter, GetTimestamp returns the current value of that counter. If the <a class=\"xref\" href=\"system.diagnostics.stopwatch\" data-linktype=\"relative-path\">Stopwatch</a> class uses the system timer, GetTimestamp returns the current <a class=\"xref\" href=\"system.datetime#System_DateTime_Ticks_\" data-linktype=\"relative-path\">Ticks</a> property of the <a class=\"xref\" href=\"system.datetime#System_DateTime_Now_\" data-linktype=\"relative-path\">Now</a> instance.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Diagnostics_Stopwatch_Reset_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Diagnostics_Stopwatch_Reset\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Reset()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Stops time interval measurement and resets the elapsed time to zero.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void Reset ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.diagnostics.stopwatch\" data-linktype=\"relative-path\">Stopwatch</a> instance calculates and retains the cumulative elapsed time across multiple time intervals, until the instance is reset. Use <a class=\"xref\" href=\"system.diagnostics.stopwatch#System_Diagnostics_Stopwatch_Stop_\" data-linktype=\"relative-path\">Stop</a> to stop the current interval measurement and retain the cumulative elapsed time value. Use Reset to stop any interval measurement in progress and clear the elapsed time value.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Diagnostics_Stopwatch_Restart_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Diagnostics_Stopwatch_Restart\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Restart()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Stops time interval measurement, resets the elapsed time to zero, and starts measuring elapsed time.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void Restart ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.diagnostics.stopwatch\" data-linktype=\"relative-path\">Stopwatch</a> instance calculates and retains the cumulative elapsed time across multiple time intervals, until the instance is reset or restarted. Use <a class=\"xref\" href=\"system.diagnostics.stopwatch#System_Diagnostics_Stopwatch_Stop_\" data-linktype=\"relative-path\">Stop</a> to stop the current interval measurement and retain the cumulative elapsed time value. Use <a class=\"xref\" href=\"system.diagnostics.stopwatch#System_Diagnostics_Stopwatch_Reset_\" data-linktype=\"relative-path\">Reset</a> to stop any interval measurement in progress and clear the elapsed time value. Use Restart to stop current interval measurement and start a new interval measurement.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Diagnostics_Stopwatch_Start_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Diagnostics_Stopwatch_Start\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Start()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Starts, or resumes, measuring elapsed time for an interval.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void Start ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>In a typical <a class=\"xref\" href=\"system.diagnostics.stopwatch\" data-linktype=\"relative-path\">Stopwatch</a> scenario, you call the Start method, then eventually call the <a class=\"xref\" href=\"system.diagnostics.stopwatch#System_Diagnostics_Stopwatch_Stop_\" data-linktype=\"relative-path\">Stop</a> method, and then you check elapsed time using the <a class=\"xref\" href=\"system.diagnostics.stopwatch#System_Diagnostics_Stopwatch_Elapsed_\" data-linktype=\"relative-path\">Elapsed</a> property.  </p>\n<p> Once started, a <a class=\"xref\" href=\"system.diagnostics.stopwatch\" data-linktype=\"relative-path\">Stopwatch</a> timer measures the current interval, in elapsed timer ticks, until the instance is stopped or reset. Starting a <a class=\"xref\" href=\"system.diagnostics.stopwatch\" data-linktype=\"relative-path\">Stopwatch</a> that is already running does not change the timer state or reset the elapsed time properties.  </p>\n<p> When a <a class=\"xref\" href=\"system.diagnostics.stopwatch\" data-linktype=\"relative-path\">Stopwatch</a> instance measures more than one interval, the Start method resumes measuring time from the current elapsed time value. A <a class=\"xref\" href=\"system.diagnostics.stopwatch\" data-linktype=\"relative-path\">Stopwatch</a> instance calculates and retains the cumulative elapsed time across multiple time intervals, until the instance is reset. Use the <a class=\"xref\" href=\"system.diagnostics.stopwatch#System_Diagnostics_Stopwatch_Reset_\" data-linktype=\"relative-path\">Reset</a> method before calling Start to clear the cumulative elapsed time in a <a class=\"xref\" href=\"system.diagnostics.stopwatch\" data-linktype=\"relative-path\">Stopwatch</a> instance. Use the <a class=\"xref\" href=\"system.diagnostics.stopwatch#System_Diagnostics_Stopwatch_Restart_\" data-linktype=\"relative-path\">Restart</a> method to <a class=\"xref\" href=\"system.diagnostics.stopwatch#System_Diagnostics_Stopwatch_Reset_\" data-linktype=\"relative-path\">Reset</a> and Start the <a class=\"xref\" href=\"system.diagnostics.stopwatch\" data-linktype=\"relative-path\">Stopwatch</a> with a single command.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Diagnostics_Stopwatch_StartNew_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Diagnostics_Stopwatch_StartNew\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">StartNew()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new <a class=\"xref\" href=\"system.diagnostics.stopwatch\" data-linktype=\"relative-path\">Stopwatch</a> instance, sets the elapsed time property to zero, and starts measuring elapsed time.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Diagnostics.Stopwatch StartNew ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.diagnostics.stopwatch\" data-linktype=\"relative-path\">Stopwatch</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.diagnostics.stopwatch\" data-linktype=\"relative-path\">Stopwatch</a> that has just begun measuring elapsed time.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method is equivalent to calling the <a class=\"xref\" href=\"system.diagnostics.stopwatch\" data-linktype=\"relative-path\">Stopwatch</a> constructor and then calling <a class=\"xref\" href=\"system.diagnostics.stopwatch#System_Diagnostics_Stopwatch_Start_\" data-linktype=\"relative-path\">Start</a> on the new instance.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Diagnostics_Stopwatch_Stop_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Diagnostics_Stopwatch_Stop\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Stop()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Stops measuring elapsed time for an interval.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void Stop ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>In a typical <a class=\"xref\" href=\"system.diagnostics.stopwatch\" data-linktype=\"relative-path\">Stopwatch</a> scenario, you call the <a class=\"xref\" href=\"system.diagnostics.stopwatch#System_Diagnostics_Stopwatch_Start_\" data-linktype=\"relative-path\">Start</a> method, then eventually call the Stop method, and then you check elapsed time using the <a class=\"xref\" href=\"system.diagnostics.stopwatch#System_Diagnostics_Stopwatch_Elapsed_\" data-linktype=\"relative-path\">Elapsed</a> property.  </p>\n<p> The Stop method ends the current time interval measurement. Stopping a <a class=\"xref\" href=\"system.diagnostics.stopwatch\" data-linktype=\"relative-path\">Stopwatch</a> that is not running does not change the timer state or reset the elapsed time properties.  </p>\n<p> When a <a class=\"xref\" href=\"system.diagnostics.stopwatch\" data-linktype=\"relative-path\">Stopwatch</a> instance measures more than one interval, the Stop method is equivalent to pausing the elapsed time measurement. A subsequent call to <a class=\"xref\" href=\"system.diagnostics.stopwatch#System_Diagnostics_Stopwatch_Start_\" data-linktype=\"relative-path\">Start</a> resumes measuring time from the current elapsed time value. Use the <a class=\"xref\" href=\"system.diagnostics.stopwatch#System_Diagnostics_Stopwatch_Reset_\" data-linktype=\"relative-path\">Reset</a> method to clear the cumulative elapsed time in a <a class=\"xref\" href=\"system.diagnostics.stopwatch\" data-linktype=\"relative-path\">Stopwatch</a> instance.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc1.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Diagnostics.Stopwatch.yml\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Stopwatch\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Stopwatch..ctor\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Stopwatch.Elapsed\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Stopwatch.ElapsedMilliseconds\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Stopwatch.ElapsedTicks\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Stopwatch.Frequency\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Stopwatch.GetTimestamp\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Stopwatch.IsHighResolution\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Stopwatch.IsRunning\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Stopwatch.Reset\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Stopwatch.Restart\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Stopwatch.Start\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Stopwatch.StartNew\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Stopwatch.Stop\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 02:21 PM\">\r\n<meta name=\"document_id\" content=\"d2980f3d-de6a-d9bd-bcb4-307507abe446\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides a set of methods and properties that you can use to accurately measure elapsed time.  \n To browse the .NET Framework source code for this type, see the Reference Source.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.diagnostics/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Diagnostics.Stopwatch\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Diagnostics.Stopwatch.yml","open_to_public_contributors":false,"api_name":["System.Diagnostics.Stopwatch","System.Diagnostics.Stopwatch..ctor","System.Diagnostics.Stopwatch.Elapsed","System.Diagnostics.Stopwatch.ElapsedMilliseconds","System.Diagnostics.Stopwatch.ElapsedTicks","System.Diagnostics.Stopwatch.Frequency","System.Diagnostics.Stopwatch.GetTimestamp","System.Diagnostics.Stopwatch.IsHighResolution","System.Diagnostics.Stopwatch.IsRunning","System.Diagnostics.Stopwatch.Reset","System.Diagnostics.Stopwatch.Restart","System.Diagnostics.Stopwatch.Start","System.Diagnostics.Stopwatch.StartNew","System.Diagnostics.Stopwatch.Stop"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Diagnostics.Stopwatch","System::Diagnostics::Stopwatch","System.Diagnostics.Stopwatch.#ctor","System::Diagnostics::Stopwatch::#ctor","System.Diagnostics.Stopwatch.Elapsed","System::Diagnostics::Stopwatch::Elapsed","System.Diagnostics.Stopwatch.ElapsedMilliseconds","System::Diagnostics::Stopwatch::ElapsedMilliseconds","System.Diagnostics.Stopwatch.ElapsedTicks","System::Diagnostics::Stopwatch::ElapsedTicks","System.Diagnostics.Stopwatch.Frequency","System::Diagnostics::Stopwatch::Frequency","System.Diagnostics.Stopwatch.GetTimestamp","System::Diagnostics::Stopwatch::GetTimestamp","System.Diagnostics.Stopwatch.IsHighResolution","System::Diagnostics::Stopwatch::IsHighResolution","System.Diagnostics.Stopwatch.IsRunning","System::Diagnostics::Stopwatch::IsRunning","System.Diagnostics.Stopwatch.Reset","System::Diagnostics::Stopwatch::Reset","System.Diagnostics.Stopwatch.Restart","System::Diagnostics::Stopwatch::Restart","System.Diagnostics.Stopwatch.Start","System::Diagnostics::Stopwatch::Start","System.Diagnostics.Stopwatch.StartNew","System::Diagnostics::Stopwatch::StartNew","System.Diagnostics.Stopwatch.Stop","System::Diagnostics::Stopwatch::Stop"],"dev_langs":["csharp"],"updated_at":"2017-03-31 02:21 PM","document_id":"d2980f3d-de6a-d9bd-bcb4-307507abe446","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Diagnostics/Stopwatch.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Stopwatch class | Microsoft Docs","_op_ogTitle":"Stopwatch class","description":"Provides a set of methods and properties that you can use to accurately measure elapsed time.  \n To browse the .NET Framework source code for this type, see the Reference Source.\n","toc_asset_id":"api/_splitted/System.Diagnostics/toc.json","toc_rel":"_splitted/System.Diagnostics/toc.json","source_url":"","ms.assetid":"System.Diagnostics.Stopwatch","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.stopwatch","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.stopwatch","fileRelativePath":"api/System.Diagnostics.Stopwatch.html"},"themesRelativePathToOutputRoot":"_themes/"}