{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">PropertyPath</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Implements a data structure for describing a property as a path below another property, or below an owning type. Property paths are used in data binding to objects, and in storyboards and timelines for animations.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.ComponentModel.TypeConverter(typeof(System.Windows.PropertyPathConverter))]\npublic sealed class PropertyPath</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span></div><span class=\"lang-csharp\">PropertyPath</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>This class contains a string <a class=\"xref\" href=\"system.windows.propertypath#System_Windows_PropertyPath_Path_\" data-linktype=\"relative-path\">Path</a>, and list of dependency properties that are the <a class=\"xref\" href=\"system.windows.propertypath#System_Windows_PropertyPath_PathParameters_\" data-linktype=\"relative-path\">PathParameters</a> into the string<a class=\"xref\" href=\"system.windows.propertypath#System_Windows_PropertyPath_Path_\" data-linktype=\"relative-path\">Path</a>.  </p>\n<p> PropertyPath supports two modes of behavior:  </p>\n<p> <strong>Source mode</strong> describes a path to a property that is used as a source for some other operation. This mode is used by the <a class=\"xref\" href=\"system.windows.data.binding\" data-linktype=\"relative-path\">Binding</a> class to support data binding.  </p>\n<p> <strong>Target mode</strong> describes a path to a property that will be set as a target property. This mode is used by animation in support of storyboard and timeline setters.  </p>\n<p> For instance, <code>Background.Opacity</code> is a two-step path. This path implies: first, find the <code>Background</code> property of an object, get the value object that the <code>Background</code> property is set to, and then get the value of the <code>Opacity</code> property on that object.  </p>\n<p><a name=\"xamlAttributeUsage_PropertyPath\"></a>   </p>\n<h3 class=\"accented\" id=\"xaml-attribute-usage\">XAML Attribute Usage</h3>\n<pre><code>&lt;object property=&quot;propertyPath&quot; .../&gt;  \n</code></pre><p><a name=\"xamlValues_PropertyPath\"></a>   </p>\n<h3 class=\"accented\" id=\"xaml-values\">XAML Values</h3>\n<p> <em>propertyPath</em><br> A string that is evaluated to be either a simple or complex property path. The syntax for setting a PropertyPath in XAML is versatile but complex, and is described in the separate topic <a href=\"../topic/propertypath%20xaml%20syntax\" data-linktype=\"relative-path\">PropertyPath XAML Syntax</a>.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_PropertyPath__ctor_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PropertyPath(Object)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.propertypath\" data-linktype=\"relative-path\">PropertyPath</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public PropertyPath (object parameter);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>parameter</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A property path that either describes a path to a common language runtime (CLR) property, or a single dependency property.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This constructor has two completely different usages depending on whether it is being used for a source-mode property path for a binding, or for a target-mode single-step property path for a storyboard target.  </p>\n<p> If using this <a class=\"xref\" href=\"system.windows.propertypath\" data-linktype=\"relative-path\">PropertyPath</a> in source mode for a binding, <code>parameter</code> is a string representing a property name, or can be a string that describes a &quot;step-through&quot; path to the property in the CLR object model of the object that is being used as the source for a binding. For a binding property path, the character that identifies a &quot;step&quot; is a dot (.). Indexer references (including multiple indexers, and type differentiation) are also supported. For more details on the syntax of the string as specifically used by the <a class=\"xref\" href=\"system.windows.data.binding\" data-linktype=\"relative-path\">Binding</a> object, see <a class=\"xref\" href=\"system.windows.data.binding#System_Windows_Data_Binding_Path_\" data-linktype=\"relative-path\">Path</a>. A property used as a binding source need not be a dependency property. If the binding updates two-way, the property referenced must be read-write. Also note that the binding target does have to be a dependency property. For details, see <a href=\"../topic/data%20binding%20overview\" data-linktype=\"relative-path\">Data Binding Overview</a>.  </p>\n<p> If using this <a class=\"xref\" href=\"system.windows.propertypath\" data-linktype=\"relative-path\">PropertyPath</a> in target mode for a single-step path for a storyboard target, <code>parameter</code> is generally provided as type <a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a>. You can also specify a string that is the <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_Name_\" data-linktype=\"relative-path\">Name</a>. Either of these evaluate to the same result, because it is stored internally as a string. A provided <a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a> is converted to a string through <a class=\"xref\" href=\"system.windows.markup.dependencypropertyconverter\" data-linktype=\"relative-path\">DependencyPropertyConverter</a>. The <a class=\"xref\" href=\"system.windows.markup.dependencypropertyconverter\" data-linktype=\"relative-path\">DependencyPropertyConverter</a> supports a qualified naming format for dependency properties, so you can specify a <em>typeName</em>.<em>propertyName</em> qualified dependency property name string to the PropertyPath constructor in code. The qualified path to the dependency property identifier is a different concept than a complex path. A complex-path <a class=\"xref\" href=\"system.windows.propertypath\" data-linktype=\"relative-path\">PropertyPath</a> should instead be created with the <a class=\"xref\" href=\"system.windows.propertypath#System_Windows_PropertyPath__ctor_\" data-linktype=\"relative-path\">PropertyPath</a> constructor.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_PropertyPath__ctor_System_String_System_Object___\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PropertyPath(String,Object[])</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.propertypath\" data-linktype=\"relative-path\">PropertyPath</a> class, with the provided pathing token string and parameters.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public PropertyPath (string path, object[] pathParameters);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>path</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A string that specifies the <span class=\"xref\">stem.Windows.PropertyPath.Path*</span>, in a tokenized format.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>pathParameters</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An array of objects that sets the <span class=\"xref\">stem.Windows.PropertyPath.PathParameters*</span>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This signature is generally only used for target-mode <a class=\"xref\" href=\"system.windows.propertypath\" data-linktype=\"relative-path\">PropertyPath</a> usages with complex paths.  </p>\n<p> This constructor supports <code>params</code> for the <code>pathParameters</code> constructor argument. Therefore you can specify the contents of <code>pathParameters</code> as a series of comma-separated constructor arguments that populate the array, rather than needing to dimension an array and then populate it with the <code>pathParameters</code> items. Each item you specify must be one of the following types: <a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a>, <a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a>, <a class=\"xref\" href=\"system.componentmodel.propertydescriptor\" data-linktype=\"relative-path\">PropertyDescriptor</a>.  </p>\n<p> For more information on the requirements of the parameters, see <a class=\"xref\" href=\"system.windows.propertypath#System_Windows_PropertyPath_Path_\" data-linktype=\"relative-path\">Path</a> and <a class=\"xref\" href=\"system.windows.propertypath#System_Windows_PropertyPath_PathParameters_\" data-linktype=\"relative-path\">PathParameters</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_PropertyPath_Path\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Path</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets the string that describes the path.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string Path { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string that describes the path.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The string contained in this property has three completely different meanings depending on whether a <a class=\"xref\" href=\"system.windows.propertypath\" data-linktype=\"relative-path\">PropertyPath</a> is being used for a source-mode property path for a binding, for a target-mode single-step property path for a storyboard target, or for a complex path for a storyboard target.  </p>\n<p> If using this <a class=\"xref\" href=\"system.windows.propertypath\" data-linktype=\"relative-path\">PropertyPath</a> in source mode for a binding, Path is a string representing a property name, or can be a string that describes a &quot;step-through&quot; path to the property in the CLR object model of the object that is being used as the source for a binding. For a binding property path, the character that identifies a &quot;step&quot; is a dot (.). Indexer references (including multiple indexers, and type differentiation) are also supported. For more details on the syntax of the string as specifically used by the <a class=\"xref\" href=\"system.windows.data.binding\" data-linktype=\"relative-path\">Binding</a> object, see <a class=\"xref\" href=\"system.windows.data.binding#System_Windows_Data_Binding_Path_\" data-linktype=\"relative-path\">Path</a>. A property used as a binding source need not be a dependency property. If the binding updates two-way, the property source must be read-write. Also note that the binding target does have to be a dependency property. For details, see <a href=\"../topic/data%20binding%20overview\" data-linktype=\"relative-path\">Data Binding Overview</a>.  </p>\n<p> If using this <a class=\"xref\" href=\"system.windows.propertypath\" data-linktype=\"relative-path\">PropertyPath</a> in target mode for a single-step path for a storyboard target, <a class=\"xref\" href=\"system.windows.propertypath\" data-linktype=\"relative-path\">PropertyPath</a> is a string that is a <em>typeName</em>.<em>propertyName</em> qualified dependency property name string.  </p>\n<p> If using this <a class=\"xref\" href=\"system.windows.propertypath\" data-linktype=\"relative-path\">PropertyPath</a> for a complex path for a storyboard target, Path is a tokenized string format that describes the relationships of the various objects given in the <a class=\"xref\" href=\"system.windows.propertypath#System_Windows_PropertyPath_PathParameters_\" data-linktype=\"relative-path\">PathParameters</a>.  </p>\n<ul>\n<li><p>Each item in the array is specified in this format by the array index for the item enclosed in parentheses. For example, to specify the first item in the array, the string token is <code>(0)</code>.  </p>\n</li>\n<li><p>Relationships between items (&quot;steps&quot; in the path) are specified by a dot (.). The property forward of the dot is the first step in the path, the property after is the second step, and so on (you can specify steps beyond two). The last step in the chain always represents the property being animated.  </p>\n</li>\n<li><p>Items within collection properties are accessed with an indexer syntax, with the index within square brackets ([ and ]). The indexer is additive to the token representing the property. For example, the following is a two-step path, with the token combination in the first step specifying the second item from within the collection of that property: <code>(0)[1].(1)</code> . You cannot use an indexer on the last property in the chain; you cannot animate the actual collection position, you must animate a property on that object.  </p>\n<p>The path string for a <a class=\"xref\" href=\"system.windows.propertypath\" data-linktype=\"relative-path\">PropertyPath</a> is typically established through the constructors: the <a class=\"xref\" href=\"system.windows.propertypath#System_Windows_PropertyPath__ctor_System_Object_\" data-linktype=\"relative-path\">PropertyPath(Object)</a> signature for bindings or single-step storyboard targets, the [PropertyPath(String, Object&lt;xref:System.Windows.PropertyPath.%23ctor%28System.String%2CSystem.Object%5B%5D%29&gt; signature for multi-step storyboard targets.  </p>\n<p><strong>XAML:</strong> When you use a <a class=\"xref\" href=\"system.windows.propertypath\" data-linktype=\"relative-path\">PropertyPath</a> to describe a property reference in XAML, as an attribute value, the string that you specify is first handled by a type converter (<a class=\"xref\" href=\"system.windows.propertypathconverter\" data-linktype=\"relative-path\">PropertyPathConverter</a>). This type converter then processes the string and based on its syntax will call one of the <a class=\"xref\" href=\"system.windows.propertypath\" data-linktype=\"relative-path\">PropertyPath</a> constructor signatures. This indirection through the type converter handling an attribute value is generally how you use <a class=\"xref\" href=\"system.windows.propertypath\" data-linktype=\"relative-path\">PropertyPath</a> in XAML, rather than declaring a <a class=\"xref\" href=\"system.windows.propertypath\" data-linktype=\"relative-path\">PropertyPath</a> object element and then applying specific values to attributes such as Path and <a class=\"xref\" href=\"system.windows.propertypath#System_Windows_PropertyPath_PathParameters_\" data-linktype=\"relative-path\">PathParameters</a>. For more information, see <a href=\"../topic/propertypath%20xaml%20syntax\" data-linktype=\"relative-path\">PropertyPath XAML Syntax</a>.  </p>\n</li>\n</ul>\n<p><a name=\"xamlTextUsage_Path\"></a>   </p>\n<h3 class=\"accented\" id=\"xaml-text-usage\">XAML Text Usage</h3>\n<p> Members of the <a class=\"xref\" href=\"system.windows.propertypath\" data-linktype=\"relative-path\">PropertyPath</a> type are not typically set in a direct XAML syntax. See Remarks.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_PropertyPath_PathParameters\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PathParameters</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the list of parameters to use when the path refers to indexed parameters.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Collections.ObjectModel.Collection&lt;object&gt; PathParameters { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.objectmodel.collection-1\" data-linktype=\"relative-path\">Collection</a>&lt;<a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>&gt;</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The parameter list.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The properties for a <a class=\"xref\" href=\"system.windows.propertypath\" data-linktype=\"relative-path\">PropertyPath</a> are typically established through the constructors. For setting PathParameters, the <a class=\"xref\" href=\"system.windows.propertypath#System_Windows_PropertyPath__ctor_\" data-linktype=\"relative-path\">PropertyPath</a> constructor is particularly convenient because the <code>pathParameters</code> constructor argument is designated as <code>params</code>, meaning that you do not need to create or dimension an array for construction. You simply specify each member of the array as an additional parameter.  </p>\n<p> If the final property that is the target is a <a class=\"xref\" href=\"system.windows.freezable\" data-linktype=\"relative-path\">Freezable</a> type, that value will be cloned. For details, see <a href=\"../topic/storyboards%20overview\" data-linktype=\"relative-path\">Storyboards Overview</a>.  </p>\n<p> The actual evaluation of the property chain is performed by the storyboard animation mechanisms. At the <a class=\"xref\" href=\"system.windows.propertypath\" data-linktype=\"relative-path\">PropertyPath</a> level, no validation is performed to make sure that the steps of the path connect at all. For instance, you can construct a property path that has <a class=\"xref\" href=\"system.windows.controls.control#System_Windows_Controls_Control_BackgroundProperty\" data-linktype=\"relative-path\">System.Windows.Controls.Control.BackgroundProperty</a> as the first step, and <a class=\"xref\" href=\"system.windows.frameworkelement#System_Windows_FrameworkElement_FlowDirectionProperty\" data-linktype=\"relative-path\">System.Windows.FrameworkElement.FlowDirectionProperty</a> as the second step. But such a property path would fail if actually applied as a target, because the Brush type that fills <a class=\"xref\" href=\"system.windows.controls.control#System_Windows_Controls_Control_BackgroundProperty\" data-linktype=\"relative-path\">System.Windows.Controls.Control.BackgroundProperty</a> does not have a <a class=\"xref\" href=\"system.windows.frameworkelement#System_Windows_FrameworkElement_FlowDirection_\" data-linktype=\"relative-path\">FlowDirection</a> property. Invalid property paths fail silently. For more information, see <a href=\"../topic/storyboards%20overview\" data-linktype=\"relative-path\">Storyboards Overview</a>.  </p>\n<p> <strong>XAML:</strong> When you use a <a class=\"xref\" href=\"system.windows.propertypath\" data-linktype=\"relative-path\">PropertyPath</a> to describe a property reference in XAML, as an attribute value, the string that you specify is first handled by a type converter (<a class=\"xref\" href=\"system.windows.propertypathconverter\" data-linktype=\"relative-path\">PropertyPathConverter</a>). This type converter then processes the string and based on its syntax will call one of the <a class=\"xref\" href=\"system.windows.propertypath\" data-linktype=\"relative-path\">PropertyPath</a> constructor signatures. This indirection through the type converter handling an attribute value is generally how you use <a class=\"xref\" href=\"system.windows.propertypath\" data-linktype=\"relative-path\">PropertyPath</a> in XAML, rather than declaring a <a class=\"xref\" href=\"system.windows.propertypath\" data-linktype=\"relative-path\">PropertyPath</a> object element and then applying specific values to attributes such as <a class=\"xref\" href=\"system.windows.propertypath#System_Windows_PropertyPath_Path_\" data-linktype=\"relative-path\">Path</a> and PathParameters. For more information, see <a href=\"../topic/propertypath%20xaml%20syntax\" data-linktype=\"relative-path\">PropertyPath XAML Syntax</a>.  </p>\n<p><a name=\"xamlTextUsage_PathParameters\"></a>   </p>\n<h3 class=\"accented\" id=\"xaml-text-usage\">XAML Text Usage</h3>\n<p> Members of the <a class=\"xref\" href=\"system.windows.propertypath\" data-linktype=\"relative-path\">PropertyPath</a> type are not typically set in a direct XAML syntax. See Remarks.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t  \r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet/toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Windows.PropertyPath.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.PropertyPath\">\r\n<meta name=\"APIName\" content=\"System.Windows.PropertyPath..ctor\">\r\n<meta name=\"APIName\" content=\"System.Windows.PropertyPath.Path\">\r\n<meta name=\"APIName\" content=\"System.Windows.PropertyPath.PathParameters\">\r\n<meta name=\"APILocation\" content=\"PresentationFramework.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-23 07:05 AM\">\r\n<meta name=\"document_id\" content=\"8b638c5a-9d1c-8165-818a-ad7193be0621\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Implements a data structure for describing a property as a path below another property, or below an owning type. Property paths are used in data binding to objects, and in storyboards and timelines f…\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.windows/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.PropertyPath\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Windows.PropertyPath.yml","open_to_public_contributors":false,"api_name":["System.Windows.PropertyPath","System.Windows.PropertyPath..ctor","System.Windows.PropertyPath.Path","System.Windows.PropertyPath.PathParameters"],"api_location":["PresentationFramework.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.PropertyPath","System::Windows::PropertyPath","System.Windows.PropertyPath.#ctor","System::Windows::PropertyPath::#ctor","System.Windows.PropertyPath.Path","System::Windows::PropertyPath::Path","System.Windows.PropertyPath.PathParameters","System::Windows::PropertyPath::PathParameters"],"dev_langs":["csharp"],"updated_at":"2017-03-23 07:05 AM","document_id":"8b638c5a-9d1c-8165-818a-ad7193be0621","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.Windows/PropertyPath.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"PropertyPath class | Microsoft Docs","_op_ogTitle":"PropertyPath class","description":"Implements a data structure for describing a property as a path below another property, or below an owning type. Property paths are used in data binding to objects, and in storyboards and timelines f…","toc_asset_id":"api/_splitted/System.Windows/toc.json","toc_rel":"_splitted/System.Windows/toc.json","source_url":"","ms.assetid":"System.Windows.PropertyPath","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.windows.propertypath","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.windows.propertypath","fileRelativePath":"api/System.Windows.PropertyPath.html"},"themesRelativePathToOutputRoot":"_themes/"}