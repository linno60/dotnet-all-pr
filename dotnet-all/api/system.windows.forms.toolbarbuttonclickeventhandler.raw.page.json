{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">ToolBarButtonClickEventHandler</span>\r\n      Delegate\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the method that will handle the <a class=\"xref\" href=\"system.windows.forms.toolbar#System_Windows_Forms_ToolBar_ButtonClick\" data-linktype=\"relative-path\">ButtonClick</a> event of a <a class=\"xref\" href=\"system.windows.forms.toolbar\" data-linktype=\"relative-path\">ToolBar</a>.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public delegate void ToolBarButtonClickEventHandler(object sender, ToolBarButtonClickEventArgs e);</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">System.Delegate</a></span></div><span class=\"lang-csharp\">ToolBarButtonClickEventHandler</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example instantiates a <a class=\"xref\" href=\"system.windows.forms.toolbar\" data-linktype=\"relative-path\">ToolBar</a> and three <a class=\"xref\" href=\"system.windows.forms.toolbarbutton\" data-linktype=\"relative-path\">ToolBarButton</a> controls. The toolbar buttons are assigned to the button collection, the collection is assigned to the toolbar, and the toolbar is added to the form. On the <a class=\"xref\" href=\"system.windows.forms.toolbar#System_Windows_Forms_ToolBar_ButtonClick\" data-linktype=\"relative-path\">ButtonClick</a> event of the toolbar, the <a class=\"xref\" href=\"system.windows.forms.toolbarbuttonclickeventargs#System_Windows_Forms_ToolBarButtonClickEventArgs_Button_\" data-linktype=\"relative-path\">Button</a> property of the <a class=\"xref\" href=\"system.windows.forms.toolbarbuttonclickeventargs\" data-linktype=\"relative-path\">ToolBarButtonClickEventArgs</a> is evaluated, and the appropriate dialog opened. This code assumes that a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a>, an <a class=\"xref\" href=\"system.windows.forms.openfiledialog\" data-linktype=\"relative-path\">OpenFileDialog</a>, a <a class=\"xref\" href=\"system.windows.forms.savefiledialog\" data-linktype=\"relative-path\">SaveFileDialog</a>, and a <a class=\"xref\" href=\"system.windows.forms.printdialog\" data-linktype=\"relative-path\">PrintDialog</a> have been instantiated.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic ToolBar.ToolBar Example#1\">public:\n   void InitializeMyToolBar()\n   {\n      // Create and initialize the ToolBar and ToolBarButton controls.\n      toolBar1 = gcnew ToolBar;\n      ToolBarButton^ toolBarButton1 = gcnew ToolBarButton;\n      ToolBarButton^ toolBarButton2 = gcnew ToolBarButton;\n      ToolBarButton^ toolBarButton3 = gcnew ToolBarButton;\n      \n      // Set the Text properties of the ToolBarButton controls.\n      toolBarButton1-&gt;Text = &quot;Open&quot;;\n      toolBarButton2-&gt;Text = &quot;Save&quot;;\n      toolBarButton3-&gt;Text = &quot;Print&quot;;\n      \n      // Add the ToolBarButton controls to the ToolBar.\n      toolBar1-&gt;Buttons-&gt;Add( toolBarButton1 );\n      toolBar1-&gt;Buttons-&gt;Add( toolBarButton2 );\n      toolBar1-&gt;Buttons-&gt;Add( toolBarButton3 );\n      \n      // Add the event-handler delegate.\n      toolBar1-&gt;ButtonClick += gcnew ToolBarButtonClickEventHandler(\n         this, &amp;Form1::toolBar1_ButtonClick );\n      \n      // Add the ToolBar to the Form.\n      Controls-&gt;Add( toolBar1 );\n   }\n\nprivate:\n   void toolBar1_ButtonClick(\n      Object^ sender,\n      ToolBarButtonClickEventArgs^ e )\n   {\n      // Evaluate the Button property to determine which button was clicked.\n      switch ( toolBar1-&gt;Buttons-&gt;IndexOf( e-&gt;Button ) )\n      {\n         case 0:\n            openFileDialog1-&gt;ShowDialog();\n            // Insert code to open the file.\n            break;\n         case 1:\n            saveFileDialog1-&gt;ShowDialog();\n            // Insert code to save the file.\n            break;\n         case 2:\n            printDialog1-&gt;ShowDialog();\n            // Insert code to print the file.    \n            break;\n      }\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic ToolBar.ToolBar Example#1\">    Public Sub InitializeMyToolBar()\n        &#39; Create and initialize the ToolBar and ToolBarButton controls.\n        Dim toolBar1 As New ToolBar()\n        Dim toolBarButton1 As New ToolBarButton()\n        Dim toolBarButton2 As New ToolBarButton()\n        Dim toolBarButton3 As New ToolBarButton()\n        \n        &#39; Set the Text properties of the ToolBarButton controls.\n        toolBarButton1.Text = &quot;Open&quot;\n        toolBarButton2.Text = &quot;Save&quot;\n        toolBarButton3.Text = &quot;Print&quot;\n        \n        &#39; Add the ToolBarButton controls to the ToolBar.\n        toolBar1.Buttons.Add(toolBarButton1)\n        toolBar1.Buttons.Add(toolBarButton2)\n        toolBar1.Buttons.Add(toolBarButton3)\n        \n        &#39; Add the event-handler delegate.\n        AddHandler toolBar1.ButtonClick, AddressOf Me.toolBar1_ButtonClick\n        \n        &#39; Add the ToolBar to the Form.\n        Controls.Add(toolBar1)\n    End Sub    \n    \n    Private Sub toolBar1_ButtonClick(ByVal sender As Object, _\n    ByVal e As ToolBarButtonClickEventArgs)\n\n        &#39; Evaluate the Button property to determine which button was clicked.\n        Select Case toolBar1.Buttons.IndexOf(e.Button)\n            Case 0\n                openFileDialog1.ShowDialog()\n                &#39; Insert code to open the file.\n            Case 1\n                saveFileDialog1.ShowDialog()\n                &#39; Insert code to save the file.\n            Case 2\n                printDialog1.ShowDialog()\n                &#39; Insert code to print the file.\n        End Select\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic ToolBar.ToolBar Example#1\">public void InitializeMyToolBar()\n {\n    // Create and initialize the ToolBar and ToolBarButton controls.\n    toolBar1 = new ToolBar();\n    ToolBarButton toolBarButton1 = new ToolBarButton();\n    ToolBarButton toolBarButton2 = new ToolBarButton();\n    ToolBarButton toolBarButton3 = new ToolBarButton();\n \n    // Set the Text properties of the ToolBarButton controls.\n    toolBarButton1.Text = &quot;Open&quot;;\n    toolBarButton2.Text = &quot;Save&quot;;\n    toolBarButton3.Text = &quot;Print&quot;;\n \n    // Add the ToolBarButton controls to the ToolBar.\n    toolBar1.Buttons.Add(toolBarButton1);\n    toolBar1.Buttons.Add(toolBarButton2);\n    toolBar1.Buttons.Add(toolBarButton3);\n    \n    // Add the event-handler delegate.\n    toolBar1.ButtonClick += new ToolBarButtonClickEventHandler (\n       this.toolBar1_ButtonClick);\n    \n    // Add the ToolBar to the Form.\n    Controls.Add(toolBar1);\n }\n \n private void toolBar1_ButtonClick (\n                         Object sender, \n                         ToolBarButtonClickEventArgs e)\n {\n   // Evaluate the Button property to determine which button was clicked.\n   switch(toolBar1.Buttons.IndexOf(e.Button))\n   {\n      case 0:\n         openFileDialog1.ShowDialog();\n         // Insert code to open the file.\n         break; \n      case 1:\n         saveFileDialog1.ShowDialog();\n         // Insert code to save the file.\n         break; \n      case 2:\n         printDialog1.ShowDialog();\n         // Insert code to print the file.    \n         break; \n    }\n }\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>When you create a ToolBarButtonClickEventHandler delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about handling events with delegates, see <a href=\"../topic/handling%20and%20raising%20events\" data-linktype=\"relative-path\">Events</a>.</p>\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Windows.Forms.ToolBarButtonClickEventHandler.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.ToolBarButtonClickEventHandler\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.ToolBarButtonClickEventHandler..ctor\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.ToolBarButtonClickEventHandler.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.ToolBarButtonClickEventHandler.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.ToolBarButtonClickEventHandler.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-24 01:41 AM\">\r\n<meta name=\"document_id\" content=\"6230977a-d0f6-d445-5773-c6d0ddd816c3\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the method that will handle the  event of a .\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.windows.forms/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Forms.ToolBarButtonClickEventHandler\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Windows.Forms.ToolBarButtonClickEventHandler.yml","open_to_public_contributors":false,"api_name":["System.Windows.Forms.ToolBarButtonClickEventHandler","System.Windows.Forms.ToolBarButtonClickEventHandler..ctor","System.Windows.Forms.ToolBarButtonClickEventHandler.Invoke","System.Windows.Forms.ToolBarButtonClickEventHandler.BeginInvoke","System.Windows.Forms.ToolBarButtonClickEventHandler.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Forms.ToolBarButtonClickEventHandler","System::Windows::Forms::ToolBarButtonClickEventHandler"],"dev_langs":["csharp"],"updated_at":"2017-03-24 01:41 AM","document_id":"6230977a-d0f6-d445-5773-c6d0ddd816c3","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/ToolBarButtonClickEventHandler.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ToolBarButtonClickEventHandler delegate | Microsoft Docs","_op_ogTitle":"ToolBarButtonClickEventHandler delegate","description":"Represents the method that will handle the  event of a .\n","toc_asset_id":"api/_splitted/System.Windows.Forms/toc.json","toc_rel":"_splitted/System.Windows.Forms/toc.json","source_url":"","ms.assetid":"System.Windows.Forms.ToolBarButtonClickEventHandler","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.toolbarbuttonclickeventhandler","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.toolbarbuttonclickeventhandler","fileRelativePath":"api/System.Windows.Forms.ToolBarButtonClickEventHandler.html"},"themesRelativePathToOutputRoot":"_themes/"}