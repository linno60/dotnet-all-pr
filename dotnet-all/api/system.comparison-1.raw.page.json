{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">Comparison&lt;T&gt;</span>\r\n      Delegate\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the method that compares two objects of the same type.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public delegate int Comparison&lt;in T&gt;(T x, T y);</code></pre>\r\n  \r\n  \r\n  \r\n  \t\t<h3 class=\"accented\">Type Parameters</h3>\r\n  \t\t<table class=\"nameValue stack\">\r\n  \t\t\t<tr>\r\n  \t\t\t<td>T</td>\r\n  \t\t\t<td><p>The type of the objects to compare.</p>\n</td>\r\n  \t\t\t</tr>\r\n  \t\t</table>\r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></span></div><span class=\"lang-csharp\">Comparison&lt;T&gt;</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example demonstrates the use of the Comparison(T) delegate with the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Sort_System_Comparison__0__\" data-linktype=\"relative-path\">Sort(Comparison&lt;T&gt;)</a> method overload.  </p>\n<p> The code example defines an alternative comparison method for strings, named <code>CompareDinosByLength</code>. This method works as follows: First, the comparands are tested for <code>null</code>, and a null reference is treated as less than a non-null. Second, the string lengths are compared, and the longer string is deemed to be greater. Third, if the lengths are equal, ordinary string comparison is used.  </p>\n<p> A <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> of strings is created and populated with four strings, in no particular order. The list also includes an empty string and a null reference. The list is displayed, sorted using a Comparison(T) generic delegate representing the <code>CompareDinosByLength</code> method, and displayed again.  </p>\n<pre><code class=\"lang-cpp\" name=\"List`1_SortComparison#1\">using namespace System;\nusing namespace System::Collections::Generic;\n\nint CompareDinosByLength(String^ x, String^ y)\n{\n    if (x == nullptr)\n    {\n        if (y == nullptr)\n        {\n            // If x is null and y is null, they&#39;re\n            // equal. \n            return 0;\n        }\n        else\n        {\n            // If x is null and y is not null, y\n            // is greater. \n            return -1;\n        }\n    }\n    else\n    {\n        // If x is not null...\n        //\n        if (y == nullptr)\n            // ...and y is null, x is greater.\n        {\n            return 1;\n        }\n        else\n        {\n            // ...and y is not null, compare the \n            // lengths of the two strings.\n            //\n            int retval = x-&gt;Length.CompareTo(y-&gt;Length);\n\n            if (retval != 0)\n            {\n                // If the strings are not of equal length,\n                // the longer string is greater.\n                //\n                return retval;\n            }\n            else\n            {\n                // If the strings are of equal length,\n                // sort them with ordinary string comparison.\n                //\n                return x-&gt;CompareTo(y);\n            }\n        }\n    }\n};\n\nvoid Display(List&lt;String^&gt;^ list)\n{\n    Console::WriteLine();\n    for each(String^ s in list)\n    {\n        if (s == nullptr)\n            Console::WriteLine(&quot;(null)&quot;);\n        else\n            Console::WriteLine(&quot;\\&quot;{0}\\&quot;&quot;, s);\n    }\n};\n\nvoid main()\n{\n    List&lt;String^&gt;^ dinosaurs = gcnew List&lt;String^&gt;();\n    dinosaurs-&gt;Add(&quot;Pachycephalosaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Amargasaurus&quot;);\n    dinosaurs-&gt;Add(&quot;&quot;);\n    dinosaurs-&gt;Add(nullptr);\n    dinosaurs-&gt;Add(&quot;Mamenchisaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Deinonychus&quot;);\n    Display(dinosaurs);\n\n    Console::WriteLine(&quot;\\nSort with generic Comparison&lt;String^&gt; delegate:&quot;);\n    dinosaurs-&gt;Sort(\n        gcnew Comparison&lt;String^&gt;(CompareDinosByLength));\n    Display(dinosaurs);\n\n}\n\n/* This code example produces the following output:\n\n&quot;Pachycephalosaurus&quot;\n&quot;Amargasaurus&quot;\n&quot;&quot;\n(null)\n&quot;Mamenchisaurus&quot;\n&quot;Deinonychus&quot;\n\nSort with generic Comparison&lt;String^&gt; delegate:\n\n(null)\n&quot;&quot;\n&quot;Deinonychus&quot;\n&quot;Amargasaurus&quot;\n&quot;Mamenchisaurus&quot;\n&quot;Pachycephalosaurus&quot;\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"List`1_SortComparison#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class Example\n\n    Private Shared Function CompareDinosByLength( _\n        ByVal x As String, ByVal y As String) As Integer\n\n        If x Is Nothing Then\n            If y Is Nothing Then \n                &#39; If x is Nothing and y is Nothing, they&#39;re\n                &#39; equal. \n                Return 0\n            Else\n                &#39; If x is Nothing and y is not Nothing, y\n                &#39; is greater. \n                Return -1\n            End If\n        Else\n            &#39; If x is not Nothing...\n            &#39;\n            If y Is Nothing Then\n                &#39; ...and y is Nothing, x is greater.\n                Return 1\n            Else\n                &#39; ...and y is not Nothing, compare the \n                &#39; lengths of the two strings.\n                &#39;\n                Dim retval As Integer = _\n                    x.Length.CompareTo(y.Length)\n\n                If retval &lt;&gt; 0 Then \n                    &#39; If the strings are not of equal length,\n                    &#39; the longer string is greater.\n                    &#39;\n                    Return retval\n                Else\n                    &#39; If the strings are of equal length,\n                    &#39; sort them with ordinary string comparison.\n                    &#39;\n                    Return x.CompareTo(y)\n                End If\n            End If\n        End If\n\n    End Function\n\n    Public Shared Sub Main()\n\n        Dim dinosaurs As New List(Of String)\n        dinosaurs.Add(&quot;Pachycephalosaurus&quot;)\n        dinosaurs.Add(&quot;Amargasaurus&quot;)\n        dinosaurs.Add(&quot;&quot;)\n        dinosaurs.Add(Nothing)\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;)\n        dinosaurs.Add(&quot;Deinonychus&quot;)\n        Display(dinosaurs)\n\n        Console.WriteLine(vbLf &amp; &quot;Sort with generic Comparison(Of String) delegate:&quot;)\n        dinosaurs.Sort(AddressOf CompareDinosByLength)\n        Display(dinosaurs)\n\n    End Sub\n\n    Private Shared Sub Display(ByVal lis As List(Of String))\n        Console.WriteLine()\n        For Each s As String In lis\n            If s Is Nothing Then\n                Console.WriteLine(&quot;(Nothing)&quot;)\n            Else\n                Console.WriteLine(&quot;&quot;&quot;{0}&quot;&quot;&quot;, s)\n            End If\n        Next\n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;&quot;Pachycephalosaurus&quot;\n&#39;&quot;Amargasaurus&quot;\n&#39;&quot;&quot;\n&#39;(Nothing)\n&#39;&quot;Mamenchisaurus&quot;\n&#39;&quot;Deinonychus&quot;\n&#39;\n&#39;Sort with generic Comparison(Of String) delegate:\n&#39;\n&#39;(Nothing)\n&#39;&quot;&quot;\n&#39;&quot;Deinonychus&quot;\n&#39;&quot;Amargasaurus&quot;\n&#39;&quot;Mamenchisaurus&quot;\n&#39;&quot;Pachycephalosaurus&quot;\n</code></pre><pre><code class=\"lang-cs\" name=\"List`1_SortComparison#1\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n    private static int CompareDinosByLength(string x, string y)\n    {\n        if (x == null)\n        {\n            if (y == null)\n            {\n                // If x is null and y is null, they&#39;re\n                // equal. \n                return 0;\n            }\n            else\n            {\n                // If x is null and y is not null, y\n                // is greater. \n                return -1;\n            }\n        }\n        else\n        {\n            // If x is not null...\n            //\n            if (y == null)\n                // ...and y is null, x is greater.\n            {\n                return 1;\n            }\n            else\n            {\n                // ...and y is not null, compare the \n                // lengths of the two strings.\n                //\n                int retval = x.Length.CompareTo(y.Length);\n\n                if (retval != 0)\n                {\n                    // If the strings are not of equal length,\n                    // the longer string is greater.\n                    //\n                    return retval;\n                }\n                else\n                {\n                    // If the strings are of equal length,\n                    // sort them with ordinary string comparison.\n                    //\n                    return x.CompareTo(y);\n                }\n            }\n        }\n    }\n\n    public static void Main()\n    {\n        List&lt;string&gt; dinosaurs = new List&lt;string&gt;();\n        dinosaurs.Add(&quot;Pachycephalosaurus&quot;);\n        dinosaurs.Add(&quot;Amargasaurus&quot;);\n        dinosaurs.Add(&quot;&quot;);\n        dinosaurs.Add(null);\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;);\n        dinosaurs.Add(&quot;Deinonychus&quot;);\n        Display(dinosaurs);\n\n        Console.WriteLine(&quot;\\nSort with generic Comparison&lt;string&gt; delegate:&quot;);\n        dinosaurs.Sort(CompareDinosByLength);\n        Display(dinosaurs);\n\n    }\n\n    private static void Display(List&lt;string&gt; list)\n    {\n        Console.WriteLine();\n        foreach( string s in list )\n        {\n            if (s == null)\n                Console.WriteLine(&quot;(null)&quot;);\n            else\n                Console.WriteLine(&quot;\\&quot;{0}\\&quot;&quot;, s);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\n&quot;Pachycephalosaurus&quot;\n&quot;Amargasaurus&quot;\n&quot;&quot;\n(null)\n&quot;Mamenchisaurus&quot;\n&quot;Deinonychus&quot;\n\nSort with generic Comparison&lt;string&gt; delegate:\n\n(null)\n&quot;&quot;\n&quot;Deinonychus&quot;\n&quot;Amargasaurus&quot;\n&quot;Mamenchisaurus&quot;\n&quot;Pachycephalosaurus&quot;\n */\n</code></pre><p> The following example uses the Comparison(T) delegate to sort the elements of a collection of <code>CityInfo</code> objects. <code>CityInfo</code> is an application-defined class that contains information about a city and its population. The example defines three methods, <code>CompareByName</code>, <code>CompareByPopulation</code>, and <code>CompareByNames</code>, that offer three different ways of ordering the <code>CityInfo</code> objects. Each method is assigned to the <code>comparison</code> argument of the [Array.Sort<t\\>(T&lt;xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Comparison%7B%60%600%7D%29?displayProperty=fullName&gt; method.  <p>\n<pre><code class=\"lang-cs\" name=\"System.Comparison`1#1\">using System;\n\npublic class CityInfo\n{\n   string cityName;\n   string countryName;\n   int pop2010;\n   \n   public CityInfo(string name, string country, int pop2010)\n   {\n      this.cityName = name;\n      this.countryName = country;\n      this.pop2010 = pop2010;\n   }\n   \n   public string City\n   { get { return this.cityName; } } \n   \n   public string Country\n   { get { return this.countryName; } }\n\n   public int Population\n   { get { return this.pop2010; } }\n   \n   public static int CompareByName(CityInfo city1, CityInfo city2)\n   { \n      return String.Compare(city1.City, city2.City);\n   }\n   \n   public static int CompareByPopulation(CityInfo city1, CityInfo city2)\n   {\n      return city1.Population.CompareTo(city2.Population);\n   }\n   \n   public static int CompareByNames(CityInfo city1, CityInfo city2)\n   {\n      return String.Compare(city1.Country + city1.City, city2.Country + city2.City);\n   }      \n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      CityInfo NYC = new CityInfo(&quot;New York City&quot;, &quot;United States of America&quot;, 8175133 );\n      CityInfo Det = new CityInfo(&quot;Detroit&quot;, &quot;United States of America&quot;, 713777);\n      CityInfo Paris = new CityInfo(&quot;Paris&quot;, &quot;France&quot;,  2193031);\n      CityInfo[] cities = { NYC, Det, Paris };\n      // Display ordered array.\n      DisplayArray(cities);\n      \n      // Sort array by city name.\n      Array.Sort(cities, CityInfo.CompareByName);\n      DisplayArray(cities);\n      \n      // Sort array by population.\n      Array.Sort(cities, CityInfo.CompareByPopulation);\n      DisplayArray(cities);\n      \n      // Sort array by country + city name.\n      Array.Sort(cities, CityInfo.CompareByNames);\n      DisplayArray(cities);\n   }\n   \n   private static void DisplayArray(CityInfo[] cities)\n   {\n      Console.WriteLine(&quot;{0,-20} {1,-25} {2,10}&quot;, &quot;City&quot;, &quot;Country&quot;, &quot;Population&quot;);\n      foreach (var city in cities)\n         Console.WriteLine(&quot;{0,-20} {1,-25} {2,10:N0}&quot;, city.City, \n                           city.Country, city.Population);\n\n      Console.WriteLine();\n   }\n}\n// The example displays the following output:\n//     City                 Country                   Population\n//     New York City        United States of America   8,175,133\n//     Detroit              United States of America     713,777\n//     Paris                France                     2,193,031\n//     \n//     City                 Country                   Population\n//     Detroit              United States of America     713,777\n//     New York City        United States of America   8,175,133\n//     Paris                France                     2,193,031\n//     \n//     City                 Country                   Population\n//     Detroit              United States of America     713,777\n//     Paris                France                     2,193,031\n//     New York City        United States of America   8,175,133\n//     \n//     City                 Country                   Population\n//     Paris                France                     2,193,031\n//     Detroit              United States of America     713,777\n//     New York City        United States of America   8,175,133\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Comparison`1#1\">Public Class CityInfo\n   Dim cityName As String\n   Dim countryName As String\n   Dim pop2010 As Integer\n   \n   Public Sub New(name As String, country As String, pop2010 As Integer)\n      Me.cityName = name\n      Me.countryName = country\n      Me.pop2010 = pop2010\n   End Sub\n   \n   Public ReadOnly Property City As String\n      Get\n         Return Me.cityName\n      End Get\n   End Property\n   \n   Public ReadOnly Property Country As String\n      Get\n         Return Me.countryName\n      End Get\n   End Property\n   \n   Public ReadOnly Property Population As Integer\n      Get\n         Return Me.pop2010\n      End Get   \n   End Property\n   \n   Public Shared Function CompareByName(city1 As CityInfo, city2 As CityInfo) As Integer\n      Return String.Compare(city1.City, city2.City)\n   End Function\n   \n   Public Shared Function CompareByPopulation(city1 As CityInfo, city2 As CityInfo) As Integer\n      Return city1.Population.CompareTo(city2.Population)\n   End Function\n   \n   Public Shared Function CompareByNames(city1 As CityInfo, city2 As CityInfo) As Integer\n      Return String.Compare(city1.Country + city1.City, city2.Country + city2.City)\n   End Function   \nEnd Class\n\nModule Example\n   Public Sub Main()\n      Dim NYC As New CityInfo(&quot;New York City&quot;, &quot;United States of America&quot;, 8175133)\n      Dim Det As New CityInfo(&quot;Detroit&quot;, &quot;United States of America&quot;, 713777)\n      Dim Paris As New CityInfo(&quot;Paris&quot;, &quot;France&quot;, 2193031)\n      Dim cities As CityInfo() = { NYC, Det, Paris }\n      &#39; Display ordered array.\n      DisplayArray(cities)\n      \n      &#39; Sort array by city name.\n      Array.Sort(cities, AddressOf CityInfo.CompareByName)\n      DisplayArray(cities)\n      \n      &#39; Sort array by population.\n      Array.Sort(cities, AddressOf CityInfo.CompareByPopulation)\n      DisplayArray(cities)\n      \n      &#39; Sort array by country + city name.\n      Array.Sort(cities, AddressOf CityInfo.CompareByNames)\n      DisplayArray(cities)\n   End Sub\n   \n   Private Sub DisplayArray(cities() As CityInfo)\n      Console.WriteLine(&quot;{0,-20} {1,-25} {2,10}&quot;, &quot;City&quot;, &quot;Country&quot;, &quot;Population&quot;)\n      For Each city In cities\n         Console.WriteLine(&quot;{0,-20} {1,-25} {2,10:N0}&quot;, city.City, city.Country, city.Population)\n      Next\n      Console.WriteLine()\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;     City                 Country                   Population\n&#39;     New York City        United States of America   8,175,133\n&#39;     Detroit              United States of America     713,777\n&#39;     Paris                France                     2,193,031\n&#39;     \n&#39;     City                 Country                   Population\n&#39;     Detroit              United States of America     713,777\n&#39;     New York City        United States of America   8,175,133\n&#39;     Paris                France                     2,193,031\n&#39;     \n&#39;     City                 Country                   Population\n&#39;     Detroit              United States of America     713,777\n&#39;     Paris                France                     2,193,031\n&#39;     New York City        United States of America   8,175,133\n&#39;     \n&#39;     City                 Country                   Population\n&#39;     Paris                France                     2,193,031\n&#39;     Detroit              United States of America     713,777\n&#39;     New York City        United States of America   8,175,133\n</code></pre></t\\>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>This delegate is used by the [Sort<t\\>(T&lt;xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Comparison%7B%60%600%7D%29&gt; method overload of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> class and the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Sort_System_Comparison__0__\" data-linktype=\"relative-path\">Sort(Comparison&lt;T&gt;)</a> method overload of the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> class to sort the elements of an array or list.<p>\n</t\\>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Comparison-1.yml\">\r\n<meta name=\"APIName\" content=\"System.Comparison&lt;T&gt;\">\r\n<meta name=\"APIName\" content=\"System.Comparison&lt;T&gt;..ctor\">\r\n<meta name=\"APIName\" content=\"System.Comparison&lt;T&gt;.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Comparison&lt;T&gt;.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.Comparison&lt;T&gt;.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 05:47 AM\">\r\n<meta name=\"document_id\" content=\"eed11989-8279-ff9c-8aed-6e31a3ddf9b9\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the method that compares two objects of the same type.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Comparison`1\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Comparison-1.yml","open_to_public_contributors":false,"api_name":["System.Comparison<T>","System.Comparison<T>..ctor","System.Comparison<T>.Invoke","System.Comparison<T>.BeginInvoke","System.Comparison<T>.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Comparison`1","System::Comparison`1"],"dev_langs":["csharp"],"updated_at":"2017-03-31 05:47 AM","document_id":"eed11989-8279-ff9c-8aed-6e31a3ddf9b9","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System/Comparison`1.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Comparison<T> delegate | Microsoft Docs","_op_ogTitle":"Comparison<T> delegate","description":"Represents the method that compares two objects of the same type.\n","toc_asset_id":"api/_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.Comparison`1","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.comparison-1","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.comparison-1","fileRelativePath":"api/System.Comparison-1.html"},"themesRelativePathToOutputRoot":"_themes/"}