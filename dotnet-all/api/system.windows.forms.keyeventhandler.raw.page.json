{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">KeyEventHandler</span>\r\n      Delegate\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the method that will handle the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyUp\" data-linktype=\"relative-path\">KeyUp</a> or <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyDown\" data-linktype=\"relative-path\">KeyDown</a> event of a <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a>.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public delegate void KeyEventHandler(object sender, KeyEventArgs e);</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></span></div><span class=\"lang-csharp\">KeyEventHandler</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<pre><code class=\"lang-cs\" name=\"Windows.Forms.Control Members4#3\">private void treeView1_KeyDown(object sender, KeyEventArgs e)\n{\n   /* If the &#39;Alt&#39; and &#39;E&#39; keys are pressed,\n      * allow the user to edit the TreeNode label. */\n   if(e.Alt &amp;&amp; e.KeyCode == Keys.E)\n         \n   {\n      treeView1.LabelEdit = true;\n      // If there is a TreeNode under the mose cursor, begin editing. \n      TreeNode editNode = treeView1.GetNodeAt(\n         treeView1.PointToClient(System.Windows.Forms.Control.MousePosition));\n      if(editNode != null)\n      { \n         editNode.BeginEdit();\n      }\n   }\n}\n\nprivate void treeView1_AfterLabelEdit(object sender, NodeLabelEditEventArgs e)\n{\n   // Disable the ability to edit the TreeNode labels.\n   treeView1.LabelEdit = false;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control Members4#3\">Private Sub treeView1_KeyDown(sender As Object, _\n  e As KeyEventArgs) Handles treeView1.KeyDown\n   &#39; If the &#39;Alt&#39; and &#39;E&#39; keys are pressed,\n   &#39; allow the user to edit the TreeNode label. \n   If e.Alt And e.KeyCode = Keys.E Then\n      treeView1.LabelEdit = True\n      &#39; If there is a TreeNode under the mose cursor, begin editing. \n      Dim editNode As TreeNode = treeView1.GetNodeAt( _\n        treeView1.PointToClient(System.Windows.Forms.Control.MousePosition))\n      If (editNode IsNot Nothing) Then\n         editNode.BeginEdit()\n      End If\n   End If\nEnd Sub\n\nPrivate Sub treeView1_AfterLabelEdit(sender As Object, _\n  e As NodeLabelEditEventArgs) Handles treeView1.AfterLabelEdit\n   &#39; Disable the ability to edit the TreeNode labels.\n   treeView1.LabelEdit = False\nEnd Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control Members4#3\">private:\n   void treeView1_KeyDown( Object^ /*sender*/, KeyEventArgs^ e )\n   {\n      /* If the &#39;Alt&#39; and &#39;E&#39; keys are pressed,\n         * allow the user to edit the TreeNode label. */\n      if ( e-&gt;Alt &amp;&amp; e-&gt;KeyCode == Keys::E )\n      {\n         treeView1-&gt;LabelEdit = true;\n         \n         // If there is a TreeNode under the mose cursor, begin editing.\n         TreeNode^ editNode = treeView1-&gt;GetNodeAt( treeView1-&gt;PointToClient( Control::MousePosition ) );\n         if ( editNode != nullptr )\n         {\n            editNode-&gt;BeginEdit();\n         }\n      }\n   }\n\n   void treeView1_AfterLabelEdit( Object^ /*sender*/, NodeLabelEditEventArgs^ /*e*/ )\n   {\n      // Disable the ability to edit the TreeNode labels.\n      treeView1-&gt;LabelEdit = false;\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"Control.KeyDown#1\">&#39; Boolean flag used to determine when a character other than a number is entered.\nPrivate nonNumberEntered As Boolean = False\n\n\n&#39; Handle the KeyDown event to determine the type of character entered into the control.\nPrivate Sub textBox1_KeyDown(sender As Object, e As System.Windows.Forms.KeyEventArgs) _\n     Handles textBox1.KeyDown\n    &#39; Initialize the flag to false.\n    nonNumberEntered = False\n  \n    &#39; Determine whether the keystroke is a number from the top of the keyboard.\n    If e.KeyCode &lt; Keys.D0 OrElse e.KeyCode &gt; Keys.D9 Then\n        &#39; Determine whether the keystroke is a number from the keypad.\n        If e.KeyCode &lt; Keys.NumPad0 OrElse e.KeyCode &gt; Keys.NumPad9 Then\n            &#39; Determine whether the keystroke is a backspace.\n            If e.KeyCode &lt;&gt; Keys.Back Then\n                &#39; A non-numerical keystroke was pressed. \n                &#39; Set the flag to true and evaluate in KeyPress event.\n                nonNumberEntered = True\n            End If\n        End If\n    End If\n    &#39;If shift key was pressed, it&#39;s not a number.\n    If Control.ModifierKeys = Keys.Shift Then\n        nonNumberEntered = true\n    End If\nEnd Sub &#39;textBox1_KeyDown\n\n\n&#39; This event occurs after the KeyDown event and can be used \n&#39; to prevent characters from entering the control.\nPrivate Sub textBox1_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) _\n    Handles textBox1.KeyPress\n    &#39; Check for the flag being set in the KeyDown event.\n    If nonNumberEntered = True Then\n        &#39; Stop the character from being entered into the control since it is non-numerical.\n        e.Handled = True\n    End If\nEnd Sub &#39;textBox1_KeyPress\n</code></pre><pre><code class=\"lang-cpp\" name=\"Control.KeyDown#1\">   // Boolean flag used to determine when a character other than a number is entered.\nprivate:\n   bool nonNumberEntered;\n\n   // Handle the KeyDown event to determine the type of character entered into the control.\n   void textBox1_KeyDown( Object^ /*sender*/, System::Windows::Forms::KeyEventArgs^ e )\n   {\n      // Initialize the flag to false.\n      nonNumberEntered = false;\n\n      // Determine whether the keystroke is a number from the top of the keyboard.\n      if ( e-&gt;KeyCode &lt; Keys::D0 || e-&gt;KeyCode &gt; Keys::D9 )\n      {\n         // Determine whether the keystroke is a number from the keypad.\n         if ( e-&gt;KeyCode &lt; Keys::NumPad0 || e-&gt;KeyCode &gt; Keys::NumPad9 )\n         {\n            // Determine whether the keystroke is a backspace.\n            if ( e-&gt;KeyCode != Keys::Back )\n            {\n               // A non-numerical keystroke was pressed.\n               // Set the flag to true and evaluate in KeyPress event.\n               nonNumberEntered = true;\n            }\n         }\n      }\n      //If shift key was pressed, it&#39;s not a number.\n      if (Control::ModifierKeys == Keys::Shift) {\n         nonNumberEntered = true;\n      }\n   }\n\n   // This event occurs after the KeyDown event and can be used to prevent\n   // characters from entering the control.\n   void textBox1_KeyPress( Object^ /*sender*/, System::Windows::Forms::KeyPressEventArgs^ e )\n   {\n      // Check for the flag being set in the KeyDown event.\n      if ( nonNumberEntered == true )\n      {         // Stop the character from being entered into the control since it is non-numerical.\n         e-&gt;Handled = true;\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"Control.KeyDown#1\">// Boolean flag used to determine when a character other than a number is entered.\nprivate bool nonNumberEntered = false;\n\n// Handle the KeyDown event to determine the type of character entered into the control.\nprivate void textBox1_KeyDown(object sender, System.Windows.Forms.KeyEventArgs e)\n{\n    // Initialize the flag to false.\n    nonNumberEntered = false;\n\n    // Determine whether the keystroke is a number from the top of the keyboard.\n    if (e.KeyCode &lt; Keys.D0 || e.KeyCode &gt; Keys.D9)\n    {\n        // Determine whether the keystroke is a number from the keypad.\n        if (e.KeyCode &lt; Keys.NumPad0 || e.KeyCode &gt; Keys.NumPad9)\n        {\n            // Determine whether the keystroke is a backspace.\n            if(e.KeyCode != Keys.Back)\n            {\n                // A non-numerical keystroke was pressed.\n                // Set the flag to true and evaluate in KeyPress event.\n                nonNumberEntered = true;\n            }\n        }\n    }\n    //If shift key was pressed, it&#39;s not a number.\n    if (Control.ModifierKeys == Keys.Shift) {\n        nonNumberEntered = true;\n    }\n}\n\n// This event occurs after the KeyDown event and can be used to prevent\n// characters from entering the control.\nprivate void textBox1_KeyPress(object sender, System.Windows.Forms.KeyPressEventArgs e)\n{\n    // Check for the flag being set in the KeyDown event.\n    if (nonNumberEntered == true)\n    {\n        // Stop the character from being entered into the control since it is non-numerical.\n        e.Handled = true;\n    }\n}\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>When you create a KeyEventHandler delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about handling events with delegates, see <a href=\"../topic/handling%20and%20raising%20events\" data-linktype=\"relative-path\">Events</a>.</p>\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Windows.Forms.KeyEventHandler.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.KeyEventHandler\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.KeyEventHandler..ctor\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.KeyEventHandler.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.KeyEventHandler.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.KeyEventHandler.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 05:47 AM\">\r\n<meta name=\"document_id\" content=\"617279e0-cf92-6049-946c-21117ce0fb16\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the method that will handle the  or  event of a .\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.windows.forms/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Forms.KeyEventHandler\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Windows.Forms.KeyEventHandler.yml","open_to_public_contributors":false,"api_name":["System.Windows.Forms.KeyEventHandler","System.Windows.Forms.KeyEventHandler..ctor","System.Windows.Forms.KeyEventHandler.Invoke","System.Windows.Forms.KeyEventHandler.BeginInvoke","System.Windows.Forms.KeyEventHandler.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Forms.KeyEventHandler","System::Windows::Forms::KeyEventHandler"],"dev_langs":["csharp"],"updated_at":"2017-03-31 05:47 AM","document_id":"617279e0-cf92-6049-946c-21117ce0fb16","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Windows.Forms/KeyEventHandler.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"KeyEventHandler delegate | Microsoft Docs","_op_ogTitle":"KeyEventHandler delegate","description":"Represents the method that will handle the  or  event of a .\n","toc_asset_id":"api/_splitted/System.Windows.Forms/toc.json","toc_rel":"_splitted/System.Windows.Forms/toc.json","source_url":"","ms.assetid":"System.Windows.Forms.KeyEventHandler","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.keyeventhandler","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.keyeventhandler","fileRelativePath":"api/System.Windows.Forms.KeyEventHandler.html"},"themesRelativePathToOutputRoot":"_themes/"}